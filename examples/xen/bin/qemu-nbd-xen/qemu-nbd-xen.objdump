
qemu-nbd-xen:     file format elf64-x86-64


Disassembly of section .init:

0000000000002dd0 <_init>:
    2dd0:	sub    rsp,0x8
    2dd4:	mov    rax,QWORD PTR [rip+0x2231fd]        # 225fd8 <__gmon_start__>
    2ddb:	test   rax,rax
    2dde:	je     2de2 <_init+0x12>
    2de0:	call   rax
    2de2:	add    rsp,0x8
    2de6:	ret    

Disassembly of section .plt:

0000000000002df0 <.plt>:
    2df0:	push   QWORD PTR [rip+0x222e5a]        # 225c50 <_GLOBAL_OFFSET_TABLE_+0x8>
    2df6:	jmp    QWORD PTR [rip+0x222e5c]        # 225c58 <_GLOBAL_OFFSET_TABLE_+0x10>
    2dfc:	nop    DWORD PTR [rax+0x0]

0000000000002e00 <__ctype_toupper_loc@plt>:
    2e00:	jmp    QWORD PTR [rip+0x222e5a]        # 225c60 <__ctype_toupper_loc@GLIBC_2.3>
    2e06:	push   0x0
    2e0b:	jmp    2df0 <.plt>

0000000000002e10 <getenv@plt>:
    2e10:	jmp    QWORD PTR [rip+0x222e52]        # 225c68 <getenv@GLIBC_2.2.5>
    2e16:	push   0x1
    2e1b:	jmp    2df0 <.plt>

0000000000002e20 <sigprocmask@plt>:
    2e20:	jmp    QWORD PTR [rip+0x222e4a]        # 225c70 <sigprocmask@GLIBC_2.2.5>
    2e26:	push   0x2
    2e2b:	jmp    2df0 <.plt>

0000000000002e30 <__snprintf_chk@plt>:
    2e30:	jmp    QWORD PTR [rip+0x222e42]        # 225c78 <__snprintf_chk@GLIBC_2.3.4>
    2e36:	push   0x3
    2e3b:	jmp    2df0 <.plt>

0000000000002e40 <free@plt>:
    2e40:	jmp    QWORD PTR [rip+0x222e3a]        # 225c80 <free@GLIBC_2.2.5>
    2e46:	push   0x4
    2e4b:	jmp    2df0 <.plt>

0000000000002e50 <recv@plt>:
    2e50:	jmp    QWORD PTR [rip+0x222e32]        # 225c88 <recv@GLIBC_2.2.5>
    2e56:	push   0x5
    2e5b:	jmp    2df0 <.plt>

0000000000002e60 <pthread_create@plt>:
    2e60:	jmp    QWORD PTR [rip+0x222e2a]        # 225c90 <pthread_create@GLIBC_2.2.5>
    2e66:	push   0x6
    2e6b:	jmp    2df0 <.plt>

0000000000002e70 <abort@plt>:
    2e70:	jmp    QWORD PTR [rip+0x222e22]        # 225c98 <abort@GLIBC_2.2.5>
    2e76:	push   0x7
    2e7b:	jmp    2df0 <.plt>

0000000000002e80 <__errno_location@plt>:
    2e80:	jmp    QWORD PTR [rip+0x222e1a]        # 225ca0 <__errno_location@GLIBC_2.2.5>
    2e86:	push   0x8
    2e8b:	jmp    2df0 <.plt>

0000000000002e90 <unlink@plt>:
    2e90:	jmp    QWORD PTR [rip+0x222e12]        # 225ca8 <unlink@GLIBC_2.2.5>
    2e96:	push   0x9
    2e9b:	jmp    2df0 <.plt>

0000000000002ea0 <strncmp@plt>:
    2ea0:	jmp    QWORD PTR [rip+0x222e0a]        # 225cb0 <strncmp@GLIBC_2.2.5>
    2ea6:	push   0xa
    2eab:	jmp    2df0 <.plt>

0000000000002eb0 <localtime_r@plt>:
    2eb0:	jmp    QWORD PTR [rip+0x222e02]        # 225cb8 <localtime_r@GLIBC_2.2.5>
    2eb6:	push   0xb
    2ebb:	jmp    2df0 <.plt>

0000000000002ec0 <inflate@plt>:
    2ec0:	jmp    QWORD PTR [rip+0x222dfa]        # 225cc0 <inflate>
    2ec6:	push   0xc
    2ecb:	jmp    2df0 <.plt>

0000000000002ed0 <mkdir@plt>:
    2ed0:	jmp    QWORD PTR [rip+0x222df2]        # 225cc8 <mkdir@GLIBC_2.2.5>
    2ed6:	push   0xd
    2edb:	jmp    2df0 <.plt>

0000000000002ee0 <sigaction@plt>:
    2ee0:	jmp    QWORD PTR [rip+0x222dea]        # 225cd0 <sigaction@GLIBC_2.2.5>
    2ee6:	push   0xe
    2eeb:	jmp    2df0 <.plt>

0000000000002ef0 <setsockopt@plt>:
    2ef0:	jmp    QWORD PTR [rip+0x222de2]        # 225cd8 <setsockopt@GLIBC_2.2.5>
    2ef6:	push   0xf
    2efb:	jmp    2df0 <.plt>

0000000000002f00 <fcntl@plt>:
    2f00:	jmp    QWORD PTR [rip+0x222dda]        # 225ce0 <fcntl@GLIBC_2.2.5>
    2f06:	push   0x10
    2f0b:	jmp    2df0 <.plt>

0000000000002f10 <write@plt>:
    2f10:	jmp    QWORD PTR [rip+0x222dd2]        # 225ce8 <write@GLIBC_2.2.5>
    2f16:	push   0x11
    2f1b:	jmp    2df0 <.plt>

0000000000002f20 <getpid@plt>:
    2f20:	jmp    QWORD PTR [rip+0x222dca]        # 225cf0 <getpid@GLIBC_2.2.5>
    2f26:	push   0x12
    2f2b:	jmp    2df0 <.plt>

0000000000002f30 <__xstat64@plt>:
    2f30:	jmp    QWORD PTR [rip+0x222dc2]        # 225cf8 <__xstat64@GLIBC_2.2.5>
    2f36:	push   0x13
    2f3b:	jmp    2df0 <.plt>

0000000000002f40 <opendir@plt>:
    2f40:	jmp    QWORD PTR [rip+0x222dba]        # 225d00 <opendir@GLIBC_2.2.5>
    2f46:	push   0x14
    2f4b:	jmp    2df0 <.plt>

0000000000002f50 <rmdir@plt>:
    2f50:	jmp    QWORD PTR [rip+0x222db2]        # 225d08 <rmdir@GLIBC_2.2.5>
    2f56:	push   0x15
    2f5b:	jmp    2df0 <.plt>

0000000000002f60 <strlen@plt>:
    2f60:	jmp    QWORD PTR [rip+0x222daa]        # 225d10 <strlen@GLIBC_2.2.5>
    2f66:	push   0x16
    2f6b:	jmp    2df0 <.plt>

0000000000002f70 <__stack_chk_fail@plt>:
    2f70:	jmp    QWORD PTR [rip+0x222da2]        # 225d18 <__stack_chk_fail@GLIBC_2.4>
    2f76:	push   0x17
    2f7b:	jmp    2df0 <.plt>

0000000000002f80 <getopt_long@plt>:
    2f80:	jmp    QWORD PTR [rip+0x222d9a]        # 225d20 <getopt_long@GLIBC_2.2.5>
    2f86:	push   0x18
    2f8b:	jmp    2df0 <.plt>

0000000000002f90 <errx@plt>:
    2f90:	jmp    QWORD PTR [rip+0x222d92]        # 225d28 <errx@GLIBC_2.2.5>
    2f96:	push   0x19
    2f9b:	jmp    2df0 <.plt>

0000000000002fa0 <send@plt>:
    2fa0:	jmp    QWORD PTR [rip+0x222d8a]        # 225d30 <send@GLIBC_2.2.5>
    2fa6:	push   0x1a
    2fab:	jmp    2df0 <.plt>

0000000000002fb0 <strchr@plt>:
    2fb0:	jmp    QWORD PTR [rip+0x222d82]        # 225d38 <strchr@GLIBC_2.2.5>
    2fb6:	push   0x1b
    2fbb:	jmp    2df0 <.plt>

0000000000002fc0 <__fdelt_chk@plt>:
    2fc0:	jmp    QWORD PTR [rip+0x222d7a]        # 225d40 <__fdelt_chk@GLIBC_2.15>
    2fc6:	push   0x1c
    2fcb:	jmp    2df0 <.plt>

0000000000002fd0 <snprintf@plt>:
    2fd0:	jmp    QWORD PTR [rip+0x222d72]        # 225d48 <snprintf@GLIBC_2.2.5>
    2fd6:	push   0x1d
    2fdb:	jmp    2df0 <.plt>

0000000000002fe0 <strrchr@plt>:
    2fe0:	jmp    QWORD PTR [rip+0x222d6a]        # 225d50 <strrchr@GLIBC_2.2.5>
    2fe6:	push   0x1e
    2feb:	jmp    2df0 <.plt>

0000000000002ff0 <gettimeofday@plt>:
    2ff0:	jmp    QWORD PTR [rip+0x222d62]        # 225d58 <gettimeofday@GLIBC_2.2.5>
    2ff6:	push   0x1f
    2ffb:	jmp    2df0 <.plt>

0000000000003000 <__assert_fail@plt>:
    3000:	jmp    QWORD PTR [rip+0x222d5a]        # 225d60 <__assert_fail@GLIBC_2.2.5>
    3006:	push   0x20
    300b:	jmp    2df0 <.plt>

0000000000003010 <deflate@plt>:
    3010:	jmp    QWORD PTR [rip+0x222d52]        # 225d68 <deflate>
    3016:	push   0x21
    301b:	jmp    2df0 <.plt>

0000000000003020 <memset@plt>:
    3020:	jmp    QWORD PTR [rip+0x222d4a]        # 225d70 <memset@GLIBC_2.2.5>
    3026:	push   0x22
    302b:	jmp    2df0 <.plt>

0000000000003030 <ioctl@plt>:
    3030:	jmp    QWORD PTR [rip+0x222d42]        # 225d78 <ioctl@GLIBC_2.2.5>
    3036:	push   0x23
    303b:	jmp    2df0 <.plt>

0000000000003040 <close@plt>:
    3040:	jmp    QWORD PTR [rip+0x222d3a]        # 225d80 <close@GLIBC_2.2.5>
    3046:	push   0x24
    304b:	jmp    2df0 <.plt>

0000000000003050 <__realpath_chk@plt>:
    3050:	jmp    QWORD PTR [rip+0x222d32]        # 225d88 <__realpath_chk@GLIBC_2.4>
    3056:	push   0x25
    305b:	jmp    2df0 <.plt>

0000000000003060 <pipe@plt>:
    3060:	jmp    QWORD PTR [rip+0x222d2a]        # 225d90 <pipe@GLIBC_2.2.5>
    3066:	push   0x26
    306b:	jmp    2df0 <.plt>

0000000000003070 <closedir@plt>:
    3070:	jmp    QWORD PTR [rip+0x222d22]        # 225d98 <closedir@GLIBC_2.2.5>
    3076:	push   0x27
    307b:	jmp    2df0 <.plt>

0000000000003080 <deflateInit2_@plt>:
    3080:	jmp    QWORD PTR [rip+0x222d1a]        # 225da0 <deflateInit2_>
    3086:	push   0x28
    308b:	jmp    2df0 <.plt>

0000000000003090 <memchr@plt>:
    3090:	jmp    QWORD PTR [rip+0x222d12]        # 225da8 <memchr@GLIBC_2.2.5>
    3096:	push   0x29
    309b:	jmp    2df0 <.plt>

00000000000030a0 <read@plt>:
    30a0:	jmp    QWORD PTR [rip+0x222d0a]        # 225db0 <read@GLIBC_2.2.5>
    30a6:	push   0x2a
    30ab:	jmp    2df0 <.plt>

00000000000030b0 <memcmp@plt>:
    30b0:	jmp    QWORD PTR [rip+0x222d02]        # 225db8 <memcmp@GLIBC_2.2.5>
    30b6:	push   0x2b
    30bb:	jmp    2df0 <.plt>

00000000000030c0 <mkstemp64@plt>:
    30c0:	jmp    QWORD PTR [rip+0x222cfa]        # 225dc0 <mkstemp64@GLIBC_2.2.5>
    30c6:	push   0x2c
    30cb:	jmp    2df0 <.plt>

00000000000030d0 <pthread_attr_init@plt>:
    30d0:	jmp    QWORD PTR [rip+0x222cf2]        # 225dc8 <pthread_attr_init@GLIBC_2.2.5>
    30d6:	push   0x2d
    30db:	jmp    2df0 <.plt>

00000000000030e0 <pthread_cond_signal@plt>:
    30e0:	jmp    QWORD PTR [rip+0x222cea]        # 225dd0 <pthread_cond_signal@GLIBC_2.3.2>
    30e6:	push   0x2e
    30eb:	jmp    2df0 <.plt>

00000000000030f0 <calloc@plt>:
    30f0:	jmp    QWORD PTR [rip+0x222ce2]        # 225dd8 <calloc@GLIBC_2.2.5>
    30f6:	push   0x2f
    30fb:	jmp    2df0 <.plt>

0000000000003100 <__fxstat64@plt>:
    3100:	jmp    QWORD PTR [rip+0x222cda]        # 225de0 <__fxstat64@GLIBC_2.2.5>
    3106:	push   0x30
    310b:	jmp    2df0 <.plt>

0000000000003110 <strcmp@plt>:
    3110:	jmp    QWORD PTR [rip+0x222cd2]        # 225de8 <strcmp@GLIBC_2.2.5>
    3116:	push   0x31
    311b:	jmp    2df0 <.plt>

0000000000003120 <strtoll@plt>:
    3120:	jmp    QWORD PTR [rip+0x222cca]        # 225df0 <strtoll@GLIBC_2.2.5>
    3126:	push   0x32
    312b:	jmp    2df0 <.plt>

0000000000003130 <gethostbyname@plt>:
    3130:	jmp    QWORD PTR [rip+0x222cc2]        # 225df8 <gethostbyname@GLIBC_2.2.5>
    3136:	push   0x33
    313b:	jmp    2df0 <.plt>

0000000000003140 <__memcpy_chk@plt>:
    3140:	jmp    QWORD PTR [rip+0x222cba]        # 225e00 <__memcpy_chk@GLIBC_2.3.4>
    3146:	push   0x34
    314b:	jmp    2df0 <.plt>

0000000000003150 <sigemptyset@plt>:
    3150:	jmp    QWORD PTR [rip+0x222cb2]        # 225e08 <sigemptyset@GLIBC_2.2.5>
    3156:	push   0x35
    315b:	jmp    2df0 <.plt>

0000000000003160 <basename@plt>:
    3160:	jmp    QWORD PTR [rip+0x222caa]        # 225e10 <basename@GLIBC_2.2.5>
    3166:	push   0x36
    316b:	jmp    2df0 <.plt>

0000000000003170 <strtol@plt>:
    3170:	jmp    QWORD PTR [rip+0x222ca2]        # 225e18 <strtol@GLIBC_2.2.5>
    3176:	push   0x37
    317b:	jmp    2df0 <.plt>

0000000000003180 <sigfillset@plt>:
    3180:	jmp    QWORD PTR [rip+0x222c9a]        # 225e20 <sigfillset@GLIBC_2.2.5>
    3186:	push   0x38
    318b:	jmp    2df0 <.plt>

0000000000003190 <memcpy@plt>:
    3190:	jmp    QWORD PTR [rip+0x222c92]        # 225e28 <memcpy@GLIBC_2.14>
    3196:	push   0x39
    319b:	jmp    2df0 <.plt>

00000000000031a0 <inflateEnd@plt>:
    31a0:	jmp    QWORD PTR [rip+0x222c8a]        # 225e30 <inflateEnd>
    31a6:	push   0x3a
    31ab:	jmp    2df0 <.plt>

00000000000031b0 <kill@plt>:
    31b0:	jmp    QWORD PTR [rip+0x222c82]        # 225e38 <kill@GLIBC_2.2.5>
    31b6:	push   0x3b
    31bb:	jmp    2df0 <.plt>

00000000000031c0 <time@plt>:
    31c0:	jmp    QWORD PTR [rip+0x222c7a]        # 225e40 <time@GLIBC_2.2.5>
    31c6:	push   0x3c
    31cb:	jmp    2df0 <.plt>

00000000000031d0 <select@plt>:
    31d0:	jmp    QWORD PTR [rip+0x222c72]        # 225e48 <select@GLIBC_2.2.5>
    31d6:	push   0x3d
    31db:	jmp    2df0 <.plt>

00000000000031e0 <inet_aton@plt>:
    31e0:	jmp    QWORD PTR [rip+0x222c6a]        # 225e50 <inet_aton@GLIBC_2.2.5>
    31e6:	push   0x3e
    31eb:	jmp    2df0 <.plt>

00000000000031f0 <pthread_attr_setdetachstate@plt>:
    31f0:	jmp    QWORD PTR [rip+0x222c62]        # 225e58 <pthread_attr_setdetachstate@GLIBC_2.2.5>
    31f6:	push   0x3f
    31fb:	jmp    2df0 <.plt>

0000000000003200 <mmap64@plt>:
    3200:	jmp    QWORD PTR [rip+0x222c5a]        # 225e60 <mmap64@GLIBC_2.2.5>
    3206:	push   0x40
    320b:	jmp    2df0 <.plt>

0000000000003210 <pthread_mutex_unlock@plt>:
    3210:	jmp    QWORD PTR [rip+0x222c52]        # 225e68 <pthread_mutex_unlock@GLIBC_2.2.5>
    3216:	push   0x41
    321b:	jmp    2df0 <.plt>

0000000000003220 <__open64_2@plt>:
    3220:	jmp    QWORD PTR [rip+0x222c4a]        # 225e70 <__open64_2@GLIBC_2.7>
    3226:	push   0x42
    322b:	jmp    2df0 <.plt>

0000000000003230 <malloc@plt>:
    3230:	jmp    QWORD PTR [rip+0x222c42]        # 225e78 <malloc@GLIBC_2.2.5>
    3236:	push   0x43
    323b:	jmp    2df0 <.plt>

0000000000003240 <listen@plt>:
    3240:	jmp    QWORD PTR [rip+0x222c3a]        # 225e80 <listen@GLIBC_2.2.5>
    3246:	push   0x44
    324b:	jmp    2df0 <.plt>

0000000000003250 <sscanf@plt>:
    3250:	jmp    QWORD PTR [rip+0x222c32]        # 225e88 <sscanf@GLIBC_2.2.5>
    3256:	push   0x45
    325b:	jmp    2df0 <.plt>

0000000000003260 <daemon@plt>:
    3260:	jmp    QWORD PTR [rip+0x222c2a]        # 225e90 <daemon@GLIBC_2.2.5>
    3266:	push   0x46
    326b:	jmp    2df0 <.plt>

0000000000003270 <deflateEnd@plt>:
    3270:	jmp    QWORD PTR [rip+0x222c22]        # 225e98 <deflateEnd>
    3276:	push   0x47
    327b:	jmp    2df0 <.plt>

0000000000003280 <realloc@plt>:
    3280:	jmp    QWORD PTR [rip+0x222c1a]        # 225ea0 <realloc@GLIBC_2.2.5>
    3286:	push   0x48
    328b:	jmp    2df0 <.plt>

0000000000003290 <munmap@plt>:
    3290:	jmp    QWORD PTR [rip+0x222c12]        # 225ea8 <munmap@GLIBC_2.2.5>
    3296:	push   0x49
    329b:	jmp    2df0 <.plt>

00000000000032a0 <ftruncate64@plt>:
    32a0:	jmp    QWORD PTR [rip+0x222c0a]        # 225eb0 <ftruncate64@GLIBC_2.2.5>
    32a6:	push   0x4a
    32ab:	jmp    2df0 <.plt>

00000000000032b0 <__printf_chk@plt>:
    32b0:	jmp    QWORD PTR [rip+0x222c02]        # 225eb8 <__printf_chk@GLIBC_2.3.4>
    32b6:	push   0x4b
    32bb:	jmp    2df0 <.plt>

00000000000032c0 <inflateInit_@plt>:
    32c0:	jmp    QWORD PTR [rip+0x222bfa]        # 225ec0 <inflateInit_>
    32c6:	push   0x4c
    32cb:	jmp    2df0 <.plt>

00000000000032d0 <bind@plt>:
    32d0:	jmp    QWORD PTR [rip+0x222bf2]        # 225ec8 <bind@GLIBC_2.2.5>
    32d6:	push   0x4d
    32db:	jmp    2df0 <.plt>

00000000000032e0 <open64@plt>:
    32e0:	jmp    QWORD PTR [rip+0x222bea]        # 225ed0 <open64@GLIBC_2.2.5>
    32e6:	push   0x4e
    32eb:	jmp    2df0 <.plt>

00000000000032f0 <strftime@plt>:
    32f0:	jmp    QWORD PTR [rip+0x222be2]        # 225ed8 <strftime@GLIBC_2.2.5>
    32f6:	push   0x4f
    32fb:	jmp    2df0 <.plt>

0000000000003300 <memmove@plt>:
    3300:	jmp    QWORD PTR [rip+0x222bda]        # 225ee0 <memmove@GLIBC_2.2.5>
    3306:	push   0x50
    330b:	jmp    2df0 <.plt>

0000000000003310 <readdir64@plt>:
    3310:	jmp    QWORD PTR [rip+0x222bd2]        # 225ee8 <readdir64@GLIBC_2.2.5>
    3316:	push   0x51
    331b:	jmp    2df0 <.plt>

0000000000003320 <lockf64@plt>:
    3320:	jmp    QWORD PTR [rip+0x222bca]        # 225ef0 <lockf64@GLIBC_2.2.5>
    3326:	push   0x52
    332b:	jmp    2df0 <.plt>

0000000000003330 <fsync@plt>:
    3330:	jmp    QWORD PTR [rip+0x222bc2]        # 225ef8 <fsync@GLIBC_2.2.5>
    3336:	push   0x53
    333b:	jmp    2df0 <.plt>

0000000000003340 <pthread_cond_timedwait@plt>:
    3340:	jmp    QWORD PTR [rip+0x222bba]        # 225f00 <pthread_cond_timedwait@GLIBC_2.3.2>
    3346:	push   0x54
    334b:	jmp    2df0 <.plt>

0000000000003350 <inflateInit2_@plt>:
    3350:	jmp    QWORD PTR [rip+0x222bb2]        # 225f08 <inflateInit2_>
    3356:	push   0x55
    335b:	jmp    2df0 <.plt>

0000000000003360 <perror@plt>:
    3360:	jmp    QWORD PTR [rip+0x222baa]        # 225f10 <perror@GLIBC_2.2.5>
    3366:	push   0x56
    336b:	jmp    2df0 <.plt>

0000000000003370 <rename@plt>:
    3370:	jmp    QWORD PTR [rip+0x222ba2]        # 225f18 <rename@GLIBC_2.2.5>
    3376:	push   0x57
    337b:	jmp    2df0 <.plt>

0000000000003380 <accept@plt>:
    3380:	jmp    QWORD PTR [rip+0x222b9a]        # 225f20 <accept@GLIBC_2.2.5>
    3386:	push   0x58
    338b:	jmp    2df0 <.plt>

0000000000003390 <strtoul@plt>:
    3390:	jmp    QWORD PTR [rip+0x222b92]        # 225f28 <strtoul@GLIBC_2.2.5>
    3396:	push   0x59
    339b:	jmp    2df0 <.plt>

00000000000033a0 <inflateReset@plt>:
    33a0:	jmp    QWORD PTR [rip+0x222b8a]        # 225f30 <inflateReset>
    33a6:	push   0x5a
    33ab:	jmp    2df0 <.plt>

00000000000033b0 <getpagesize@plt>:
    33b0:	jmp    QWORD PTR [rip+0x222b82]        # 225f38 <getpagesize@GLIBC_2.2.5>
    33b6:	push   0x5b
    33bb:	jmp    2df0 <.plt>

00000000000033c0 <exit@plt>:
    33c0:	jmp    QWORD PTR [rip+0x222b7a]        # 225f40 <exit@GLIBC_2.2.5>
    33c6:	push   0x5c
    33cb:	jmp    2df0 <.plt>

00000000000033d0 <connect@plt>:
    33d0:	jmp    QWORD PTR [rip+0x222b72]        # 225f48 <connect@GLIBC_2.2.5>
    33d6:	push   0x5d
    33db:	jmp    2df0 <.plt>

00000000000033e0 <fwrite@plt>:
    33e0:	jmp    QWORD PTR [rip+0x222b6a]        # 225f50 <fwrite@GLIBC_2.2.5>
    33e6:	push   0x5e
    33eb:	jmp    2df0 <.plt>

00000000000033f0 <lseek64@plt>:
    33f0:	jmp    QWORD PTR [rip+0x222b62]        # 225f58 <lseek64@GLIBC_2.2.5>
    33f6:	push   0x5f
    33fb:	jmp    2df0 <.plt>

0000000000003400 <__fprintf_chk@plt>:
    3400:	jmp    QWORD PTR [rip+0x222b5a]        # 225f60 <__fprintf_chk@GLIBC_2.3.4>
    3406:	push   0x60
    340b:	jmp    2df0 <.plt>

0000000000003410 <posix_memalign@plt>:
    3410:	jmp    QWORD PTR [rip+0x222b52]        # 225f68 <posix_memalign@GLIBC_2.2.5>
    3416:	push   0x61
    341b:	jmp    2df0 <.plt>

0000000000003420 <strdup@plt>:
    3420:	jmp    QWORD PTR [rip+0x222b4a]        # 225f70 <strdup@GLIBC_2.2.5>
    3426:	push   0x62
    342b:	jmp    2df0 <.plt>

0000000000003430 <strerror@plt>:
    3430:	jmp    QWORD PTR [rip+0x222b42]        # 225f78 <strerror@GLIBC_2.2.5>
    3436:	push   0x63
    343b:	jmp    2df0 <.plt>

0000000000003440 <sleep@plt>:
    3440:	jmp    QWORD PTR [rip+0x222b3a]        # 225f80 <sleep@GLIBC_2.2.5>
    3446:	push   0x64
    344b:	jmp    2df0 <.plt>

0000000000003450 <sigaddset@plt>:
    3450:	jmp    QWORD PTR [rip+0x222b32]        # 225f88 <sigaddset@GLIBC_2.2.5>
    3456:	push   0x65
    345b:	jmp    2df0 <.plt>

0000000000003460 <fork@plt>:
    3460:	jmp    QWORD PTR [rip+0x222b2a]        # 225f90 <fork@GLIBC_2.2.5>
    3466:	push   0x66
    346b:	jmp    2df0 <.plt>

0000000000003470 <strstr@plt>:
    3470:	jmp    QWORD PTR [rip+0x222b22]        # 225f98 <strstr@GLIBC_2.2.5>
    3476:	push   0x67
    347b:	jmp    2df0 <.plt>

0000000000003480 <pthread_mutex_lock@plt>:
    3480:	jmp    QWORD PTR [rip+0x222b1a]        # 225fa0 <pthread_mutex_lock@GLIBC_2.2.5>
    3486:	push   0x68
    348b:	jmp    2df0 <.plt>

0000000000003490 <__ctype_tolower_loc@plt>:
    3490:	jmp    QWORD PTR [rip+0x222b12]        # 225fa8 <__ctype_tolower_loc@GLIBC_2.3>
    3496:	push   0x69
    349b:	jmp    2df0 <.plt>

00000000000034a0 <__ctype_b_loc@plt>:
    34a0:	jmp    QWORD PTR [rip+0x222b0a]        # 225fb0 <__ctype_b_loc@GLIBC_2.3>
    34a6:	push   0x6a
    34ab:	jmp    2df0 <.plt>

00000000000034b0 <__sprintf_chk@plt>:
    34b0:	jmp    QWORD PTR [rip+0x222b02]        # 225fb8 <__sprintf_chk@GLIBC_2.3.4>
    34b6:	push   0x6b
    34bb:	jmp    2df0 <.plt>

00000000000034c0 <socket@plt>:
    34c0:	jmp    QWORD PTR [rip+0x222afa]        # 225fc0 <socket@GLIBC_2.2.5>
    34c6:	push   0x6c
    34cb:	jmp    2df0 <.plt>

Disassembly of section .plt.got:

00000000000034d0 <__cxa_finalize@plt>:
    34d0:	jmp    QWORD PTR [rip+0x222b22]        # 225ff8 <__cxa_finalize@GLIBC_2.2.5>
    34d6:	xchg   ax,ax

Disassembly of section .text:

00000000000034e0 <main>:
    34e0:	push   r15
    34e2:	push   r14
    34e4:	mov    ecx,0x40
    34e9:	push   r13
    34eb:	push   r12
    34ed:	mov    r13,rsi
    34f0:	push   rbp
    34f1:	push   rbx
    34f2:	mov    r12d,edi
    34f5:	lea    rsi,[rip+0x222b24]        # 226020 <__dso_handle+0x18>
    34fc:	lea    r14,[rip+0x18434]        # 1b937 <_IO_stdin_used+0xb7>
    3503:	lea    rbx,[rip+0x18b02]        # 1c00c <_IO_stdin_used+0x78c>
    350a:	sub    rsp,0x788
    3511:	lea    rbp,[rsp+0x170]
    3519:	lea    r15,[rsp+0x6c]
    351e:	mov    QWORD PTR [rsp+0x70],0x0
    3527:	mov    rax,QWORD PTR fs:0x28
    3530:	mov    QWORD PTR [rsp+0x778],rax
    3538:	xor    eax,eax
    353a:	mov    rdi,rbp
    353d:	lea    rax,[rip+0x18340]        # 1b884 <_IO_stdin_used+0x4>
    3544:	mov    DWORD PTR [rsp+0x68],0x10
    354c:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    354f:	mov    QWORD PTR [rsp+0x50],rax
    3554:	lea    rax,[rsp+0x78]
    3559:	mov    DWORD PTR [rsp+0x6c],0x0
    3561:	mov    QWORD PTR [rsp+0x10],0x0
    356a:	mov    DWORD PTR [rsp+0x44],0x0
    3572:	mov    DWORD PTR [rsp+0x40],0x1
    357a:	mov    DWORD PTR [rsp+0x3c],0xffffffff
    3582:	mov    DWORD PTR [rsp+0x18],0x0
    358a:	mov    QWORD PTR [rsp+0x28],0x0
    3593:	mov    QWORD PTR [rsp+0x30],0x0
    359c:	mov    DWORD PTR [rsp+0x48],0x400
    35a4:	mov    BYTE PTR [rsp+0x20],0x0
    35a9:	mov    BYTE PTR [rsp+0x58],0x0
    35ae:	mov    QWORD PTR [rsp+0x8],rax
    35b3:	nop    DWORD PTR [rax+rax*1+0x0]
    35b8:	mov    r8,r15
    35bb:	mov    rcx,rbp
    35be:	mov    rdx,r14
    35c1:	mov    rsi,r13
    35c4:	mov    edi,r12d
    35c7:	call   2f80 <getopt_long@plt>
    35cc:	cmp    eax,0xffffffff
    35cf:	je     37b9 <main+0x2d9>
    35d5:	sub    eax,0x3f
    35d8:	cmp    eax,0x37
    35db:	ja     35b8 <main+0xd8>
    35dd:	movsxd rax,DWORD PTR [rbx+rax*4]
    35e1:	add    rax,rbx
    35e4:	jmp    rax
    35e6:	mov    BYTE PTR [rsp+0x20],0x1
    35eb:	jmp    35b8 <main+0xd8>
    35ed:	mov    BYTE PTR [rsp+0x58],0x1
    35f2:	jmp    35b8 <main+0xd8>
    35f4:	or     DWORD PTR [rsp+0x18],0x8
    35f9:	jmp    35b8 <main+0xd8>
    35fb:	mov    rsi,QWORD PTR [rsp+0x8]
    3600:	mov    rdi,QWORD PTR [rip+0x223ee1]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3607:	xor    edx,edx
    3609:	call   3170 <strtol@plt>
    360e:	mov    rdx,QWORD PTR [rsp+0x78]
    3613:	cmp    BYTE PTR [rdx],0x0
    3616:	jne    3f9f <main+0xabf>
    361c:	lea    edx,[rax-0x1]
    361f:	cmp    edx,0xfffe
    3625:	ja     3f51 <main+0xa71>
    362b:	movzx  eax,ax
    362e:	mov    DWORD PTR [rsp+0x48],eax
    3632:	jmp    35b8 <main+0xd8>
    3634:	mov    rsi,QWORD PTR [rsp+0x8]
    3639:	mov    rdi,QWORD PTR [rip+0x223ea8]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3640:	xor    edx,edx
    3642:	call   3120 <strtoll@plt>
    3647:	mov    QWORD PTR [rsp+0x10],rax
    364c:	mov    rax,QWORD PTR [rsp+0x78]
    3651:	cmp    BYTE PTR [rax],0x0
    3654:	jne    3f6b <main+0xa8b>
    365a:	cmp    QWORD PTR [rsp+0x10],0x0
    3660:	jns    35b8 <main+0xd8>
    3666:	mov    rdx,QWORD PTR [rip+0x223e7b]        # 2274e8 <optarg@@GLIBC_2.2.5>
    366d:	lea    rsi,[rip+0x18255]        # 1b8c9 <_IO_stdin_used+0x49>
    3674:	mov    edi,0x16
    3679:	xor    eax,eax
    367b:	call   2f90 <errx@plt>
    3680:	or     DWORD PTR [rsp+0x18],0x20
    3685:	jmp    35b8 <main+0xd8>
    368a:	mov    rax,QWORD PTR [rip+0x223e57]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3691:	cmp    BYTE PTR [rax],0x2f
    3694:	mov    QWORD PTR [rsp+0x28],rax
    3699:	je     35b8 <main+0xd8>
    369f:	lea    rsi,[rip+0x1826c]        # 1b912 <_IO_stdin_used+0x92>
    36a6:	mov    edi,0x16
    36ab:	xor    eax,eax
    36ad:	call   2f90 <errx@plt>
    36b2:	mov    rdx,QWORD PTR [r13+0x0]
    36b6:	lea    rcx,[rip+0x18273]        # 1b930 <_IO_stdin_used+0xb0>
    36bd:	lea    rsi,[rip+0x184e4]        # 1bba8 <_IO_stdin_used+0x328>
    36c4:	mov    edi,0x1
    36c9:	xor    eax,eax
    36cb:	call   32b0 <__printf_chk@plt>
    36d0:	xor    edi,edi
    36d2:	call   33c0 <exit@plt>
    36d7:	mov    rsi,QWORD PTR [rsp+0x8]
    36dc:	mov    rdi,QWORD PTR [rip+0x223e05]        # 2274e8 <optarg@@GLIBC_2.2.5>
    36e3:	xor    edx,edx
    36e5:	call   3170 <strtol@plt>
    36ea:	mov    rdx,QWORD PTR [rsp+0x78]
    36ef:	mov    DWORD PTR [rsp+0x40],eax
    36f3:	cmp    BYTE PTR [rdx],0x0
    36f6:	jne    3f37 <main+0xa57>
    36fc:	test   eax,eax
    36fe:	jg     35b8 <main+0xd8>
    3704:	lea    rsi,[rip+0x18365]        # 1ba70 <_IO_stdin_used+0x1f0>
    370b:	mov    edi,0x16
    3710:	xor    eax,eax
    3712:	call   2f90 <errx@plt>
    3717:	mov    rax,QWORD PTR [rip+0x223dca]        # 2274e8 <optarg@@GLIBC_2.2.5>
    371e:	mov    QWORD PTR [rsp+0x30],rax
    3723:	jmp    35b8 <main+0xd8>
    3728:	mov    rax,QWORD PTR [rip+0x223db9]        # 2274e8 <optarg@@GLIBC_2.2.5>
    372f:	mov    QWORD PTR [rsp+0x50],rax
    3734:	jmp    35b8 <main+0xd8>
    3739:	mov    rdx,QWORD PTR [r13+0x0]
    373d:	lea    rsi,[rip+0x1835c]        # 1baa0 <_IO_stdin_used+0x220>
    3744:	mov    edi,0x1
    3749:	xor    eax,eax
    374b:	call   32b0 <__printf_chk@plt>
    3750:	xor    edi,edi
    3752:	call   33c0 <exit@plt>
    3757:	mov    rsi,QWORD PTR [rsp+0x8]
    375c:	mov    rdi,QWORD PTR [rip+0x223d85]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3763:	xor    edx,edx
    3765:	call   3170 <strtol@plt>
    376a:	mov    rdx,QWORD PTR [rsp+0x78]
    376f:	mov    DWORD PTR [rsp+0x3c],eax
    3773:	cmp    BYTE PTR [rdx],0x0
    3776:	jne    3f85 <main+0xaa5>
    377c:	lea    edx,[rax-0x1]
    377f:	cmp    edx,0x7
    3782:	jbe    35b8 <main+0xd8>
    3788:	lea    rsi,[rip+0x1816e]        # 1b8fd <_IO_stdin_used+0x7d>
    378f:	mov    edx,eax
    3791:	mov    edi,0x16
    3796:	xor    eax,eax
    3798:	call   2f90 <errx@plt>
    379d:	mov    DWORD PTR [rip+0x223d65],0x1        # 22750c <verbose>
    37a7:	jmp    35b8 <main+0xd8>
    37ac:	mov    DWORD PTR [rsp+0x44],0x1
    37b4:	jmp    35b8 <main+0xd8>
    37b9:	movsxd rax,DWORD PTR [rip+0x223d20]        # 2274e0 <optind@@GLIBC_2.2.5>
    37c0:	sub    r12d,eax
    37c3:	cmp    r12d,0x1
    37c7:	jne    3f20 <main+0xa40>
    37cd:	cmp    BYTE PTR [rsp+0x20],0x0
    37d2:	je     384c <main+0x36c>
    37d4:	mov    rdi,QWORD PTR [r13+rax*8+0x0]
    37d9:	mov    esi,0x2
    37de:	xor    eax,eax
    37e0:	call   32e0 <open64@plt>
    37e5:	cmp    eax,0xffffffff
    37e8:	mov    ebx,eax
    37ea:	je     3eff <main+0xa1f>
    37f0:	mov    edi,eax
    37f2:	xor    r12d,r12d
    37f5:	call   164d0 <nbd_disconnect>
    37fa:	mov    edi,ebx
    37fc:	call   3040 <close@plt>
    3801:	movsxd rax,DWORD PTR [rip+0x223cd8]        # 2274e0 <optind@@GLIBC_2.2.5>
    3808:	lea    rsi,[rip+0x1814e]        # 1b95d <_IO_stdin_used+0xdd>
    380f:	mov    edi,0x1
    3814:	mov    rdx,QWORD PTR [r13+rax*8+0x0]
    3819:	xor    eax,eax
    381b:	call   32b0 <__printf_chk@plt>
    3820:	mov    rcx,QWORD PTR [rsp+0x778]
    3828:	xor    rcx,QWORD PTR fs:0x28
    3831:	mov    eax,r12d
    3834:	jne    3e5a <main+0x97a>
    383a:	add    rsp,0x788
    3841:	pop    rbx
    3842:	pop    rbp
    3843:	pop    r12
    3845:	pop    r13
    3847:	pop    r14
    3849:	pop    r15
    384b:	ret    
    384c:	call   19540 <bdrv_init>
    3851:	lea    rdi,[rip+0x18116]        # 1b96e <_IO_stdin_used+0xee>
    3858:	call   16fb0 <bdrv_new>
    385d:	test   rax,rax
    3860:	mov    r15,rax
    3863:	je     3820 <main+0x340>
    3865:	movsxd rax,DWORD PTR [rip+0x223c74]        # 2274e0 <optind@@GLIBC_2.2.5>
    386c:	mov    edx,DWORD PTR [rsp+0x18]
    3870:	mov    rdi,r15
    3873:	mov    rsi,QWORD PTR [r13+rax*8+0x0]
    3878:	call   180e0 <bdrv_open>
    387d:	add    eax,0x1
    3880:	je     3820 <main+0x340>
    3882:	cmp    DWORD PTR [rsp+0x3c],0xffffffff
    3887:	je     3992 <main+0x4b2>
    388d:	lea    rbx,[rsp+0x370]
    3895:	xor    esi,esi
    3897:	mov    ecx,0x1
    389c:	mov    rdi,r15
    389f:	mov    rdx,rbx
    38a2:	call   171e0 <bdrv_read>
    38a7:	test   eax,eax
    38a9:	jne    3eec <main+0xa0c>
    38af:	cmp    BYTE PTR [rsp+0x56e],0x55
    38b7:	jne    3ea9 <main+0x9c9>
    38bd:	cmp    BYTE PTR [rsp+0x56f],0xaa
    38c5:	jne    3ea9 <main+0x9c9>
    38cb:	lea    rax,[rsp+0x570]
    38d3:	lea    rcx,[rsp+0xf0]
    38db:	lea    rbp,[rsp+0x90]
    38e3:	xor    r14d,r14d
    38e6:	mov    DWORD PTR [rsp+0x8],0x4
    38ee:	add    rbx,0x1be
    38f5:	mov    QWORD PTR [rsp+0x18],rax
    38fa:	lea    rax,[rsp+0x72e]
    3902:	mov    QWORD PTR [rsp+0x20],rcx
    3907:	mov    QWORD PTR [rsp+0x10],rax
    390c:	mov    rdi,r14
    390f:	mov    rsi,rbp
    3912:	shl    rdi,0x4
    3916:	add    rdi,rbx
    3919:	call   40d0 <read_partition>
    391e:	mov    eax,DWORD PTR [rbp+0x14]
    3921:	test   eax,eax
    3923:	je     3949 <main+0x469>
    3925:	movzx  edx,BYTE PTR [rbp+0x9]
    3929:	cmp    dl,0xf
    392c:	je     3c71 <main+0x791>
    3932:	cmp    dl,0x5
    3935:	je     3c71 <main+0x791>
    393b:	lea    edx,[r14+0x1]
    393f:	cmp    DWORD PTR [rsp+0x3c],edx
    3943:	je     3e5f <main+0x97f>
    3949:	add    r14,0x1
    394d:	add    rbp,0x18
    3951:	cmp    r14,0x4
    3955:	jne    390c <main+0x42c>
    3957:	call   2e80 <__errno_location@plt>
    395c:	mov    DWORD PTR [rax],0xfffffffe
    3962:	call   2e80 <__errno_location@plt>
    3967:	mov    edx,DWORD PTR [rsp+0x3c]
    396b:	mov    edi,DWORD PTR [rax]
    396d:	lea    rsi,[rip+0x18044]        # 1b9b8 <_IO_stdin_used+0x138>
    3974:	xor    eax,eax
    3976:	call   2f90 <errx@plt>
    397b:	mov    rdx,QWORD PTR [r13+0x0]
    397f:	lea    rsi,[rip+0x185ea]        # 1bf70 <_IO_stdin_used+0x6f0>
    3986:	mov    edi,0x16
    398b:	xor    eax,eax
    398d:	call   2f90 <errx@plt>
    3992:	mov    rax,QWORD PTR [r15]
    3995:	shl    rax,0x9
    3999:	mov    QWORD PTR [rsp+0x8],rax
    399e:	cmp    QWORD PTR [rsp+0x30],0x0
    39a4:	je     3de1 <main+0x901>
    39aa:	cmp    DWORD PTR [rip+0x223b5b],0x0        # 22750c <verbose>
    39b1:	jne    39bc <main+0x4dc>
    39b3:	xor    esi,esi
    39b5:	xor    edi,edi
    39b7:	call   3260 <daemon@plt>
    39bc:	cmp    QWORD PTR [rsp+0x28],0x0
    39c2:	je     3e18 <main+0x938>
    39c8:	call   3460 <fork@plt>
    39cd:	test   eax,eax
    39cf:	mov    ebx,eax
    39d1:	js     3820 <main+0x340>
    39d7:	jne    3cdb <main+0x7fb>
    39dd:	mov    eax,DWORD PTR [rsp+0x40]
    39e1:	lea    edi,[rax+0x1]
    39e4:	movsxd rdi,edi
    39e7:	shl    rdi,0x2
    39eb:	call   49d0 <qemu_malloc>
    39f0:	mov    rbx,rax
    39f3:	mov    rdi,QWORD PTR [rsp+0x28]
    39f8:	call   15fc0 <unix_socket_incoming>
    39fd:	mov    DWORD PTR [rbx],eax
    39ff:	mov    eax,DWORD PTR [rbx]
    3a01:	mov    DWORD PTR [rsp+0x50],eax
    3a05:	add    eax,0x1
    3a08:	je     3820 <main+0x340>
    3a0e:	mov    esi,0x100000
    3a13:	mov    edi,0x200
    3a18:	call   43f0 <qemu_memalign>
    3a1d:	test   rax,rax
    3a20:	mov    QWORD PTR [rsp+0x20],rax
    3a25:	je     3eb9 <main+0x9d9>
    3a2b:	lea    rax,[rsp+0xf0]
    3a33:	mov    r14d,0x1
    3a39:	mov    QWORD PTR [rsp+0x30],r15
    3a3e:	mov    QWORD PTR [rsp+0x18],rax
    3a43:	movzx  eax,BYTE PTR [rsp+0x58]
    3a48:	mov    DWORD PTR [rsp+0x3c],eax
    3a4c:	lea    rax,[rsp+0x70]
    3a51:	mov    QWORD PTR [rsp+0x48],rax
    3a56:	lea    rax,[rsp+0x90]
    3a5e:	mov    QWORD PTR [rsp+0x58],rax
    3a63:	xor    eax,eax
    3a65:	mov    ecx,0x10
    3a6a:	mov    rdi,QWORD PTR [rsp+0x18]
    3a6f:	cld    
    3a70:	rep stos QWORD PTR es:[rdi],rax
    3a73:	xor    ebp,ebp
    3a75:	mov    r12d,0x40
    3a7b:	movsxd rdi,DWORD PTR [rbx+rbp*4]
    3a7f:	mov    r13d,0x1
    3a85:	call   2fc0 <__fdelt_chk@plt>
    3a8a:	mov    rsi,rax
    3a8d:	mov    eax,DWORD PTR [rbx+rbp*4]
    3a90:	add    rbp,0x1
    3a94:	cdq    
    3a95:	idiv   r12d
    3a98:	mov    rax,r13
    3a9b:	mov    ecx,edx
    3a9d:	shl    rax,cl
    3aa0:	or     QWORD PTR [rsp+rsi*8+0xf0],rax
    3aa8:	cmp    r14d,ebp
    3aab:	jg     3a7b <main+0x59b>
    3aad:	mov    eax,DWORD PTR [rsp+0x50]
    3ab1:	mov    rsi,QWORD PTR [rsp+0x18]
    3ab6:	xor    r8d,r8d
    3ab9:	xor    ecx,ecx
    3abb:	xor    edx,edx
    3abd:	lea    edi,[rax+0x1]
    3ac0:	call   31d0 <select@plt>
    3ac5:	cmp    eax,0xffffffff
    3ac8:	mov    ebp,eax
    3aca:	je     3bc0 <main+0x6e0>
    3ad0:	movsxd rdi,DWORD PTR [rbx]
    3ad3:	mov    r15d,0x1
    3ad9:	call   2fc0 <__fdelt_chk@plt>
    3ade:	mov    rsi,rax
    3ae1:	mov    eax,DWORD PTR [rbx]
    3ae3:	cdq    
    3ae4:	idiv   r12d
    3ae7:	xor    eax,eax
    3ae9:	mov    ecx,edx
    3aeb:	shl    r13,cl
    3aee:	test   QWORD PTR [rsp+rsi*8+0xf0],r13
    3af6:	mov    r13d,0x1
    3afc:	setne  al
    3aff:	sub    ebp,eax
    3b01:	jmp    3b07 <main+0x627>
    3b03:	add    r15d,0x1
    3b07:	cmp    r15d,r14d
    3b0a:	jge    3b79 <main+0x699>
    3b0c:	test   ebp,ebp
    3b0e:	je     3b79 <main+0x699>
    3b10:	movsxd rax,r15d
    3b13:	lea    r12,[rbx+rax*4]
    3b17:	movsxd rdi,DWORD PTR [r12]
    3b1b:	call   2fc0 <__fdelt_chk@plt>
    3b20:	mov    esi,DWORD PTR [r12]
    3b24:	mov    rdi,rax
    3b27:	mov    ecx,0x40
    3b2c:	mov    eax,esi
    3b2e:	cdq    
    3b2f:	idiv   ecx
    3b31:	mov    rax,r13
    3b34:	mov    ecx,edx
    3b36:	shl    rax,cl
    3b39:	test   QWORD PTR [rsp+rdi*8+0xf0],rax
    3b41:	je     3b03 <main+0x623>
    3b43:	push   0x100000
    3b48:	push   QWORD PTR [rsp+0x28]
    3b4c:	mov    r9d,DWORD PTR [rsp+0x4c]
    3b51:	mov    r8,QWORD PTR [rsp+0x58]
    3b56:	mov    rcx,QWORD PTR [rsp+0x20]
    3b5b:	mov    rdx,QWORD PTR [rsp+0x18]
    3b60:	mov    rdi,QWORD PTR [rsp+0x40]
    3b65:	call   16730 <nbd_trip>
    3b6a:	test   eax,eax
    3b6c:	pop    rdx
    3b6d:	pop    rcx
    3b6e:	jne    3c01 <main+0x721>
    3b74:	sub    ebp,0x1
    3b77:	jmp    3b03 <main+0x623>
    3b79:	movsxd rdi,DWORD PTR [rbx]
    3b7c:	call   2fc0 <__fdelt_chk@plt>
    3b81:	mov    edi,DWORD PTR [rbx]
    3b83:	mov    r8,rax
    3b86:	mov    esi,0x40
    3b8b:	mov    eax,edi
    3b8d:	cdq    
    3b8e:	idiv   esi
    3b90:	mov    eax,0x1
    3b95:	mov    ecx,edx
    3b97:	shl    rax,cl
    3b9a:	test   QWORD PTR [rsp+r8*8+0xf0],rax
    3ba2:	je     3bab <main+0x6cb>
    3ba4:	cmp    DWORD PTR [rsp+0x40],r14d
    3ba9:	jge    3c21 <main+0x741>
    3bab:	cmp    r14d,0x1
    3baf:	jg     3a63 <main+0x583>
    3bb5:	cmp    DWORD PTR [rsp+0x44],0x0
    3bba:	jne    3a63 <main+0x583>
    3bc0:	mov    rdi,QWORD PTR [rsp+0x20]
    3bc5:	mov    r15,QWORD PTR [rsp+0x30]
    3bca:	xor    r12d,r12d
    3bcd:	call   49c0 <qemu_free>
    3bd2:	mov    edi,DWORD PTR [rbx]
    3bd4:	call   3040 <close@plt>
    3bd9:	mov    rdi,r15
    3bdc:	call   17170 <bdrv_close>
    3be1:	mov    rdi,rbx
    3be4:	call   49c0 <qemu_free>
    3be9:	mov    rdi,QWORD PTR [rsp+0x28]
    3bee:	test   rdi,rdi
    3bf1:	je     3820 <main+0x340>
    3bf7:	call   2e90 <unlink@plt>
    3bfc:	jmp    3820 <main+0x340>
    3c01:	mov    edi,DWORD PTR [r12]
    3c05:	sub    r14d,0x1
    3c09:	sub    r15d,0x1
    3c0d:	call   3040 <close@plt>
    3c12:	movsxd rax,r14d
    3c15:	mov    eax,DWORD PTR [rbx+rax*4]
    3c18:	mov    DWORD PTR [r12],eax
    3c1c:	jmp    3b74 <main+0x694>
    3c21:	mov    rsi,QWORD PTR [rsp+0x58]
    3c26:	movsxd rax,r14d
    3c29:	lea    rdx,[rsp+0x68]
    3c2e:	lea    rbp,[rbx+rax*4]
    3c32:	call   3380 <accept@plt>
    3c37:	cmp    eax,0xffffffff
    3c3a:	mov    DWORD PTR [rbp+0x0],eax
    3c3d:	je     3bab <main+0x6cb>
    3c43:	mov    rsi,QWORD PTR [rsp+0x8]
    3c48:	mov    edi,eax
    3c4a:	call   16160 <nbd_negotiate>
    3c4f:	add    eax,0x1
    3c52:	je     3bab <main+0x6cb>
    3c58:	mov    ecx,DWORD PTR [rsp+0x50]
    3c5c:	mov    eax,DWORD PTR [rbp+0x0]
    3c5f:	cmp    ecx,eax
    3c61:	cmovge eax,ecx
    3c64:	add    r14d,0x1
    3c68:	mov    DWORD PTR [rsp+0x50],eax
    3c6c:	jmp    3bab <main+0x6cb>
    3c71:	mov    esi,DWORD PTR [rbp+0x10]
    3c74:	mov    rdx,QWORD PTR [rsp+0x18]
    3c79:	mov    ecx,0x1
    3c7e:	mov    rdi,r15
    3c81:	call   171e0 <bdrv_read>
    3c86:	test   eax,eax
    3c88:	jne    3eec <main+0xa0c>
    3c8e:	mov    r9,QWORD PTR [rsp+0x20]
    3c93:	xor    ecx,ecx
    3c95:	mov    rdi,rcx
    3c98:	mov    rsi,r9
    3c9b:	shl    rdi,0x4
    3c9f:	add    rdi,QWORD PTR [rsp+0x10]
    3ca4:	call   40d0 <read_partition>
    3ca9:	mov    eax,DWORD PTR [r9+0x14]
    3cad:	test   eax,eax
    3caf:	je     3cc3 <main+0x7e3>
    3cb1:	mov    esi,DWORD PTR [rsp+0x8]
    3cb5:	lea    edx,[rsi+rcx*1+0x1]
    3cb9:	cmp    DWORD PTR [rsp+0x3c],edx
    3cbd:	je     3e84 <main+0x9a4>
    3cc3:	add    rcx,0x1
    3cc7:	add    r9,0x18
    3ccb:	cmp    rcx,0x4
    3ccf:	jne    3c95 <main+0x7b5>
    3cd1:	add    DWORD PTR [rsp+0x8],0x4
    3cd6:	jmp    3949 <main+0x469>
    3cdb:	mov    rdi,r15
    3cde:	call   17170 <bdrv_close>
    3ce3:	mov    rdi,QWORD PTR [rsp+0x28]
    3ce8:	call   160a0 <unix_socket_outgoing>
    3ced:	cmp    eax,0xffffffff
    3cf0:	je     3dbd <main+0x8dd>
    3cf6:	mov    rdi,QWORD PTR [rsp+0x30]
    3cfb:	mov    ebp,eax
    3cfd:	mov    esi,0x2
    3d02:	xor    eax,eax
    3d04:	call   32e0 <open64@plt>
    3d09:	cmp    eax,0xffffffff
    3d0c:	mov    r14d,eax
    3d0f:	je     3db5 <main+0x8d5>
    3d15:	lea    rdx,[rsp+0x88]
    3d1d:	lea    rsi,[rsp+0x80]
    3d25:	mov    edi,ebp
    3d27:	call   16240 <nbd_receive_negotiate>
    3d2c:	add    eax,0x1
    3d2f:	je     3db5 <main+0x8d5>
    3d35:	mov    rcx,QWORD PTR [rsp+0x88]
    3d3d:	mov    rdx,QWORD PTR [rsp+0x80]
    3d45:	mov    esi,ebp
    3d47:	mov    edi,r14d
    3d4a:	call   16360 <nbd_init>
    3d4f:	cmp    eax,0xffffffff
    3d52:	mov    r12d,eax
    3d55:	je     3db5 <main+0x8d5>
    3d57:	movsxd rax,DWORD PTR [rip+0x223782]        # 2274e0 <optind@@GLIBC_2.2.5>
    3d5e:	mov    rdx,QWORD PTR [rsp+0x30]
    3d63:	lea    rsi,[rip+0x18276]        # 1bfe0 <_IO_stdin_used+0x760>
    3d6a:	mov    edi,0x1
    3d6f:	mov    rcx,QWORD PTR [r13+rax*8+0x0]
    3d74:	xor    eax,eax
    3d76:	call   32b0 <__printf_chk@plt>
    3d7b:	call   3460 <fork@plt>
    3d80:	test   eax,eax
    3d82:	je     3eca <main+0x9ea>
    3d88:	mov    edi,r14d
    3d8b:	mov    esi,ebp
    3d8d:	call   16500 <nbd_client>
    3d92:	mov    edi,r14d
    3d95:	call   3040 <close@plt>
    3d9a:	mov    edi,ebx
    3d9c:	mov    esi,0xf
    3da1:	call   31b0 <kill@plt>
    3da6:	mov    rdi,QWORD PTR [rsp+0x28]
    3dab:	call   2e90 <unlink@plt>
    3db0:	jmp    3820 <main+0x340>
    3db5:	mov    r12d,0x1
    3dbb:	jmp    3d9a <main+0x8ba>
    3dbd:	call   2e80 <__errno_location@plt>
    3dc2:	mov    eax,DWORD PTR [rax]
    3dc4:	cmp    eax,0x2
    3dc7:	je     3dd2 <main+0x8f2>
    3dc9:	cmp    eax,0x6f
    3dcc:	jne    3e52 <main+0x972>
    3dd2:	mov    edi,0x1
    3dd7:	call   3440 <sleep@plt>
    3ddc:	jmp    3ce3 <main+0x803>
    3de1:	mov    eax,DWORD PTR [rsp+0x40]
    3de5:	lea    edi,[rax+0x1]
    3de8:	movsxd rdi,edi
    3deb:	shl    rdi,0x2
    3def:	call   49d0 <qemu_malloc>
    3df4:	cmp    QWORD PTR [rsp+0x28],0x0
    3dfa:	mov    rbx,rax
    3dfd:	jne    39f3 <main+0x513>
    3e03:	mov    esi,DWORD PTR [rsp+0x48]
    3e07:	mov    rdi,QWORD PTR [rsp+0x50]
    3e0c:	call   15ea0 <tcp_socket_incoming>
    3e11:	mov    DWORD PTR [rbx],eax
    3e13:	jmp    39ff <main+0x51f>
    3e18:	mov    rdi,QWORD PTR [rsp+0x30]
    3e1d:	lea    rbx,[rsp+0x570]
    3e25:	call   3160 <basename@plt>
    3e2a:	lea    rcx,[rip+0x17b55]        # 1b986 <_IO_stdin_used+0x106>
    3e31:	mov    r8,rax
    3e34:	mov    edx,0x80
    3e39:	mov    esi,0x1
    3e3e:	mov    rdi,rbx
    3e41:	xor    eax,eax
    3e43:	call   34b0 <__sprintf_chk@plt>
    3e48:	mov    QWORD PTR [rsp+0x28],rbx
    3e4d:	jmp    39c8 <main+0x4e8>
    3e52:	xor    r12d,r12d
    3e55:	jmp    3d9a <main+0x8ba>
    3e5a:	call   2f70 <__stack_chk_fail@plt>
    3e5f:	movsxd rdx,r14d
    3e62:	shl    rax,0x9
    3e66:	imul   rdx,rdx,0x18
    3e6a:	mov    QWORD PTR [rsp+0x8],rax
    3e6f:	mov    edx,DWORD PTR [rsp+rdx*1+0xa0]
    3e76:	shl    rdx,0x9
    3e7a:	mov    QWORD PTR [rsp+0x10],rdx
    3e7f:	jmp    399e <main+0x4be>
    3e84:	movsxd rdx,ecx
    3e87:	shl    rax,0x9
    3e8b:	imul   rdx,rdx,0x18
    3e8f:	mov    QWORD PTR [rsp+0x8],rax
    3e94:	mov    edx,DWORD PTR [rsp+rdx*1+0x100]
    3e9b:	shl    rdx,0x9
    3e9f:	mov    QWORD PTR [rsp+0x10],rdx
    3ea4:	jmp    399e <main+0x4be>
    3ea9:	call   2e80 <__errno_location@plt>
    3eae:	mov    DWORD PTR [rax],0xffffffea
    3eb4:	jmp    3962 <main+0x482>
    3eb9:	lea    rsi,[rip+0x17adc]        # 1b99c <_IO_stdin_used+0x11c>
    3ec0:	mov    edi,0xc
    3ec5:	call   2f90 <errx@plt>
    3eca:	mov    rdi,QWORD PTR [rsp+0x30]
    3ecf:	mov    esi,0x2
    3ed4:	call   32e0 <open64@plt>
    3ed9:	cmp    eax,0xffffffff
    3edc:	je     3ee5 <main+0xa05>
    3ede:	mov    edi,eax
    3ee0:	call   3040 <close@plt>
    3ee5:	xor    edi,edi
    3ee7:	call   33c0 <exit@plt>
    3eec:	lea    rsi,[rip+0x17a7f]        # 1b972 <_IO_stdin_used+0xf2>
    3ef3:	mov    edi,0x16
    3ef8:	xor    eax,eax
    3efa:	call   2f90 <errx@plt>
    3eff:	call   2e80 <__errno_location@plt>
    3f04:	movsxd rdx,DWORD PTR [rip+0x2235d5]        # 2274e0 <optind@@GLIBC_2.2.5>
    3f0b:	mov    edi,DWORD PTR [rax]
    3f0d:	lea    rsi,[rip+0x17a3a]        # 1b94e <_IO_stdin_used+0xce>
    3f14:	xor    eax,eax
    3f16:	mov    rdx,QWORD PTR [r13+rdx*8+0x0]
    3f1b:	call   2f90 <errx@plt>
    3f20:	mov    rdx,QWORD PTR [r13+0x0]
    3f24:	lea    rsi,[rip+0x1806d]        # 1bf98 <_IO_stdin_used+0x718>
    3f2b:	mov    edi,0x16
    3f30:	xor    eax,eax
    3f32:	call   2f90 <errx@plt>
    3f37:	mov    rdx,QWORD PTR [rip+0x2235aa]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3f3e:	lea    rsi,[rip+0x17b03]        # 1ba48 <_IO_stdin_used+0x1c8>
    3f45:	mov    edi,0x16
    3f4a:	xor    eax,eax
    3f4c:	call   2f90 <errx@plt>
    3f51:	mov    rdx,QWORD PTR [rip+0x223590]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3f58:	lea    rsi,[rip+0x1793f]        # 1b89e <_IO_stdin_used+0x1e>
    3f5f:	mov    edi,0x16
    3f64:	xor    eax,eax
    3f66:	call   2f90 <errx@plt>
    3f6b:	mov    rdx,QWORD PTR [rip+0x223576]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3f72:	lea    rsi,[rip+0x1793c]        # 1b8b5 <_IO_stdin_used+0x35>
    3f79:	mov    edi,0x16
    3f7e:	xor    eax,eax
    3f80:	call   2f90 <errx@plt>
    3f85:	mov    rdx,QWORD PTR [rip+0x22355c]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3f8c:	lea    rsi,[rip+0x17953]        # 1b8e6 <_IO_stdin_used+0x66>
    3f93:	mov    edi,0x16
    3f98:	xor    eax,eax
    3f9a:	call   2f90 <errx@plt>
    3f9f:	mov    rdx,QWORD PTR [rip+0x223542]        # 2274e8 <optarg@@GLIBC_2.2.5>
    3fa6:	lea    rsi,[rip+0x178df]        # 1b88c <_IO_stdin_used+0xc>
    3fad:	mov    edi,0x16
    3fb2:	xor    eax,eax
    3fb4:	call   2f90 <errx@plt>
    3fb9:	nop    DWORD PTR [rax+0x0]

0000000000003fc0 <_start>:
    3fc0:	xor    ebp,ebp
    3fc2:	mov    r9,rdx
    3fc5:	pop    rsi
    3fc6:	mov    rdx,rsp
    3fc9:	and    rsp,0xfffffffffffffff0
    3fcd:	push   rax
    3fce:	push   rsp
    3fcf:	lea    r8,[rip+0x1789a]        # 1b870 <__libc_csu_fini>
    3fd6:	lea    rcx,[rip+0x17823]        # 1b800 <__libc_csu_init>
    3fdd:	lea    rdi,[rip+0xfffffffffffff4fc]        # 34e0 <main>
    3fe4:	call   QWORD PTR [rip+0x221fe6]        # 225fd0 <__libc_start_main@GLIBC_2.2.5>
    3fea:	hlt    
    3feb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ff0 <deregister_tm_clones>:
    3ff0:	lea    rdi,[rip+0x2234e9]        # 2274e0 <optind@@GLIBC_2.2.5>
    3ff7:	push   rbp
    3ff8:	lea    rax,[rip+0x2234e1]        # 2274e0 <optind@@GLIBC_2.2.5>
    3fff:	cmp    rax,rdi
    4002:	mov    rbp,rsp
    4005:	je     4020 <deregister_tm_clones+0x30>
    4007:	mov    rax,QWORD PTR [rip+0x221fba]        # 225fc8 <_ITM_deregisterTMCloneTable>
    400e:	test   rax,rax
    4011:	je     4020 <deregister_tm_clones+0x30>
    4013:	pop    rbp
    4014:	jmp    rax
    4016:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4020:	pop    rbp
    4021:	ret    
    4022:	nop    DWORD PTR [rax+0x0]
    4026:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004030 <register_tm_clones>:
    4030:	lea    rdi,[rip+0x2234a9]        # 2274e0 <optind@@GLIBC_2.2.5>
    4037:	lea    rsi,[rip+0x2234a2]        # 2274e0 <optind@@GLIBC_2.2.5>
    403e:	push   rbp
    403f:	sub    rsi,rdi
    4042:	mov    rbp,rsp
    4045:	sar    rsi,0x3
    4049:	mov    rax,rsi
    404c:	shr    rax,0x3f
    4050:	add    rsi,rax
    4053:	sar    rsi,1
    4056:	je     4070 <register_tm_clones+0x40>
    4058:	mov    rax,QWORD PTR [rip+0x221f91]        # 225ff0 <_ITM_registerTMCloneTable>
    405f:	test   rax,rax
    4062:	je     4070 <register_tm_clones+0x40>
    4064:	pop    rbp
    4065:	jmp    rax
    4067:	nop    WORD PTR [rax+rax*1+0x0]
    4070:	pop    rbp
    4071:	ret    
    4072:	nop    DWORD PTR [rax+0x0]
    4076:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004080 <__do_global_dtors_aux>:
    4080:	cmp    BYTE PTR [rip+0x223481],0x0        # 227508 <completed.7697>
    4087:	jne    40b8 <__do_global_dtors_aux+0x38>
    4089:	cmp    QWORD PTR [rip+0x221f67],0x0        # 225ff8 <__cxa_finalize@GLIBC_2.2.5>
    4091:	push   rbp
    4092:	mov    rbp,rsp
    4095:	je     40a3 <__do_global_dtors_aux+0x23>
    4097:	mov    rdi,QWORD PTR [rip+0x221f6a]        # 226008 <__dso_handle>
    409e:	call   34d0 <__cxa_finalize@plt>
    40a3:	call   3ff0 <deregister_tm_clones>
    40a8:	mov    BYTE PTR [rip+0x223459],0x1        # 227508 <completed.7697>
    40af:	pop    rbp
    40b0:	ret    
    40b1:	nop    DWORD PTR [rax+0x0]
    40b8:	repz ret 
    40ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000000040c0 <frame_dummy>:
    40c0:	push   rbp
    40c1:	mov    rbp,rsp
    40c4:	pop    rbp
    40c5:	jmp    4030 <register_tm_clones>
    40ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000000040d0 <read_partition>:
    40d0:	movzx  eax,BYTE PTR [rdi]
    40d3:	mov    BYTE PTR [rsi],al
    40d5:	movzx  eax,BYTE PTR [rdi+0x1]
    40d9:	mov    BYTE PTR [rsi+0x1],al
    40dc:	movzx  eax,BYTE PTR [rdi+0x2]
    40e0:	movzx  edx,BYTE PTR [rdi+0x3]
    40e4:	shl    eax,0x2
    40e7:	and    eax,0x300
    40ec:	or     eax,edx
    40ee:	mov    DWORD PTR [rsi+0x4],eax
    40f1:	movzx  eax,BYTE PTR [rdi+0x2]
    40f5:	and    eax,0x3f
    40f8:	mov    BYTE PTR [rsi+0x8],al
    40fb:	movzx  eax,BYTE PTR [rdi+0x4]
    40ff:	mov    BYTE PTR [rsi+0x9],al
    4102:	movzx  eax,BYTE PTR [rdi+0x5]
    4106:	mov    BYTE PTR [rsi+0xa],al
    4109:	movzx  eax,BYTE PTR [rdi+0x7]
    410d:	mov    BYTE PTR [rsi+0xb],al
    4110:	movzx  eax,BYTE PTR [rdi+0x6]
    4114:	and    eax,0x3f
    4117:	mov    BYTE PTR [rsi+0xc],al
    411a:	mov    eax,DWORD PTR [rdi+0x8]
    411d:	mov    DWORD PTR [rsi+0x10],eax
    4120:	mov    eax,DWORD PTR [rdi+0xc]
    4123:	mov    DWORD PTR [rsi+0x14],eax
    4126:	ret    
    4127:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004130 <qemu_service_io>:
    4130:	repz ret 
    4132:	nop    DWORD PTR [rax+0x0]
    4136:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004140 <term_printf>:
    4140:	repz ret 
    4142:	nop    DWORD PTR [rax+0x0]
    4146:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004150 <term_print_filename>:
    4150:	repz ret 
    4152:	nop    DWORD PTR [rax+0x0]
    4156:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004160 <qemu_bh_new>:
    4160:	push   rbp
    4161:	push   rbx
    4162:	mov    rbp,rdi
    4165:	mov    rbx,rsi
    4168:	mov    edi,0x10
    416d:	sub    rsp,0x8
    4171:	call   49d0 <qemu_malloc>
    4176:	mov    QWORD PTR [rax],rbp
    4179:	mov    QWORD PTR [rax+0x8],rbx
    417d:	add    rsp,0x8
    4181:	pop    rbx
    4182:	pop    rbp
    4183:	ret    
    4184:	xchg   ax,ax
    4186:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004190 <qemu_bh_poll>:
    4190:	xor    eax,eax
    4192:	ret    
    4193:	nop    DWORD PTR [rax]
    4196:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000041a0 <qemu_bh_schedule>:
    41a0:	mov    rax,rdi
    41a3:	mov    rdi,QWORD PTR [rdi+0x8]
    41a7:	jmp    QWORD PTR [rax]
    41a9:	nop    DWORD PTR [rax+0x0]

00000000000041b0 <qemu_bh_cancel>:
    41b0:	repz ret 
    41b2:	nop    DWORD PTR [rax+0x0]
    41b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000041c0 <qemu_bh_delete>:
    41c0:	jmp    49c0 <qemu_free>
    41c5:	nop
    41c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000041d0 <qemu_set_fd_handler2>:
    41d0:	xor    eax,eax
    41d2:	ret    
    41d3:	nop    DWORD PTR [rax]
    41d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000041e0 <qemu_get_clock>:
    41e0:	sub    rsp,0x28
    41e4:	xor    esi,esi
    41e6:	mov    rdi,rsp
    41e9:	mov    rax,QWORD PTR fs:0x28
    41f2:	mov    QWORD PTR [rsp+0x18],rax
    41f7:	xor    eax,eax
    41f9:	call   2ff0 <gettimeofday@plt>
    41fe:	imul   rax,QWORD PTR [rsp+0x8],0x3e8
    4207:	imul   rcx,QWORD PTR [rsp],0x3b9aca00
    420f:	movabs rdx,0x431bde82d7b634db
    4219:	add    rcx,rax
    421c:	mov    rax,rcx
    421f:	sar    rcx,0x3f
    4223:	imul   rdx
    4226:	sar    rdx,0x12
    422a:	mov    rax,rdx
    422d:	sub    rax,rcx
    4230:	mov    rsi,QWORD PTR [rsp+0x18]
    4235:	xor    rsi,QWORD PTR fs:0x28
    423e:	jne    4245 <qemu_get_clock+0x65>
    4240:	add    rsp,0x28
    4244:	ret    
    4245:	call   2f70 <__stack_chk_fail@plt>
    424a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004250 <qemu_read>:
    4250:	push   r13
    4252:	push   r12
    4254:	xor    r12d,r12d
    4257:	push   rbp
    4258:	push   rbx
    4259:	mov    r13d,edi
    425c:	mov    rbp,rsi
    425f:	mov    rbx,rdx
    4262:	sub    rsp,0x8
    4266:	test   rdx,rdx
    4269:	je     4290 <qemu_read+0x40>
    426b:	mov    rdx,rbx
    426e:	mov    rsi,rbp
    4271:	mov    edi,r13d
    4274:	call   30a0 <read@plt>
    4279:	test   rax,rax
    427c:	je     42c0 <qemu_read+0x70>
    427e:	js     42a0 <qemu_read+0x50>
    4280:	cmp    rax,rbx
    4283:	ja     42d9 <qemu_read+0x89>
    4285:	add    r12,rax
    4288:	add    rbp,rax
    428b:	sub    rbx,rax
    428e:	jne    426b <qemu_read+0x1b>
    4290:	add    rsp,0x8
    4294:	mov    rax,r12
    4297:	pop    rbx
    4298:	pop    rbp
    4299:	pop    r12
    429b:	pop    r13
    429d:	ret    
    429e:	xchg   ax,ax
    42a0:	call   2e80 <__errno_location@plt>
    42a5:	cmp    DWORD PTR [rax],0x4
    42a8:	je     426b <qemu_read+0x1b>
    42aa:	test   r12,r12
    42ad:	jne    4290 <qemu_read+0x40>
    42af:	mov    r12,0xffffffffffffffff
    42b6:	jmp    4290 <qemu_read+0x40>
    42b8:	nop    DWORD PTR [rax+rax*1+0x0]
    42c0:	call   2e80 <__errno_location@plt>
    42c5:	mov    DWORD PTR [rax],0x0
    42cb:	add    rsp,0x8
    42cf:	mov    rax,r12
    42d2:	pop    rbx
    42d3:	pop    rbp
    42d4:	pop    r12
    42d6:	pop    r13
    42d8:	ret    
    42d9:	lea    rcx,[rip+0x17e70]        # 1c150 <__PRETTY_FUNCTION__.13304>
    42e0:	lea    rsi,[rip+0x17e09]        # 1c0f0 <_IO_stdin_used+0x870>
    42e7:	lea    rdi,[rip+0x17e3f]        # 1c12d <_IO_stdin_used+0x8ad>
    42ee:	mov    edx,0x4b
    42f3:	call   3000 <__assert_fail@plt>
    42f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004300 <qemu_read_ok>:
    4300:	push   rbx
    4301:	mov    rbx,rdx
    4304:	call   4250 <qemu_read>
    4309:	cmp    rax,rbx
    430c:	sete   al
    430f:	movzx  eax,al
    4312:	lea    eax,[rax+rax*1-0x1]
    4316:	pop    rbx
    4317:	ret    
    4318:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000004320 <qemu_write>:
    4320:	push   r13
    4322:	push   r12
    4324:	xor    r12d,r12d
    4327:	push   rbp
    4328:	push   rbx
    4329:	mov    r13d,edi
    432c:	mov    rbp,rsi
    432f:	mov    rbx,rdx
    4332:	sub    rsp,0x8
    4336:	test   rdx,rdx
    4339:	je     4360 <qemu_write+0x40>
    433b:	mov    rdx,rbx
    433e:	mov    rsi,rbp
    4341:	mov    edi,r13d
    4344:	call   2f10 <write@plt>
    4349:	test   rax,rax
    434c:	je     4390 <qemu_write+0x70>
    434e:	js     4370 <qemu_write+0x50>
    4350:	cmp    rax,rbx
    4353:	ja     43a9 <qemu_write+0x89>
    4355:	add    r12,rax
    4358:	add    rbp,rax
    435b:	sub    rbx,rax
    435e:	jne    433b <qemu_write+0x1b>
    4360:	add    rsp,0x8
    4364:	mov    rax,r12
    4367:	pop    rbx
    4368:	pop    rbp
    4369:	pop    r12
    436b:	pop    r13
    436d:	ret    
    436e:	xchg   ax,ax
    4370:	call   2e80 <__errno_location@plt>
    4375:	cmp    DWORD PTR [rax],0x4
    4378:	je     433b <qemu_write+0x1b>
    437a:	test   r12,r12
    437d:	jne    4360 <qemu_write+0x40>
    437f:	mov    r12,0xffffffffffffffff
    4386:	jmp    4360 <qemu_write+0x40>
    4388:	nop    DWORD PTR [rax+rax*1+0x0]
    4390:	call   2e80 <__errno_location@plt>
    4395:	mov    DWORD PTR [rax],0x0
    439b:	add    rsp,0x8
    439f:	mov    rax,r12
    43a2:	pop    rbx
    43a3:	pop    rbp
    43a4:	pop    r12
    43a6:	pop    r13
    43a8:	ret    
    43a9:	lea    rcx,[rip+0x17d90]        # 1c140 <__PRETTY_FUNCTION__.13321>
    43b0:	lea    rsi,[rip+0x17d39]        # 1c0f0 <_IO_stdin_used+0x870>
    43b7:	lea    rdi,[rip+0x17d6f]        # 1c12d <_IO_stdin_used+0x8ad>
    43be:	mov    edx,0x4c
    43c3:	call   3000 <__assert_fail@plt>
    43c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043d0 <qemu_write_ok>:
    43d0:	push   rbx
    43d1:	mov    rbx,rdx
    43d4:	call   4320 <qemu_write>
    43d9:	cmp    rax,rbx
    43dc:	sete   al
    43df:	movzx  eax,al
    43e2:	lea    eax,[rax+rax*1-0x1]
    43e6:	pop    rbx
    43e7:	ret    
    43e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000043f0 <qemu_memalign>:
    43f0:	sub    rsp,0x18
    43f4:	mov    rax,rdi
    43f7:	mov    rdx,rsi
    43fa:	mov    rdi,rsp
    43fd:	mov    rsi,rax
    4400:	mov    rcx,QWORD PTR fs:0x28
    4409:	mov    QWORD PTR [rsp+0x8],rcx
    440e:	xor    ecx,ecx
    4410:	call   3410 <posix_memalign@plt>
    4415:	test   eax,eax
    4417:	mov    rdx,QWORD PTR [rsp]
    441b:	je     441f <qemu_memalign+0x2f>
    441d:	xor    edx,edx
    441f:	mov    rcx,QWORD PTR [rsp+0x8]
    4424:	xor    rcx,QWORD PTR fs:0x28
    442d:	mov    rax,rdx
    4430:	jne    4437 <qemu_memalign+0x47>
    4432:	add    rsp,0x18
    4436:	ret    
    4437:	call   2f70 <__stack_chk_fail@plt>
    443c:	nop    DWORD PTR [rax+0x0]

0000000000004440 <qemu_vmalloc>:
    4440:	push   rbx
    4441:	mov    rbx,rdi
    4444:	sub    rsp,0x10
    4448:	mov    rax,QWORD PTR fs:0x28
    4451:	mov    QWORD PTR [rsp+0x8],rax
    4456:	xor    eax,eax
    4458:	call   33b0 <getpagesize@plt>
    445d:	mov    rdx,rbx
    4460:	movsxd rsi,eax
    4463:	mov    rdi,rsp
    4466:	call   3410 <posix_memalign@plt>
    446b:	test   eax,eax
    446d:	mov    rdx,QWORD PTR [rsp]
    4471:	je     4475 <qemu_vmalloc+0x35>
    4473:	xor    edx,edx
    4475:	mov    rcx,QWORD PTR [rsp+0x8]
    447a:	xor    rcx,QWORD PTR fs:0x28
    4483:	mov    rax,rdx
    4486:	jne    448e <qemu_vmalloc+0x4e>
    4488:	add    rsp,0x10
    448c:	pop    rbx
    448d:	ret    
    448e:	call   2f70 <__stack_chk_fail@plt>
    4493:	nop    DWORD PTR [rax]
    4496:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000044a0 <qemu_vfree>:
    44a0:	jmp    2e40 <free@plt>
    44a5:	nop
    44a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000044b0 <qemu_create_pidfile>:
    44b0:	push   r12
    44b2:	push   rbp
    44b3:	mov    edx,0x180
    44b8:	push   rbx
    44b9:	mov    esi,0x42
    44be:	sub    rsp,0x90
    44c5:	mov    rax,QWORD PTR fs:0x28
    44ce:	mov    QWORD PTR [rsp+0x88],rax
    44d6:	xor    eax,eax
    44d8:	call   32e0 <open64@plt>
    44dd:	cmp    eax,0xffffffff
    44e0:	je     4560 <qemu_create_pidfile+0xb0>
    44e2:	xor    edx,edx
    44e4:	mov    esi,0x2
    44e9:	mov    edi,eax
    44eb:	mov    ebp,eax
    44ed:	call   3320 <lockf64@plt>
    44f2:	cmp    eax,0xffffffff
    44f5:	je     4560 <qemu_create_pidfile+0xb0>
    44f7:	call   2f20 <getpid@plt>
    44fc:	mov    r12,rsp
    44ff:	lea    r8,[rip+0x17c34]        # 1c13a <_IO_stdin_used+0x8ba>
    4506:	movsxd r9,eax
    4509:	mov    ecx,0x80
    450e:	mov    edx,0x1
    4513:	mov    esi,0x80
    4518:	mov    rdi,r12
    451b:	xor    eax,eax
    451d:	call   2e30 <__snprintf_chk@plt>
    4522:	movsxd rbx,eax
    4525:	mov    rsi,r12
    4528:	mov    edi,ebp
    452a:	mov    rdx,rbx
    452d:	call   2f10 <write@plt>
    4532:	cmp    rbx,rax
    4535:	setne  al
    4538:	movzx  eax,al
    453b:	neg    eax
    453d:	mov    rcx,QWORD PTR [rsp+0x88]
    4545:	xor    rcx,QWORD PTR fs:0x28
    454e:	jne    4567 <qemu_create_pidfile+0xb7>
    4550:	add    rsp,0x90
    4557:	pop    rbx
    4558:	pop    rbp
    4559:	pop    r12
    455b:	ret    
    455c:	nop    DWORD PTR [rax+0x0]
    4560:	mov    eax,0xffffffff
    4565:	jmp    453d <qemu_create_pidfile+0x8d>
    4567:	call   2f70 <__stack_chk_fail@plt>
    456c:	nop    DWORD PTR [rax+0x0]

0000000000004570 <socket_set_nonblock>:
    4570:	push   rbx
    4571:	mov    esi,0x3
    4576:	mov    ebx,edi
    4578:	xor    eax,eax
    457a:	call   2f00 <fcntl@plt>
    457f:	mov    edi,ebx
    4581:	or     ah,0x8
    4584:	mov    esi,0x4
    4589:	pop    rbx
    458a:	mov    edx,eax
    458c:	xor    eax,eax
    458e:	jmp    2f00 <fcntl@plt>
    4593:	nop    WORD PTR cs:[rax+rax*1+0x0]
    459d:	nop    DWORD PTR [rax]

00000000000045a0 <pstrcpy>:
    45a0:	test   rsi,rsi
    45a3:	je     45db <pstrcpy+0x3b>
    45a5:	movzx  ecx,BYTE PTR [rdx]
    45a8:	lea    rax,[rdx+0x1]
    45ac:	test   cl,cl
    45ae:	je     45d8 <pstrcpy+0x38>
    45b0:	lea    r8,[rdi+rsi*1-0x1]
    45b5:	cmp    rdi,r8
    45b8:	jae    45d8 <pstrcpy+0x38>
    45ba:	add    rdx,rsi
    45bd:	jmp    45c5 <pstrcpy+0x25>
    45bf:	nop
    45c0:	cmp    rax,rdx
    45c3:	je     45d8 <pstrcpy+0x38>
    45c5:	add    rdi,0x1
    45c9:	add    rax,0x1
    45cd:	mov    BYTE PTR [rdi-0x1],cl
    45d0:	movzx  ecx,BYTE PTR [rax-0x1]
    45d4:	test   cl,cl
    45d6:	jne    45c0 <pstrcpy+0x20>
    45d8:	mov    BYTE PTR [rdi],0x0
    45db:	repz ret 
    45dd:	nop    DWORD PTR [rax]

00000000000045e0 <pstrcat>:
    45e0:	push   r12
    45e2:	push   rbp
    45e3:	mov    r12,rdx
    45e6:	push   rbx
    45e7:	mov    rbp,rdi
    45ea:	mov    rbx,rsi
    45ed:	call   2f60 <strlen@plt>
    45f2:	cdqe   
    45f4:	cmp    rax,rbx
    45f7:	jb     4608 <pstrcat+0x28>
    45f9:	mov    rax,rbp
    45fc:	pop    rbx
    45fd:	pop    rbp
    45fe:	pop    r12
    4600:	ret    
    4601:	nop    DWORD PTR [rax+0x0]
    4608:	movzx  edi,BYTE PTR [r12]
    460d:	sub    rbx,0x1
    4611:	add    rax,rbp
    4614:	lea    rcx,[r12+0x1]
    4619:	test   dil,dil
    461c:	je     464a <pstrcat+0x6a>
    461e:	add    rbx,rbp
    4621:	cmp    rax,rbx
    4624:	jae    464a <pstrcat+0x6a>
    4626:	sub    rbx,rax
    4629:	lea    rdx,[rbx+r12*1+0x1]
    462e:	jmp    4635 <pstrcat+0x55>
    4630:	cmp    rdx,rcx
    4633:	je     464a <pstrcat+0x6a>
    4635:	add    rax,0x1
    4639:	add    rcx,0x1
    463d:	mov    BYTE PTR [rax-0x1],dil
    4641:	movzx  edi,BYTE PTR [rcx-0x1]
    4645:	test   dil,dil
    4648:	jne    4630 <pstrcat+0x50>
    464a:	mov    BYTE PTR [rax],0x0
    464d:	mov    rax,rbp
    4650:	pop    rbx
    4651:	pop    rbp
    4652:	pop    r12
    4654:	ret    
    4655:	nop
    4656:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004660 <strstart>:
    4660:	jmp    4674 <strstart+0x14>
    4662:	nop    WORD PTR [rax+rax*1+0x0]
    4668:	cmp    BYTE PTR [rdi],al
    466a:	jne    4690 <strstart+0x30>
    466c:	add    rdi,0x1
    4670:	add    rsi,0x1
    4674:	movzx  eax,BYTE PTR [rsi]
    4677:	test   al,al
    4679:	jne    4668 <strstart+0x8>
    467b:	test   rdx,rdx
    467e:	mov    eax,0x1
    4683:	je     4692 <strstart+0x32>
    4685:	mov    QWORD PTR [rdx],rdi
    4688:	ret    
    4689:	nop    DWORD PTR [rax+0x0]
    4690:	xor    eax,eax
    4692:	repz ret 
    4694:	xchg   ax,ax
    4696:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000046a0 <stristart>:
    46a0:	push   r13
    46a2:	push   r12
    46a4:	mov    r13,rdx
    46a7:	push   rbp
    46a8:	push   rbx
    46a9:	mov    r12,rdi
    46ac:	sub    rsp,0x8
    46b0:	movzx  ebx,BYTE PTR [rsi]
    46b3:	test   bl,bl
    46b5:	je     46f8 <stristart+0x58>
    46b7:	mov    rbp,rsi
    46ba:	call   2e00 <__ctype_toupper_loc@plt>
    46bf:	mov    rax,QWORD PTR [rax]
    46c2:	jmp    46d8 <stristart+0x38>
    46c4:	nop    DWORD PTR [rax+0x0]
    46c8:	add    rbp,0x1
    46cc:	movzx  ebx,BYTE PTR [rbp+0x0]
    46d0:	add    r12,0x1
    46d4:	test   bl,bl
    46d6:	je     46f8 <stristart+0x58>
    46d8:	movzx  ecx,BYTE PTR [r12]
    46dd:	mov    edx,DWORD PTR [rax+rbx*4]
    46e0:	cmp    DWORD PTR [rax+rcx*4],edx
    46e3:	je     46c8 <stristart+0x28>
    46e5:	xor    eax,eax
    46e7:	add    rsp,0x8
    46eb:	pop    rbx
    46ec:	pop    rbp
    46ed:	pop    r12
    46ef:	pop    r13
    46f1:	ret    
    46f2:	nop    WORD PTR [rax+rax*1+0x0]
    46f8:	test   r13,r13
    46fb:	mov    eax,0x1
    4700:	je     46e7 <stristart+0x47>
    4702:	mov    QWORD PTR [r13+0x0],r12
    4706:	add    rsp,0x8
    470a:	pop    rbx
    470b:	pop    rbp
    470c:	pop    r12
    470e:	pop    r13
    4710:	ret    
    4711:	nop    DWORD PTR [rax+rax*1+0x0]
    4716:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004720 <mktimegm>:
    4720:	mov    edx,DWORD PTR [rdi+0x10]
    4723:	mov    esi,DWORD PTR [rdi+0x14]
    4726:	mov    ecx,DWORD PTR [rdi+0xc]
    4729:	lea    eax,[rdx+0x1]
    472c:	cmp    eax,0x2
    472f:	jg     47c0 <mktimegm+0xa0>
    4735:	lea    eax,[rdx+0xd]
    4738:	add    esi,0x76b
    473e:	imul   eax,eax,0x99
    4744:	mov    edx,0x66666667
    4749:	lea    r8d,[rax-0x1c9]
    4750:	mov    eax,r8d
    4753:	sar    r8d,0x1f
    4757:	imul   edx
    4759:	mov    eax,esi
    475b:	sar    edx,1
    475d:	sub    edx,r8d
    4760:	add    edx,ecx
    4762:	imul   ecx,esi,0x16d
    4768:	add    edx,ecx
    476a:	lea    ecx,[rsi+0x3]
    476d:	test   esi,esi
    476f:	cmovns ecx,esi
    4772:	sar    esi,0x1f
    4775:	sar    ecx,0x2
    4778:	mov    r9d,esi
    477b:	add    ecx,edx
    477d:	mov    edx,0x51eb851f
    4782:	imul   edx
    4784:	mov    eax,edx
    4786:	sar    edx,0x7
    4789:	sar    eax,0x5
    478c:	sub    edx,esi
    478e:	sub    r9d,eax
    4791:	add    ecx,r9d
    4794:	lea    eax,[rcx+rdx*1-0xafa6d]
    479b:	imul   ecx,DWORD PTR [rdi+0x4],0x3c
    479f:	imul   eax,eax,0x15180
    47a5:	movsxd rdx,eax
    47a8:	imul   eax,DWORD PTR [rdi+0x8],0xe10
    47af:	add    eax,ecx
    47b1:	add    eax,DWORD PTR [rdi]
    47b3:	cdqe   
    47b5:	add    rax,rdx
    47b8:	ret    
    47b9:	nop    DWORD PTR [rax+0x0]
    47c0:	add    esi,0x76c
    47c6:	jmp    473e <mktimegm+0x1e>
    47cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000047d0 <qemu_fls>:
    47d0:	xor    eax,eax
    47d2:	test   edi,edi
    47d4:	je     47e3 <qemu_fls+0x13>
    47d6:	bsr    edi,edi
    47d9:	mov    eax,0x20
    47de:	xor    edi,0x1f
    47e1:	sub    eax,edi
    47e3:	repz ret 
    47e5:	nop
    47e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000047f0 <qemu_iovec_init>:
    47f0:	push   rbp
    47f1:	push   rbx
    47f2:	mov    rbx,rdi
    47f5:	movsxd rdi,esi
    47f8:	sub    rsp,0x8
    47fc:	mov    rbp,rdi
    47ff:	shl    rdi,0x4
    4803:	call   49d0 <qemu_malloc>
    4808:	mov    DWORD PTR [rbx+0xc],ebp
    480b:	mov    QWORD PTR [rbx],rax
    480e:	mov    DWORD PTR [rbx+0x8],0x0
    4815:	mov    QWORD PTR [rbx+0x10],0x0
    481d:	add    rsp,0x8
    4821:	pop    rbx
    4822:	pop    rbp
    4823:	ret    
    4824:	xchg   ax,ax
    4826:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004830 <qemu_iovec_add>:
    4830:	push   rbp
    4831:	push   rbx
    4832:	mov    rbp,rsi
    4835:	mov    rbx,rdi
    4838:	sub    rsp,0x18
    483c:	movsxd rcx,DWORD PTR [rdi+0x8]
    4840:	mov    rax,QWORD PTR [rdi]
    4843:	cmp    ecx,DWORD PTR [rdi+0xc]
    4846:	je     4870 <qemu_iovec_add+0x40>
    4848:	shl    rcx,0x4
    484c:	mov    QWORD PTR [rax+rcx*1],rbp
    4850:	movsxd rax,DWORD PTR [rbx+0x8]
    4854:	shl    rax,0x4
    4858:	add    rax,QWORD PTR [rbx]
    485b:	mov    QWORD PTR [rax+0x8],rdx
    485f:	add    QWORD PTR [rbx+0x10],rdx
    4863:	add    DWORD PTR [rbx+0x8],0x1
    4867:	add    rsp,0x18
    486b:	pop    rbx
    486c:	pop    rbp
    486d:	ret    
    486e:	xchg   ax,ax
    4870:	lea    esi,[rcx+rcx*1+0x1]
    4874:	mov    QWORD PTR [rsp+0x8],rdx
    4879:	mov    DWORD PTR [rdi+0xc],esi
    487c:	movsxd rsi,esi
    487f:	mov    rdi,rax
    4882:	shl    rsi,0x4
    4886:	call   49f0 <qemu_realloc>
    488b:	movsxd rcx,DWORD PTR [rbx+0x8]
    488f:	mov    QWORD PTR [rbx],rax
    4892:	mov    rdx,QWORD PTR [rsp+0x8]
    4897:	jmp    4848 <qemu_iovec_add+0x18>
    4899:	nop    DWORD PTR [rax+0x0]

00000000000048a0 <qemu_iovec_destroy>:
    48a0:	mov    rdi,QWORD PTR [rdi]
    48a3:	jmp    49c0 <qemu_free>
    48a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000048b0 <qemu_iovec_reset>:
    48b0:	mov    DWORD PTR [rdi+0x8],0x0
    48b7:	mov    QWORD PTR [rdi+0x10],0x0
    48bf:	ret    

00000000000048c0 <qemu_iovec_to_buffer>:
    48c0:	mov    eax,DWORD PTR [rdi+0x8]
    48c3:	test   eax,eax
    48c5:	jle    4920 <qemu_iovec_to_buffer+0x60>
    48c7:	push   r12
    48c9:	push   rbp
    48ca:	mov    r12,rdi
    48cd:	push   rbx
    48ce:	mov    rax,QWORD PTR [rdi]
    48d1:	mov    rcx,rsi
    48d4:	xor    ebx,ebx
    48d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    48e0:	mov    rbp,rbx
    48e3:	mov    rdi,rcx
    48e6:	shl    rbp,0x4
    48ea:	add    rax,rbp
    48ed:	mov    rdx,QWORD PTR [rax+0x8]
    48f1:	mov    rsi,QWORD PTR [rax]
    48f4:	call   3190 <memcpy@plt>
    48f9:	mov    rcx,rax
    48fc:	mov    rax,QWORD PTR [r12]
    4900:	lea    edx,[rbx+0x1]
    4903:	add    rbx,0x1
    4907:	add    rcx,QWORD PTR [rax+rbp*1+0x8]
    490c:	cmp    DWORD PTR [r12+0x8],edx
    4911:	jg     48e0 <qemu_iovec_to_buffer+0x20>
    4913:	pop    rbx
    4914:	pop    rbp
    4915:	pop    r12
    4917:	ret    
    4918:	nop    DWORD PTR [rax+rax*1+0x0]
    4920:	repz ret 
    4922:	nop    DWORD PTR [rax+0x0]
    4926:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004930 <qemu_iovec_from_buffer>:
    4930:	mov    eax,DWORD PTR [rdi+0x8]
    4933:	test   eax,eax
    4935:	jle    49a0 <qemu_iovec_from_buffer+0x70>
    4937:	test   rdx,rdx
    493a:	push   r14
    493c:	push   r13
    493e:	push   r12
    4940:	push   rbp
    4941:	push   rbx
    4942:	mov    rbx,rdx
    4945:	je     4991 <qemu_iovec_from_buffer+0x61>
    4947:	mov    r14,rdi
    494a:	mov    r13,rsi
    494d:	xor    r12d,r12d
    4950:	mov    rax,r12
    4953:	mov    rbp,rbx
    4956:	mov    rsi,r13
    4959:	shl    rax,0x4
    495d:	add    rax,QWORD PTR [r14]
    4960:	cmp    QWORD PTR [rax+0x8],rbx
    4964:	mov    rdi,QWORD PTR [rax]
    4967:	cmovbe rbp,QWORD PTR [rax+0x8]
    496c:	mov    rdx,rbp
    496f:	add    r13,rbp
    4972:	call   3190 <memcpy@plt>
    4977:	lea    eax,[r12+0x1]
    497c:	cmp    DWORD PTR [r14+0x8],eax
    4980:	setg   dl
    4983:	sub    rbx,rbp
    4986:	setne  al
    4989:	add    r12,0x1
    498d:	test   dl,al
    498f:	jne    4950 <qemu_iovec_from_buffer+0x20>
    4991:	pop    rbx
    4992:	pop    rbp
    4993:	pop    r12
    4995:	pop    r13
    4997:	pop    r14
    4999:	ret    
    499a:	nop    WORD PTR [rax+rax*1+0x0]
    49a0:	repz ret 
    49a2:	nop    WORD PTR cs:[rax+rax*1+0x0]
    49ac:	nop    DWORD PTR [rax+0x0]

00000000000049b0 <get_mmap_addr>:
    49b0:	xor    eax,eax
    49b2:	ret    
    49b3:	nop    DWORD PTR [rax]
    49b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000049c0 <qemu_free>:
    49c0:	jmp    2e40 <free@plt>
    49c5:	nop
    49c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000049d0 <qemu_malloc>:
    49d0:	sub    rsp,0x8
    49d4:	call   3230 <malloc@plt>
    49d9:	test   rax,rax
    49dc:	je     49e3 <qemu_malloc+0x13>
    49de:	add    rsp,0x8
    49e2:	ret    
    49e3:	call   2e70 <abort@plt>
    49e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000049f0 <qemu_realloc>:
    49f0:	test   rsi,rsi
    49f3:	je     4a10 <qemu_realloc+0x20>
    49f5:	sub    rsp,0x8
    49f9:	call   3280 <realloc@plt>
    49fe:	test   rax,rax
    4a01:	je     4a17 <qemu_realloc+0x27>
    4a03:	add    rsp,0x8
    4a07:	ret    
    4a08:	nop    DWORD PTR [rax+rax*1+0x0]
    4a10:	xor    esi,esi
    4a12:	jmp    3280 <realloc@plt>
    4a17:	call   2e70 <abort@plt>
    4a1c:	nop    DWORD PTR [rax+0x0]

0000000000004a20 <qemu_mallocz>:
    4a20:	sub    rsp,0x8
    4a24:	mov    esi,0x1
    4a29:	call   30f0 <calloc@plt>
    4a2e:	test   rax,rax
    4a31:	je     4a38 <qemu_mallocz+0x18>
    4a33:	add    rsp,0x8
    4a37:	ret    
    4a38:	call   2e70 <abort@plt>
    4a3d:	nop    DWORD PTR [rax]

0000000000004a40 <qemu_strdup>:
    4a40:	push   rbp
    4a41:	push   rbx
    4a42:	mov    rbp,rdi
    4a45:	sub    rsp,0x8
    4a49:	call   2f60 <strlen@plt>
    4a4e:	lea    rbx,[rax+0x1]
    4a52:	mov    rdi,rbx
    4a55:	call   3230 <malloc@plt>
    4a5a:	test   rax,rax
    4a5d:	je     4a74 <qemu_strdup+0x34>
    4a5f:	mov    rdx,rbx
    4a62:	mov    rsi,rbp
    4a65:	mov    rdi,rax
    4a68:	call   3190 <memcpy@plt>
    4a6d:	add    rsp,0x8
    4a71:	pop    rbx
    4a72:	pop    rbp
    4a73:	ret    
    4a74:	call   2e70 <abort@plt>
    4a79:	nop    DWORD PTR [rax+0x0]

0000000000004a80 <qemu_strndup>:
    4a80:	push   rbp
    4a81:	push   rbx
    4a82:	mov    rdx,rsi
    4a85:	mov    rbx,rsi
    4a88:	xor    esi,esi
    4a8a:	mov    rbp,rdi
    4a8d:	sub    rsp,0x8
    4a91:	call   3090 <memchr@plt>
    4a96:	mov    rdx,rax
    4a99:	sub    rdx,rbp
    4a9c:	test   rax,rax
    4a9f:	cmovne rbx,rdx
    4aa3:	lea    rdi,[rbx+0x1]
    4aa7:	call   3230 <malloc@plt>
    4aac:	test   rax,rax
    4aaf:	je     4ac9 <qemu_strndup+0x49>
    4ab1:	mov    BYTE PTR [rax+rbx*1],0x0
    4ab5:	add    rsp,0x8
    4ab9:	mov    rdx,rbx
    4abc:	mov    rsi,rbp
    4abf:	mov    rdi,rax
    4ac2:	pop    rbx
    4ac3:	pop    rbp
    4ac4:	jmp    3190 <memcpy@plt>
    4ac9:	call   2e70 <abort@plt>
    4ace:	xchg   ax,ax

0000000000004ad0 <cow_is_allocated>:
    4ad0:	mov    rax,QWORD PTR [rdi+0x40]
    4ad4:	mov    r10,rcx
    4ad7:	mov    r9,QWORD PTR [rax+0x8]
    4adb:	test   r9,r9
    4ade:	je     4bc0 <cow_is_allocated+0xf0>
    4ae4:	test   edx,edx
    4ae6:	je     4bc0 <cow_is_allocated+0xf0>
    4aec:	lea    rax,[rsi+0x7]
    4af0:	test   rsi,rsi
    4af3:	mov    rdi,rsi
    4af6:	cmovns rax,rsi
    4afa:	sar    rdi,0x3f
    4afe:	shr    rdi,0x3d
    4b02:	sar    rax,0x3
    4b06:	movzx  eax,BYTE PTR [r9+rax*1]
    4b0b:	lea    rcx,[rsi+rdi*1]
    4b0f:	mov    DWORD PTR [r10],0x1
    4b16:	and    ecx,0x7
    4b19:	sub    rcx,rdi
    4b1c:	sar    eax,cl
    4b1e:	and    eax,0x1
    4b21:	cmp    edx,0x1
    4b24:	jle    4bb4 <cow_is_allocated+0xe4>
    4b2a:	lea    rdi,[rsi+0x8]
    4b2e:	mov    rcx,rsi
    4b31:	add    rcx,0x1
    4b35:	cmovns rdi,rcx
    4b39:	mov    r8,rcx
    4b3c:	sar    rdi,0x3
    4b40:	sar    r8,0x3f
    4b44:	shr    r8,0x3d
    4b48:	movzx  edi,BYTE PTR [r9+rdi*1]
    4b4d:	add    rcx,r8
    4b50:	and    ecx,0x7
    4b53:	sub    rcx,r8
    4b56:	sar    edi,cl
    4b58:	and    edi,0x1
    4b5b:	cmp    eax,edi
    4b5d:	jne    4bb4 <cow_is_allocated+0xe4>
    4b5f:	add    rsi,0x2
    4b63:	mov    r8d,0x2
    4b69:	jmp    4bac <cow_is_allocated+0xdc>
    4b6b:	nop    DWORD PTR [rax+rax*1+0x0]
    4b70:	mov    rcx,rsi
    4b73:	add    r8d,0x1
    4b77:	add    rsi,0x1
    4b7b:	lea    rdi,[rcx+0x7]
    4b7f:	test   rcx,rcx
    4b82:	mov    r11,rcx
    4b85:	cmovns rdi,rcx
    4b89:	sar    r11,0x3f
    4b8d:	sar    rdi,0x3
    4b91:	shr    r11,0x3d
    4b95:	movzx  edi,BYTE PTR [r9+rdi*1]
    4b9a:	add    rcx,r11
    4b9d:	and    ecx,0x7
    4ba0:	sub    rcx,r11
    4ba3:	sar    edi,cl
    4ba5:	and    edi,0x1
    4ba8:	cmp    edi,eax
    4baa:	jne    4bb4 <cow_is_allocated+0xe4>
    4bac:	cmp    r8d,edx
    4baf:	mov    DWORD PTR [r10],r8d
    4bb2:	jne    4b70 <cow_is_allocated+0xa0>
    4bb4:	repz ret 
    4bb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    4bc0:	mov    DWORD PTR [r10],edx
    4bc3:	xor    eax,eax
    4bc5:	ret    
    4bc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004bd0 <cow_close>:
    4bd0:	push   rbx
    4bd1:	mov    rbx,QWORD PTR [rdi+0x40]
    4bd5:	movsxd rsi,DWORD PTR [rbx+0x18]
    4bd9:	mov    rdi,QWORD PTR [rbx+0x10]
    4bdd:	call   3290 <munmap@plt>
    4be2:	mov    edi,DWORD PTR [rbx]
    4be4:	pop    rbx
    4be5:	jmp    3040 <close@plt>
    4bea:	nop    WORD PTR [rax+rax*1+0x0]

0000000000004bf0 <cow_write>:
    4bf0:	push   r14
    4bf2:	push   r13
    4bf4:	mov    r14,rsi
    4bf7:	push   r12
    4bf9:	push   rbp
    4bfa:	shl    rsi,0x9
    4bfe:	push   rbx
    4bff:	mov    rbx,QWORD PTR [rdi+0x40]
    4c03:	mov    ebp,ecx
    4c05:	mov    r13,rdx
    4c08:	xor    edx,edx
    4c0a:	mov    r12d,ebp
    4c0d:	shl    r12d,0x9
    4c11:	add    rsi,QWORD PTR [rbx+0x20]
    4c15:	mov    edi,DWORD PTR [rbx]
    4c17:	call   33f0 <lseek64@plt>
    4c1c:	mov    edi,DWORD PTR [rbx]
    4c1e:	movsxd rdx,r12d
    4c21:	mov    rsi,r13
    4c24:	call   2f10 <write@plt>
    4c29:	cmp    r12d,eax
    4c2c:	jne    4c8a <cow_write+0x9a>
    4c2e:	test   ebp,ebp
    4c30:	jle    4c7f <cow_write+0x8f>
    4c32:	lea    eax,[rbp-0x1]
    4c35:	mov    rsi,r14
    4c38:	mov    edi,0x1
    4c3d:	lea    r8,[r14+rax*1+0x1]
    4c42:	nop    WORD PTR [rax+rax*1+0x0]
    4c48:	lea    rax,[rsi+0x7]
    4c4c:	test   rsi,rsi
    4c4f:	mov    rdx,rsi
    4c52:	cmovns rax,rsi
    4c56:	sar    rdx,0x3f
    4c5a:	shr    rdx,0x3d
    4c5e:	sar    rax,0x3
    4c62:	add    rax,QWORD PTR [rbx+0x8]
    4c66:	lea    rcx,[rsi+rdx*1]
    4c6a:	add    rsi,0x1
    4c6e:	and    ecx,0x7
    4c71:	sub    rcx,rdx
    4c74:	mov    edx,edi
    4c76:	shl    edx,cl
    4c78:	or     BYTE PTR [rax],dl
    4c7a:	cmp    r8,rsi
    4c7d:	jne    4c48 <cow_write+0x58>
    4c7f:	xor    eax,eax
    4c81:	pop    rbx
    4c82:	pop    rbp
    4c83:	pop    r12
    4c85:	pop    r13
    4c87:	pop    r14
    4c89:	ret    
    4c8a:	mov    eax,0xffffffff
    4c8f:	jmp    4c81 <cow_write+0x91>
    4c91:	nop    DWORD PTR [rax+rax*1+0x0]
    4c96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004ca0 <cow_read>:
    4ca0:	push   r15
    4ca2:	push   r14
    4ca4:	push   r13
    4ca6:	push   r12
    4ca8:	push   rbp
    4ca9:	push   rbx
    4caa:	sub    rsp,0x18
    4cae:	test   ecx,ecx
    4cb0:	mov    rbp,QWORD PTR [rdi+0x40]
    4cb4:	jle    4e68 <cow_read+0x1c8>
    4cba:	mov    r12,rdi
    4cbd:	mov    r14,rsi
    4cc0:	mov    r15,rdx
    4cc3:	mov    r13d,ecx
    4cc6:	jmp    4d13 <cow_read+0x73>
    4cc8:	nop    DWORD PTR [rax+rax*1+0x0]
    4cd0:	mov    rdi,QWORD PTR [r12+0x850]
    4cd8:	mov    ecx,ebx
    4cda:	test   rdi,rdi
    4cdd:	je     4e40 <cow_read+0x1a0>
    4ce3:	mov    rdx,r15
    4ce6:	mov    rsi,r14
    4ce9:	call   171e0 <bdrv_read>
    4cee:	test   eax,eax
    4cf0:	js     4e25 <cow_read+0x185>
    4cf6:	mov    ecx,ebx
    4cf8:	shl    ecx,0x9
    4cfb:	movsxd rcx,ecx
    4cfe:	sub    r13d,ebx
    4d01:	movsxd rbx,ebx
    4d04:	add    r15,rcx
    4d07:	add    r14,rbx
    4d0a:	test   r13d,r13d
    4d0d:	jle    4e68 <cow_read+0x1c8>
    4d13:	mov    rsi,QWORD PTR [rbp+0x8]
    4d17:	mov    ebx,r13d
    4d1a:	test   rsi,rsi
    4d1d:	je     4cd0 <cow_read+0x30>
    4d1f:	lea    rax,[r14+0x7]
    4d23:	test   r14,r14
    4d26:	cmovns rax,r14
    4d2a:	sar    rax,0x3
    4d2e:	movzx  r8d,BYTE PTR [rsi+rax*1]
    4d33:	mov    rax,r14
    4d36:	sar    rax,0x3f
    4d3a:	shr    rax,0x3d
    4d3e:	lea    rcx,[r14+rax*1]
    4d42:	and    ecx,0x7
    4d45:	sub    rcx,rax
    4d48:	sar    r8d,cl
    4d4b:	and    r8d,0x1
    4d4f:	cmp    r13d,0x1
    4d53:	je     4e80 <cow_read+0x1e0>
    4d59:	lea    rdx,[r14+0x8]
    4d5d:	mov    rax,r14
    4d60:	add    rax,0x1
    4d64:	cmovns rdx,rax
    4d68:	sar    rdx,0x3
    4d6c:	movzx  edi,BYTE PTR [rsi+rdx*1]
    4d70:	cqo    
    4d72:	shr    rdx,0x3d
    4d76:	lea    rcx,[rax+rdx*1]
    4d7a:	and    ecx,0x7
    4d7d:	sub    rcx,rdx
    4d80:	sar    edi,cl
    4d82:	and    edi,0x1
    4d85:	cmp    edi,r8d
    4d88:	jne    4e80 <cow_read+0x1e0>
    4d8e:	lea    rdx,[r14+0x2]
    4d92:	mov    ebx,0x1
    4d97:	jmp    4dd7 <cow_read+0x137>
    4d99:	nop    DWORD PTR [rax+0x0]
    4da0:	mov    rcx,rdx
    4da3:	add    rdx,0x1
    4da7:	lea    rax,[rcx+0x7]
    4dab:	test   rcx,rcx
    4dae:	mov    r9,rcx
    4db1:	cmovns rax,rcx
    4db5:	sar    r9,0x3f
    4db9:	sar    rax,0x3
    4dbd:	shr    r9,0x3d
    4dc1:	movzx  eax,BYTE PTR [rsi+rax*1]
    4dc5:	add    rcx,r9
    4dc8:	and    ecx,0x7
    4dcb:	sub    rcx,r9
    4dce:	sar    eax,cl
    4dd0:	and    eax,0x1
    4dd3:	cmp    edi,eax
    4dd5:	jne    4ddf <cow_read+0x13f>
    4dd7:	add    ebx,0x1
    4dda:	cmp    ebx,r13d
    4ddd:	jne    4da0 <cow_read+0x100>
    4ddf:	test   r8d,r8d
    4de2:	je     4cd0 <cow_read+0x30>
    4de8:	mov    rsi,r14
    4deb:	mov    edi,DWORD PTR [rbp+0x0]
    4dee:	xor    edx,edx
    4df0:	shl    rsi,0x9
    4df4:	add    rsi,QWORD PTR [rbp+0x20]
    4df8:	call   33f0 <lseek64@plt>
    4dfd:	mov    ecx,ebx
    4dff:	mov    edi,DWORD PTR [rbp+0x0]
    4e02:	mov    rsi,r15
    4e05:	shl    ecx,0x9
    4e08:	movsxd rcx,ecx
    4e0b:	mov    rdx,rcx
    4e0e:	mov    QWORD PTR [rsp+0x8],rcx
    4e13:	call   4300 <qemu_read_ok>
    4e18:	test   eax,eax
    4e1a:	mov    rcx,QWORD PTR [rsp+0x8]
    4e1f:	jns    4cfe <cow_read+0x5e>
    4e25:	add    rsp,0x18
    4e29:	mov    eax,0xffffffff
    4e2e:	pop    rbx
    4e2f:	pop    rbp
    4e30:	pop    r12
    4e32:	pop    r13
    4e34:	pop    r14
    4e36:	pop    r15
    4e38:	ret    
    4e39:	nop    DWORD PTR [rax+0x0]
    4e40:	shl    ecx,0x9
    4e43:	xor    esi,esi
    4e45:	mov    rdi,r15
    4e48:	movsxd rcx,ecx
    4e4b:	mov    rdx,rcx
    4e4e:	mov    QWORD PTR [rsp+0x8],rcx
    4e53:	call   3020 <memset@plt>
    4e58:	mov    rcx,QWORD PTR [rsp+0x8]
    4e5d:	jmp    4cfe <cow_read+0x5e>
    4e62:	nop    WORD PTR [rax+rax*1+0x0]
    4e68:	add    rsp,0x18
    4e6c:	xor    eax,eax
    4e6e:	pop    rbx
    4e6f:	pop    rbp
    4e70:	pop    r12
    4e72:	pop    r13
    4e74:	pop    r14
    4e76:	pop    r15
    4e78:	ret    
    4e79:	nop    DWORD PTR [rax+0x0]
    4e80:	test   r8d,r8d
    4e83:	mov    ebx,0x1
    4e88:	je     4cd0 <cow_read+0x30>
    4e8e:	jmp    4de8 <cow_read+0x148>
    4e93:	nop    DWORD PTR [rax]
    4e96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000004ea0 <cow_open>:
    4ea0:	push   r13
    4ea2:	push   r12
    4ea4:	mov    r13,rsi
    4ea7:	push   rbp
    4ea8:	push   rbx
    4ea9:	mov    esi,0x2
    4eae:	mov    rbx,rdi
    4eb1:	sub    rsp,0x438
    4eb8:	mov    rbp,QWORD PTR [rdi+0x40]
    4ebc:	mov    rdi,r13
    4ebf:	mov    rax,QWORD PTR fs:0x28
    4ec8:	mov    QWORD PTR [rsp+0x428],rax
    4ed0:	xor    eax,eax
    4ed2:	call   32e0 <open64@plt>
    4ed7:	test   eax,eax
    4ed9:	mov    r12d,eax
    4edc:	js     4fe0 <cow_open+0x140>
    4ee2:	mov    r13,rsp
    4ee5:	mov    DWORD PTR [rbp+0x0],r12d
    4ee9:	mov    edx,0x420
    4eee:	mov    rsi,r13
    4ef1:	mov    edi,r12d
    4ef4:	call   4300 <qemu_read_ok>
    4ef9:	test   eax,eax
    4efb:	js     5000 <cow_open+0x160>
    4f01:	cmp    DWORD PTR [rsp],0x4d4f4f4f
    4f08:	jne    5000 <cow_open+0x160>
    4f0e:	cmp    DWORD PTR [rsp+0x4],0x2000000
    4f16:	jne    5000 <cow_open+0x160>
    4f1c:	mov    rax,QWORD PTR [rsp+0x410]
    4f24:	lea    rdx,[r13+0x8]
    4f28:	lea    rdi,[rbx+0x448]
    4f2f:	mov    esi,0x400
    4f34:	bswap  rax
    4f37:	mov    rcx,rax
    4f3a:	lea    rax,[rax+0x1ff]
    4f41:	test   rcx,rcx
    4f44:	cmovns rax,rcx
    4f48:	sar    rax,0x9
    4f4c:	mov    QWORD PTR [rbx],rax
    4f4f:	call   45a0 <pstrcpy>
    4f54:	mov    rbx,QWORD PTR [rbx]
    4f57:	mov    r13d,DWORD PTR [rbp+0x0]
    4f5b:	add    rbx,0x7
    4f5f:	sar    rbx,0x3
    4f63:	add    ebx,0x420
    4f69:	mov    DWORD PTR [rbp+0x18],ebx
    4f6c:	movsxd rbx,ebx
    4f6f:	mov    rdi,rbx
    4f72:	call   49b0 <get_mmap_addr>
    4f77:	xor    r9d,r9d
    4f7a:	mov    r8d,r13d
    4f7d:	mov    ecx,0x1
    4f82:	mov    edx,0x3
    4f87:	mov    rsi,rbx
    4f8a:	mov    rdi,rax
    4f8d:	call   3200 <mmap64@plt>
    4f92:	cmp    rax,0xffffffffffffffff
    4f96:	mov    QWORD PTR [rbp+0x10],rax
    4f9a:	je     5000 <cow_open+0x160>
    4f9c:	add    rax,0x420
    4fa2:	mov    QWORD PTR [rbp+0x8],rax
    4fa6:	mov    eax,DWORD PTR [rbp+0x18]
    4fa9:	add    eax,0x1ff
    4fae:	and    eax,0xfffffe00
    4fb3:	cdqe   
    4fb5:	mov    QWORD PTR [rbp+0x20],rax
    4fb9:	xor    eax,eax
    4fbb:	mov    rcx,QWORD PTR [rsp+0x428]
    4fc3:	xor    rcx,QWORD PTR fs:0x28
    4fcc:	jne    500f <cow_open+0x16f>
    4fce:	add    rsp,0x438
    4fd5:	pop    rbx
    4fd6:	pop    rbp
    4fd7:	pop    r12
    4fd9:	pop    r13
    4fdb:	ret    
    4fdc:	nop    DWORD PTR [rax+0x0]
    4fe0:	xor    esi,esi
    4fe2:	xor    eax,eax
    4fe4:	mov    rdi,r13
    4fe7:	call   32e0 <open64@plt>
    4fec:	test   eax,eax
    4fee:	mov    r12d,eax
    4ff1:	jns    4ee2 <cow_open+0x42>
    4ff7:	mov    eax,0xffffffff
    4ffc:	jmp    4fbb <cow_open+0x11b>
    4ffe:	xchg   ax,ax
    5000:	mov    edi,r12d
    5003:	call   3040 <close@plt>
    5008:	mov    eax,0xffffffff
    500d:	jmp    4fbb <cow_open+0x11b>
    500f:	call   2f70 <__stack_chk_fail@plt>
    5014:	xchg   ax,ax
    5016:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000005020 <cow_flush>:
    5020:	sub    rsp,0x8
    5024:	mov    rax,QWORD PTR [rdi+0x40]
    5028:	mov    edi,DWORD PTR [rax]
    502a:	call   3330 <fsync@plt>
    502f:	test   eax,eax
    5031:	je     503a <cow_flush+0x1a>
    5033:	call   2e80 <__errno_location@plt>
    5038:	mov    eax,DWORD PTR [rax]
    503a:	add    rsp,0x8
    503e:	ret    
    503f:	nop

0000000000005040 <cow_probe>:
    5040:	xor    eax,eax
    5042:	cmp    esi,0x41f
    5048:	ja     5050 <cow_probe+0x10>
    504a:	repz ret 
    504c:	nop    DWORD PTR [rax+0x0]
    5050:	cmp    DWORD PTR [rdi],0x4d4f4f4f
    5056:	jne    504a <cow_probe+0xa>
    5058:	cmp    DWORD PTR [rdi+0x4],0x2000000
    505f:	mov    edx,0x64
    5064:	cmove  eax,edx
    5067:	ret    
    5068:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005070 <cow_create>:
    5070:	push   r14
    5072:	push   r13
    5074:	push   r12
    5076:	push   rbp
    5077:	push   rbx
    5078:	sub    rsp,0x4c0
    507f:	mov    rax,QWORD PTR fs:0x28
    5088:	mov    QWORD PTR [rsp+0x4b8],rax
    5090:	xor    eax,eax
    5092:	test   ecx,ecx
    5094:	jne    51c0 <cow_create+0x150>
    509a:	mov    rbx,rsi
    509d:	mov    r13,rdx
    50a0:	mov    esi,0x241
    50a5:	mov    edx,0x1a4
    50aa:	call   32e0 <open64@plt>
    50af:	test   eax,eax
    50b1:	mov    ebp,eax
    50b3:	js     51d0 <cow_create+0x160>
    50b9:	lea    r12,[rsp+0x90]
    50c1:	xor    eax,eax
    50c3:	mov    ecx,0x84
    50c8:	test   r13,r13
    50cb:	mov    rdi,r12
    50ce:	rep stos QWORD PTR es:[rdi],rax
    50d1:	movabs rax,0x20000004d4f4f4f
    50db:	mov    QWORD PTR [rsp+0x90],rax
    50e3:	je     510e <cow_create+0x9e>
    50e5:	xor    esi,esi
    50e7:	xor    eax,eax
    50e9:	mov    rdi,r13
    50ec:	call   32e0 <open64@plt>
    50f1:	test   eax,eax
    50f3:	mov    r14d,eax
    50f6:	jns    5180 <cow_create+0x110>
    50fc:	lea    rdi,[r12+0x8]
    5101:	mov    rdx,r13
    5104:	mov    esi,0x400
    5109:	call   45a0 <pstrcpy>
    510e:	mov    rax,rbx
    5111:	mov    edx,0x420
    5116:	mov    rsi,r12
    5119:	shl    rax,0x9
    511d:	mov    edi,ebp
    511f:	mov    DWORD PTR [rsp+0x4a8],0x20000
    512a:	bswap  rax
    512d:	mov    QWORD PTR [rsp+0x4a0],rax
    5135:	call   2f10 <write@plt>
    513a:	lea    rsi,[rbx+0x7]
    513e:	mov    edi,ebp
    5140:	mov    rbx,rsi
    5143:	sar    rbx,0x3
    5147:	lea    rsi,[rbx+0x420]
    514e:	call   32a0 <ftruncate64@plt>
    5153:	mov    edi,ebp
    5155:	call   3040 <close@plt>
    515a:	xor    eax,eax
    515c:	mov    rdx,QWORD PTR [rsp+0x4b8]
    5164:	xor    rdx,QWORD PTR fs:0x28
    516d:	jne    51d7 <cow_create+0x167>
    516f:	add    rsp,0x4c0
    5176:	pop    rbx
    5177:	pop    rbp
    5178:	pop    r12
    517a:	pop    r13
    517c:	pop    r14
    517e:	ret    
    517f:	nop
    5180:	mov    edi,0x1
    5185:	mov    rdx,rsp
    5188:	mov    esi,eax
    518a:	call   3100 <__fxstat64@plt>
    518f:	test   eax,eax
    5191:	mov    edi,r14d
    5194:	je     51a0 <cow_create+0x130>
    5196:	call   3040 <close@plt>
    519b:	jmp    50fc <cow_create+0x8c>
    51a0:	call   3040 <close@plt>
    51a5:	mov    rax,QWORD PTR [rsp+0x58]
    51aa:	bswap  eax
    51ac:	mov    DWORD PTR [rsp+0x498],eax
    51b3:	jmp    50fc <cow_create+0x8c>
    51b8:	nop    DWORD PTR [rax+rax*1+0x0]
    51c0:	mov    eax,0xffffffa1
    51c5:	jmp    515c <cow_create+0xec>
    51c7:	nop    WORD PTR [rax+rax*1+0x0]
    51d0:	mov    eax,0xffffffff
    51d5:	jmp    515c <cow_create+0xec>
    51d7:	call   2f70 <__stack_chk_fail@plt>
    51dc:	nop    DWORD PTR [rax+0x0]

00000000000051e0 <qcow_get_info>:
    51e0:	mov    rax,QWORD PTR [rdi+0x40]
    51e4:	mov    eax,DWORD PTR [rax+0xc]
    51e7:	mov    DWORD PTR [rsi],eax
    51e9:	xor    eax,eax
    51eb:	ret    
    51ec:	nop    DWORD PTR [rax+0x0]

00000000000051f0 <qcow_make_empty>:
    51f0:	push   r12
    51f2:	push   rbp
    51f3:	xor    esi,esi
    51f5:	push   rbx
    51f6:	mov    rbx,QWORD PTR [rdi+0x40]
    51fa:	mov    eax,DWORD PTR [rbx+0x1c]
    51fd:	mov    rdi,QWORD PTR [rbx+0x30]
    5201:	lea    r12d,[rax*8+0x0]
    5209:	mov    rdx,r12
    520c:	call   3020 <memset@plt>
    5211:	mov    rdx,QWORD PTR [rbx+0x30]
    5215:	mov    rsi,QWORD PTR [rbx+0x28]
    5219:	mov    ecx,r12d
    521c:	mov    rdi,QWORD PTR [rbx]
    521f:	call   180f0 <bdrv_pwrite>
    5224:	test   eax,eax
    5226:	js     52b0 <qcow_make_empty+0xc0>
    522c:	mov    rsi,QWORD PTR [rbx+0x28]
    5230:	mov    rdi,QWORD PTR [rbx]
    5233:	add    rsi,r12
    5236:	call   18170 <bdrv_truncate>
    523b:	test   eax,eax
    523d:	js     52a4 <qcow_make_empty+0xb4>
    523f:	mov    edx,DWORD PTR [rbx+0x18]
    5242:	mov    rdi,QWORD PTR [rbx+0x38]
    5246:	xor    esi,esi
    5248:	shl    edx,0x4
    524b:	movsxd rdx,edx
    524e:	shl    rdx,0x3
    5252:	call   3020 <memset@plt>
    5257:	lea    rdi,[rbx+0x48]
    525b:	mov    eax,ebx
    525d:	mov    QWORD PTR [rbx+0x40],0x0
    5265:	pxor   xmm0,xmm0
    5269:	mov    QWORD PTR [rbx+0xb8],0x0
    5274:	and    rdi,0xfffffffffffffff8
    5278:	sub    eax,edi
    527a:	lea    ecx,[rax+0xc0]
    5280:	xor    eax,eax
    5282:	shr    ecx,0x3
    5285:	rep stos QWORD PTR es:[rdi],rax
    5288:	movups XMMWORD PTR [rbx+0xc0],xmm0
    528f:	movups XMMWORD PTR [rbx+0xd0],xmm0
    5296:	movups XMMWORD PTR [rbx+0xe0],xmm0
    529d:	movups XMMWORD PTR [rbx+0xf0],xmm0
    52a4:	pop    rbx
    52a5:	pop    rbp
    52a6:	pop    r12
    52a8:	ret    
    52a9:	nop    DWORD PTR [rax+0x0]
    52b0:	mov    eax,0xffffffff
    52b5:	jmp    52a4 <qcow_make_empty+0xb4>
    52b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000052c0 <qcow_aio_flush>:
    52c0:	mov    rax,QWORD PTR [rdi+0x40]
    52c4:	mov    rdi,QWORD PTR [rax]
    52c7:	jmp    19530 <bdrv_aio_flush>
    52cc:	nop    DWORD PTR [rax+0x0]

00000000000052d0 <qcow_aio_cancel>:
    52d0:	push   rbx
    52d1:	mov    rbx,rdi
    52d4:	mov    rdi,QWORD PTR [rdi+0x50]
    52d8:	test   rdi,rdi
    52db:	je     52e2 <qcow_aio_cancel+0x12>
    52dd:	call   19520 <bdrv_aio_cancel>
    52e2:	mov    rdi,rbx
    52e5:	pop    rbx
    52e6:	jmp    19850 <qemu_aio_release>
    52eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000052f0 <qcow_flush>:
    52f0:	mov    rax,QWORD PTR [rdi+0x40]
    52f4:	mov    rdi,QWORD PTR [rax]
    52f7:	jmp    18700 <bdrv_flush>
    52fc:	nop    DWORD PTR [rax+0x0]

0000000000005300 <qcow_close>:
    5300:	push   rbx
    5301:	mov    rbx,QWORD PTR [rdi+0x40]
    5305:	mov    rdi,QWORD PTR [rbx+0x30]
    5309:	call   49c0 <qemu_free>
    530e:	mov    rdi,QWORD PTR [rbx+0x38]
    5312:	call   49c0 <qemu_free>
    5317:	mov    rdi,QWORD PTR [rbx+0x100]
    531e:	call   49c0 <qemu_free>
    5323:	mov    rdi,QWORD PTR [rbx+0x108]
    532a:	call   49c0 <qemu_free>
    532f:	mov    rdi,QWORD PTR [rbx]
    5332:	pop    rbx
    5333:	jmp    170f0 <bdrv_delete>
    5338:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000005340 <qcow_open>:
    5340:	push   r14
    5342:	push   r13
    5344:	push   r12
    5346:	push   rbp
    5347:	mov    rbp,rdi
    534a:	push   rbx
    534b:	sub    rsp,0x50
    534f:	mov    rbx,QWORD PTR [rdi+0x40]
    5353:	mov    rax,QWORD PTR fs:0x28
    535c:	mov    QWORD PTR [rsp+0x48],rax
    5361:	xor    eax,eax
    5363:	mov    rdi,rbx
    5366:	call   18060 <bdrv_file_open>
    536b:	test   eax,eax
    536d:	mov    r12d,eax
    5370:	js     55cf <qcow_open+0x28f>
    5376:	mov    rdi,QWORD PTR [rbx]
    5379:	lea    rdx,[rsp+0x10]
    537e:	xor    esi,esi
    5380:	mov    ecx,0x30
    5385:	call   17b00 <bdrv_pread>
    538a:	cmp    eax,0x30
    538d:	jne    56e8 <qcow_open+0x3a8>
    5393:	mov    eax,DWORD PTR [rsp+0x10]
    5397:	mov    rcx,QWORD PTR [rsp+0x38]
    539c:	mov    rdx,QWORD PTR [rsp+0x28]
    53a1:	bswap  eax
    53a3:	bswap  rcx
    53a6:	mov    DWORD PTR [rsp+0x10],eax
    53aa:	mov    eax,DWORD PTR [rsp+0x14]
    53ae:	bswap  rdx
    53b1:	mov    QWORD PTR [rsp+0x38],rcx
    53b6:	movabs rcx,0x1514649fb
    53c0:	mov    QWORD PTR [rsp+0x28],rdx
    53c5:	bswap  eax
    53c7:	mov    DWORD PTR [rsp+0x14],eax
    53cb:	mov    rax,QWORD PTR [rsp+0x18]
    53d0:	cmp    QWORD PTR [rsp+0x10],rcx
    53d5:	bswap  rax
    53d8:	mov    QWORD PTR [rsp+0x18],rax
    53dd:	mov    eax,DWORD PTR [rsp+0x20]
    53e1:	bswap  eax
    53e3:	mov    DWORD PTR [rsp+0x20],eax
    53e7:	mov    eax,DWORD PTR [rsp+0x24]
    53eb:	bswap  eax
    53ed:	mov    DWORD PTR [rsp+0x24],eax
    53f1:	mov    eax,DWORD PTR [rsp+0x34]
    53f5:	bswap  eax
    53f7:	mov    DWORD PTR [rsp+0x34],eax
    53fb:	jne    56e8 <qcow_open+0x3a8>
    5401:	cmp    rdx,0x1
    5405:	jbe    56e8 <qcow_open+0x3a8>
    540b:	movzx  ecx,BYTE PTR [rsp+0x30]
    5410:	cmp    cl,0x8
    5413:	jbe    56e8 <qcow_open+0x3a8>
    5419:	cmp    eax,0x1
    541c:	ja     56e8 <qcow_open+0x3a8>
    5422:	test   eax,eax
    5424:	mov    DWORD PTR [rbx+0x11c],eax
    542a:	je     5433 <qcow_open+0xf3>
    542c:	mov    DWORD PTR [rbp+0x14],0x1
    5433:	mov    eax,0x1
    5438:	movzx  edx,cl
    543b:	mov    edi,eax
    543d:	mov    DWORD PTR [rbx+0x8],edx
    5440:	shl    edi,cl
    5442:	lea    ecx,[rdx-0x9]
    5445:	mov    edx,eax
    5447:	mov    DWORD PTR [rbx+0xc],edi
    544a:	shl    edx,cl
    544c:	mov    DWORD PTR [rbx+0x10],edx
    544f:	movzx  ecx,BYTE PTR [rsp+0x31]
    5454:	mov    edx,0x1
    5459:	mov    rdi,rdx
    545c:	shl    eax,cl
    545e:	mov    DWORD PTR [rbx+0x14],ecx
    5461:	mov    ecx,0x3f
    5466:	mov    DWORD PTR [rbx+0x18],eax
    5469:	mov    rsi,QWORD PTR [rsp+0x28]
    546e:	mov    rax,rsi
    5471:	shr    rax,0x9
    5475:	mov    QWORD PTR [rbp+0x0],rax
    5479:	mov    eax,DWORD PTR [rbx+0x8]
    547c:	sub    ecx,eax
    547e:	add    eax,DWORD PTR [rbx+0x14]
    5481:	shl    rdi,cl
    5484:	mov    rcx,rdi
    5487:	sub    rcx,0x1
    548b:	mov    QWORD PTR [rbx+0x20],rcx
    548f:	mov    ecx,eax
    5491:	shl    rdx,cl
    5494:	lea    rdi,[rsi+rdx*1-0x1]
    5499:	shr    rdi,cl
    549c:	mov    DWORD PTR [rbx+0x1c],edi
    549f:	mov    rax,QWORD PTR [rsp+0x38]
    54a4:	movsxd rdi,edi
    54a7:	shl    rdi,0x3
    54ab:	mov    QWORD PTR [rbx+0x28],rax
    54af:	call   49d0 <qemu_malloc>
    54b4:	test   rax,rax
    54b7:	mov    QWORD PTR [rbx+0x30],rax
    54bb:	je     56ec <qcow_open+0x3ac>
    54c1:	mov    edi,DWORD PTR [rbx+0x1c]
    54c4:	mov    rsi,QWORD PTR [rbx+0x28]
    54c8:	mov    rdx,rax
    54cb:	lea    ecx,[rdi*8+0x0]
    54d2:	mov    rdi,QWORD PTR [rbx]
    54d5:	call   17b00 <bdrv_pread>
    54da:	movsxd r12,eax
    54dd:	movsxd rax,DWORD PTR [rbx+0x1c]
    54e1:	mov    r13,r12
    54e4:	mov    rsi,rax
    54e7:	shl    rax,0x3
    54eb:	cmp    r12,rax
    54ee:	jne    56e8 <qcow_open+0x3a8>
    54f4:	cmp    QWORD PTR [rsp+0x18],0x0
    54fa:	jne    5508 <qcow_open+0x1c8>
    54fc:	test   WORD PTR [rbx+0x28],0xfff
    5502:	je     55f8 <qcow_open+0x2b8>
    5508:	xor    ecx,ecx
    550a:	xor    edx,edx
    550c:	test   esi,esi
    550e:	jle    552c <qcow_open+0x1ec>
    5510:	mov    rsi,QWORD PTR [rbx+0x30]
    5514:	add    edx,0x1
    5517:	add    rsi,rcx
    551a:	add    rcx,0x8
    551e:	mov    rax,QWORD PTR [rsi]
    5521:	bswap  rax
    5524:	mov    QWORD PTR [rsi],rax
    5527:	cmp    DWORD PTR [rbx+0x1c],edx
    552a:	jg     5510 <qcow_open+0x1d0>
    552c:	mov    edi,DWORD PTR [rbx+0x18]
    552f:	shl    edi,0x4
    5532:	movsxd rdi,edi
    5535:	shl    rdi,0x3
    5539:	call   49d0 <qemu_malloc>
    553e:	test   rax,rax
    5541:	mov    QWORD PTR [rbx+0x38],rax
    5545:	je     56e8 <qcow_open+0x3a8>
    554b:	movsxd rdi,DWORD PTR [rbx+0xc]
    554f:	call   49d0 <qemu_malloc>
    5554:	test   rax,rax
    5557:	mov    QWORD PTR [rbx+0x100],rax
    555e:	je     56e8 <qcow_open+0x3a8>
    5564:	movsxd rdi,DWORD PTR [rbx+0xc]
    5568:	call   49d0 <qemu_malloc>
    556d:	test   rax,rax
    5570:	mov    QWORD PTR [rbx+0x108],rax
    5577:	je     56e8 <qcow_open+0x3a8>
    557d:	mov    rsi,QWORD PTR [rsp+0x18]
    5582:	xor    r12d,r12d
    5585:	mov    QWORD PTR [rbx+0x110],0xffffffffffffffff
    5590:	test   rsi,rsi
    5593:	je     55cf <qcow_open+0x28f>
    5595:	mov    r13d,DWORD PTR [rsp+0x20]
    559a:	mov    eax,0x3ff
    559f:	mov    rdi,QWORD PTR [rbx]
    55a2:	lea    rdx,[rbp+0x448]
    55a9:	cmp    r13d,0x3ff
    55b0:	cmovg  r13d,eax
    55b4:	mov    ecx,r13d
    55b7:	call   17b00 <bdrv_pread>
    55bc:	cmp    eax,r13d
    55bf:	jne    56e8 <qcow_open+0x3a8>
    55c5:	cdqe   
    55c7:	mov    BYTE PTR [rbp+rax*1+0x448],0x0
    55cf:	mov    rdi,QWORD PTR [rsp+0x48]
    55d4:	xor    rdi,QWORD PTR fs:0x28
    55dd:	mov    eax,r12d
    55e0:	jne    5728 <qcow_open+0x3e8>
    55e6:	add    rsp,0x50
    55ea:	pop    rbx
    55eb:	pop    rbp
    55ec:	pop    r12
    55ee:	pop    r13
    55f0:	pop    r14
    55f2:	ret    
    55f3:	nop    DWORD PTR [rax+rax*1+0x0]
    55f8:	mov    rdi,QWORD PTR [rbx]
    55fb:	mov    r14,rsp
    55fe:	mov    ecx,0x10
    5603:	mov    rdx,r14
    5606:	mov    esi,0x30
    560b:	call   17b00 <bdrv_pread>
    5610:	cmp    eax,0x10
    5613:	je     561d <qcow_open+0x2dd>
    5615:	mov    esi,DWORD PTR [rbx+0x1c]
    5618:	jmp    5508 <qcow_open+0x1c8>
    561d:	mov    eax,DWORD PTR [rsp]
    5620:	bswap  eax
    5622:	cmp    eax,0x58454efb
    5627:	mov    DWORD PTR [rsp],eax
    562a:	jne    5615 <qcow_open+0x2d5>
    562c:	mov    eax,DWORD PTR [rsp+0xc]
    5630:	bswap  eax
    5632:	test   al,0x2
    5634:	mov    DWORD PTR [rsp+0xc],eax
    5638:	jne    5615 <qcow_open+0x2d5>
    563a:	mov    rcx,QWORD PTR [rip+0x221ebf]        # 227500 <stderr@@GLIBC_2.2.5>
    5641:	lea    rdi,[rip+0x16b18]        # 1c160 <__PRETTY_FUNCTION__.13304+0x10>
    5648:	mov    edx,0x2e
    564d:	mov    esi,0x1
    5652:	call   33e0 <fwrite@plt>
    5657:	mov    eax,DWORD PTR [rbx+0x1c]
    565a:	test   eax,eax
    565c:	jle    567e <qcow_open+0x33e>
    565e:	xor    ecx,ecx
    5660:	xor    edx,edx
    5662:	mov    rsi,QWORD PTR [rbx+0x30]
    5666:	add    edx,0x1
    5669:	add    rsi,rcx
    566c:	add    rcx,0x8
    5670:	mov    rax,QWORD PTR [rsi]
    5673:	bswap  rax
    5676:	mov    QWORD PTR [rsi],rax
    5679:	cmp    DWORD PTR [rbx+0x1c],edx
    567c:	jg     5662 <qcow_open+0x322>
    567e:	mov    rdx,QWORD PTR [rbx+0x30]
    5682:	mov    rsi,QWORD PTR [rbx+0x28]
    5686:	mov    ecx,r13d
    5689:	mov    rdi,QWORD PTR [rbx]
    568c:	call   180f0 <bdrv_pwrite>
    5691:	cdqe   
    5693:	cmp    r12,rax
    5696:	jne    572d <qcow_open+0x3ed>
    569c:	mov    eax,DWORD PTR [rsp+0xc]
    56a0:	mov    ecx,0x10
    56a5:	mov    rdx,r14
    56a8:	mov    esi,0x30
    56ad:	or     eax,0x2
    56b0:	bswap  eax
    56b2:	mov    DWORD PTR [rsp+0xc],eax
    56b6:	mov    rdi,QWORD PTR [rbx]
    56b9:	call   180f0 <bdrv_pwrite>
    56be:	cmp    eax,0x10
    56c1:	je     5615 <qcow_open+0x2d5>
    56c7:	mov    rcx,QWORD PTR [rip+0x221e32]        # 227500 <stderr@@GLIBC_2.2.5>
    56ce:	lea    rdi,[rip+0x16ae3]        # 1c1b8 <__PRETTY_FUNCTION__.13304+0x68>
    56d5:	mov    edx,0x26
    56da:	mov    esi,0x1
    56df:	call   33e0 <fwrite@plt>
    56e4:	nop    DWORD PTR [rax+0x0]
    56e8:	mov    rax,QWORD PTR [rbx+0x30]
    56ec:	mov    rdi,rax
    56ef:	mov    r12d,0xffffffff
    56f5:	call   49c0 <qemu_free>
    56fa:	mov    rdi,QWORD PTR [rbx+0x38]
    56fe:	call   49c0 <qemu_free>
    5703:	mov    rdi,QWORD PTR [rbx+0x100]
    570a:	call   49c0 <qemu_free>
    570f:	mov    rdi,QWORD PTR [rbx+0x108]
    5716:	call   49c0 <qemu_free>
    571b:	mov    rdi,QWORD PTR [rbx]
    571e:	call   170f0 <bdrv_delete>
    5723:	jmp    55cf <qcow_open+0x28f>
    5728:	call   2f70 <__stack_chk_fail@plt>
    572d:	mov    rcx,QWORD PTR [rip+0x221dcc]        # 227500 <stderr@@GLIBC_2.2.5>
    5734:	lea    rdi,[rip+0x16a55]        # 1c190 <__PRETTY_FUNCTION__.13304+0x40>
    573b:	mov    edx,0x23
    5740:	mov    esi,0x1
    5745:	call   33e0 <fwrite@plt>
    574a:	jmp    56e8 <qcow_open+0x3a8>
    574c:	nop    DWORD PTR [rax+0x0]

0000000000005750 <encrypt_sectors.isra.1>:
    5750:	push   r15
    5752:	push   r14
    5754:	push   r13
    5756:	push   r12
    5758:	push   rbp
    5759:	push   rbx
    575a:	sub    rsp,0x38
    575e:	mov    rax,QWORD PTR fs:0x28
    5767:	mov    QWORD PTR [rsp+0x28],rax
    576c:	xor    eax,eax
    576e:	test   ecx,ecx
    5770:	jle    57db <encrypt_sectors.isra.1+0x8b>
    5772:	lea    r12d,[rcx-0x1]
    5776:	lea    rbx,[rdi+0x1]
    577a:	lea    rax,[rsp+0x10]
    577f:	mov    rbp,rsi
    5782:	mov    r15,rdx
    5785:	mov    r13d,r8d
    5788:	mov    r14,r9
    578b:	add    r12,rbx
    578e:	mov    QWORD PTR [rsp+0x8],rax
    5793:	jmp    579c <encrypt_sectors.isra.1+0x4c>
    5795:	nop    DWORD PTR [rax]
    5798:	add    rbx,0x1
    579c:	mov    r8,QWORD PTR [rsp+0x8]
    57a1:	mov    QWORD PTR [rsp+0x10],rdi
    57a6:	mov    rsi,rbp
    57a9:	mov    rdi,r15
    57ac:	mov    r9d,r13d
    57af:	mov    rcx,r14
    57b2:	mov    edx,0x200
    57b7:	mov    QWORD PTR [rsp+0x18],0x0
    57c0:	add    r15,0x200
    57c7:	call   77a0 <AES_cbc_encrypt>
    57cc:	add    rbp,0x200
    57d3:	cmp    rbx,r12
    57d6:	mov    rdi,rbx
    57d9:	jne    5798 <encrypt_sectors.isra.1+0x48>
    57db:	mov    rax,QWORD PTR [rsp+0x28]
    57e0:	xor    rax,QWORD PTR fs:0x28
    57e9:	jne    57fa <encrypt_sectors.isra.1+0xaa>
    57eb:	add    rsp,0x38
    57ef:	pop    rbx
    57f0:	pop    rbp
    57f1:	pop    r12
    57f3:	pop    r13
    57f5:	pop    r14
    57f7:	pop    r15
    57f9:	ret    
    57fa:	call   2f70 <__stack_chk_fail@plt>
    57ff:	nop

0000000000005800 <decompress_cluster>:
    5800:	push   r15
    5802:	push   r14
    5804:	push   r13
    5806:	push   r12
    5808:	xor    r12d,r12d
    580b:	push   rbp
    580c:	push   rbx
    580d:	sub    rsp,0x98
    5814:	mov    r13,QWORD PTR [rdi+0x20]
    5818:	mov    rax,QWORD PTR fs:0x28
    5821:	mov    QWORD PTR [rsp+0x88],rax
    5829:	xor    eax,eax
    582b:	and    r13,rsi
    582e:	cmp    QWORD PTR [rdi+0x110],r13
    5835:	je     591a <decompress_cluster+0x11a>
    583b:	mov    eax,DWORD PTR [rdi+0xc]
    583e:	mov    ecx,0x3f
    5843:	sub    ecx,DWORD PTR [rdi+0x8]
    5846:	mov    rdx,QWORD PTR [rdi+0x108]
    584d:	mov    rbx,rdi
    5850:	mov    rdi,QWORD PTR [rdi]
    5853:	mov    r12d,0xffffffff
    5859:	lea    ebp,[rax-0x1]
    585c:	shr    rsi,cl
    585f:	and    ebp,esi
    5861:	mov    rsi,r13
    5864:	mov    ecx,ebp
    5866:	call   17b00 <bdrv_pread>
    586b:	cmp    ebp,eax
    586d:	jne    591a <decompress_cluster+0x11a>
    5873:	mov    eax,DWORD PTR [rbx+0xc]
    5876:	lea    r14,[rsp+0x10]
    587b:	mov    ecx,0xc
    5880:	mov    rdx,QWORD PTR [rbx+0x108]
    5887:	mov    r15,QWORD PTR [rbx+0x100]
    588e:	lea    rdi,[r14+0x10]
    5892:	mov    QWORD PTR [rsp+0x1c],0x0
    589b:	mov    DWORD PTR [rsp+0xc],eax
    589f:	mov    esi,eax
    58a1:	xor    eax,eax
    58a3:	mov    QWORD PTR [r14+0x68],0x0
    58ab:	rep stos QWORD PTR es:[rdi],rax
    58ae:	mov    QWORD PTR [rsp+0x10],rdx
    58b3:	lea    rdx,[rip+0x16925]        # 1c1df <__PRETTY_FUNCTION__.13304+0x8f>
    58ba:	mov    DWORD PTR [rsp+0x30],esi
    58be:	mov    ecx,0x70
    58c3:	mov    esi,0xfffffff4
    58c8:	mov    rdi,r14
    58cb:	mov    DWORD PTR [rsp+0x18],ebp
    58cf:	mov    QWORD PTR [rsp+0x28],r15
    58d4:	call   3350 <inflateInit2_@plt>
    58d9:	test   eax,eax
    58db:	mov    r12d,eax
    58de:	jne    594d <decompress_cluster+0x14d>
    58e0:	mov    rdi,r14
    58e3:	mov    esi,0x4
    58e8:	call   2ec0 <inflate@plt>
    58ed:	mov    rdx,QWORD PTR [rsp+0x28]
    58f2:	mov    rdi,r14
    58f5:	sub    rdx,r15
    58f8:	cmp    DWORD PTR [rsp+0xc],edx
    58fc:	jne    5948 <decompress_cluster+0x148>
    58fe:	cmp    eax,0x1
    5901:	setne  dl
    5904:	cmp    eax,0xfffffffb
    5907:	setne  al
    590a:	test   dl,al
    590c:	jne    5948 <decompress_cluster+0x148>
    590e:	call   31a0 <inflateEnd@plt>
    5913:	mov    QWORD PTR [rbx+0x110],r13
    591a:	mov    rdi,QWORD PTR [rsp+0x88]
    5922:	xor    rdi,QWORD PTR fs:0x28
    592b:	mov    eax,r12d
    592e:	jne    5955 <decompress_cluster+0x155>
    5930:	add    rsp,0x98
    5937:	pop    rbx
    5938:	pop    rbp
    5939:	pop    r12
    593b:	pop    r13
    593d:	pop    r14
    593f:	pop    r15
    5941:	ret    
    5942:	nop    WORD PTR [rax+rax*1+0x0]
    5948:	call   31a0 <inflateEnd@plt>
    594d:	mov    r12d,0xffffffff
    5953:	jmp    591a <decompress_cluster+0x11a>
    5955:	call   2f70 <__stack_chk_fail@plt>
    595a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000005960 <qcow_set_key>:
    5960:	push   r12
    5962:	pxor   xmm0,xmm0
    5966:	push   rbp
    5967:	push   rbx
    5968:	mov    rbp,rsi
    596b:	sub    rsp,0x20
    596f:	mov    r12,QWORD PTR [rdi+0x40]
    5973:	mov    rdi,rsi
    5976:	mov    rax,QWORD PTR fs:0x28
    597f:	mov    QWORD PTR [rsp+0x18],rax
    5984:	xor    eax,eax
    5986:	movaps XMMWORD PTR [rsp],xmm0
    598a:	call   2f60 <strlen@plt>
    598f:	mov    edi,0x10
    5994:	cmp    eax,0x10
    5997:	mov    rbx,rsp
    599a:	cmovle edi,eax
    599d:	test   eax,eax
    599f:	jle    59c0 <qcow_set_key+0x60>
    59a1:	xor    eax,eax
    59a3:	mov    rbx,rsp
    59a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    59b0:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
    59b5:	mov    BYTE PTR [rbx+rax*1],cl
    59b8:	add    rax,0x1
    59bc:	cmp    edi,eax
    59be:	jg     59b0 <qcow_set_key+0x50>
    59c0:	mov    eax,DWORD PTR [r12+0x11c]
    59c8:	lea    rdx,[r12+0x120]
    59d0:	mov    esi,0x80
    59d5:	mov    rdi,rbx
    59d8:	mov    DWORD PTR [r12+0x118],eax
    59e0:	call   6940 <AES_set_encrypt_key>
    59e5:	test   eax,eax
    59e7:	jne    5a21 <qcow_set_key+0xc1>
    59e9:	lea    rdx,[r12+0x214]
    59f1:	mov    esi,0x80
    59f6:	mov    rdi,rbx
    59f9:	call   6d70 <AES_set_decrypt_key>
    59fe:	test   eax,eax
    5a00:	setne  al
    5a03:	movzx  eax,al
    5a06:	neg    eax
    5a08:	mov    rsi,QWORD PTR [rsp+0x18]
    5a0d:	xor    rsi,QWORD PTR fs:0x28
    5a16:	jne    5a28 <qcow_set_key+0xc8>
    5a18:	add    rsp,0x20
    5a1c:	pop    rbx
    5a1d:	pop    rbp
    5a1e:	pop    r12
    5a20:	ret    
    5a21:	mov    eax,0xffffffff
    5a26:	jmp    5a08 <qcow_set_key+0xa8>
    5a28:	call   2f70 <__stack_chk_fail@plt>
    5a2d:	nop    DWORD PTR [rax]

0000000000005a30 <get_cluster_offset.isra.2>:
    5a30:	push   r15
    5a32:	push   r14
    5a34:	mov    r10d,edx
    5a37:	push   r13
    5a39:	push   r12
    5a3b:	mov    r12,rsi
    5a3e:	push   rbp
    5a3f:	push   rbx
    5a40:	mov    rbx,rdi
    5a43:	mov    r13,rsi
    5a46:	mov    r15d,r8d
    5a49:	sub    rsp,0x48
    5a4d:	mov    edi,DWORD PTR [rdi+0x14]
    5a50:	mov    DWORD PTR [rsp+0x10],ecx
    5a54:	mov    ecx,DWORD PTR [rbx+0x8]
    5a57:	mov    rax,QWORD PTR fs:0x28
    5a60:	mov    QWORD PTR [rsp+0x38],rax
    5a65:	xor    eax,eax
    5a67:	mov    rax,QWORD PTR [rbx+0x30]
    5a6b:	mov    DWORD PTR [rsp+0x8],r9d
    5a70:	add    ecx,edi
    5a72:	shr    r12,cl
    5a75:	movsxd r12,r12d
    5a78:	mov    rbp,QWORD PTR [rax+r12*8]
    5a7c:	test   rbp,rbp
    5a7f:	jne    5ab8 <get_cluster_offset.isra.2+0x88>
    5a81:	test   edx,edx
    5a83:	jne    5dd0 <get_cluster_offset.isra.2+0x3a0>
    5a89:	xor    r12d,r12d
    5a8c:	mov    rdi,QWORD PTR [rsp+0x38]
    5a91:	xor    rdi,QWORD PTR fs:0x28
    5a9a:	mov    rax,r12
    5a9d:	jne    5f04 <get_cluster_offset.isra.2+0x4d4>
    5aa3:	add    rsp,0x48
    5aa7:	pop    rbx
    5aa8:	pop    rbp
    5aa9:	pop    r12
    5aab:	pop    r13
    5aad:	pop    r14
    5aaf:	pop    r15
    5ab1:	ret    
    5ab2:	nop    WORD PTR [rax+rax*1+0x0]
    5ab8:	xor    esi,esi
    5aba:	xor    eax,eax
    5abc:	jmp    5ace <get_cluster_offset.isra.2+0x9e>
    5abe:	xchg   ax,ax
    5ac0:	add    rax,0x1
    5ac4:	cmp    rax,0x10
    5ac8:	je     5cb0 <get_cluster_offset.isra.2+0x280>
    5ace:	cmp    QWORD PTR [rbx+rax*8+0x40],rbp
    5ad3:	mov    edx,eax
    5ad5:	jne    5ac0 <get_cluster_offset.isra.2+0x90>
    5ad7:	cdqe   
    5ad9:	lea    rcx,[rbx+rax*4]
    5add:	mov    eax,DWORD PTR [rcx+0xc0]
    5ae3:	add    eax,0x1
    5ae6:	cmp    eax,0xffffffff
    5ae9:	mov    DWORD PTR [rcx+0xc0],eax
    5aef:	je     5e70 <get_cluster_offset.isra.2+0x440>
    5af5:	mov    ecx,edi
    5af7:	mov    rax,QWORD PTR [rbx+0x38]
    5afb:	shl    edx,cl
    5afd:	movsxd rdx,edx
    5b00:	lea    r14,[rax+rdx*8]
    5b04:	mov    edx,DWORD PTR [rbx+0x18]
    5b07:	mov    ecx,DWORD PTR [rbx+0x8]
    5b0a:	mov    rsi,r13
    5b0d:	sub    edx,0x1
    5b10:	shr    rsi,cl
    5b13:	and    edx,esi
    5b15:	movsxd rsi,edx
    5b18:	lea    r11,[rsi*8+0x0]
    5b20:	add    r14,r11
    5b23:	mov    r12,QWORD PTR [r14]
    5b26:	bswap  r12
    5b29:	test   r12,r12
    5b2c:	je     5d48 <get_cluster_offset.isra.2+0x318>
    5b32:	test   r12,r12
    5b35:	jns    5a8c <get_cluster_offset.isra.2+0x5c>
    5b3b:	cmp    r10d,0x1
    5b3f:	jne    5a8c <get_cluster_offset.isra.2+0x5c>
    5b45:	mov    eax,DWORD PTR [rsp+0x8]
    5b49:	sub    eax,r15d
    5b4c:	cmp    eax,DWORD PTR [rbx+0x10]
    5b4f:	jl     5e90 <get_cluster_offset.isra.2+0x460>
    5b55:	mov    rdi,QWORD PTR [rbx]
    5b58:	mov    QWORD PTR [rsp+0x10],r11
    5b5d:	call   181a0 <bdrv_getlength>
    5b62:	mov    r11,QWORD PTR [rsp+0x10]
    5b67:	movsxd rcx,DWORD PTR [rbx+0xc]
    5b6b:	mov    rdi,QWORD PTR [rbx]
    5b6e:	mov    QWORD PTR [rsp+0x10],r11
    5b73:	mov    rdx,rcx
    5b76:	lea    rax,[rax+rcx*1-0x1]
    5b7b:	neg    edx
    5b7d:	movsxd r12,edx
    5b80:	and    r12,rax
    5b83:	lea    rsi,[rcx+r12*1]
    5b87:	call   18170 <bdrv_truncate>
    5b8c:	mov    edx,DWORD PTR [rbx+0x118]
    5b92:	mov    r11,QWORD PTR [rsp+0x10]
    5b97:	test   edx,edx
    5b99:	je     5d9d <get_cluster_offset.isra.2+0x36d>
    5b9f:	mov    eax,DWORD PTR [rsp+0x8]
    5ba3:	sub    eax,r15d
    5ba6:	cmp    eax,DWORD PTR [rbx+0x10]
    5ba9:	jge    5d9d <get_cluster_offset.isra.2+0x36d>
    5baf:	mov    rax,QWORD PTR [rbx+0x108]
    5bb6:	mov    r10d,DWORD PTR [rbx+0xc]
    5bba:	lea    rdi,[rax+0x208]
    5bc1:	mov    QWORD PTR [rax+0x200],0x0
    5bcc:	mov    QWORD PTR [rax+0x3f8],0x0
    5bd7:	neg    r10d
    5bda:	and    rdi,0xfffffffffffffff8
    5bde:	movsxd r10,r10d
    5be1:	sub    eax,edi
    5be3:	and    r10,r13
    5be6:	lea    ecx,[rax+0x400]
    5bec:	xor    eax,eax
    5bee:	shr    r10,0x9
    5bf2:	shr    ecx,0x3
    5bf5:	rep stos QWORD PTR es:[rdi],rax
    5bf8:	mov    eax,DWORD PTR [rbx+0x10]
    5bfb:	test   eax,eax
    5bfd:	jle    5d9d <get_cluster_offset.isra.2+0x36d>
    5c03:	lea    rax,[rbx+0x120]
    5c0a:	mov    QWORD PTR [rsp+0x18],rbp
    5c0f:	mov    QWORD PTR [rsp+0x28],r14
    5c14:	mov    rbp,rbx
    5c17:	mov    r14d,r15d
    5c1a:	xor    r13d,r13d
    5c1d:	mov    QWORD PTR [rsp+0x10],rax
    5c22:	mov    QWORD PTR [rsp+0x20],r11
    5c27:	mov    rbx,r10
    5c2a:	mov    r15d,DWORD PTR [rsp+0x8]
    5c2f:	jmp    5c48 <get_cluster_offset.isra.2+0x218>
    5c31:	cmp    r13d,r15d
    5c34:	jge    5c4d <get_cluster_offset.isra.2+0x21d>
    5c36:	add    r13d,0x1
    5c3a:	add    rbx,0x1
    5c3e:	cmp    r13d,DWORD PTR [rbp+0x10]
    5c42:	jge    5eed <get_cluster_offset.isra.2+0x4bd>
    5c48:	cmp    r13d,r14d
    5c4b:	jge    5c31 <get_cluster_offset.isra.2+0x201>
    5c4d:	mov    rsi,QWORD PTR [rbp+0x108]
    5c54:	mov    r9,QWORD PTR [rsp+0x10]
    5c59:	mov    r8d,0x1
    5c5f:	mov    ecx,0x1
    5c64:	mov    rdi,rbx
    5c67:	lea    rdx,[rsi+0x200]
    5c6e:	call   5750 <encrypt_sectors.isra.1>
    5c73:	mov    esi,r13d
    5c76:	mov    rdx,QWORD PTR [rbp+0x108]
    5c7d:	mov    rdi,QWORD PTR [rbp+0x0]
    5c81:	shl    esi,0x9
    5c84:	mov    ecx,0x200
    5c89:	movsxd rsi,esi
    5c8c:	add    rsi,r12
    5c8f:	call   180f0 <bdrv_pwrite>
    5c94:	cmp    eax,0x200
    5c99:	je     5c36 <get_cluster_offset.isra.2+0x206>
    5c9b:	mov    r12,0xffffffffffffffff
    5ca2:	jmp    5a8c <get_cluster_offset.isra.2+0x5c>
    5ca7:	nop    WORD PTR [rax+rax*1+0x0]
    5cb0:	xor    eax,eax
    5cb2:	xor    r12d,r12d
    5cb5:	mov    ecx,0xffffffff
    5cba:	nop    WORD PTR [rax+rax*1+0x0]
    5cc0:	mov    edx,DWORD PTR [rbx+rax*4+0xc0]
    5cc7:	cmp    edx,ecx
    5cc9:	jae    5cd0 <get_cluster_offset.isra.2+0x2a0>
    5ccb:	mov    ecx,edx
    5ccd:	movsxd r12,eax
    5cd0:	add    rax,0x1
    5cd4:	cmp    rax,0x10
    5cd8:	jne    5cc0 <get_cluster_offset.isra.2+0x290>
    5cda:	mov    ecx,edi
    5cdc:	mov    rdx,QWORD PTR [rbx+0x38]
    5ce0:	mov    eax,r12d
    5ce3:	shl    eax,cl
    5ce5:	test   esi,esi
    5ce7:	mov    DWORD PTR [rsp+0x18],r10d
    5cec:	cdqe   
    5cee:	lea    r14,[rdx+rax*8]
    5cf2:	movsxd rdx,DWORD PTR [rbx+0x18]
    5cf6:	mov    rcx,rdx
    5cf9:	jne    5e40 <get_cluster_offset.isra.2+0x410>
    5cff:	mov    rdi,QWORD PTR [rbx]
    5d02:	shl    ecx,0x3
    5d05:	mov    rdx,r14
    5d08:	mov    rsi,rbp
    5d0b:	call   17b00 <bdrv_pread>
    5d10:	movsxd rcx,DWORD PTR [rbx+0x18]
    5d14:	cdqe   
    5d16:	mov    r10d,DWORD PTR [rsp+0x18]
    5d1b:	mov    rdx,rcx
    5d1e:	shl    rcx,0x3
    5d22:	cmp    rax,rcx
    5d25:	jne    5a89 <get_cluster_offset.isra.2+0x59>
    5d2b:	mov    QWORD PTR [rbx+r12*8+0x40],rbp
    5d30:	mov    DWORD PTR [rbx+r12*4+0xc0],0x1
    5d3c:	jmp    5b07 <get_cluster_offset.isra.2+0xd7>
    5d41:	nop    DWORD PTR [rax+0x0]
    5d48:	test   r10d,r10d
    5d4b:	je     5a89 <get_cluster_offset.isra.2+0x59>
    5d51:	mov    rdi,QWORD PTR [rbx]
    5d54:	mov    DWORD PTR [rsp+0x20],r10d
    5d59:	mov    QWORD PTR [rsp+0x18],r11
    5d5e:	call   181a0 <bdrv_getlength>
    5d63:	mov    r10d,DWORD PTR [rsp+0x20]
    5d68:	mov    r12,rax
    5d6b:	mov    r11,QWORD PTR [rsp+0x18]
    5d70:	cmp    r10d,0x1
    5d74:	je     5b67 <get_cluster_offset.isra.2+0x137>
    5d7a:	movsxd rax,DWORD PTR [rsp+0x10]
    5d7f:	mov    ecx,0x3f
    5d84:	sub    ecx,DWORD PTR [rbx+0x8]
    5d87:	shl    rax,cl
    5d8a:	mov    rdx,rax
    5d8d:	movabs rax,0x8000000000000000
    5d97:	or     rax,rdx
    5d9a:	or     r12,rax
    5d9d:	mov    rax,r12
    5da0:	lea    rdx,[rsp+0x30]
    5da5:	lea    rsi,[rbp+r11*1+0x0]
    5daa:	bswap  rax
    5dad:	mov    ecx,0x8
    5db2:	mov    QWORD PTR [rsp+0x30],rax
    5db7:	mov    QWORD PTR [r14],rax
    5dba:	mov    rdi,QWORD PTR [rbx]
    5dbd:	call   180f0 <bdrv_pwrite>
    5dc2:	cmp    eax,0x8
    5dc5:	jne    5a89 <get_cluster_offset.isra.2+0x59>
    5dcb:	jmp    5a8c <get_cluster_offset.isra.2+0x5c>
    5dd0:	mov    rdi,QWORD PTR [rbx]
    5dd3:	mov    DWORD PTR [rsp+0x18],edx
    5dd7:	lea    r14,[r12*8+0x0]
    5ddf:	call   181a0 <bdrv_getlength>
    5de4:	movsxd rcx,DWORD PTR [rbx+0xc]
    5de8:	mov    rdx,rcx
    5deb:	lea    rsi,[rax+rcx*1-0x1]
    5df0:	mov    rax,QWORD PTR [rbx+0x30]
    5df4:	neg    edx
    5df6:	mov    ecx,0x8
    5dfb:	movsxd rbp,edx
    5dfe:	lea    rdx,[rsp+0x30]
    5e03:	and    rbp,rsi
    5e06:	mov    QWORD PTR [rax+r12*8],rbp
    5e0a:	mov    rsi,QWORD PTR [rbx+0x28]
    5e0e:	mov    rax,rbp
    5e11:	mov    rdi,QWORD PTR [rbx]
    5e14:	bswap  rax
    5e17:	mov    QWORD PTR [rsp+0x30],rax
    5e1c:	add    rsi,r14
    5e1f:	call   180f0 <bdrv_pwrite>
    5e24:	cmp    eax,0x8
    5e27:	mov    r10d,DWORD PTR [rsp+0x18]
    5e2c:	jne    5a89 <get_cluster_offset.isra.2+0x59>
    5e32:	mov    edi,DWORD PTR [rbx+0x14]
    5e35:	mov    esi,0x1
    5e3a:	jmp    5aba <get_cluster_offset.isra.2+0x8a>
    5e3f:	nop
    5e40:	shl    rdx,0x3
    5e44:	xor    esi,esi
    5e46:	mov    rdi,r14
    5e49:	call   3020 <memset@plt>
    5e4e:	mov    eax,DWORD PTR [rbx+0x18]
    5e51:	mov    rdi,QWORD PTR [rbx]
    5e54:	mov    rdx,r14
    5e57:	mov    rsi,rbp
    5e5a:	lea    ecx,[rax*8+0x0]
    5e61:	call   180f0 <bdrv_pwrite>
    5e66:	jmp    5d10 <get_cluster_offset.isra.2+0x2e0>
    5e6b:	nop    DWORD PTR [rax+rax*1+0x0]
    5e70:	lea    rax,[rbx+0xc0]
    5e77:	lea    rcx,[rbx+0x100]
    5e7e:	xchg   ax,ax
    5e80:	shr    DWORD PTR [rax],1
    5e82:	add    rax,0x4
    5e86:	cmp    rcx,rax
    5e89:	jne    5e80 <get_cluster_offset.isra.2+0x450>
    5e8b:	jmp    5af5 <get_cluster_offset.isra.2+0xc5>
    5e90:	mov    rsi,r12
    5e93:	mov    rdi,rbx
    5e96:	mov    QWORD PTR [rsp+0x8],r11
    5e9b:	call   5800 <decompress_cluster>
    5ea0:	test   eax,eax
    5ea2:	js     5a89 <get_cluster_offset.isra.2+0x59>
    5ea8:	mov    rdi,QWORD PTR [rbx]
    5eab:	call   181a0 <bdrv_getlength>
    5eb0:	movsxd rdx,DWORD PTR [rbx+0xc]
    5eb4:	mov    rdi,QWORD PTR [rbx]
    5eb7:	mov    r12d,edx
    5eba:	lea    rax,[rax+rdx*1-0x1]
    5ebf:	mov    rcx,rdx
    5ec2:	neg    r12d
    5ec5:	mov    rdx,QWORD PTR [rbx+0x100]
    5ecc:	movsxd r12,r12d
    5ecf:	and    r12,rax
    5ed2:	mov    rsi,r12
    5ed5:	call   180f0 <bdrv_pwrite>
    5eda:	cmp    eax,DWORD PTR [rbx+0xc]
    5edd:	mov    r11,QWORD PTR [rsp+0x8]
    5ee2:	je     5d9d <get_cluster_offset.isra.2+0x36d>
    5ee8:	jmp    5c9b <get_cluster_offset.isra.2+0x26b>
    5eed:	mov    rbx,rbp
    5ef0:	mov    r11,QWORD PTR [rsp+0x20]
    5ef5:	mov    r14,QWORD PTR [rsp+0x28]
    5efa:	mov    rbp,QWORD PTR [rsp+0x18]
    5eff:	jmp    5d9d <get_cluster_offset.isra.2+0x36d>
    5f04:	call   2f70 <__stack_chk_fail@plt>
    5f09:	nop    DWORD PTR [rax+0x0]

0000000000005f10 <qcow_write_compressed>:
    5f10:	push   r15
    5f12:	push   r14
    5f14:	push   r13
    5f16:	push   r12
    5f18:	mov    r13,rdx
    5f1b:	push   rbp
    5f1c:	push   rbx
    5f1d:	sub    rsp,0xb8
    5f24:	mov    rbp,QWORD PTR [rdi+0x40]
    5f28:	mov    rdx,QWORD PTR fs:0x28
    5f31:	mov    QWORD PTR [rsp+0xa8],rdx
    5f39:	xor    edx,edx
    5f3b:	mov    QWORD PTR [rsp+0x10],rdi
    5f40:	mov    DWORD PTR [rsp+0x24],0xffffffea
    5f48:	cmp    DWORD PTR [rbp+0x10],ecx
    5f4b:	jne    6142 <qcow_write_compressed+0x232>
    5f51:	mov    ecx,DWORD PTR [rbp+0xc]
    5f54:	mov    edx,0x10624dd3
    5f59:	mov    r12,rsi
    5f5c:	mov    eax,ecx
    5f5e:	imul   edx
    5f60:	mov    eax,ecx
    5f62:	sar    eax,0x1f
    5f65:	sar    edx,0x6
    5f68:	sub    edx,eax
    5f6a:	lea    edi,[rcx+rdx*1+0x80]
    5f71:	movsxd rdi,edi
    5f74:	call   49d0 <qemu_malloc>
    5f79:	test   rax,rax
    5f7c:	mov    QWORD PTR [rsp+0x18],rax
    5f81:	je     6214 <qcow_write_compressed+0x304>
    5f87:	lea    rbx,[rsp+0x30]
    5f8c:	xor    eax,eax
    5f8e:	mov    ecx,0xe
    5f93:	xor    r9d,r9d
    5f96:	mov    esi,0xffffffff
    5f9b:	mov    r8d,0x9
    5fa1:	mov    rdi,rbx
    5fa4:	mov    edx,0x8
    5fa9:	rep stos QWORD PTR es:[rdi],rax
    5fac:	lea    rax,[rip+0x1622c]        # 1c1df <__PRETTY_FUNCTION__.13304+0x8f>
    5fb3:	push   0x70
    5fb5:	mov    ecx,0xfffffff4
    5fba:	mov    rdi,rbx
    5fbd:	push   rax
    5fbe:	call   3080 <deflateInit2_@plt>
    5fc3:	test   eax,eax
    5fc5:	mov    DWORD PTR [rsp+0x34],eax
    5fc9:	pop    rcx
    5fca:	pop    rsi
    5fcb:	jne    61de <qcow_write_compressed+0x2ce>
    5fd1:	mov    eax,DWORD PTR [rbp+0xc]
    5fd4:	mov    esi,0x4
    5fd9:	mov    rdi,rbx
    5fdc:	mov    QWORD PTR [rsp+0x30],r13
    5fe1:	mov    DWORD PTR [rsp+0x38],eax
    5fe5:	mov    DWORD PTR [rsp+0x50],eax
    5fe9:	mov    rax,QWORD PTR [rsp+0x18]
    5fee:	mov    QWORD PTR [rsp+0x48],rax
    5ff3:	call   3010 <deflate@plt>
    5ff8:	cmp    eax,0x1
    5ffb:	mov    r15d,eax
    5ffe:	ja     61f5 <qcow_write_compressed+0x2e5>
    6004:	mov    rdi,rbx
    6007:	mov    r14,QWORD PTR [rsp+0x48]
    600c:	call   3270 <deflateEnd@plt>
    6011:	cmp    r15d,0x1
    6015:	jne    6170 <qcow_write_compressed+0x260>
    601b:	sub    r14,QWORD PTR [rsp+0x18]
    6020:	mov    rax,QWORD PTR [rsp+0x10]
    6025:	cmp    DWORD PTR [rbp+0xc],r14d
    6029:	mov    r15,QWORD PTR [rax+0x40]
    602d:	jg     61a0 <qcow_write_compressed+0x290>
    6033:	mov    r14d,DWORD PTR [rbp+0x10]
    6037:	test   r14d,r14d
    603a:	jle    6180 <qcow_write_compressed+0x270>
    6040:	lea    rax,[r15+0x120]
    6047:	mov    rdi,r15
    604a:	mov    QWORD PTR [rsp+0x28],rax
    604f:	jmp    60bd <qcow_write_compressed+0x1ad>
    6051:	nop    DWORD PTR [rax+0x0]
    6058:	mov    rsi,QWORD PTR [r15+0x108]
    605f:	mov    r9,QWORD PTR [rsp+0x28]
    6064:	mov    r8d,0x1
    606a:	mov    ecx,ebx
    606c:	mov    rdx,r13
    606f:	mov    rdi,r12
    6072:	mov    QWORD PTR [rsp+0x8],rax
    6077:	call   5750 <encrypt_sectors.isra.1>
    607c:	mov    rax,QWORD PTR [rsp+0x8]
    6081:	mov    rdx,QWORD PTR [r15+0x108]
    6088:	mov    ecx,ebp
    608a:	mov    rdi,QWORD PTR [r15]
    608d:	mov    rsi,rax
    6090:	call   180f0 <bdrv_pwrite>
    6095:	cmp    eax,ebp
    6097:	jne    6138 <qcow_write_compressed+0x228>
    609d:	sub    r14d,ebx
    60a0:	cdqe   
    60a2:	movsxd rbx,ebx
    60a5:	add    r12,rbx
    60a8:	add    r13,rax
    60ab:	test   r14d,r14d
    60ae:	jle    6180 <qcow_write_compressed+0x270>
    60b4:	mov    rax,QWORD PTR [rsp+0x10]
    60b9:	mov    rdi,QWORD PTR [rax+0x40]
    60bd:	mov    ebx,DWORD PTR [r15+0x10]
    60c1:	mov    rsi,r12
    60c4:	mov    edx,0x1
    60c9:	lea    r10d,[rbx-0x1]
    60cd:	and    r10d,r12d
    60d0:	sub    ebx,r10d
    60d3:	mov    r8d,r10d
    60d6:	mov    DWORD PTR [rsp+0x8],r10d
    60db:	cmp    ebx,r14d
    60de:	cmovg  ebx,r14d
    60e2:	shl    rsi,0x9
    60e6:	xor    ecx,ecx
    60e8:	lea    r9d,[r10+rbx*1]
    60ec:	call   5a30 <get_cluster_offset.isra.2>
    60f1:	test   rax,rax
    60f4:	je     6138 <qcow_write_compressed+0x228>
    60f6:	mov    r10d,DWORD PTR [rsp+0x8]
    60fb:	mov    edx,DWORD PTR [r15+0x118]
    6102:	mov    ebp,ebx
    6104:	shl    ebp,0x9
    6107:	shl    r10d,0x9
    610b:	movsxd r10,r10d
    610e:	add    rax,r10
    6111:	test   edx,edx
    6113:	jne    6058 <qcow_write_compressed+0x148>
    6119:	mov    rdi,QWORD PTR [r15]
    611c:	mov    ecx,ebp
    611e:	mov    rdx,r13
    6121:	mov    rsi,rax
    6124:	call   180f0 <bdrv_pwrite>
    6129:	cmp    eax,ebp
    612b:	je     609d <qcow_write_compressed+0x18d>
    6131:	nop    DWORD PTR [rax+0x0]
    6138:	mov    rdi,QWORD PTR [rsp+0x18]
    613d:	call   49c0 <qemu_free>
    6142:	mov    rcx,QWORD PTR [rsp+0xa8]
    614a:	xor    rcx,QWORD PTR fs:0x28
    6153:	mov    eax,DWORD PTR [rsp+0x24]
    6157:	jne    6221 <qcow_write_compressed+0x311>
    615d:	add    rsp,0xb8
    6164:	pop    rbx
    6165:	pop    rbp
    6166:	pop    r12
    6168:	pop    r13
    616a:	pop    r14
    616c:	pop    r15
    616e:	ret    
    616f:	nop
    6170:	mov    rax,QWORD PTR [rsp+0x10]
    6175:	mov    r15,QWORD PTR [rax+0x40]
    6179:	jmp    6033 <qcow_write_compressed+0x123>
    617e:	xchg   ax,ax
    6180:	mov    rdi,QWORD PTR [rsp+0x18]
    6185:	mov    QWORD PTR [r15+0x110],0xffffffffffffffff
    6190:	call   49c0 <qemu_free>
    6195:	jmp    6142 <qcow_write_compressed+0x232>
    6197:	nop    WORD PTR [rax+rax*1+0x0]
    61a0:	mov    rsi,r12
    61a3:	xor    r9d,r9d
    61a6:	xor    r8d,r8d
    61a9:	shl    rsi,0x9
    61ad:	mov    ecx,r14d
    61b0:	mov    edx,0x2
    61b5:	mov    rdi,r15
    61b8:	call   5a30 <get_cluster_offset.isra.2>
    61bd:	and    rax,QWORD PTR [rbp+0x20]
    61c1:	mov    rdx,QWORD PTR [rsp+0x18]
    61c6:	mov    ecx,r14d
    61c9:	mov    rdi,QWORD PTR [rbp+0x0]
    61cd:	mov    rsi,rax
    61d0:	call   180f0 <bdrv_pwrite>
    61d5:	cmp    eax,r14d
    61d8:	je     6138 <qcow_write_compressed+0x228>
    61de:	mov    rdi,QWORD PTR [rsp+0x18]
    61e3:	call   49c0 <qemu_free>
    61e8:	mov    DWORD PTR [rsp+0x24],0xffffffff
    61f0:	jmp    6142 <qcow_write_compressed+0x232>
    61f5:	mov    rdi,QWORD PTR [rsp+0x18]
    61fa:	call   49c0 <qemu_free>
    61ff:	mov    rdi,rbx
    6202:	call   3270 <deflateEnd@plt>
    6207:	mov    DWORD PTR [rsp+0x24],0xffffffff
    620f:	jmp    6142 <qcow_write_compressed+0x232>
    6214:	mov    DWORD PTR [rsp+0x24],0xffffffff
    621c:	jmp    6142 <qcow_write_compressed+0x232>
    6221:	call   2f70 <__stack_chk_fail@plt>
    6226:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006230 <qcow_is_allocated>:
    6230:	push   r13
    6232:	push   r12
    6234:	xor    r9d,r9d
    6237:	push   rbp
    6238:	push   rbx
    6239:	mov    rbp,rsi
    623c:	mov    ebx,edx
    623e:	mov    r12,rcx
    6241:	shl    rsi,0x9
    6245:	sub    rsp,0x8
    6249:	mov    r13,QWORD PTR [rdi+0x40]
    624d:	xor    edx,edx
    624f:	xor    r8d,r8d
    6252:	xor    ecx,ecx
    6254:	mov    rdi,r13
    6257:	call   5a30 <get_cluster_offset.isra.2>
    625c:	mov    edx,DWORD PTR [r13+0x10]
    6260:	lea    esi,[rdx-0x1]
    6263:	and    esi,ebp
    6265:	sub    edx,esi
    6267:	cmp    edx,ebx
    6269:	cmovg  edx,ebx
    626c:	test   rax,rax
    626f:	mov    DWORD PTR [r12],edx
    6273:	setne  al
    6276:	add    rsp,0x8
    627a:	pop    rbx
    627b:	movzx  eax,al
    627e:	pop    rbp
    627f:	pop    r12
    6281:	pop    r13
    6283:	ret    
    6284:	xchg   ax,ax
    6286:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006290 <qcow_aio_write_cb>:
    6290:	push   r14
    6292:	push   r13
    6294:	test   esi,esi
    6296:	push   r12
    6298:	push   rbp
    6299:	mov    ebp,esi
    629b:	push   rbx
    629c:	mov    rax,QWORD PTR [rdi+0x8]
    62a0:	mov    rbx,rdi
    62a3:	mov    r12,QWORD PTR [rax+0x40]
    62a7:	mov    QWORD PTR [rdi+0x50],0x0
    62af:	jns    62d0 <qcow_aio_write_cb+0x40>
    62b1:	mov    rdi,QWORD PTR [rbx+0x18]
    62b5:	mov    esi,ebp
    62b7:	call   QWORD PTR [rbx+0x10]
    62ba:	mov    rdi,rbx
    62bd:	pop    rbx
    62be:	pop    rbp
    62bf:	pop    r12
    62c1:	pop    r13
    62c3:	pop    r14
    62c5:	jmp    19850 <qemu_aio_release>
    62ca:	nop    WORD PTR [rax+rax*1+0x0]
    62d0:	movsxd rsi,DWORD PTR [rdi+0x3c]
    62d4:	mov    ecx,DWORD PTR [rdi+0x38]
    62d7:	mov    rdx,rsi
    62da:	sub    ecx,esi
    62dc:	add    rsi,QWORD PTR [rdi+0x28]
    62e0:	shl    edx,0x9
    62e3:	mov    DWORD PTR [rdi+0x38],ecx
    62e6:	movsxd rdx,edx
    62e9:	add    QWORD PTR [rdi+0x30],rdx
    62ed:	test   ecx,ecx
    62ef:	mov    QWORD PTR [rdi+0x28],rsi
    62f3:	jne    6300 <qcow_aio_write_cb+0x70>
    62f5:	mov    rdi,QWORD PTR [rdi+0x18]
    62f9:	xor    esi,esi
    62fb:	jmp    62b7 <qcow_aio_write_cb+0x27>
    62fd:	nop    DWORD PTR [rax]
    6300:	mov    edx,DWORD PTR [r12+0x10]
    6305:	lea    r13d,[rdx-0x1]
    6309:	and    r13d,esi
    630c:	sub    edx,r13d
    630f:	cmp    ecx,edx
    6311:	jl     63d0 <qcow_aio_write_cb+0x140>
    6317:	mov    DWORD PTR [rdi+0x3c],edx
    631a:	mov    rdi,QWORD PTR [rax+0x40]
    631e:	lea    r9d,[r13+rdx*1+0x0]
    6323:	shl    rsi,0x9
    6327:	xor    ecx,ecx
    6329:	mov    r8d,r13d
    632c:	mov    edx,0x1
    6331:	call   5a30 <get_cluster_offset.isra.2>
    6336:	test   rax,rax
    6339:	mov    r14,rax
    633c:	je     63c0 <qcow_aio_write_cb+0x130>
    6342:	test   eax,0x1ff
    6347:	jne    63c0 <qcow_aio_write_cb+0x130>
    6349:	mov    eax,DWORD PTR [r12+0x118]
    6351:	test   eax,eax
    6353:	je     63da <qcow_aio_write_cb+0x14a>
    6359:	mov    rsi,QWORD PTR [rbx+0x48]
    635d:	test   rsi,rsi
    6360:	je     63e0 <qcow_aio_write_cb+0x150>
    6362:	mov    rdx,QWORD PTR [rbx+0x30]
    6366:	mov    ecx,DWORD PTR [rbx+0x3c]
    6369:	lea    r9,[r12+0x120]
    6371:	mov    rdi,QWORD PTR [rbx+0x28]
    6375:	mov    r8d,0x1
    637b:	call   5750 <encrypt_sectors.isra.1>
    6380:	mov    rdx,QWORD PTR [rbx+0x48]
    6384:	shr    r14,0x9
    6388:	mov    ecx,DWORD PTR [rbx+0x3c]
    638b:	movsxd r13,r13d
    638e:	mov    rdi,QWORD PTR [r12]
    6392:	lea    rsi,[r14+r13*1]
    6396:	lea    r8,[rip+0xfffffffffffffef3]        # 6290 <qcow_aio_write_cb>
    639d:	mov    r9,rbx
    63a0:	call   19180 <bdrv_aio_write>
    63a5:	test   rax,rax
    63a8:	mov    QWORD PTR [rbx+0x50],rax
    63ac:	je     62b1 <qcow_aio_write_cb+0x21>
    63b2:	pop    rbx
    63b3:	pop    rbp
    63b4:	pop    r12
    63b6:	pop    r13
    63b8:	pop    r14
    63ba:	ret    
    63bb:	nop    DWORD PTR [rax+rax*1+0x0]
    63c0:	mov    ebp,0xfffffffb
    63c5:	jmp    62b1 <qcow_aio_write_cb+0x21>
    63ca:	nop    WORD PTR [rax+rax*1+0x0]
    63d0:	mov    DWORD PTR [rdi+0x3c],ecx
    63d3:	mov    edx,ecx
    63d5:	jmp    631a <qcow_aio_write_cb+0x8a>
    63da:	mov    rdx,QWORD PTR [rbx+0x30]
    63de:	jmp    6384 <qcow_aio_write_cb+0xf4>
    63e0:	movsxd rdi,DWORD PTR [r12+0xc]
    63e5:	call   4a20 <qemu_mallocz>
    63ea:	test   rax,rax
    63ed:	mov    rsi,rax
    63f0:	mov    QWORD PTR [rbx+0x48],rax
    63f4:	jne    6362 <qcow_aio_write_cb+0xd2>
    63fa:	mov    ebp,0xfffffff4
    63ff:	jmp    62b1 <qcow_aio_write_cb+0x21>
    6404:	xchg   ax,ax
    6406:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006410 <qcow_aio_write>:
    6410:	push   r13
    6412:	push   r12
    6414:	mov    r12,rsi
    6417:	push   rbp
    6418:	push   rbx
    6419:	mov    rbp,rdx
    641c:	mov    rsi,r8
    641f:	mov    rdx,r9
    6422:	mov    r13d,ecx
    6425:	sub    rsp,0x8
    6429:	mov    rax,QWORD PTR [rdi+0x40]
    642d:	mov    QWORD PTR [rax+0x110],0xffffffffffffffff
    6438:	call   19670 <qemu_aio_get>
    643d:	test   rax,rax
    6440:	mov    rbx,rax
    6443:	je     646a <qcow_aio_write+0x5a>
    6445:	mov    QWORD PTR [rax+0x50],0x0
    644d:	mov    QWORD PTR [rax+0x28],r12
    6451:	xor    esi,esi
    6453:	mov    QWORD PTR [rax+0x30],rbp
    6457:	mov    DWORD PTR [rax+0x38],r13d
    645b:	mov    rdi,rax
    645e:	mov    DWORD PTR [rax+0x3c],0x0
    6465:	call   6290 <qcow_aio_write_cb>
    646a:	add    rsp,0x8
    646e:	mov    rax,rbx
    6471:	pop    rbx
    6472:	pop    rbp
    6473:	pop    r12
    6475:	pop    r13
    6477:	ret    
    6478:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000006480 <qcow_aio_read_cb>:
    6480:	push   r15
    6482:	push   r14
    6484:	push   r13
    6486:	push   r12
    6488:	mov    r13d,esi
    648b:	push   rbp
    648c:	push   rbx
    648d:	mov    rbx,rdi
    6490:	sub    rsp,0x8
    6494:	mov    r12,QWORD PTR [rdi+0x8]
    6498:	test   esi,esi
    649a:	mov    rbp,QWORD PTR [r12+0x40]
    649f:	mov    QWORD PTR [rdi+0x50],0x0
    64a7:	lea    r14,[rbp+0x214]
    64ae:	jns    6505 <qcow_aio_read_cb+0x85>
    64b0:	mov    rdi,QWORD PTR [rbx+0x18]
    64b4:	mov    esi,r13d
    64b7:	call   QWORD PTR [rbx+0x10]
    64ba:	add    rsp,0x8
    64be:	mov    rdi,rbx
    64c1:	pop    rbx
    64c2:	pop    rbp
    64c3:	pop    r12
    64c5:	pop    r13
    64c7:	pop    r14
    64c9:	pop    r15
    64cb:	jmp    19850 <qemu_aio_release>
    64d0:	jns    6628 <qcow_aio_read_cb+0x1a8>
    64d6:	mov    rsi,rax
    64d9:	mov    rdi,rbp
    64dc:	call   5800 <decompress_cluster>
    64e1:	test   eax,eax
    64e3:	js     64b0 <qcow_aio_read_cb+0x30>
    64e5:	mov    edx,DWORD PTR [rbx+0x3c]
    64e8:	shl    r15d,0x9
    64ec:	mov    rdi,QWORD PTR [rbx+0x30]
    64f0:	movsxd rsi,r15d
    64f3:	add    rsi,QWORD PTR [rbp+0x100]
    64fa:	shl    edx,0x9
    64fd:	movsxd rdx,edx
    6500:	call   3190 <memcpy@plt>
    6505:	cmp    QWORD PTR [rbx+0x40],0x0
    650a:	mov    ecx,DWORD PTR [rbx+0x3c]
    650d:	mov    rax,QWORD PTR [rbx+0x30]
    6511:	mov    rdi,QWORD PTR [rbx+0x28]
    6515:	jle    6525 <qcow_aio_read_cb+0xa5>
    6517:	mov    edx,DWORD PTR [rbp+0x118]
    651d:	test   edx,edx
    651f:	jne    65b8 <qcow_aio_read_cb+0x138>
    6525:	mov    edx,DWORD PTR [rbx+0x38]
    6528:	movsxd rsi,ecx
    652b:	add    rsi,rdi
    652e:	mov    QWORD PTR [rbx+0x28],rsi
    6532:	sub    edx,ecx
    6534:	shl    ecx,0x9
    6537:	movsxd rcx,ecx
    653a:	mov    DWORD PTR [rbx+0x38],edx
    653d:	add    rcx,rax
    6540:	test   edx,edx
    6542:	mov    QWORD PTR [rbx+0x30],rcx
    6546:	je     65e0 <qcow_aio_read_cb+0x160>
    654c:	mov    rdi,QWORD PTR [r12+0x40]
    6551:	shl    rsi,0x9
    6555:	xor    ecx,ecx
    6557:	xor    edx,edx
    6559:	xor    r9d,r9d
    655c:	xor    r8d,r8d
    655f:	call   5a30 <get_cluster_offset.isra.2>
    6564:	mov    QWORD PTR [rbx+0x40],rax
    6568:	mov    edx,DWORD PTR [rbp+0x10]
    656b:	mov    rsi,QWORD PTR [rbx+0x28]
    656f:	mov    ecx,DWORD PTR [rbx+0x38]
    6572:	lea    r15d,[rdx-0x1]
    6576:	and    r15d,esi
    6579:	sub    edx,r15d
    657c:	cmp    edx,ecx
    657e:	mov    DWORD PTR [rbx+0x3c],edx
    6581:	jle    6586 <qcow_aio_read_cb+0x106>
    6583:	mov    DWORD PTR [rbx+0x3c],ecx
    6586:	test   rax,rax
    6589:	jne    64d0 <qcow_aio_read_cb+0x50>
    658f:	mov    rax,QWORD PTR [r12+0x850]
    6597:	mov    edx,DWORD PTR [rbx+0x3c]
    659a:	mov    rdi,QWORD PTR [rbx+0x30]
    659e:	test   rax,rax
    65a1:	jne    65f0 <qcow_aio_read_cb+0x170>
    65a3:	shl    edx,0x9
    65a6:	xor    esi,esi
    65a8:	movsxd rdx,edx
    65ab:	call   3020 <memset@plt>
    65b0:	jmp    6505 <qcow_aio_read_cb+0x85>
    65b5:	nop    DWORD PTR [rax]
    65b8:	mov    rdx,rax
    65bb:	mov    rsi,rax
    65be:	mov    r9,r14
    65c1:	xor    r8d,r8d
    65c4:	call   5750 <encrypt_sectors.isra.1>
    65c9:	mov    ecx,DWORD PTR [rbx+0x3c]
    65cc:	mov    rdi,QWORD PTR [rbx+0x28]
    65d0:	mov    rax,QWORD PTR [rbx+0x30]
    65d4:	jmp    6525 <qcow_aio_read_cb+0xa5>
    65d9:	nop    DWORD PTR [rax+0x0]
    65e0:	mov    rdi,QWORD PTR [rbx+0x18]
    65e4:	xor    esi,esi
    65e6:	jmp    64b7 <qcow_aio_read_cb+0x37>
    65eb:	nop    DWORD PTR [rax+rax*1+0x0]
    65f0:	lea    r8,[rip+0xfffffffffffffe89]        # 6480 <qcow_aio_read_cb>
    65f7:	mov    ecx,edx
    65f9:	mov    r9,rbx
    65fc:	mov    rdx,rdi
    65ff:	mov    rdi,rax
    6602:	call   19060 <bdrv_aio_read>
    6607:	test   rax,rax
    660a:	mov    QWORD PTR [rbx+0x50],rax
    660e:	je     64b0 <qcow_aio_read_cb+0x30>
    6614:	add    rsp,0x8
    6618:	pop    rbx
    6619:	pop    rbp
    661a:	pop    r12
    661c:	pop    r13
    661e:	pop    r14
    6620:	pop    r15
    6622:	ret    
    6623:	nop    DWORD PTR [rax+rax*1+0x0]
    6628:	test   eax,0x1ff
    662d:	je     663a <qcow_aio_read_cb+0x1ba>
    662f:	mov    r13d,0xfffffffb
    6635:	jmp    64b0 <qcow_aio_read_cb+0x30>
    663a:	mov    ecx,DWORD PTR [rbx+0x3c]
    663d:	mov    rdx,QWORD PTR [rbx+0x30]
    6641:	shr    rax,0x9
    6645:	mov    rdi,QWORD PTR [rbp+0x0]
    6649:	movsxd rsi,r15d
    664c:	lea    r8,[rip+0xfffffffffffffe2d]        # 6480 <qcow_aio_read_cb>
    6653:	add    rsi,rax
    6656:	mov    r9,rbx
    6659:	call   19060 <bdrv_aio_read>
    665e:	test   rax,rax
    6661:	mov    QWORD PTR [rbx+0x50],rax
    6665:	jne    6614 <qcow_aio_read_cb+0x194>
    6667:	jmp    64b0 <qcow_aio_read_cb+0x30>
    666c:	nop    DWORD PTR [rax+0x0]

0000000000006670 <qcow_aio_read>:
    6670:	push   r13
    6672:	push   r12
    6674:	mov    r12,rsi
    6677:	push   rbp
    6678:	push   rbx
    6679:	mov    rbp,rdx
    667c:	mov    rsi,r8
    667f:	mov    rdx,r9
    6682:	mov    r13d,ecx
    6685:	sub    rsp,0x8
    6689:	call   19670 <qemu_aio_get>
    668e:	test   rax,rax
    6691:	mov    rbx,rax
    6694:	je     66c3 <qcow_aio_read+0x53>
    6696:	mov    QWORD PTR [rax+0x50],0x0
    669e:	mov    QWORD PTR [rax+0x28],r12
    66a2:	xor    esi,esi
    66a4:	mov    QWORD PTR [rax+0x30],rbp
    66a8:	mov    DWORD PTR [rax+0x38],r13d
    66ac:	mov    rdi,rax
    66af:	mov    DWORD PTR [rax+0x3c],0x0
    66b6:	mov    QWORD PTR [rax+0x40],0x0
    66be:	call   6480 <qcow_aio_read_cb>
    66c3:	add    rsp,0x8
    66c7:	mov    rax,rbx
    66ca:	pop    rbx
    66cb:	pop    rbp
    66cc:	pop    r12
    66ce:	pop    r13
    66d0:	ret    
    66d1:	nop    DWORD PTR [rax+rax*1+0x0]
    66d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000066e0 <qcow_probe>:
    66e0:	xor    eax,eax
    66e2:	cmp    esi,0x2f
    66e5:	ja     66f0 <qcow_probe+0x10>
    66e7:	repz ret 
    66e9:	nop    DWORD PTR [rax+0x0]
    66f0:	cmp    DWORD PTR [rdi],0xfb494651
    66f6:	jne    66e7 <qcow_probe+0x7>
    66f8:	cmp    DWORD PTR [rdi+0x4],0x1000000
    66ff:	mov    edx,0x64
    6704:	cmove  eax,edx
    6707:	ret    
    6708:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000006710 <qcow_create>:
    6710:	push   r15
    6712:	push   r14
    6714:	mov    r15,rdx
    6717:	push   r13
    6719:	push   r12
    671b:	mov    edx,0x1a4
    6720:	push   rbp
    6721:	push   rbx
    6722:	mov    rbx,rsi
    6725:	mov    esi,0x241
    672a:	sub    rsp,0x68
    672e:	mov    rax,QWORD PTR fs:0x28
    6737:	mov    QWORD PTR [rsp+0x58],rax
    673c:	xor    eax,eax
    673e:	mov    DWORD PTR [rsp+0x4],ecx
    6742:	call   32e0 <open64@plt>
    6747:	test   eax,eax
    6749:	js     6922 <qcow_create+0x212>
    674f:	pxor   xmm0,xmm0
    6753:	shl    rbx,0x9
    6757:	mov    ebp,eax
    6759:	movabs rax,0x1000000fb494651
    6763:	lea    r9,[rsp+0x20]
    6768:	test   r15,r15
    676b:	mov    QWORD PTR [rsp+0x20],rax
    6770:	mov    rax,rbx
    6773:	bswap  rax
    6776:	movups XMMWORD PTR [rsp+0x28],xmm0
    677b:	mov    QWORD PTR [r9+0x28],0x0
    6783:	movups XMMWORD PTR [r9+0x18],xmm0
    6788:	mov    QWORD PTR [rsp+0x38],rax
    678d:	je     6900 <qcow_create+0x1f0>
    6793:	lea    rdi,[rip+0x15a4c]        # 1c1e6 <__PRETTY_FUNCTION__.13304+0x96>
    679a:	mov    ecx,0x5
    679f:	mov    rsi,r15
    67a2:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    67a4:	seta   dl
    67a7:	sbb    dl,0x0
    67aa:	movsx  r10d,dl
    67ae:	test   r10d,r10d
    67b1:	jne    68b0 <qcow_create+0x1a0>
    67b7:	movabs rax,0x3000000000000000
    67c1:	mov    r12d,0x30
    67c7:	xor    r15d,r15d
    67ca:	mov    edx,0xc09
    67cf:	mov    WORD PTR [rsp+0x40],dx
    67d4:	mov    ecx,DWORD PTR [rsp+0x4]
    67d8:	lea    r13,[rbx+0x1fffff]
    67df:	mov    edx,0x30
    67e4:	mov    rsi,r9
    67e7:	mov    edi,ebp
    67e9:	mov    DWORD PTR [rsp+0x8],r10d
    67ee:	sar    r13,0x15
    67f2:	mov    QWORD PTR [rsp+0x48],rax
    67f7:	and    ecx,0x1
    67fa:	mov    r14d,r13d
    67fd:	shl    ecx,0x18
    6800:	mov    DWORD PTR [rsp+0x44],ecx
    6804:	call   43d0 <qemu_write_ok>
    6809:	test   eax,eax
    680b:	js     686f <qcow_create+0x15f>
    680d:	test   r15,r15
    6810:	mov    r10d,DWORD PTR [rsp+0x8]
    6815:	je     6828 <qcow_create+0x118>
    6817:	movsxd rdx,r10d
    681a:	mov    rsi,r15
    681d:	mov    edi,ebp
    681f:	call   43d0 <qemu_write_ok>
    6824:	test   eax,eax
    6826:	js     686f <qcow_create+0x15f>
    6828:	movsxd rsi,r12d
    682b:	xor    edx,edx
    682d:	mov    edi,ebp
    682f:	call   33f0 <lseek64@plt>
    6834:	xor    ebx,ebx
    6836:	test   r13d,r13d
    6839:	mov    QWORD PTR [rsp+0x18],0x0
    6842:	lea    r12,[rsp+0x18]
    6847:	jg     685c <qcow_create+0x14c>
    6849:	jmp    68f0 <qcow_create+0x1e0>
    684e:	xchg   ax,ax
    6850:	add    ebx,0x1
    6853:	cmp    r14d,ebx
    6856:	je     68f0 <qcow_create+0x1e0>
    685c:	mov    edx,0x8
    6861:	mov    rsi,r12
    6864:	mov    edi,ebp
    6866:	call   43d0 <qemu_write_ok>
    686b:	test   eax,eax
    686d:	jns    6850 <qcow_create+0x140>
    686f:	call   2e80 <__errno_location@plt>
    6874:	mov    r12d,DWORD PTR [rax]
    6877:	mov    rbx,rax
    687a:	mov    edi,ebp
    687c:	call   3040 <close@plt>
    6881:	mov    eax,0xffffffff
    6886:	mov    DWORD PTR [rbx],r12d
    6889:	mov    rcx,QWORD PTR [rsp+0x58]
    688e:	xor    rcx,QWORD PTR fs:0x28
    6897:	jne    692c <qcow_create+0x21c>
    689d:	add    rsp,0x68
    68a1:	pop    rbx
    68a2:	pop    rbp
    68a3:	pop    r12
    68a5:	pop    r13
    68a7:	pop    r14
    68a9:	pop    r15
    68ab:	ret    
    68ac:	nop    DWORD PTR [rax+0x0]
    68b0:	movabs rax,0x3000000000000000
    68ba:	mov    rdi,r15
    68bd:	mov    QWORD PTR [rsp+0x8],r9
    68c2:	mov    QWORD PTR [rsp+0x28],rax
    68c7:	call   2f60 <strlen@plt>
    68cc:	lea    r12d,[rax+0x37]
    68d0:	mov    edx,eax
    68d2:	mov    r10d,eax
    68d5:	bswap  edx
    68d7:	mov    r9,QWORD PTR [rsp+0x8]
    68dc:	and    r12d,0xfffffff8
    68e0:	mov    DWORD PTR [rsp+0x30],edx
    68e4:	movsxd rax,r12d
    68e7:	bswap  rax
    68ea:	jmp    67ca <qcow_create+0xba>
    68ef:	nop
    68f0:	mov    edi,ebp
    68f2:	call   3040 <close@plt>
    68f7:	xor    eax,eax
    68f9:	jmp    6889 <qcow_create+0x179>
    68fb:	nop    DWORD PTR [rax+rax*1+0x0]
    6900:	mov    eax,0x90c
    6905:	mov    r12d,0x30
    690b:	xor    r10d,r10d
    690e:	mov    WORD PTR [rsp+0x40],ax
    6913:	movabs rax,0x3000000000000000
    691d:	jmp    67d4 <qcow_create+0xc4>
    6922:	mov    eax,0xffffffff
    6927:	jmp    6889 <qcow_create+0x179>
    692c:	call   2f70 <__stack_chk_fail@plt>
    6931:	nop    WORD PTR cs:[rax+rax*1+0x0]
    693b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000006940 <AES_set_encrypt_key>:
    6940:	test   rdi,rdi
    6943:	je     6d59 <AES_set_encrypt_key+0x419>
    6949:	test   rdx,rdx
    694c:	je     6d59 <AES_set_encrypt_key+0x419>
    6952:	mov    eax,esi
    6954:	and    eax,0xffffffbf
    6957:	add    eax,0xffffff80
    695a:	jne    6af0 <AES_set_encrypt_key+0x1b0>
    6960:	cmp    esi,0x80
    6966:	je     6b10 <AES_set_encrypt_key+0x1d0>
    696c:	cmp    esi,0xc0
    6972:	jne    6afc <AES_set_encrypt_key+0x1bc>
    6978:	mov    DWORD PTR [rdx+0xf0],0xc
    6982:	push   r14
    6984:	push   r12
    6986:	push   rbp
    6987:	push   rbx
    6988:	movzx  eax,BYTE PTR [rdi]
    698b:	movzx  r8d,BYTE PTR [rdi+0x1]
    6990:	shl    eax,0x18
    6993:	shl    r8d,0x10
    6997:	xor    eax,r8d
    699a:	movzx  r8d,BYTE PTR [rdi+0x3]
    699f:	xor    eax,r8d
    69a2:	movzx  r8d,BYTE PTR [rdi+0x2]
    69a7:	shl    r8d,0x8
    69ab:	xor    r8d,eax
    69ae:	mov    DWORD PTR [rdx],r8d
    69b1:	movzx  r9d,BYTE PTR [rdi+0x4]
    69b6:	movzx  eax,BYTE PTR [rdi+0x5]
    69ba:	shl    r9d,0x18
    69be:	shl    eax,0x10
    69c1:	xor    r9d,eax
    69c4:	movzx  eax,BYTE PTR [rdi+0x7]
    69c8:	xor    r9d,eax
    69cb:	movzx  eax,BYTE PTR [rdi+0x6]
    69cf:	shl    eax,0x8
    69d2:	xor    r9d,eax
    69d5:	mov    DWORD PTR [rdx+0x4],r9d
    69d9:	movzx  r10d,BYTE PTR [rdi+0x8]
    69de:	movzx  eax,BYTE PTR [rdi+0x9]
    69e2:	shl    r10d,0x18
    69e6:	shl    eax,0x10
    69e9:	xor    r10d,eax
    69ec:	movzx  eax,BYTE PTR [rdi+0xb]
    69f0:	xor    r10d,eax
    69f3:	movzx  eax,BYTE PTR [rdi+0xa]
    69f7:	shl    eax,0x8
    69fa:	xor    r10d,eax
    69fd:	mov    DWORD PTR [rdx+0x8],r10d
    6a01:	movzx  ecx,BYTE PTR [rdi+0xc]
    6a05:	movzx  eax,BYTE PTR [rdi+0xd]
    6a09:	shl    ecx,0x18
    6a0c:	shl    eax,0x10
    6a0f:	xor    ecx,eax
    6a11:	movzx  eax,BYTE PTR [rdi+0xf]
    6a15:	xor    ecx,eax
    6a17:	movzx  eax,BYTE PTR [rdi+0xe]
    6a1b:	shl    eax,0x8
    6a1e:	xor    ecx,eax
    6a20:	cmp    esi,0x80
    6a26:	mov    DWORD PTR [rdx+0xc],ecx
    6a29:	je     6b20 <AES_set_encrypt_key+0x1e0>
    6a2f:	movzx  eax,BYTE PTR [rdi+0x10]
    6a33:	movzx  r11d,BYTE PTR [rdi+0x11]
    6a38:	shl    eax,0x18
    6a3b:	shl    r11d,0x10
    6a3f:	xor    eax,r11d
    6a42:	movzx  r11d,BYTE PTR [rdi+0x13]
    6a47:	xor    eax,r11d
    6a4a:	movzx  r11d,BYTE PTR [rdi+0x12]
    6a4f:	shl    r11d,0x8
    6a53:	xor    eax,r11d
    6a56:	mov    DWORD PTR [rdx+0x10],eax
    6a59:	movzx  ebx,BYTE PTR [rdi+0x14]
    6a5d:	movzx  eax,BYTE PTR [rdi+0x15]
    6a61:	shl    ebx,0x18
    6a64:	shl    eax,0x10
    6a67:	xor    ebx,eax
    6a69:	movzx  eax,BYTE PTR [rdi+0x17]
    6a6d:	xor    ebx,eax
    6a6f:	movzx  eax,BYTE PTR [rdi+0x16]
    6a73:	shl    eax,0x8
    6a76:	xor    ebx,eax
    6a78:	cmp    esi,0xc0
    6a7e:	mov    DWORD PTR [rdx+0x14],ebx
    6a81:	je     6bb0 <AES_set_encrypt_key+0x270>
    6a87:	movzx  eax,BYTE PTR [rdi+0x18]
    6a8b:	movzx  r11d,BYTE PTR [rdi+0x19]
    6a90:	shl    eax,0x18
    6a93:	shl    r11d,0x10
    6a97:	xor    eax,r11d
    6a9a:	movzx  r11d,BYTE PTR [rdi+0x1b]
    6a9f:	xor    eax,r11d
    6aa2:	movzx  r11d,BYTE PTR [rdi+0x1a]
    6aa7:	shl    r11d,0x8
    6aab:	xor    eax,r11d
    6aae:	mov    DWORD PTR [rdx+0x18],eax
    6ab1:	movzx  ebx,BYTE PTR [rdi+0x1c]
    6ab5:	movzx  eax,BYTE PTR [rdi+0x1d]
    6ab9:	shl    ebx,0x18
    6abc:	shl    eax,0x10
    6abf:	xor    ebx,eax
    6ac1:	movzx  eax,BYTE PTR [rdi+0x1f]
    6ac5:	xor    ebx,eax
    6ac7:	movzx  eax,BYTE PTR [rdi+0x1e]
    6acb:	shl    eax,0x8
    6ace:	xor    ebx,eax
    6ad0:	cmp    esi,0x100
    6ad6:	mov    DWORD PTR [rdx+0x1c],ebx
    6ad9:	je     6c60 <AES_set_encrypt_key+0x320>
    6adf:	pop    rbx
    6ae0:	xor    eax,eax
    6ae2:	pop    rbp
    6ae3:	pop    r12
    6ae5:	pop    r14
    6ae7:	ret    
    6ae8:	nop    DWORD PTR [rax+rax*1+0x0]
    6af0:	cmp    esi,0x100
    6af6:	jne    6d5f <AES_set_encrypt_key+0x41f>
    6afc:	mov    DWORD PTR [rdx+0xf0],0xe
    6b06:	jmp    6982 <AES_set_encrypt_key+0x42>
    6b0b:	nop    DWORD PTR [rax+rax*1+0x0]
    6b10:	mov    DWORD PTR [rdx+0xf0],0xa
    6b1a:	jmp    6982 <AES_set_encrypt_key+0x42>
    6b1f:	nop
    6b20:	lea    rdi,[rip+0x156dd]        # 1c204 <rcon+0x4>
    6b27:	add    rdx,0x10
    6b2b:	mov    r11d,0x1000000
    6b31:	lea    rsi,[rip+0x16b08]        # 1d640 <Te4>
    6b38:	lea    rbx,[rdi+0x24]
    6b3c:	jmp    6b4b <AES_set_encrypt_key+0x20b>
    6b3e:	xchg   ax,ax
    6b40:	mov    r11d,DWORD PTR [rdi]
    6b43:	add    rdx,0x10
    6b47:	add    rdi,0x4
    6b4b:	mov    ebp,ecx
    6b4d:	movzx  eax,cl
    6b50:	shr    ebp,0x18
    6b53:	mov    eax,DWORD PTR [rsi+rax*4]
    6b56:	movzx  ebp,BYTE PTR [rsi+rbp*4]
    6b5a:	and    eax,0xff00
    6b5f:	or     eax,ebp
    6b61:	mov    ebp,ecx
    6b63:	shr    ebp,0x10
    6b66:	movzx  ebp,bpl
    6b6a:	mov    ebp,DWORD PTR [rsi+rbp*4]
    6b6d:	and    ebp,0xff000000
    6b73:	xor    eax,ebp
    6b75:	movzx  ebp,ch
    6b78:	mov    ebp,DWORD PTR [rsi+rbp*4]
    6b7b:	and    ebp,0xff0000
    6b81:	xor    eax,ebp
    6b83:	xor    eax,r8d
    6b86:	xor    eax,r11d
    6b89:	xor    r9d,eax
    6b8c:	mov    r8d,eax
    6b8f:	mov    DWORD PTR [rdx],eax
    6b91:	xor    r10d,r9d
    6b94:	mov    DWORD PTR [rdx+0x4],r9d
    6b98:	xor    ecx,r10d
    6b9b:	cmp    rbx,rdi
    6b9e:	mov    DWORD PTR [rdx+0x8],r10d
    6ba2:	mov    DWORD PTR [rdx+0xc],ecx
    6ba5:	jne    6b40 <AES_set_encrypt_key+0x200>
    6ba7:	pop    rbx
    6ba8:	xor    eax,eax
    6baa:	pop    rbp
    6bab:	pop    r12
    6bad:	pop    r14
    6baf:	ret    
    6bb0:	lea    rdi,[rip+0x15649]        # 1c200 <rcon>
    6bb7:	add    rdx,0x18
    6bbb:	mov    r11d,0x1000000
    6bc1:	lea    rsi,[rip+0x16a78]        # 1d640 <Te4>
    6bc8:	lea    r14,[rdi+0x20]
    6bcc:	jmp    6be4 <AES_set_encrypt_key+0x2a4>
    6bce:	xchg   ax,ax
    6bd0:	mov    eax,DWORD PTR [rdx-0x8]
    6bd3:	add    rdx,0x18
    6bd7:	xor    eax,ecx
    6bd9:	xor    ebx,eax
    6bdb:	mov    DWORD PTR [rdx-0x8],eax
    6bde:	mov    DWORD PTR [rdx-0x4],ebx
    6be1:	mov    r11d,DWORD PTR [rdi]
    6be4:	mov    r12d,ebx
    6be7:	movzx  eax,bl
    6bea:	movzx  ebp,bh
    6bed:	shr    r12d,0x18
    6bf1:	mov    eax,DWORD PTR [rsi+rax*4]
    6bf4:	add    rdi,0x4
    6bf8:	movzx  r12d,BYTE PTR [rsi+r12*4]
    6bfd:	and    eax,0xff00
    6c02:	or     eax,r12d
    6c05:	mov    r12d,ebx
    6c08:	shr    r12d,0x10
    6c0c:	movzx  r12d,r12b
    6c10:	mov    r12d,DWORD PTR [rsi+r12*4]
    6c14:	and    r12d,0xff000000
    6c1b:	xor    eax,r12d
    6c1e:	mov    r12d,DWORD PTR [rsi+rbp*4]
    6c22:	and    r12d,0xff0000
    6c29:	xor    eax,r12d
    6c2c:	xor    eax,r8d
    6c2f:	xor    eax,r11d
    6c32:	xor    r9d,eax
    6c35:	mov    r8d,eax
    6c38:	mov    DWORD PTR [rdx],eax
    6c3a:	xor    r10d,r9d
    6c3d:	mov    DWORD PTR [rdx+0x4],r9d
    6c41:	xor    ecx,r10d
    6c44:	cmp    r14,rdi
    6c47:	mov    DWORD PTR [rdx+0x8],r10d
    6c4b:	mov    DWORD PTR [rdx+0xc],ecx
    6c4e:	jne    6bd0 <AES_set_encrypt_key+0x290>
    6c50:	pop    rbx
    6c51:	xor    eax,eax
    6c53:	pop    rbp
    6c54:	pop    r12
    6c56:	pop    r14
    6c58:	ret    
    6c59:	nop    DWORD PTR [rax+0x0]
    6c60:	lea    rdi,[rip+0x15599]        # 1c200 <rcon>
    6c67:	add    rdx,0x20
    6c6b:	mov    r11d,0x1000000
    6c71:	lea    rsi,[rip+0x169c8]        # 1d640 <Te4>
    6c78:	lea    r14,[rdi+0x1c]
    6c7c:	jmp    6ce0 <AES_set_encrypt_key+0x3a0>
    6c7e:	xchg   ax,ax
    6c80:	mov    eax,ecx
    6c82:	movzx  ebp,ch
    6c85:	movzx  r12d,cl
    6c89:	shr    eax,0x10
    6c8c:	mov    r11d,DWORD PTR [rsi+rbp*4]
    6c90:	movzx  r12d,BYTE PTR [rsi+r12*4]
    6c95:	movzx  eax,al
    6c98:	add    rdx,0x20
    6c9c:	mov    eax,DWORD PTR [rsi+rax*4]
    6c9f:	and    r11d,0xff00
    6ca6:	and    eax,0xff0000
    6cab:	or     eax,r11d
    6cae:	mov    r11d,ecx
    6cb1:	xor    eax,DWORD PTR [rdx-0x30]
    6cb4:	shr    r11d,0x18
    6cb8:	mov    r11d,DWORD PTR [rsi+r11*4]
    6cbc:	and    r11d,0xff000000
    6cc3:	or     r11d,r12d
    6cc6:	xor    eax,r11d
    6cc9:	mov    DWORD PTR [rdx-0x10],eax
    6ccc:	xor    eax,DWORD PTR [rdx-0x2c]
    6ccf:	mov    DWORD PTR [rdx-0xc],eax
    6cd2:	xor    eax,DWORD PTR [rdx-0x28]
    6cd5:	xor    ebx,eax
    6cd7:	mov    DWORD PTR [rdx-0x8],eax
    6cda:	mov    DWORD PTR [rdx-0x4],ebx
    6cdd:	mov    r11d,DWORD PTR [rdi]
    6ce0:	mov    r12d,ebx
    6ce3:	movzx  eax,bl
    6ce6:	movzx  ebp,bh
    6ce9:	shr    r12d,0x18
    6ced:	mov    eax,DWORD PTR [rsi+rax*4]
    6cf0:	add    rdi,0x4
    6cf4:	movzx  r12d,BYTE PTR [rsi+r12*4]
    6cf9:	and    eax,0xff00
    6cfe:	or     eax,r12d
    6d01:	mov    r12d,ebx
    6d04:	shr    r12d,0x10
    6d08:	movzx  r12d,r12b
    6d0c:	mov    r12d,DWORD PTR [rsi+r12*4]
    6d10:	and    r12d,0xff000000
    6d17:	xor    eax,r12d
    6d1a:	mov    r12d,DWORD PTR [rsi+rbp*4]
    6d1e:	and    r12d,0xff0000
    6d25:	xor    eax,r12d
    6d28:	xor    eax,r8d
    6d2b:	xor    eax,r11d
    6d2e:	xor    r9d,eax
    6d31:	mov    r8d,eax
    6d34:	mov    DWORD PTR [rdx],eax
    6d36:	xor    r10d,r9d
    6d39:	mov    DWORD PTR [rdx+0x4],r9d
    6d3d:	xor    ecx,r10d
    6d40:	cmp    r14,rdi
    6d43:	mov    DWORD PTR [rdx+0x8],r10d
    6d47:	mov    DWORD PTR [rdx+0xc],ecx
    6d4a:	jne    6c80 <AES_set_encrypt_key+0x340>
    6d50:	pop    rbx
    6d51:	xor    eax,eax
    6d53:	pop    rbp
    6d54:	pop    r12
    6d56:	pop    r14
    6d58:	ret    
    6d59:	mov    eax,0xffffffff
    6d5e:	ret    
    6d5f:	mov    eax,0xfffffffe
    6d64:	ret    
    6d65:	nop
    6d66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006d70 <AES_set_decrypt_key>:
    6d70:	push   r14
    6d72:	push   rbp
    6d73:	mov    r14,rdx
    6d76:	push   rbx
    6d77:	call   6940 <AES_set_encrypt_key>
    6d7c:	test   eax,eax
    6d7e:	js     6f51 <AES_set_decrypt_key+0x1e1>
    6d84:	mov    eax,DWORD PTR [r14+0xf0]
    6d8b:	mov    rdx,r14
    6d8e:	lea    r9d,[rax*4+0x0]
    6d96:	test   r9d,r9d
    6d99:	jle    6e01 <AES_set_decrypt_key+0x91>
    6d9b:	movsxd rax,r9d
    6d9e:	mov    rcx,r14
    6da1:	xor    esi,esi
    6da3:	lea    rax,[r14+rax*4]
    6da7:	nop    WORD PTR [rax+rax*1+0x0]
    6db0:	mov    edi,DWORD PTR [rcx]
    6db2:	mov    r8d,DWORD PTR [rax]
    6db5:	add    esi,0x4
    6db8:	add    rcx,0x10
    6dbc:	sub    rax,0x10
    6dc0:	mov    DWORD PTR [rcx-0x10],r8d
    6dc4:	mov    DWORD PTR [rax+0x10],edi
    6dc7:	mov    r8d,DWORD PTR [rax+0x14]
    6dcb:	mov    edi,DWORD PTR [rcx-0xc]
    6dce:	mov    DWORD PTR [rcx-0xc],r8d
    6dd2:	mov    DWORD PTR [rax+0x14],edi
    6dd5:	mov    r8d,DWORD PTR [rax+0x18]
    6dd9:	mov    edi,DWORD PTR [rcx-0x8]
    6ddc:	mov    DWORD PTR [rcx-0x8],r8d
    6de0:	mov    DWORD PTR [rax+0x18],edi
    6de3:	mov    r8d,DWORD PTR [rax+0x1c]
    6de7:	mov    edi,DWORD PTR [rcx-0x4]
    6dea:	mov    DWORD PTR [rcx-0x4],r8d
    6dee:	mov    DWORD PTR [rax+0x1c],edi
    6df1:	mov    edi,r9d
    6df4:	sub    edi,esi
    6df6:	cmp    esi,edi
    6df8:	jl     6db0 <AES_set_decrypt_key+0x40>
    6dfa:	mov    eax,DWORD PTR [r14+0xf0]
    6e01:	cmp    eax,0x1
    6e04:	jle    6f4f <AES_set_decrypt_key+0x1df>
    6e0a:	lea    r9,[rip+0x1642f]        # 1d240 <Td0>
    6e11:	lea    rax,[rip+0x16828]        # 1d640 <Te4>
    6e18:	lea    r8,[rip+0x15821]        # 1c640 <Td3>
    6e1f:	lea    rdi,[rip+0x1601a]        # 1ce40 <Td1>
    6e26:	lea    rsi,[rip+0x15c13]        # 1ca40 <Td2>
    6e2d:	mov    r10d,0x1
    6e33:	nop    DWORD PTR [rax+rax*1+0x0]
    6e38:	add    rdx,0x10
    6e3c:	mov    r11d,DWORD PTR [rdx]
    6e3f:	add    r10d,0x1
    6e43:	mov    ecx,r11d
    6e46:	movzx  ebp,r11b
    6e4a:	mov    ebx,r11d
    6e4d:	shr    ecx,0x18
    6e50:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6e54:	movzx  ebx,bh
    6e57:	movzx  ecx,BYTE PTR [rax+rcx*4]
    6e5b:	mov    ecx,DWORD PTR [r9+rcx*4]
    6e5f:	xor    ecx,DWORD PTR [r8+rbp*4]
    6e63:	mov    ebp,r11d
    6e66:	shr    ebp,0x10
    6e69:	movzx  r11d,BYTE PTR [rax+rbx*4]
    6e6e:	movzx  ebp,bpl
    6e72:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6e76:	xor    ecx,DWORD PTR [rdi+rbp*4]
    6e79:	xor    ecx,DWORD PTR [rsi+r11*4]
    6e7d:	mov    r11d,DWORD PTR [rdx+0x4]
    6e81:	movzx  ebp,r11b
    6e85:	mov    ebx,r11d
    6e88:	mov    DWORD PTR [rdx],ecx
    6e8a:	mov    ecx,r11d
    6e8d:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6e91:	shr    ecx,0x18
    6e94:	movzx  ebx,bh
    6e97:	movzx  ecx,BYTE PTR [rax+rcx*4]
    6e9b:	mov    ecx,DWORD PTR [r9+rcx*4]
    6e9f:	xor    ecx,DWORD PTR [r8+rbp*4]
    6ea3:	mov    ebp,r11d
    6ea6:	shr    ebp,0x10
    6ea9:	movzx  r11d,BYTE PTR [rax+rbx*4]
    6eae:	movzx  ebp,bpl
    6eb2:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6eb6:	xor    ecx,DWORD PTR [rdi+rbp*4]
    6eb9:	xor    ecx,DWORD PTR [rsi+r11*4]
    6ebd:	mov    r11d,DWORD PTR [rdx+0x8]
    6ec1:	movzx  ebp,r11b
    6ec5:	mov    ebx,r11d
    6ec8:	mov    DWORD PTR [rdx+0x4],ecx
    6ecb:	mov    ecx,r11d
    6ece:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6ed2:	shr    ecx,0x18
    6ed5:	movzx  ebx,bh
    6ed8:	movzx  ecx,BYTE PTR [rax+rcx*4]
    6edc:	mov    ecx,DWORD PTR [r9+rcx*4]
    6ee0:	xor    ecx,DWORD PTR [r8+rbp*4]
    6ee4:	mov    ebp,r11d
    6ee7:	shr    ebp,0x10
    6eea:	movzx  r11d,BYTE PTR [rax+rbx*4]
    6eef:	movzx  ebp,bpl
    6ef3:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6ef7:	xor    ecx,DWORD PTR [rdi+rbp*4]
    6efa:	xor    ecx,DWORD PTR [rsi+r11*4]
    6efe:	mov    r11d,DWORD PTR [rdx+0xc]
    6f02:	movzx  ebp,r11b
    6f06:	mov    ebx,r11d
    6f09:	mov    DWORD PTR [rdx+0x8],ecx
    6f0c:	mov    ecx,r11d
    6f0f:	movzx  ebx,bh
    6f12:	shr    ecx,0x18
    6f15:	movzx  ecx,BYTE PTR [rax+rcx*4]
    6f19:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6f1d:	mov    ecx,DWORD PTR [r9+rcx*4]
    6f21:	xor    ecx,DWORD PTR [r8+rbp*4]
    6f25:	mov    ebp,r11d
    6f28:	shr    ebp,0x10
    6f2b:	movzx  r11d,BYTE PTR [rax+rbx*4]
    6f30:	movzx  ebp,bpl
    6f34:	movzx  ebp,BYTE PTR [rax+rbp*4]
    6f38:	xor    ecx,DWORD PTR [rdi+rbp*4]
    6f3b:	xor    ecx,DWORD PTR [rsi+r11*4]
    6f3f:	mov    DWORD PTR [rdx+0xc],ecx
    6f42:	cmp    DWORD PTR [r14+0xf0],r10d
    6f49:	jg     6e38 <AES_set_decrypt_key+0xc8>
    6f4f:	xor    eax,eax
    6f51:	pop    rbx
    6f52:	pop    rbp
    6f53:	pop    r14
    6f55:	ret    
    6f56:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000006f60 <AES_encrypt>:
    6f60:	push   r15
    6f62:	push   r14
    6f64:	lea    r11,[rip+0x176d5]        # 1e640 <Te0>
    6f6b:	push   r13
    6f6d:	push   r12
    6f6f:	lea    r10,[rip+0x16aca]        # 1da40 <Te3>
    6f76:	push   rbp
    6f77:	push   rbx
    6f78:	mov    rbx,rdx
    6f7b:	movzx  eax,BYTE PTR [rdi]
    6f7e:	movzx  ebp,BYTE PTR [rdi+0x4]
    6f82:	lea    r9,[rip+0x172b7]        # 1e240 <Te1>
    6f89:	mov    QWORD PTR [rsp-0x18],rdx
    6f8e:	movzx  edx,BYTE PTR [rdi+0x1]
    6f92:	lea    r8,[rip+0x16ea7]        # 1de40 <Te2>
    6f99:	movzx  r12d,BYTE PTR [rdi+0x8]
    6f9e:	mov    QWORD PTR [rsp-0x10],rsi
    6fa3:	movzx  esi,BYTE PTR [rdi+0xc]
    6fa7:	movzx  ecx,BYTE PTR [rdi+0x2]
    6fab:	shl    eax,0x18
    6fae:	shl    ebp,0x18
    6fb1:	shl    edx,0x10
    6fb4:	xor    eax,edx
    6fb6:	movzx  edx,BYTE PTR [rdi+0x3]
    6fba:	shl    r12d,0x18
    6fbe:	shl    esi,0x18
    6fc1:	shl    ecx,0x8
    6fc4:	xor    eax,edx
    6fc6:	movzx  edx,BYTE PTR [rdi+0x5]
    6fca:	xor    eax,ecx
    6fcc:	xor    eax,DWORD PTR [rbx]
    6fce:	shl    edx,0x10
    6fd1:	xor    ebp,edx
    6fd3:	movzx  edx,BYTE PTR [rdi+0x7]
    6fd7:	xor    ebp,edx
    6fd9:	movzx  edx,BYTE PTR [rdi+0x6]
    6fdd:	shl    edx,0x8
    6fe0:	xor    ebp,edx
    6fe2:	movzx  edx,BYTE PTR [rdi+0x9]
    6fe6:	xor    ebp,DWORD PTR [rbx+0x4]
    6fe9:	shl    edx,0x10
    6fec:	xor    r12d,edx
    6fef:	movzx  edx,BYTE PTR [rdi+0xb]
    6ff3:	xor    r12d,edx
    6ff6:	movzx  edx,BYTE PTR [rdi+0xa]
    6ffa:	shl    edx,0x8
    6ffd:	xor    r12d,edx
    7000:	movzx  edx,BYTE PTR [rdi+0xd]
    7004:	xor    r12d,DWORD PTR [rbx+0x8]
    7008:	shl    edx,0x10
    700b:	xor    esi,edx
    700d:	movzx  edx,BYTE PTR [rdi+0xf]
    7011:	xor    esi,edx
    7013:	movzx  edx,BYTE PTR [rdi+0xe]
    7017:	mov    rdi,rbx
    701a:	shl    edx,0x8
    701d:	xor    esi,edx
    701f:	xor    esi,DWORD PTR [rbx+0xc]
    7022:	mov    ebx,DWORD PTR [rbx+0xf0]
    7028:	mov    ecx,ebx
    702a:	mov    DWORD PTR [rsp-0x40],ebx
    702e:	sar    ecx,1
    7030:	lea    edx,[rcx-0x1]
    7033:	mov    DWORD PTR [rsp-0x4],edx
    7037:	add    rdx,0x1
    703b:	shl    rdx,0x5
    703f:	add    rdx,rdi
    7042:	mov    QWORD PTR [rsp-0x20],rdx
    7047:	jmp    70c6 <AES_encrypt+0x166>
    7049:	nop    DWORD PTR [rax+0x0]
    7050:	mov    eax,DWORD PTR [r11+r12*4]
    7054:	xor    eax,DWORD PTR [r10+r13*4]
    7058:	mov    esi,esi
    705a:	mov    ecx,DWORD PTR [rsp-0x3c]
    705e:	mov    ebx,ebx
    7060:	xor    eax,r14d
    7063:	xor    eax,DWORD PTR [r9+rbp*4]
    7067:	xor    eax,DWORD PTR [r8+rsi*4]
    706b:	mov    esi,DWORD PTR [rsp-0x30]
    706f:	mov    ebp,DWORD PTR [r11+rcx*4]
    7073:	mov    ecx,DWORD PTR [rsp-0x38]
    7077:	xor    ebp,DWORD PTR [r10+rsi*4]
    707b:	xor    ebp,DWORD PTR [rdi+0x4]
    707e:	xor    ebp,DWORD PTR [r9+rcx*4]
    7082:	mov    ecx,DWORD PTR [rsp-0x34]
    7086:	xor    ebp,DWORD PTR [r8+rcx*4]
    708a:	mov    ecx,DWORD PTR [rsp-0x2c]
    708e:	mov    r12d,DWORD PTR [r11+rcx*4]
    7092:	xor    r12d,DWORD PTR [r10+r15*4]
    7096:	mov    r15d,DWORD PTR [rsp-0x28]
    709b:	mov    ecx,DWORD PTR [rsp-0x24]
    709f:	xor    r12d,DWORD PTR [rdi+0x8]
    70a3:	xor    r12d,DWORD PTR [r9+r15*4]
    70a7:	xor    r12d,DWORD PTR [r8+rcx*4]
    70ab:	mov    ecx,DWORD PTR [rsp-0x8]
    70af:	mov    esi,DWORD PTR [r11+rcx*4]
    70b3:	mov    ecx,DWORD PTR [rsp-0x40]
    70b7:	xor    esi,DWORD PTR [r10+rdx*4]
    70bb:	xor    esi,DWORD PTR [rdi+0xc]
    70be:	xor    esi,DWORD PTR [r9+rcx*4]
    70c2:	xor    esi,DWORD PTR [r8+rbx*4]
    70c6:	mov    edx,eax
    70c8:	movzx  ebx,sil
    70cc:	movzx  r13d,al
    70d0:	shr    edx,0x18
    70d3:	add    rdi,0x20
    70d7:	mov    ecx,DWORD PTR [r11+rdx*4]
    70db:	mov    edx,ebp
    70dd:	xor    ecx,DWORD PTR [r10+rbx*4]
    70e1:	shr    edx,0x10
    70e4:	xor    ecx,DWORD PTR [rdi-0x10]
    70e7:	mov    ebx,r12d
    70ea:	movzx  edx,dl
    70ed:	xor    ecx,DWORD PTR [r9+rdx*4]
    70f1:	movzx  edx,bh
    70f4:	xor    ecx,DWORD PTR [r8+rdx*4]
    70f8:	mov    edx,ebp
    70fa:	shr    edx,0x18
    70fd:	mov    ebx,DWORD PTR [r11+rdx*4]
    7101:	mov    edx,r12d
    7104:	xor    ebx,DWORD PTR [r10+r13*4]
    7108:	shr    edx,0x10
    710b:	xor    ebx,DWORD PTR [rdi-0xc]
    710e:	movzx  r13d,bpl
    7112:	movzx  edx,dl
    7115:	mov    r14d,ecx
    7118:	movzx  ecx,ah
    711b:	xor    ebx,DWORD PTR [r9+rdx*4]
    711f:	mov    edx,esi
    7121:	shr    eax,0x10
    7124:	movzx  edx,dh
    7127:	movzx  eax,al
    712a:	mov    DWORD PTR [rsp-0x40],r14d
    712f:	xor    ebx,DWORD PTR [r8+rdx*4]
    7133:	mov    edx,r12d
    7136:	movzx  r12d,r12b
    713a:	shr    edx,0x18
    713d:	mov    edx,DWORD PTR [r11+rdx*4]
    7141:	xor    edx,DWORD PTR [r10+r13*4]
    7145:	mov    r13d,esi
    7148:	shr    r13d,0x10
    714c:	xor    edx,DWORD PTR [rdi-0x8]
    714f:	shr    esi,0x18
    7152:	movzx  r13d,r13b
    7156:	mov    esi,DWORD PTR [r11+rsi*4]
    715a:	xor    esi,DWORD PTR [r10+r12*4]
    715e:	xor    edx,DWORD PTR [r9+r13*4]
    7162:	xor    esi,DWORD PTR [rdi-0x4]
    7165:	mov    r12d,r14d
    7168:	xor    edx,DWORD PTR [r8+rcx*4]
    716c:	xor    esi,DWORD PTR [r9+rax*4]
    7170:	mov    ecx,ebp
    7172:	mov    r14d,DWORD PTR [rdi]
    7175:	mov    ebp,ebx
    7177:	shr    r12d,0x18
    717b:	shr    ebp,0x10
    717e:	movzx  ebp,bpl
    7182:	mov    r15d,edx
    7185:	mov    eax,esi
    7187:	movzx  esi,ch
    718a:	shr    r15d,0x10
    718e:	xor    eax,DWORD PTR [r8+rsi*4]
    7192:	mov    ecx,ebx
    7194:	movzx  r15d,r15b
    7198:	shr    ecx,0x18
    719b:	movzx  esi,dh
    719e:	mov    DWORD PTR [rsp-0x38],r15d
    71a3:	movzx  r15d,BYTE PTR [rsp-0x40]
    71a9:	mov    DWORD PTR [rsp-0x3c],ecx
    71ad:	movzx  ecx,ah
    71b0:	movzx  r13d,al
    71b4:	mov    DWORD PTR [rsp-0x34],ecx
    71b8:	mov    DWORD PTR [rsp-0x30],r15d
    71bd:	mov    r15d,edx
    71c0:	movzx  edx,dl
    71c3:	shr    r15d,0x18
    71c7:	mov    DWORD PTR [rsp-0x2c],r15d
    71cc:	mov    r15d,eax
    71cf:	shr    eax,0x18
    71d2:	shr    r15d,0x10
    71d6:	mov    DWORD PTR [rsp-0x8],eax
    71da:	movzx  ecx,r15b
    71de:	movzx  r15d,bl
    71e2:	movzx  ebx,bh
    71e5:	mov    DWORD PTR [rsp-0x28],ecx
    71e9:	mov    ecx,DWORD PTR [rsp-0x40]
    71ed:	movzx  ecx,ch
    71f0:	mov    DWORD PTR [rsp-0x24],ecx
    71f4:	mov    ecx,DWORD PTR [rsp-0x40]
    71f8:	shr    ecx,0x10
    71fb:	cmp    rdi,QWORD PTR [rsp-0x20]
    7200:	movzx  eax,cl
    7203:	mov    DWORD PTR [rsp-0x40],eax
    7207:	jne    7050 <AES_encrypt+0xf0>
    720d:	mov    ecx,DWORD PTR [rsp-0x4]
    7211:	mov    r8,QWORD PTR [rsp-0x18]
    7216:	lea    rdi,[rip+0x16423]        # 1d640 <Te4>
    721d:	mov    eax,r14d
    7220:	mov    r14d,esi
    7223:	mov    r9,QWORD PTR [rsp-0x10]
    7228:	movzx  esi,BYTE PTR [rdi+r13*4]
    722d:	mov    ebx,ebx
    722f:	add    rcx,0x1
    7233:	shl    rcx,0x5
    7237:	add    r8,rcx
    723a:	mov    ecx,DWORD PTR [rdi+r14*4]
    723e:	and    ecx,0xff00
    7244:	or     ecx,esi
    7246:	mov    esi,DWORD PTR [rdi+rbp*4]
    7249:	xor    eax,ecx
    724b:	mov    ecx,DWORD PTR [rdi+r12*4]
    724f:	and    esi,0xff0000
    7255:	and    ecx,0xff000000
    725b:	or     ecx,esi
    725d:	xor    eax,ecx
    725f:	mov    ecx,eax
    7261:	mov    BYTE PTR [r9+0x3],al
    7265:	shr    ecx,0x18
    7268:	mov    BYTE PTR [r9],cl
    726b:	mov    ecx,eax
    726d:	shr    ecx,0x10
    7270:	mov    BYTE PTR [r9+0x1],cl
    7274:	movzx  ecx,ah
    7277:	mov    eax,DWORD PTR [rsp-0x34]
    727b:	mov    BYTE PTR [r9+0x2],cl
    727f:	mov    ecx,DWORD PTR [rsp-0x3c]
    7283:	mov    esi,DWORD PTR [rdi+rax*4]
    7286:	mov    eax,DWORD PTR [rsp-0x30]
    728a:	and    esi,0xff00
    7290:	movzx  eax,BYTE PTR [rdi+rax*4]
    7294:	or     esi,eax
    7296:	mov    eax,DWORD PTR [rdi+rcx*4]
    7299:	xor    esi,DWORD PTR [r8+0x4]
    729d:	and    eax,0xff000000
    72a2:	mov    ecx,eax
    72a4:	mov    eax,DWORD PTR [rsp-0x38]
    72a8:	mov    eax,DWORD PTR [rdi+rax*4]
    72ab:	and    eax,0xff0000
    72b0:	or     eax,ecx
    72b2:	movzx  ecx,BYTE PTR [rdi+r15*4]
    72b7:	mov    r15d,DWORD PTR [rsp-0x28]
    72bc:	xor    esi,eax
    72be:	mov    eax,esi
    72c0:	mov    BYTE PTR [r9+0x7],sil
    72c4:	shr    eax,0x18
    72c7:	mov    BYTE PTR [r9+0x4],al
    72cb:	mov    eax,esi
    72cd:	shr    eax,0x10
    72d0:	mov    BYTE PTR [r9+0x5],al
    72d4:	mov    eax,esi
    72d6:	mov    esi,DWORD PTR [rdi+r15*4]
    72da:	movzx  eax,ah
    72dd:	mov    BYTE PTR [r9+0x6],al
    72e1:	mov    eax,DWORD PTR [rsp-0x24]
    72e5:	and    esi,0xff0000
    72eb:	mov    eax,DWORD PTR [rdi+rax*4]
    72ee:	and    eax,0xff00
    72f3:	or     eax,ecx
    72f5:	xor    eax,DWORD PTR [r8+0x8]
    72f9:	mov    ecx,eax
    72fb:	mov    eax,DWORD PTR [rsp-0x2c]
    72ff:	mov    eax,DWORD PTR [rdi+rax*4]
    7302:	and    eax,0xff000000
    7307:	or     eax,esi
    7309:	xor    eax,ecx
    730b:	mov    ecx,eax
    730d:	shr    ecx,0x18
    7310:	mov    BYTE PTR [r9+0x8],cl
    7314:	mov    ecx,eax
    7316:	mov    BYTE PTR [r9+0xb],al
    731a:	shr    ecx,0x10
    731d:	mov    esi,DWORD PTR [rsp-0x8]
    7321:	movzx  edx,BYTE PTR [rdi+rdx*4]
    7325:	mov    BYTE PTR [r9+0x9],cl
    7329:	movzx  ecx,ah
    732c:	mov    eax,DWORD PTR [rdi+rbx*4]
    732f:	mov    BYTE PTR [r9+0xa],cl
    7333:	mov    ecx,DWORD PTR [rsp-0x40]
    7337:	and    eax,0xff00
    733c:	or     eax,edx
    733e:	mov    edx,DWORD PTR [rdi+rsi*4]
    7341:	xor    eax,DWORD PTR [r8+0xc]
    7345:	mov    ecx,DWORD PTR [rdi+rcx*4]
    7348:	and    edx,0xff000000
    734e:	and    ecx,0xff0000
    7354:	or     edx,ecx
    7356:	xor    eax,edx
    7358:	mov    edx,eax
    735a:	movzx  ebx,ah
    735d:	mov    BYTE PTR [r9+0xf],al
    7361:	shr    edx,0x18
    7364:	mov    BYTE PTR [r9+0xe],bl
    7368:	mov    BYTE PTR [r9+0xc],dl
    736c:	mov    edx,eax
    736e:	shr    edx,0x10
    7371:	mov    BYTE PTR [r9+0xd],dl
    7375:	pop    rbx
    7376:	pop    rbp
    7377:	pop    r12
    7379:	pop    r13
    737b:	pop    r14
    737d:	pop    r15
    737f:	ret    

0000000000007380 <AES_decrypt>:
    7380:	push   r15
    7382:	push   r14
    7384:	lea    r11,[rip+0x15eb5]        # 1d240 <Td0>
    738b:	push   r13
    738d:	push   r12
    738f:	lea    r10,[rip+0x152aa]        # 1c640 <Td3>
    7396:	push   rbp
    7397:	push   rbx
    7398:	mov    rbx,rdx
    739b:	movzx  eax,BYTE PTR [rdi]
    739e:	movzx  ebp,BYTE PTR [rdi+0x4]
    73a2:	lea    r9,[rip+0x15a97]        # 1ce40 <Td1>
    73a9:	mov    QWORD PTR [rsp-0x18],rdx
    73ae:	movzx  edx,BYTE PTR [rdi+0x1]
    73b2:	lea    r8,[rip+0x15687]        # 1ca40 <Td2>
    73b9:	movzx  r12d,BYTE PTR [rdi+0x8]
    73be:	mov    QWORD PTR [rsp-0x10],rsi
    73c3:	movzx  esi,BYTE PTR [rdi+0xc]
    73c7:	movzx  ecx,BYTE PTR [rdi+0x2]
    73cb:	shl    eax,0x18
    73ce:	shl    ebp,0x18
    73d1:	shl    edx,0x10
    73d4:	xor    eax,edx
    73d6:	movzx  edx,BYTE PTR [rdi+0x3]
    73da:	shl    r12d,0x18
    73de:	shl    esi,0x18
    73e1:	shl    ecx,0x8
    73e4:	xor    eax,edx
    73e6:	movzx  edx,BYTE PTR [rdi+0x5]
    73ea:	xor    eax,ecx
    73ec:	xor    eax,DWORD PTR [rbx]
    73ee:	shl    edx,0x10
    73f1:	xor    ebp,edx
    73f3:	movzx  edx,BYTE PTR [rdi+0x7]
    73f7:	xor    ebp,edx
    73f9:	movzx  edx,BYTE PTR [rdi+0x6]
    73fd:	shl    edx,0x8
    7400:	xor    ebp,edx
    7402:	movzx  edx,BYTE PTR [rdi+0x9]
    7406:	xor    ebp,DWORD PTR [rbx+0x4]
    7409:	shl    edx,0x10
    740c:	xor    r12d,edx
    740f:	movzx  edx,BYTE PTR [rdi+0xb]
    7413:	xor    r12d,edx
    7416:	movzx  edx,BYTE PTR [rdi+0xa]
    741a:	shl    edx,0x8
    741d:	xor    r12d,edx
    7420:	movzx  edx,BYTE PTR [rdi+0xd]
    7424:	xor    r12d,DWORD PTR [rbx+0x8]
    7428:	shl    edx,0x10
    742b:	xor    esi,edx
    742d:	movzx  edx,BYTE PTR [rdi+0xf]
    7431:	xor    esi,edx
    7433:	movzx  edx,BYTE PTR [rdi+0xe]
    7437:	mov    rdi,rbx
    743a:	shl    edx,0x8
    743d:	xor    esi,edx
    743f:	xor    esi,DWORD PTR [rbx+0xc]
    7442:	mov    ebx,DWORD PTR [rbx+0xf0]
    7448:	mov    ecx,ebx
    744a:	mov    DWORD PTR [rsp-0x44],ebx
    744e:	sar    ecx,1
    7450:	lea    edx,[rcx-0x1]
    7453:	mov    DWORD PTR [rsp-0x4],edx
    7457:	add    rdx,0x1
    745b:	shl    rdx,0x5
    745f:	add    rdx,rdi
    7462:	mov    QWORD PTR [rsp-0x20],rdx
    7467:	jmp    74e6 <AES_decrypt+0x166>
    7469:	nop    DWORD PTR [rax+0x0]
    7470:	mov    eax,DWORD PTR [r11+r12*4]
    7474:	xor    eax,DWORD PTR [r10+r13*4]
    7478:	mov    esi,esi
    747a:	mov    ecx,DWORD PTR [rsp-0x40]
    747e:	mov    ebx,ebx
    7480:	xor    eax,r14d
    7483:	xor    eax,DWORD PTR [r9+rbp*4]
    7487:	xor    eax,DWORD PTR [r8+rsi*4]
    748b:	mov    esi,DWORD PTR [rsp-0x34]
    748f:	mov    ebp,DWORD PTR [r11+rcx*4]
    7493:	mov    ecx,DWORD PTR [rsp-0x3c]
    7497:	xor    ebp,DWORD PTR [r10+rsi*4]
    749b:	xor    ebp,DWORD PTR [rdi+0x4]
    749e:	xor    ebp,DWORD PTR [r9+rcx*4]
    74a2:	mov    ecx,DWORD PTR [rsp-0x38]
    74a6:	xor    ebp,DWORD PTR [r8+rcx*4]
    74aa:	mov    ecx,DWORD PTR [rsp-0x30]
    74ae:	mov    r12d,DWORD PTR [r11+rcx*4]
    74b2:	xor    r12d,DWORD PTR [r10+r15*4]
    74b6:	mov    r15d,DWORD PTR [rsp-0x2c]
    74bb:	mov    ecx,DWORD PTR [rsp-0x28]
    74bf:	xor    r12d,DWORD PTR [rdi+0x8]
    74c3:	xor    r12d,DWORD PTR [r9+r15*4]
    74c7:	xor    r12d,DWORD PTR [r8+rcx*4]
    74cb:	mov    ecx,DWORD PTR [rsp-0x24]
    74cf:	mov    esi,DWORD PTR [r11+rcx*4]
    74d3:	mov    ecx,DWORD PTR [rsp-0x8]
    74d7:	xor    esi,DWORD PTR [r10+rdx*4]
    74db:	xor    esi,DWORD PTR [rdi+0xc]
    74de:	xor    esi,DWORD PTR [r9+rcx*4]
    74e2:	xor    esi,DWORD PTR [r8+rbx*4]
    74e6:	mov    edx,eax
    74e8:	movzx  ecx,bpl
    74ec:	mov    ebx,r12d
    74ef:	shr    edx,0x18
    74f2:	movzx  r13d,r12b
    74f6:	movzx  r14d,al
    74fa:	mov    edx,DWORD PTR [r11+rdx*4]
    74fe:	xor    edx,DWORD PTR [r10+rcx*4]
    7502:	mov    ecx,esi
    7504:	shr    ecx,0x10
    7507:	xor    edx,DWORD PTR [rdi+0x10]
    750a:	add    rdi,0x20
    750e:	movzx  ecx,cl
    7511:	xor    edx,DWORD PTR [r9+rcx*4]
    7515:	movzx  ecx,bh
    7518:	xor    edx,DWORD PTR [r8+rcx*4]
    751c:	mov    ecx,ebp
    751e:	shr    ecx,0x18
    7521:	mov    ebx,DWORD PTR [r11+rcx*4]
    7525:	mov    ecx,eax
    7527:	xor    ebx,DWORD PTR [r10+r13*4]
    752b:	shr    ecx,0x10
    752e:	xor    ebx,DWORD PTR [rdi-0xc]
    7531:	movzx  r13d,sil
    7535:	movzx  ecx,cl
    7538:	mov    r15d,edx
    753b:	movzx  edx,ah
    753e:	xor    ebx,DWORD PTR [r9+rcx*4]
    7542:	mov    ecx,esi
    7544:	shr    esi,0x18
    7547:	movzx  ecx,ch
    754a:	mov    eax,DWORD PTR [r11+rsi*4]
    754e:	xor    eax,DWORD PTR [r10+r14*4]
    7552:	xor    ebx,DWORD PTR [r8+rcx*4]
    7556:	mov    ecx,r12d
    7559:	shr    r12d,0x10
    755d:	shr    ecx,0x18
    7560:	xor    eax,DWORD PTR [rdi-0x4]
    7563:	movzx  r12d,r12b
    7567:	mov    ecx,DWORD PTR [r11+rcx*4]
    756b:	xor    ecx,DWORD PTR [r10+r13*4]
    756f:	mov    r13d,ebp
    7572:	shr    r13d,0x10
    7576:	xor    ecx,DWORD PTR [rdi-0x8]
    7579:	xor    eax,DWORD PTR [r9+r12*4]
    757d:	movzx  r13d,r13b
    7581:	mov    DWORD PTR [rsp-0x44],r15d
    7586:	mov    r12d,r15d
    7589:	xor    ecx,DWORD PTR [r9+r13*4]
    758d:	shr    r15d,0x10
    7591:	shr    r12d,0x18
    7595:	xor    ecx,DWORD PTR [r8+rdx*4]
    7599:	mov    edx,ebp
    759b:	movzx  r15d,r15b
    759f:	movzx  esi,dh
    75a2:	mov    DWORD PTR [rsp-0x3c],r15d
    75a7:	mov    edx,ebx
    75a9:	xor    eax,DWORD PTR [r8+rsi*4]
    75ad:	shr    edx,0x18
    75b0:	mov    r14d,DWORD PTR [rdi]
    75b3:	mov    DWORD PTR [rsp-0x40],edx
    75b7:	movzx  r13d,bl
    75bb:	movzx  r15d,cl
    75bf:	movzx  esi,ch
    75c2:	mov    DWORD PTR [rsp-0x34],r15d
    75c7:	mov    r15d,ecx
    75ca:	shr    r15d,0x18
    75ce:	movzx  edx,ah
    75d1:	mov    ebp,eax
    75d3:	mov    DWORD PTR [rsp-0x30],r15d
    75d8:	mov    r15d,ebx
    75db:	mov    DWORD PTR [rsp-0x38],edx
    75df:	shr    r15d,0x10
    75e3:	shr    ebp,0x10
    75e6:	movzx  ebx,bh
    75e9:	movzx  edx,r15b
    75ed:	movzx  r15d,al
    75f1:	shr    eax,0x18
    75f4:	mov    DWORD PTR [rsp-0x2c],edx
    75f8:	mov    edx,DWORD PTR [rsp-0x44]
    75fc:	shr    ecx,0x10
    75ff:	mov    DWORD PTR [rsp-0x24],eax
    7603:	movzx  eax,cl
    7606:	movzx  ebp,bpl
    760a:	mov    DWORD PTR [rsp-0x8],eax
    760e:	movzx  edx,dh
    7611:	mov    DWORD PTR [rsp-0x28],edx
    7615:	movzx  edx,BYTE PTR [rsp-0x44]
    761a:	cmp    rdi,QWORD PTR [rsp-0x20]
    761f:	jne    7470 <AES_decrypt+0xf0>
    7625:	mov    ecx,DWORD PTR [rsp-0x4]
    7629:	mov    r8,QWORD PTR [rsp-0x18]
    762e:	lea    rdi,[rip+0x14c0b]        # 1c240 <Td4>
    7635:	mov    eax,r14d
    7638:	mov    r14d,esi
    763b:	mov    ebx,ebx
    763d:	movzx  esi,BYTE PTR [rdi+r13*4]
    7642:	add    rcx,0x1
    7646:	shl    rcx,0x5
    764a:	add    r8,rcx
    764d:	mov    ecx,DWORD PTR [rdi+r14*4]
    7651:	mov    r14,QWORD PTR [rsp-0x10]
    7656:	and    ecx,0xff00
    765c:	or     ecx,esi
    765e:	mov    esi,DWORD PTR [rdi+rbp*4]
    7661:	xor    eax,ecx
    7663:	mov    ecx,DWORD PTR [rdi+r12*4]
    7667:	and    esi,0xff0000
    766d:	and    ecx,0xff000000
    7673:	or     ecx,esi
    7675:	xor    eax,ecx
    7677:	mov    ecx,eax
    7679:	mov    BYTE PTR [r14+0x3],al
    767d:	shr    ecx,0x18
    7680:	mov    BYTE PTR [r14],cl
    7683:	mov    ecx,eax
    7685:	shr    ecx,0x10
    7688:	mov    BYTE PTR [r14+0x1],cl
    768c:	movzx  ecx,ah
    768f:	mov    eax,DWORD PTR [rsp-0x38]
    7693:	mov    BYTE PTR [r14+0x2],cl
    7697:	mov    ecx,DWORD PTR [rsp-0x40]
    769b:	mov    esi,DWORD PTR [rdi+rax*4]
    769e:	mov    eax,DWORD PTR [rsp-0x34]
    76a2:	and    esi,0xff00
    76a8:	movzx  eax,BYTE PTR [rdi+rax*4]
    76ac:	or     esi,eax
    76ae:	mov    eax,DWORD PTR [rdi+rcx*4]
    76b1:	xor    esi,DWORD PTR [r8+0x4]
    76b5:	and    eax,0xff000000
    76ba:	mov    ecx,eax
    76bc:	mov    eax,DWORD PTR [rsp-0x3c]
    76c0:	mov    eax,DWORD PTR [rdi+rax*4]
    76c3:	and    eax,0xff0000
    76c8:	or     eax,ecx
    76ca:	movzx  ecx,BYTE PTR [rdi+r15*4]
    76cf:	mov    r15d,DWORD PTR [rsp-0x2c]
    76d4:	xor    esi,eax
    76d6:	mov    eax,esi
    76d8:	mov    BYTE PTR [r14+0x7],sil
    76dc:	shr    eax,0x18
    76df:	mov    BYTE PTR [r14+0x4],al
    76e3:	mov    eax,esi
    76e5:	shr    eax,0x10
    76e8:	mov    BYTE PTR [r14+0x5],al
    76ec:	mov    eax,esi
    76ee:	mov    esi,DWORD PTR [rdi+r15*4]
    76f2:	movzx  eax,ah
    76f5:	mov    BYTE PTR [r14+0x6],al
    76f9:	mov    eax,DWORD PTR [rsp-0x28]
    76fd:	and    esi,0xff0000
    7703:	mov    eax,DWORD PTR [rdi+rax*4]
    7706:	and    eax,0xff00
    770b:	or     eax,ecx
    770d:	xor    eax,DWORD PTR [r8+0x8]
    7711:	mov    ecx,eax
    7713:	mov    eax,DWORD PTR [rsp-0x30]
    7717:	mov    eax,DWORD PTR [rdi+rax*4]
    771a:	and    eax,0xff000000
    771f:	or     eax,esi
    7721:	xor    eax,ecx
    7723:	mov    ecx,eax
    7725:	shr    ecx,0x18
    7728:	mov    BYTE PTR [r14+0x8],cl
    772c:	mov    ecx,eax
    772e:	mov    BYTE PTR [r14+0xb],al
    7732:	shr    ecx,0x10
    7735:	mov    esi,DWORD PTR [rsp-0x24]
    7739:	movzx  edx,BYTE PTR [rdi+rdx*4]
    773d:	mov    BYTE PTR [r14+0x9],cl
    7741:	movzx  ecx,ah
    7744:	mov    eax,DWORD PTR [rdi+rbx*4]
    7747:	mov    BYTE PTR [r14+0xa],cl
    774b:	mov    ecx,DWORD PTR [rsp-0x8]
    774f:	and    eax,0xff00
    7754:	or     eax,edx
    7756:	mov    edx,DWORD PTR [rdi+rsi*4]
    7759:	xor    eax,DWORD PTR [r8+0xc]
    775d:	mov    ecx,DWORD PTR [rdi+rcx*4]
    7760:	and    edx,0xff000000
    7766:	and    ecx,0xff0000
    776c:	or     edx,ecx
    776e:	xor    eax,edx
    7770:	mov    edx,eax
    7772:	movzx  ebx,ah
    7775:	mov    BYTE PTR [r14+0xf],al
    7779:	shr    edx,0x18
    777c:	mov    BYTE PTR [r14+0xe],bl
    7780:	mov    BYTE PTR [r14+0xc],dl
    7784:	mov    edx,eax
    7786:	shr    edx,0x10
    7789:	mov    BYTE PTR [r14+0xd],dl
    778d:	pop    rbx
    778e:	pop    rbp
    778f:	pop    r12
    7791:	pop    r13
    7793:	pop    r14
    7795:	pop    r15
    7797:	ret    
    7798:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000077a0 <AES_cbc_encrypt>:
    77a0:	push   r15
    77a2:	push   r14
    77a4:	mov    r15,rsi
    77a7:	push   r13
    77a9:	push   r12
    77ab:	mov    r14,r8
    77ae:	push   rbp
    77af:	push   rbx
    77b0:	mov    r12,rdi
    77b3:	mov    rbx,rdx
    77b6:	sub    rsp,0x48
    77ba:	mov    rax,QWORD PTR fs:0x28
    77c3:	mov    QWORD PTR [rsp+0x38],rax
    77c8:	xor    eax,eax
    77ca:	test   r9d,r9d
    77cd:	mov    QWORD PTR [rsp+0x8],rcx
    77d2:	jne    7880 <AES_cbc_encrypt+0xe0>
    77d8:	cmp    rdx,0xf
    77dc:	jbe    7852 <AES_cbc_encrypt+0xb2>
    77de:	lea    rax,[rdx-0x10]
    77e2:	mov    r13,rdi
    77e5:	and    rax,0xfffffffffffffff0
    77e9:	lea    rbp,[rax+0x10]
    77ed:	lea    rax,[rsi+rbp*1]
    77f1:	mov    QWORD PTR [rsp+0x10],rax
    77f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    7800:	mov    rdx,QWORD PTR [rsp+0x8]
    7805:	mov    rsi,r15
    7808:	mov    rdi,r13
    780b:	movdqu xmm0,XMMWORD PTR [r13+0x0]
    7811:	movaps XMMWORD PTR [rsp+0x20],xmm0
    7816:	call   7380 <AES_decrypt>
    781b:	xor    eax,eax
    781d:	nop    DWORD PTR [rax]
    7820:	movzx  edx,BYTE PTR [r14+rax*1]
    7825:	xor    BYTE PTR [r15+rax*1],dl
    7829:	add    rax,0x1
    782d:	cmp    rax,0x10
    7831:	jne    7820 <AES_cbc_encrypt+0x80>
    7833:	add    r13,0x10
    7837:	add    r15,0x10
    783b:	cmp    r15,QWORD PTR [rsp+0x10]
    7840:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    7846:	movups XMMWORD PTR [r14],xmm0
    784a:	jne    7800 <AES_cbc_encrypt+0x60>
    784c:	and    ebx,0xf
    784f:	add    r12,rbp
    7852:	test   rbx,rbx
    7855:	jne    7967 <AES_cbc_encrypt+0x1c7>
    785b:	mov    rax,QWORD PTR [rsp+0x38]
    7860:	xor    rax,QWORD PTR fs:0x28
    7869:	jne    79b6 <AES_cbc_encrypt+0x216>
    786f:	add    rsp,0x48
    7873:	pop    rbx
    7874:	pop    rbp
    7875:	pop    r12
    7877:	pop    r13
    7879:	pop    r14
    787b:	pop    r15
    787d:	ret    
    787e:	xchg   ax,ax
    7880:	cmp    rdx,0xf
    7884:	jbe    7901 <AES_cbc_encrypt+0x161>
    7886:	lea    rax,[rdx-0x10]
    788a:	lea    r13,[rsp+0x20]
    788f:	mov    rbp,rdi
    7892:	and    rax,0xfffffffffffffff0
    7896:	add    rax,0x10
    789a:	mov    QWORD PTR [rsp+0x18],rax
    789f:	add    rax,rsi
    78a2:	mov    QWORD PTR [rsp+0x10],rax
    78a7:	nop    WORD PTR [rax+rax*1+0x0]
    78b0:	xor    eax,eax
    78b2:	nop    WORD PTR [rax+rax*1+0x0]
    78b8:	movzx  edx,BYTE PTR [rbp+rax*1+0x0]
    78bd:	xor    dl,BYTE PTR [r14+rax*1]
    78c1:	mov    BYTE PTR [r13+rax*1+0x0],dl
    78c6:	add    rax,0x1
    78ca:	cmp    rax,0x10
    78ce:	jne    78b8 <AES_cbc_encrypt+0x118>
    78d0:	mov    rdx,QWORD PTR [rsp+0x8]
    78d5:	mov    rsi,r15
    78d8:	mov    rdi,r13
    78db:	add    rbp,0x10
    78df:	add    r15,0x10
    78e3:	call   6f60 <AES_encrypt>
    78e8:	movdqu xmm0,XMMWORD PTR [r15-0x10]
    78ee:	cmp    r15,QWORD PTR [rsp+0x10]
    78f3:	movups XMMWORD PTR [r14],xmm0
    78f7:	jne    78b0 <AES_cbc_encrypt+0x110>
    78f9:	add    r12,QWORD PTR [rsp+0x18]
    78fe:	and    ebx,0xf
    7901:	test   rbx,rbx
    7904:	je     785b <AES_cbc_encrypt+0xbb>
    790a:	lea    r13,[rsp+0x20]
    790f:	xor    eax,eax
    7911:	nop    DWORD PTR [rax+0x0]
    7918:	movzx  edx,BYTE PTR [r12+rax*1]
    791d:	xor    dl,BYTE PTR [r14+rax*1]
    7921:	mov    BYTE PTR [r13+rax*1+0x0],dl
    7926:	add    rax,0x1
    792a:	cmp    rax,rbx
    792d:	jne    7918 <AES_cbc_encrypt+0x178>
    792f:	nop
    7930:	movzx  edx,BYTE PTR [r14+rax*1]
    7935:	mov    BYTE PTR [r13+rax*1+0x0],dl
    793a:	add    rax,0x1
    793e:	cmp    rax,0x10
    7942:	jne    7930 <AES_cbc_encrypt+0x190>
    7944:	mov    rdx,QWORD PTR [rsp+0x8]
    7949:	mov    rsi,r13
    794c:	mov    rdi,r13
    794f:	call   6f60 <AES_encrypt>
    7954:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    795a:	movups XMMWORD PTR [r15],xmm0
    795e:	movups XMMWORD PTR [r14],xmm0
    7962:	jmp    785b <AES_cbc_encrypt+0xbb>
    7967:	lea    r13,[rsp+0x20]
    796c:	mov    rdx,QWORD PTR [rsp+0x8]
    7971:	movdqu xmm0,XMMWORD PTR [r12]
    7977:	mov    rsi,r13
    797a:	mov    rdi,r13
    797d:	movaps XMMWORD PTR [rsp+0x20],xmm0
    7982:	call   7380 <AES_decrypt>
    7987:	xor    eax,eax
    7989:	nop    DWORD PTR [rax+0x0]
    7990:	movzx  edx,BYTE PTR [r13+rax*1+0x0]
    7996:	xor    dl,BYTE PTR [r14+rax*1]
    799a:	mov    BYTE PTR [r15+rax*1],dl
    799e:	add    rax,0x1
    79a2:	cmp    rax,rbx
    79a5:	jne    7990 <AES_cbc_encrypt+0x1f0>
    79a7:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
    79ad:	movups XMMWORD PTR [r14],xmm0
    79b1:	jmp    785b <AES_cbc_encrypt+0xbb>
    79b6:	call   2f70 <__stack_chk_fail@plt>
    79bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000079c0 <vmdk_flush>:
    79c0:	mov    rax,QWORD PTR [rdi+0x40]
    79c4:	mov    rdi,QWORD PTR [rax]
    79c7:	jmp    18700 <bdrv_flush>
    79cc:	nop    DWORD PTR [rax+0x0]

00000000000079d0 <vmdk_snapshot_create>:
    79d0:	push   r15
    79d2:	push   r14
    79d4:	mov    r15,rsi
    79d7:	push   r13
    79d9:	push   r12
    79db:	mov    edx,0x1a4
    79e0:	push   rbp
    79e1:	push   rbx
    79e2:	mov    esi,0x242
    79e7:	mov    rbp,rdi
    79ea:	sub    rsp,0x5248
    79f1:	mov    rax,QWORD PTR fs:0x28
    79fa:	mov    QWORD PTR [rsp+0x5238],rax
    7a02:	xor    eax,eax
    7a04:	call   32e0 <open64@plt>
    7a09:	test   eax,eax
    7a0b:	js     7d90 <vmdk_snapshot_create+0x3c0>
    7a11:	xor    esi,esi
    7a13:	mov    r12d,eax
    7a16:	mov    rdi,r15
    7a19:	xor    eax,eax
    7a1b:	call   32e0 <open64@plt>
    7a20:	test   eax,eax
    7a22:	mov    r13d,eax
    7a25:	js     7d78 <vmdk_snapshot_create+0x3a8>
    7a2b:	xor    edx,edx
    7a2d:	xor    esi,esi
    7a2f:	mov    edi,eax
    7a31:	call   33f0 <lseek64@plt>
    7a36:	cmp    rax,0xffffffffffffffff
    7a3a:	je     7d70 <vmdk_snapshot_create+0x3a0>
    7a40:	lea    rbx,[rsp+0x30]
    7a45:	mov    edx,0x200
    7a4a:	mov    edi,r13d
    7a4d:	mov    rsi,rbx
    7a50:	call   4300 <qemu_read_ok>
    7a55:	test   eax,eax
    7a57:	js     7d70 <vmdk_snapshot_create+0x3a0>
    7a5d:	xor    edx,edx
    7a5f:	xor    esi,esi
    7a61:	mov    edi,r12d
    7a64:	call   33f0 <lseek64@plt>
    7a69:	cmp    rax,0xffffffffffffffff
    7a6d:	je     7d70 <vmdk_snapshot_create+0x3a0>
    7a73:	mov    edx,0x200
    7a78:	mov    rsi,rbx
    7a7b:	mov    edi,r12d
    7a7e:	call   43d0 <qemu_write_ok>
    7a83:	cmp    eax,0xffffffff
    7a86:	je     7d70 <vmdk_snapshot_create+0x3a0>
    7a8c:	mov    rax,QWORD PTR [rsp+0x44]
    7a91:	mov    rsi,QWORD PTR [rsp+0x70]
    7a96:	mov    edi,r12d
    7a99:	mov    rbx,QWORD PTR [rsp+0x3c]
    7a9e:	mov    r14,QWORD PTR [rsp+0x68]
    7aa3:	mov    QWORD PTR [rsp+0x18],rax
    7aa8:	mov    eax,DWORD PTR [rsp+0x5c]
    7aac:	shl    rsi,0x9
    7ab0:	mov    DWORD PTR [rsp+0xc],eax
    7ab4:	mov    rax,QWORD PTR [rsp+0x60]
    7ab9:	mov    QWORD PTR [rsp+0x10],rax
    7abe:	call   32a0 <ftruncate64@plt>
    7ac3:	xor    edx,edx
    7ac5:	mov    esi,0x200
    7aca:	mov    edi,r13d
    7acd:	call   33f0 <lseek64@plt>
    7ad2:	cmp    rax,0xffffffffffffffff
    7ad6:	je     7d70 <vmdk_snapshot_create+0x3a0>
    7adc:	lea    rcx,[rsp+0x230]
    7ae4:	mov    edx,0x2800
    7ae9:	mov    edi,r13d
    7aec:	mov    rsi,rcx
    7aef:	mov    QWORD PTR [rsp],rcx
    7af3:	call   4300 <qemu_read_ok>
    7af8:	test   eax,eax
    7afa:	js     7d70 <vmdk_snapshot_create+0x3a0>
    7b00:	mov    rcx,QWORD PTR [rsp]
    7b04:	lea    rsi,[rip+0x16f3e]        # 1ea49 <Te0+0x409>
    7b0b:	mov    rdi,rcx
    7b0e:	call   3470 <strstr@plt>
    7b13:	test   rax,rax
    7b16:	je     7b2f <vmdk_snapshot_create+0x15f>
    7b18:	lea    rdi,[rax+0x4]
    7b1c:	lea    rdx,[rsp+0x2c]
    7b21:	lea    rsi,[rip+0x16f18]        # 1ea40 <Te0+0x400>
    7b28:	xor    eax,eax
    7b2a:	call   3250 <sscanf@plt>
    7b2f:	mov    rdi,rbp
    7b32:	mov    esi,0x5c
    7b37:	call   2fe0 <strrchr@plt>
    7b3c:	lea    rdx,[rax+0x1]
    7b40:	test   rax,rax
    7b43:	mov    esi,0x2f
    7b48:	cmovne rbp,rdx
    7b4c:	mov    rdi,rbp
    7b4f:	call   2fe0 <strrchr@plt>
    7b54:	lea    rdx,[rax+0x1]
    7b58:	test   rax,rax
    7b5b:	mov    esi,0x3a
    7b60:	cmovne rbp,rdx
    7b64:	mov    rdi,rbp
    7b67:	call   2fe0 <strrchr@plt>
    7b6c:	mov    r9d,DWORD PTR [rsp+0x2c]
    7b71:	lea    rdx,[rax+0x1]
    7b75:	test   rax,rax
    7b78:	lea    r10,[rsp+0x2a30]
    7b80:	lea    r8,[rip+0x16f39]        # 1eac0 <desc_template.13676>
    7b87:	mov    ecx,0x2800
    7b8c:	cmovne rbp,rdx
    7b90:	mov    esi,0x2800
    7b95:	mov    edx,0x1
    7b9a:	push   rbp
    7b9b:	push   rbx
    7b9c:	mov    rdi,r10
    7b9f:	push   r15
    7ba1:	push   r9
    7ba3:	xor    eax,eax
    7ba5:	mov    QWORD PTR [rsp+0x20],r10
    7baa:	call   2e30 <__snprintf_chk@plt>
    7baf:	add    rsp,0x20
    7bb3:	xor    edx,edx
    7bb5:	mov    esi,0x200
    7bba:	mov    edi,r12d
    7bbd:	call   33f0 <lseek64@plt>
    7bc2:	cmp    rax,0xffffffffffffffff
    7bc6:	je     7d70 <vmdk_snapshot_create+0x3a0>
    7bcc:	mov    r10,QWORD PTR [rsp]
    7bd0:	mov    rdx,r10
    7bd3:	mov    ecx,DWORD PTR [rdx]
    7bd5:	add    rdx,0x4
    7bd9:	lea    eax,[rcx-0x1010101]
    7bdf:	not    ecx
    7be1:	and    eax,ecx
    7be3:	and    eax,0x80808080
    7be8:	je     7bd3 <vmdk_snapshot_create+0x203>
    7bea:	mov    ecx,eax
    7bec:	mov    rsi,r10
    7bef:	mov    edi,r12d
    7bf2:	shr    ecx,0x10
    7bf5:	test   eax,0x8080
    7bfa:	cmove  eax,ecx
    7bfd:	lea    rcx,[rdx+0x2]
    7c01:	cmove  rdx,rcx
    7c05:	mov    ecx,eax
    7c07:	add    cl,al
    7c09:	sbb    rdx,0x3
    7c0d:	sub    rdx,r10
    7c10:	call   43d0 <qemu_write_ok>
    7c15:	cmp    eax,0xffffffff
    7c18:	je     7d70 <vmdk_snapshot_create+0x3a0>
    7c1e:	movsxd rcx,DWORD PTR [rsp+0xc]
    7c23:	mov    rbp,QWORD PTR [rsp+0x10]
    7c28:	mov    rax,rbx
    7c2b:	imul   rcx,QWORD PTR [rsp+0x18]
    7c31:	shl    r14,0x9
    7c35:	shl    rax,0x9
    7c39:	shl    rbp,0x9
    7c3d:	shl    rcx,0x9
    7c41:	test   rcx,rcx
    7c44:	je     7d70 <vmdk_snapshot_create+0x3a0>
    7c4a:	cqo    
    7c4c:	idiv   rcx
    7c4f:	lea    ebx,[rax*4+0x0]
    7c56:	mov    rdi,rbx
    7c59:	call   49d0 <qemu_malloc>
    7c5e:	xor    edx,edx
    7c60:	mov    rsi,rbp
    7c63:	mov    edi,r13d
    7c66:	mov    r15,rax
    7c69:	call   33f0 <lseek64@plt>
    7c6e:	cmp    rax,0xffffffffffffffff
    7c72:	je     7d68 <vmdk_snapshot_create+0x398>
    7c78:	mov    rdx,rbx
    7c7b:	mov    rsi,r15
    7c7e:	mov    edi,r13d
    7c81:	call   4300 <qemu_read_ok>
    7c86:	test   eax,eax
    7c88:	js     7d68 <vmdk_snapshot_create+0x398>
    7c8e:	xor    edx,edx
    7c90:	mov    rsi,rbp
    7c93:	mov    edi,r12d
    7c96:	call   33f0 <lseek64@plt>
    7c9b:	cmp    rax,0xffffffffffffffff
    7c9f:	je     7d68 <vmdk_snapshot_create+0x398>
    7ca5:	mov    rdx,rbx
    7ca8:	mov    rsi,r15
    7cab:	mov    edi,r12d
    7cae:	call   43d0 <qemu_write_ok>
    7cb3:	cmp    eax,0xffffffff
    7cb6:	je     7d68 <vmdk_snapshot_create+0x398>
    7cbc:	mov    rdi,r15
    7cbf:	call   49c0 <qemu_free>
    7cc4:	mov    rdi,rbx
    7cc7:	call   49d0 <qemu_malloc>
    7ccc:	xor    edx,edx
    7cce:	mov    rsi,r14
    7cd1:	mov    edi,r13d
    7cd4:	mov    rbp,rax
    7cd7:	call   33f0 <lseek64@plt>
    7cdc:	cmp    rax,0xffffffffffffffff
    7ce0:	je     7d60 <vmdk_snapshot_create+0x390>
    7ce2:	mov    rdx,rbx
    7ce5:	mov    rsi,rbp
    7ce8:	mov    edi,r13d
    7ceb:	call   4300 <qemu_read_ok>
    7cf0:	test   eax,eax
    7cf2:	js     7d60 <vmdk_snapshot_create+0x390>
    7cf4:	xor    edx,edx
    7cf6:	mov    rsi,r14
    7cf9:	mov    edi,r12d
    7cfc:	call   33f0 <lseek64@plt>
    7d01:	cmp    rax,0xffffffffffffffff
    7d05:	je     7d60 <vmdk_snapshot_create+0x390>
    7d07:	mov    rdx,rbx
    7d0a:	mov    rsi,rbp
    7d0d:	mov    edi,r12d
    7d10:	call   43d0 <qemu_write_ok>
    7d15:	cmp    eax,0xffffffff
    7d18:	je     7d60 <vmdk_snapshot_create+0x390>
    7d1a:	mov    rdi,rbp
    7d1d:	call   49c0 <qemu_free>
    7d22:	mov    edi,r13d
    7d25:	call   3040 <close@plt>
    7d2a:	mov    edi,r12d
    7d2d:	call   3040 <close@plt>
    7d32:	xor    eax,eax
    7d34:	mov    rbx,QWORD PTR [rsp+0x5238]
    7d3c:	xor    rbx,QWORD PTR fs:0x28
    7d45:	jne    7d97 <vmdk_snapshot_create+0x3c7>
    7d47:	add    rsp,0x5248
    7d4e:	pop    rbx
    7d4f:	pop    rbp
    7d50:	pop    r12
    7d52:	pop    r13
    7d54:	pop    r14
    7d56:	pop    r15
    7d58:	ret    
    7d59:	nop    DWORD PTR [rax+0x0]
    7d60:	mov    rdi,rbp
    7d63:	call   49c0 <qemu_free>
    7d68:	mov    rdi,r15
    7d6b:	call   49c0 <qemu_free>
    7d70:	mov    edi,r13d
    7d73:	call   3040 <close@plt>
    7d78:	mov    edi,r12d
    7d7b:	call   3040 <close@plt>
    7d80:	mov    eax,0xffffffff
    7d85:	jmp    7d34 <vmdk_snapshot_create+0x364>
    7d87:	nop    WORD PTR [rax+rax*1+0x0]
    7d90:	mov    eax,0xffffffff
    7d95:	jmp    7d34 <vmdk_snapshot_create+0x364>
    7d97:	call   2f70 <__stack_chk_fail@plt>
    7d9c:	nop    DWORD PTR [rax+0x0]

0000000000007da0 <vmdk_close>:
    7da0:	push   rbx
    7da1:	mov    rbx,QWORD PTR [rdi+0x40]
    7da5:	mov    rdi,QWORD PTR [rbx+0x18]
    7da9:	call   49c0 <qemu_free>
    7dae:	mov    rdi,QWORD PTR [rbx+0x38]
    7db2:	call   49c0 <qemu_free>
    7db7:	mov    rdi,QWORD PTR [rbx]
    7dba:	mov    rax,QWORD PTR [rdi+0x850]
    7dc1:	test   rax,rax
    7dc4:	je     7dd1 <vmdk_close+0x31>
    7dc6:	mov    rdi,rax
    7dc9:	call   17170 <bdrv_close>
    7dce:	mov    rdi,QWORD PTR [rbx]
    7dd1:	pop    rbx
    7dd2:	jmp    170f0 <bdrv_delete>
    7dd7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007de0 <vmdk_probe>:
    7de0:	xor    eax,eax
    7de2:	cmp    esi,0x3
    7de5:	jg     7df0 <vmdk_probe+0x10>
    7de7:	repz ret 
    7de9:	nop    DWORD PTR [rax+0x0]
    7df0:	mov    edx,DWORD PTR [rdi]
    7df2:	bswap  edx
    7df4:	cmp    edx,0x434f5744
    7dfa:	je     7e04 <vmdk_probe+0x24>
    7dfc:	cmp    edx,0x4b444d56
    7e02:	jne    7de7 <vmdk_probe+0x7>
    7e04:	mov    eax,0x64
    7e09:	ret    
    7e0a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000007e10 <vmdk_read_cid.isra.2>:
    7e10:	push   r12
    7e12:	push   rbp
    7e13:	mov    r12d,esi
    7e16:	push   rbx
    7e17:	mov    ecx,0x2800
    7e1c:	mov    esi,0x200
    7e21:	sub    rsp,0x2820
    7e28:	mov    rdi,QWORD PTR [rdi]
    7e2b:	lea    rbx,[rsp+0x10]
    7e30:	mov    rax,QWORD PTR fs:0x28
    7e39:	mov    QWORD PTR [rsp+0x2818],rax
    7e41:	xor    eax,eax
    7e43:	mov    rdx,rbx
    7e46:	call   17b00 <bdrv_pread>
    7e4b:	xor    edx,edx
    7e4d:	cmp    eax,0x2800
    7e52:	je     7e78 <vmdk_read_cid.isra.2+0x68>
    7e54:	mov    rcx,QWORD PTR [rsp+0x2818]
    7e5c:	xor    rcx,QWORD PTR fs:0x28
    7e65:	mov    eax,edx
    7e67:	jne    7ec6 <vmdk_read_cid.isra.2+0xb6>
    7e69:	add    rsp,0x2820
    7e70:	pop    rbx
    7e71:	pop    rbp
    7e72:	pop    r12
    7e74:	ret    
    7e75:	nop    DWORD PTR [rax]
    7e78:	cmp    r12d,0x1
    7e7c:	lea    rax,[rip+0x16bc6]        # 1ea49 <Te0+0x409>
    7e83:	lea    rsi,[rip+0x16bb9]        # 1ea43 <Te0+0x403>
    7e8a:	sbb    rbp,rbp
    7e8d:	mov    rdi,rbx
    7e90:	and    rbp,0xfffffffffffffffa
    7e94:	add    rbp,0xa
    7e98:	test   r12d,r12d
    7e9b:	cmove  rsi,rax
    7e9f:	call   3470 <strstr@plt>
    7ea4:	test   rax,rax
    7ea7:	je     7ec0 <vmdk_read_cid.isra.2+0xb0>
    7ea9:	lea    rdi,[rax+rbp*1]
    7ead:	lea    rdx,[rsp+0xc]
    7eb2:	lea    rsi,[rip+0x16b87]        # 1ea40 <Te0+0x400>
    7eb9:	xor    eax,eax
    7ebb:	call   3250 <sscanf@plt>
    7ec0:	mov    edx,DWORD PTR [rsp+0xc]
    7ec4:	jmp    7e54 <vmdk_read_cid.isra.2+0x44>
    7ec6:	call   2f70 <__stack_chk_fail@plt>
    7ecb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000007ed0 <vmdk_is_cid_valid.isra.3>:
    7ed0:	mov    rax,QWORD PTR [rdi]
    7ed3:	mov    rdx,QWORD PTR [rax+0x850]
    7eda:	test   rdx,rdx
    7edd:	je     7f00 <vmdk_is_cid_valid.isra.3+0x30>
    7edf:	push   rbx
    7ee0:	mov    rbx,rdi
    7ee3:	mov    rdi,QWORD PTR [rdx+0x40]
    7ee7:	xor    esi,esi
    7ee9:	call   7e10 <vmdk_read_cid.isra.2>
    7eee:	cmp    DWORD PTR [rbx+0xc4],eax
    7ef4:	pop    rbx
    7ef5:	sete   al
    7ef8:	movzx  eax,al
    7efb:	ret    
    7efc:	nop    DWORD PTR [rax+0x0]
    7f00:	mov    eax,0x1
    7f05:	ret    
    7f06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000007f10 <get_cluster_offset>:
    7f10:	push   rbp
    7f11:	mov    r8,rdi
    7f14:	mov    r9,rdx
    7f17:	mov    r11d,ecx
    7f1a:	mov    rbp,rsp
    7f1d:	push   r15
    7f1f:	push   r14
    7f21:	push   r13
    7f23:	push   r12
    7f25:	mov    r14,rsi
    7f28:	push   rbx
    7f29:	sub    rsp,0x58
    7f2d:	mov    rbx,QWORD PTR [rdi+0x40]
    7f31:	mov    rax,QWORD PTR fs:0x28
    7f3a:	mov    QWORD PTR [rbp-0x38],rax
    7f3e:	xor    eax,eax
    7f40:	test   rsi,rsi
    7f43:	je     7f4c <get_cluster_offset+0x3c>
    7f45:	mov    DWORD PTR [rsi+0x10],0x0
    7f4c:	mov    ecx,DWORD PTR [rbx+0x2c]
    7f4f:	mov    r12,r9
    7f52:	xor    edx,edx
    7f54:	shr    r12,0x9
    7f58:	mov    rax,r12
    7f5b:	div    rcx
    7f5e:	cmp    DWORD PTR [rbx+0x28],eax
    7f61:	mov    r15,rax
    7f64:	jbe    80e0 <get_cluster_offset+0x1d0>
    7f6a:	mov    rdx,QWORD PTR [rbx+0x18]
    7f6e:	mov    eax,eax
    7f70:	mov    r13d,DWORD PTR [rdx+rax*4]
    7f74:	test   r13d,r13d
    7f77:	je     80e0 <get_cluster_offset+0x1d0>
    7f7d:	xor    eax,eax
    7f7f:	jmp    7f96 <get_cluster_offset+0x86>
    7f81:	nop    DWORD PTR [rax+0x0]
    7f88:	add    rax,0x1
    7f8c:	cmp    rax,0x10
    7f90:	je     8110 <get_cluster_offset+0x200>
    7f96:	cmp    DWORD PTR [rbx+rax*4+0x40],r13d
    7f9b:	movsxd rdx,eax
    7f9e:	jne    7f88 <get_cluster_offset+0x78>
    7fa0:	lea    rcx,[rbx+rdx*4]
    7fa4:	mov    esi,DWORD PTR [rcx+0x80]
    7faa:	lea    edx,[rsi+0x1]
    7fad:	cmp    edx,0xffffffff
    7fb0:	mov    DWORD PTR [rcx+0x80],edx
    7fb6:	je     81b0 <get_cluster_offset+0x2a0>
    7fbc:	mov    ecx,DWORD PTR [rbx+0x30]
    7fbf:	mov    rdx,QWORD PTR [rbx+0x38]
    7fc3:	imul   eax,ecx
    7fc6:	lea    rax,[rdx+rax*4]
    7fca:	mov    QWORD PTR [rbp-0x48],rax
    7fce:	mov    esi,DWORD PTR [rbx+0xc0]
    7fd4:	mov    rax,r12
    7fd7:	xor    edx,edx
    7fd9:	div    rsi
    7fdc:	xor    edx,edx
    7fde:	div    rcx
    7fe1:	mov    rax,QWORD PTR [rbp-0x48]
    7fe5:	mov    r12,rdx
    7fe8:	lea    rdx,[rax+rdx*4]
    7fec:	mov    r10d,DWORD PTR [rdx]
    7fef:	test   r10,r10
    7ff2:	jne    80d0 <get_cluster_offset+0x1c0>
    7ff8:	test   r11d,r11d
    7ffb:	je     80e0 <get_cluster_offset+0x1d0>
    8001:	mov    eax,DWORD PTR [rbx+0xc8]
    8007:	mov    QWORD PTR [rbp-0x48],0x0
    800f:	mov    DWORD PTR [rbp-0x4c],0x0
    8016:	test   eax,eax
    8018:	je     81d8 <get_cluster_offset+0x2c8>
    801e:	mov    rdx,QWORD PTR [r8+0x40]
    8022:	mov    rdi,rsp
    8025:	mov    QWORD PTR [rbp-0x58],rdi
    8029:	mov    eax,DWORD PTR [rdx+0xc0]
    802f:	shl    eax,0x9
    8032:	mov    ebx,eax
    8034:	mov    DWORD PTR [rbp-0x60],eax
    8037:	mov    rax,QWORD PTR [rdx]
    803a:	sub    rsp,rbx
    803d:	mov    rax,QWORD PTR [rax+0x850]
    8044:	test   rax,rax
    8047:	je     81d0 <get_cluster_offset+0x2c0>
    804d:	mov    rax,QWORD PTR [rax+0x40]
    8051:	mov    rdi,rdx
    8054:	mov    QWORD PTR [rbp-0x70],r10
    8058:	mov    QWORD PTR [rbp-0x80],r9
    805c:	mov    QWORD PTR [rbp-0x78],rdx
    8060:	mov    QWORD PTR [rbp-0x68],rax
    8064:	call   7ed0 <vmdk_is_cid_valid.isra.3>
    8069:	test   eax,eax
    806b:	mov    r10,QWORD PTR [rbp-0x70]
    806f:	je     82b1 <get_cluster_offset+0x3a1>
    8075:	mov    rdx,QWORD PTR [rbp-0x78]
    8079:	mov    r9,QWORD PTR [rbp-0x80]
    807d:	xor    esi,esi
    807f:	mov    ecx,0x1
    8084:	mov    rax,QWORD PTR [rdx]
    8087:	mov    rdx,r9
    808a:	mov    rdi,QWORD PTR [rax+0x850]
    8091:	call   7f10 <get_cluster_offset>
    8096:	test   rax,rax
    8099:	jne    823c <get_cluster_offset+0x32c>
    809f:	mov    rsp,QWORD PTR [rbp-0x58]
    80a3:	test   r14,r14
    80a6:	mov    r10,QWORD PTR [rbp-0x48]
    80aa:	je     80d0 <get_cluster_offset+0x1c0>
    80ac:	mov    eax,DWORD PTR [rbp-0x4c]
    80af:	mov    DWORD PTR [r14+0x4],r15d
    80b3:	mov    DWORD PTR [r14+0x8],r12d
    80b7:	mov    DWORD PTR [r14+0xc],r13d
    80bb:	mov    DWORD PTR [r14+0x10],0x1
    80c3:	mov    DWORD PTR [r14],eax
    80c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    80d0:	shl    r10,0x9
    80d4:	jmp    80e3 <get_cluster_offset+0x1d3>
    80d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    80e0:	xor    r10d,r10d
    80e3:	mov    rdi,QWORD PTR [rbp-0x38]
    80e7:	xor    rdi,QWORD PTR fs:0x28
    80f0:	mov    rax,r10
    80f3:	jne    82ba <get_cluster_offset+0x3aa>
    80f9:	lea    rsp,[rbp-0x28]
    80fd:	pop    rbx
    80fe:	pop    r12
    8100:	pop    r13
    8102:	pop    r14
    8104:	pop    r15
    8106:	pop    rbp
    8107:	ret    
    8108:	nop    DWORD PTR [rax+rax*1+0x0]
    8110:	xor    eax,eax
    8112:	mov    ecx,0xffffffff
    8117:	xor    r10d,r10d
    811a:	nop    WORD PTR [rax+rax*1+0x0]
    8120:	mov    edx,DWORD PTR [rbx+rax*4+0x80]
    8127:	cmp    edx,ecx
    8129:	jae    8130 <get_cluster_offset+0x220>
    812b:	mov    ecx,edx
    812d:	mov    r10d,eax
    8130:	add    rax,0x1
    8134:	cmp    rax,0x10
    8138:	jne    8120 <get_cluster_offset+0x210>
    813a:	mov    ecx,DWORD PTR [rbx+0x30]
    813d:	mov    edx,r10d
    8140:	mov    rax,QWORD PTR [rbx+0x38]
    8144:	mov    rdi,QWORD PTR [rbx]
    8147:	mov    esi,r13d
    814a:	mov    QWORD PTR [rbp-0x68],r8
    814e:	shl    rsi,0x9
    8152:	mov    QWORD PTR [rbp-0x60],r9
    8156:	mov    DWORD PTR [rbp-0x58],r11d
    815a:	imul   edx,ecx
    815d:	shl    ecx,0x2
    8160:	mov    DWORD PTR [rbp-0x4c],r10d
    8164:	lea    rdx,[rax+rdx*4]
    8168:	mov    QWORD PTR [rbp-0x48],rdx
    816c:	call   17b00 <bdrv_pread>
    8171:	mov    ecx,DWORD PTR [rbx+0x30]
    8174:	cdqe   
    8176:	movsxd r10,DWORD PTR [rbp-0x4c]
    817a:	mov    r11d,DWORD PTR [rbp-0x58]
    817e:	mov    r9,QWORD PTR [rbp-0x60]
    8182:	mov    r8,QWORD PTR [rbp-0x68]
    8186:	lea    rdx,[rcx*4+0x0]
    818e:	cmp    rax,rdx
    8191:	jne    80e0 <get_cluster_offset+0x1d0>
    8197:	lea    rax,[rbx+r10*4]
    819b:	mov    DWORD PTR [rax+0x40],r13d
    819f:	mov    DWORD PTR [rax+0x80],0x1
    81a9:	jmp    7fce <get_cluster_offset+0xbe>
    81ae:	xchg   ax,ax
    81b0:	lea    rdx,[rbx+0x80]
    81b7:	lea    rcx,[rbx+0xc0]
    81be:	xchg   ax,ax
    81c0:	shr    DWORD PTR [rdx],1
    81c2:	add    rdx,0x4
    81c6:	cmp    rcx,rdx
    81c9:	jne    81c0 <get_cluster_offset+0x2b0>
    81cb:	jmp    7fbc <get_cluster_offset+0xac>
    81d0:	mov    rsp,rdi
    81d3:	jmp    80a3 <get_cluster_offset+0x193>
    81d8:	mov    rdi,QWORD PTR [rbx]
    81db:	mov    QWORD PTR [rbp-0x70],r9
    81df:	mov    QWORD PTR [rbp-0x68],r8
    81e3:	mov    QWORD PTR [rbp-0x60],r10
    81e7:	mov    QWORD PTR [rbp-0x58],rdx
    81eb:	call   181a0 <bdrv_getlength>
    81f0:	mov    esi,DWORD PTR [rbx+0xc0]
    81f6:	mov    rdi,QWORD PTR [rbx]
    81f9:	mov    QWORD PTR [rbp-0x48],rax
    81fd:	shl    esi,0x9
    8200:	add    rsi,rax
    8203:	call   18170 <bdrv_truncate>
    8208:	mov    rcx,QWORD PTR [rbp-0x48]
    820c:	mov    rdx,QWORD PTR [rbp-0x58]
    8210:	mov    r8,QWORD PTR [rbp-0x68]
    8214:	mov    r9,QWORD PTR [rbp-0x70]
    8218:	mov    r10,QWORD PTR [rbp-0x60]
    821c:	shr    rcx,0x9
    8220:	mov    QWORD PTR [rbp-0x48],rcx
    8224:	mov    DWORD PTR [rbp-0x4c],ecx
    8227:	mov    DWORD PTR [rdx],ecx
    8229:	mov    QWORD PTR [rip+0x21f2f8],rcx        # 227528 <activeBDRV+0x8>
    8230:	mov    QWORD PTR [rip+0x21f2e9],r8        # 227520 <activeBDRV>
    8237:	jmp    801e <get_cluster_offset+0x10e>
    823c:	mov    rdx,QWORD PTR [rip+0x21f2dd]        # 227520 <activeBDRV>
    8243:	mov    rdi,QWORD PTR [rdx+0x40]
    8247:	mov    rdx,rsp
    824a:	mov    QWORD PTR [rbp-0x78],rdi
    824e:	mov    rdi,QWORD PTR [rbp-0x68]
    8252:	mov    esi,DWORD PTR [rdi+0xc0]
    8258:	mov    QWORD PTR [rbp-0x68],rdi
    825c:	mov    rdi,QWORD PTR [rdi]
    825f:	mov    ecx,esi
    8261:	mov    rsi,rax
    8264:	shl    ecx,0x9
    8267:	call   17b00 <bdrv_pread>
    826c:	mov    rdi,QWORD PTR [rbp-0x68]
    8270:	mov    r10,QWORD PTR [rbp-0x70]
    8274:	mov    edx,DWORD PTR [rdi+0xc0]
    827a:	shl    edx,0x9
    827d:	cmp    eax,edx
    827f:	jne    82b1 <get_cluster_offset+0x3a1>
    8281:	mov    rdi,QWORD PTR [rbp-0x78]
    8285:	mov    rsi,QWORD PTR [rip+0x21f29c]        # 227528 <activeBDRV+0x8>
    828c:	mov    rdx,rsp
    828f:	mov    ecx,DWORD PTR [rbp-0x60]
    8292:	mov    QWORD PTR [rbp-0x68],r10
    8296:	mov    rdi,QWORD PTR [rdi]
    8299:	shl    rsi,0x9
    829d:	call   180f0 <bdrv_pwrite>
    82a2:	cdqe   
    82a4:	mov    r10,QWORD PTR [rbp-0x68]
    82a8:	cmp    rbx,rax
    82ab:	je     809f <get_cluster_offset+0x18f>
    82b1:	mov    rsp,QWORD PTR [rbp-0x58]
    82b5:	jmp    80e3 <get_cluster_offset+0x1d3>
    82ba:	call   2f70 <__stack_chk_fail@plt>
    82bf:	nop

00000000000082c0 <vmdk_is_allocated>:
    82c0:	push   r13
    82c2:	push   r12
    82c4:	mov    r12,rcx
    82c7:	push   rbp
    82c8:	push   rbx
    82c9:	mov    ebp,edx
    82cb:	mov    rdx,rsi
    82ce:	mov    rbx,rsi
    82d1:	xor    ecx,ecx
    82d3:	sub    rsp,0x8
    82d7:	mov    r13,QWORD PTR [rdi+0x40]
    82db:	shl    rdx,0x9
    82df:	xor    esi,esi
    82e1:	call   7f10 <get_cluster_offset>
    82e6:	mov    esi,DWORD PTR [r13+0xc0]
    82ed:	mov    rdi,rax
    82f0:	mov    rax,rbx
    82f3:	cqo    
    82f5:	idiv   rsi
    82f8:	mov    rcx,rsi
    82fb:	sub    ecx,edx
    82fd:	cmp    ecx,ebp
    82ff:	cmovg  ecx,ebp
    8302:	xor    eax,eax
    8304:	test   rdi,rdi
    8307:	mov    DWORD PTR [r12],ecx
    830b:	setne  al
    830e:	add    rsp,0x8
    8312:	pop    rbx
    8313:	pop    rbp
    8314:	pop    r12
    8316:	pop    r13
    8318:	ret    
    8319:	nop    DWORD PTR [rax+0x0]

0000000000008320 <vmdk_read>:
    8320:	push   r15
    8322:	push   r14
    8324:	push   r13
    8326:	push   r12
    8328:	push   rbp
    8329:	push   rbx
    832a:	sub    rsp,0x18
    832e:	test   ecx,ecx
    8330:	mov    r14,QWORD PTR [rdi+0x40]
    8334:	jle    8460 <vmdk_read+0x140>
    833a:	mov    r15,rdi
    833d:	mov    rbp,rsi
    8340:	mov    r13,rdx
    8343:	mov    r12d,ecx
    8346:	jmp    83ae <vmdk_read+0x8e>
    8348:	nop    DWORD PTR [rax+rax*1+0x0]
    8350:	mov    rax,QWORD PTR [r14]
    8353:	cmp    QWORD PTR [rax+0x850],0x0
    835b:	je     8420 <vmdk_read+0x100>
    8361:	mov    rdi,QWORD PTR [r15+0x40]
    8365:	call   7ed0 <vmdk_is_cid_valid.isra.3>
    836a:	test   eax,eax
    836c:	je     8448 <vmdk_read+0x128>
    8372:	mov    rax,QWORD PTR [r14]
    8375:	mov    ecx,ebx
    8377:	mov    rdx,r13
    837a:	mov    rsi,rbp
    837d:	mov    rdi,QWORD PTR [rax+0x850]
    8384:	call   171e0 <bdrv_read>
    8389:	test   eax,eax
    838b:	js     8448 <vmdk_read+0x128>
    8391:	mov    ecx,ebx
    8393:	shl    ecx,0x9
    8396:	movsxd rcx,ecx
    8399:	sub    r12d,ebx
    839c:	movsxd rbx,ebx
    839f:	add    r13,rcx
    83a2:	add    rbp,rbx
    83a5:	test   r12d,r12d
    83a8:	jle    8460 <vmdk_read+0x140>
    83ae:	mov    rdx,rbp
    83b1:	xor    ecx,ecx
    83b3:	xor    esi,esi
    83b5:	shl    rdx,0x9
    83b9:	mov    rdi,r15
    83bc:	call   7f10 <get_cluster_offset>
    83c1:	mov    esi,DWORD PTR [r14+0xc0]
    83c8:	mov    rcx,rax
    83cb:	mov    rax,rbp
    83ce:	cqo    
    83d0:	idiv   rsi
    83d3:	mov    rbx,rsi
    83d6:	sub    ebx,edx
    83d8:	cmp    ebx,r12d
    83db:	cmovg  ebx,r12d
    83df:	test   rcx,rcx
    83e2:	je     8350 <vmdk_read+0x30>
    83e8:	shl    edx,0x9
    83eb:	mov    r8d,ebx
    83ee:	mov    rdi,QWORD PTR [r14]
    83f1:	shl    r8d,0x9
    83f5:	movsxd rsi,edx
    83f8:	mov    rdx,r13
    83fb:	add    rsi,rcx
    83fe:	mov    ecx,r8d
    8401:	mov    DWORD PTR [rsp+0x8],r8d
    8406:	call   17b00 <bdrv_pread>
    840b:	mov    r8d,DWORD PTR [rsp+0x8]
    8410:	cmp    r8d,eax
    8413:	jne    8448 <vmdk_read+0x128>
    8415:	movsxd rcx,r8d
    8418:	jmp    8399 <vmdk_read+0x79>
    841d:	nop    DWORD PTR [rax]
    8420:	mov    ecx,ebx
    8422:	xor    esi,esi
    8424:	mov    rdi,r13
    8427:	shl    ecx,0x9
    842a:	movsxd rcx,ecx
    842d:	mov    rdx,rcx
    8430:	mov    QWORD PTR [rsp+0x8],rcx
    8435:	call   3020 <memset@plt>
    843a:	mov    rcx,QWORD PTR [rsp+0x8]
    843f:	jmp    8399 <vmdk_read+0x79>
    8444:	nop    DWORD PTR [rax+0x0]
    8448:	add    rsp,0x18
    844c:	mov    eax,0xffffffff
    8451:	pop    rbx
    8452:	pop    rbp
    8453:	pop    r12
    8455:	pop    r13
    8457:	pop    r14
    8459:	pop    r15
    845b:	ret    
    845c:	nop    DWORD PTR [rax+0x0]
    8460:	add    rsp,0x18
    8464:	xor    eax,eax
    8466:	pop    rbx
    8467:	pop    rbp
    8468:	pop    r12
    846a:	pop    r13
    846c:	pop    r14
    846e:	pop    r15
    8470:	ret    
    8471:	nop    DWORD PTR [rax+rax*1+0x0]
    8476:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000008480 <vmdk_write_cid.isra.7>:
    8480:	push   r13
    8482:	push   r12
    8484:	mov    ecx,0x2800
    8489:	push   rbp
    848a:	push   rbx
    848b:	mov    rbp,rdi
    848e:	mov    r12d,esi
    8491:	mov    esi,0x200
    8496:	sub    rsp,0x5018
    849d:	mov    rdi,QWORD PTR [rdi]
    84a0:	mov    rbx,rsp
    84a3:	mov    rdx,rbx
    84a6:	mov    rax,QWORD PTR fs:0x28
    84af:	mov    QWORD PTR [rsp+0x5008],rax
    84b7:	xor    eax,eax
    84b9:	call   17b00 <bdrv_pread>
    84be:	cmp    eax,0x2800
    84c3:	mov    edx,0xffffffff
    84c8:	jne    8569 <vmdk_write_cid.isra.7+0xe9>
    84ce:	lea    rsi,[rip+0x1656e]        # 1ea43 <Te0+0x403>
    84d5:	lea    r13,[rsp+0x2800]
    84dd:	mov    rdi,rbx
    84e0:	call   3470 <strstr@plt>
    84e5:	mov    esi,0x2800
    84ea:	mov    rdx,rax
    84ed:	mov    rdi,r13
    84f0:	call   45a0 <pstrcpy>
    84f5:	lea    rsi,[rip+0x1654d]        # 1ea49 <Te0+0x409>
    84fc:	mov    rdi,rbx
    84ff:	call   3470 <strstr@plt>
    8504:	test   rax,rax
    8507:	je     8547 <vmdk_write_cid.isra.7+0xc7>
    8509:	lea    rdi,[rax+0x4]
    850d:	mov    rax,rbx
    8510:	lea    r8,[rip+0x16536]        # 1ea4d <Te0+0x40d>
    8517:	mov    edx,0x1
    851c:	mov    r9d,r12d
    851f:	mov    rcx,0xffffffffffffffff
    8526:	sub    rax,rdi
    8529:	lea    rsi,[rax+0x2800]
    8530:	xor    eax,eax
    8532:	call   2e30 <__snprintf_chk@plt>
    8537:	mov    rdx,r13
    853a:	mov    esi,0x2800
    853f:	mov    rdi,rbx
    8542:	call   45e0 <pstrcat>
    8547:	mov    rdi,QWORD PTR [rbp+0x0]
    854b:	mov    rdx,rbx
    854e:	mov    ecx,0x2800
    8553:	mov    esi,0x200
    8558:	call   180f0 <bdrv_pwrite>
    855d:	xor    edx,edx
    855f:	cmp    eax,0x2800
    8564:	setne  dl
    8567:	neg    edx
    8569:	mov    rcx,QWORD PTR [rsp+0x5008]
    8571:	xor    rcx,QWORD PTR fs:0x28
    857a:	mov    eax,edx
    857c:	jne    858c <vmdk_write_cid.isra.7+0x10c>
    857e:	add    rsp,0x5018
    8585:	pop    rbx
    8586:	pop    rbp
    8587:	pop    r12
    8589:	pop    r13
    858b:	ret    
    858c:	call   2f70 <__stack_chk_fail@plt>
    8591:	nop    DWORD PTR [rax+rax*1+0x0]
    8596:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000085a0 <vmdk_write>:
    85a0:	push   r15
    85a2:	push   r14
    85a4:	push   r13
    85a6:	push   r12
    85a8:	mov    r12,rsi
    85ab:	push   rbp
    85ac:	push   rbx
    85ad:	mov    ebp,ecx
    85af:	sub    rsp,0x48
    85b3:	mov    r8,QWORD PTR [rdi]
    85b6:	mov    r14,QWORD PTR [rdi+0x40]
    85ba:	mov    rcx,QWORD PTR fs:0x28
    85c3:	mov    QWORD PTR [rsp+0x38],rcx
    85c8:	xor    ecx,ecx
    85ca:	mov    QWORD PTR [rsp+0x10],rdi
    85cf:	cmp    r8,rsi
    85d2:	jl     8762 <vmdk_write+0x1c2>
    85d8:	lea    rax,[rsp+0x20]
    85dd:	test   ebp,ebp
    85df:	mov    r13,rdx
    85e2:	mov    QWORD PTR [rsp+0x18],rax
    85e7:	jg     8614 <vmdk_write+0x74>
    85e9:	jmp    875e <vmdk_write+0x1be>
    85ee:	xchg   ax,ax
    85f0:	mov    eax,DWORD PTR [rip+0x21ef1a]        # 227510 <cid_update.13797>
    85f6:	sub    ebp,ebx
    85f8:	movsxd r9,r15d
    85fb:	movsxd rbx,ebx
    85fe:	add    r13,r9
    8601:	add    r12,rbx
    8604:	test   eax,eax
    8606:	je     8738 <vmdk_write+0x198>
    860c:	test   ebp,ebp
    860e:	jle    875e <vmdk_write+0x1be>
    8614:	mov    ebx,DWORD PTR [r14+0xc0]
    861b:	mov    rsi,QWORD PTR [rsp+0x18]
    8620:	mov    rdx,r12
    8623:	mov    rdi,QWORD PTR [rsp+0x10]
    8628:	mov    ecx,0x1
    862d:	lea    r8d,[rbx-0x1]
    8631:	and    r8d,r12d
    8634:	sub    ebx,r8d
    8637:	mov    DWORD PTR [rsp+0x8],r8d
    863c:	cmp    ebx,ebp
    863e:	cmovg  ebx,ebp
    8641:	shl    rdx,0x9
    8645:	call   7f10 <get_cluster_offset>
    864a:	test   rax,rax
    864d:	mov    r8d,DWORD PTR [rsp+0x8]
    8652:	je     8710 <vmdk_write+0x170>
    8658:	shl    r8d,0x9
    865c:	mov    r15d,ebx
    865f:	mov    rdi,QWORD PTR [r14]
    8662:	shl    r15d,0x9
    8666:	movsxd rsi,r8d
    8669:	mov    rdx,r13
    866c:	add    rsi,rax
    866f:	mov    ecx,r15d
    8672:	call   180f0 <bdrv_pwrite>
    8677:	cmp    r15d,eax
    867a:	jne    8710 <vmdk_write+0x170>
    8680:	mov    edx,DWORD PTR [rsp+0x30]
    8684:	test   edx,edx
    8686:	je     85f0 <vmdk_write+0x50>
    868c:	mov    rax,QWORD PTR [rsp+0x10]
    8691:	mov    edx,DWORD PTR [rsp+0x28]
    8695:	mov    ecx,0x4
    869a:	mov    r8,QWORD PTR [rax+0x40]
    869e:	mov    eax,DWORD PTR [rsp+0x2c]
    86a2:	mov    rdi,QWORD PTR [r8]
    86a5:	mov    QWORD PTR [rsp+0x8],r8
    86aa:	shl    rax,0x9
    86ae:	lea    rsi,[rax+rdx*4]
    86b2:	mov    rdx,QWORD PTR [rsp+0x18]
    86b7:	call   180f0 <bdrv_pwrite>
    86bc:	cmp    eax,0x4
    86bf:	jne    8710 <vmdk_write+0x170>
    86c1:	mov    r8,QWORD PTR [rsp+0x8]
    86c6:	cmp    QWORD PTR [r8+0x10],0x0
    86cb:	je     85f0 <vmdk_write+0x50>
    86d1:	mov    edx,DWORD PTR [rsp+0x24]
    86d5:	mov    rax,QWORD PTR [r8+0x20]
    86d9:	mov    ecx,0x4
    86de:	mov    eax,DWORD PTR [rax+rdx*4]
    86e1:	mov    edx,DWORD PTR [rsp+0x28]
    86e5:	mov    DWORD PTR [rsp+0x2c],eax
    86e9:	shl    rax,0x9
    86ed:	mov    rdi,QWORD PTR [r8]
    86f0:	lea    rsi,[rax+rdx*4]
    86f4:	mov    rdx,QWORD PTR [rsp+0x18]
    86f9:	call   180f0 <bdrv_pwrite>
    86fe:	cmp    eax,0x4
    8701:	je     85f0 <vmdk_write+0x50>
    8707:	nop    WORD PTR [rax+rax*1+0x0]
    8710:	mov    eax,0xffffffff
    8715:	mov    rcx,QWORD PTR [rsp+0x38]
    871a:	xor    rcx,QWORD PTR fs:0x28
    8723:	jne    8786 <vmdk_write+0x1e6>
    8725:	add    rsp,0x48
    8729:	pop    rbx
    872a:	pop    rbp
    872b:	pop    r12
    872d:	pop    r13
    872f:	pop    r14
    8731:	pop    r15
    8733:	ret    
    8734:	nop    DWORD PTR [rax+0x0]
    8738:	xor    edi,edi
    873a:	call   31c0 <time@plt>
    873f:	mov    rcx,QWORD PTR [rsp+0x10]
    8744:	mov    esi,eax
    8746:	mov    rdi,QWORD PTR [rcx+0x40]
    874a:	call   8480 <vmdk_write_cid.isra.7>
    874f:	add    DWORD PTR [rip+0x21edba],0x1        # 227510 <cid_update.13797>
    8756:	test   ebp,ebp
    8758:	jg     8614 <vmdk_write+0x74>
    875e:	xor    eax,eax
    8760:	jmp    8715 <vmdk_write+0x175>
    8762:	mov    rdi,QWORD PTR [rip+0x21ed97]        # 227500 <stderr@@GLIBC_2.2.5>
    8769:	lea    rdx,[rip+0x16300]        # 1ea70 <Te0+0x430>
    8770:	mov    rcx,rsi
    8773:	xor    eax,eax
    8775:	mov    esi,0x1
    877a:	call   3400 <__fprintf_chk@plt>
    877f:	mov    eax,0xffffffff
    8784:	jmp    8715 <vmdk_write+0x175>
    8786:	call   2f70 <__stack_chk_fail@plt>
    878b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000008790 <vmdk_parent_open.isra.8>:
    8790:	push   r12
    8792:	push   rbp
    8793:	mov    rbp,rdi
    8796:	push   rbx
    8797:	mov    r12,rsi
    879a:	mov    ecx,0x2800
    879f:	mov    esi,0x200
    87a4:	sub    rsp,0x2ca0
    87ab:	mov    rdi,QWORD PTR [rdi]
    87ae:	lea    rbx,[rsp+0x490]
    87b6:	mov    rax,QWORD PTR fs:0x28
    87bf:	mov    QWORD PTR [rsp+0x2c98],rax
    87c7:	xor    eax,eax
    87c9:	mov    rdx,rbx
    87cc:	call   17b00 <bdrv_pread>
    87d1:	cmp    eax,0x2800
    87d6:	jne    8920 <vmdk_parent_open.isra.8+0x190>
    87dc:	lea    rsi,[rip+0x1626e]        # 1ea51 <Te0+0x411>
    87e3:	mov    rdi,rbx
    87e6:	call   3470 <strstr@plt>
    87eb:	mov    rbx,rax
    87ee:	xor    eax,eax
    87f0:	test   rbx,rbx
    87f3:	je     88c5 <vmdk_parent_open.isra.8+0x135>
    87f9:	add    rbx,0x14
    87fd:	mov    esi,0x22
    8802:	mov    rdi,rbx
    8805:	call   2fb0 <strchr@plt>
    880a:	test   rax,rax
    880d:	je     8920 <vmdk_parent_open.isra.8+0x190>
    8813:	sub    rax,rbx
    8816:	cmp    rax,0x3ff
    881c:	ja     8920 <vmdk_parent_open.isra.8+0x190>
    8822:	lea    rsi,[rax+0x1]
    8826:	mov    rax,QWORD PTR [rbp+0x0]
    882a:	mov    rdx,rbx
    882d:	lea    rdi,[rax+0x448]
    8834:	call   45a0 <pstrcpy>
    8839:	mov    rax,QWORD PTR [rbp+0x0]
    883d:	mov    rdx,rsp
    8840:	mov    edi,0x1
    8845:	lea    rsi,[rax+0x448]
    884c:	call   2f30 <__xstat64@plt>
    8851:	test   eax,eax
    8853:	mov    rax,QWORD PTR [rbp+0x0]
    8857:	jne    88e8 <vmdk_parent_open.isra.8+0x158>
    885d:	lea    rbx,[rsp+0x90]
    8865:	lea    rdx,[rax+0x448]
    886c:	mov    esi,0x400
    8871:	mov    rdi,rbx
    8874:	call   45a0 <pstrcpy>
    8879:	mov    r12,QWORD PTR [rbp+0x0]
    887d:	lea    rdi,[rip+0x16be1]        # 1f465 <desc_template.13816+0x8e5>
    8884:	call   16fb0 <bdrv_new>
    8889:	mov    QWORD PTR [r12+0x850],rax
    8891:	mov    rax,QWORD PTR [rbp+0x0]
    8895:	mov    rdi,QWORD PTR [rax+0x850]
    889c:	test   rdi,rdi
    889f:	je     8910 <vmdk_parent_open.isra.8+0x180>
    88a1:	xor    edx,edx
    88a3:	mov    rsi,rbx
    88a6:	mov    DWORD PTR [rip+0x21ec64],0x1        # 227514 <parent_open>
    88b0:	call   180e0 <bdrv_open>
    88b5:	test   eax,eax
    88b7:	js     890c <vmdk_parent_open.isra.8+0x17c>
    88b9:	mov    DWORD PTR [rip+0x21ec51],0x0        # 227514 <parent_open>
    88c3:	xor    eax,eax
    88c5:	mov    rcx,QWORD PTR [rsp+0x2c98]
    88cd:	xor    rcx,QWORD PTR fs:0x28
    88d6:	jne    8927 <vmdk_parent_open.isra.8+0x197>
    88d8:	add    rsp,0x2ca0
    88df:	pop    rbx
    88e0:	pop    rbp
    88e1:	pop    r12
    88e3:	ret    
    88e4:	nop    DWORD PTR [rax+0x0]
    88e8:	lea    rbx,[rsp+0x90]
    88f0:	lea    rcx,[rax+0x448]
    88f7:	mov    rdx,r12
    88fa:	mov    esi,0x400
    88ff:	mov    rdi,rbx
    8902:	call   16eb0 <path_combine>
    8907:	jmp    8879 <vmdk_parent_open.isra.8+0xe9>
    890c:	mov    rax,QWORD PTR [rbp+0x0]
    8910:	mov    rdi,rax
    8913:	call   17170 <bdrv_close>
    8918:	nop    DWORD PTR [rax+rax*1+0x0]
    8920:	mov    eax,0xffffffff
    8925:	jmp    88c5 <vmdk_parent_open.isra.8+0x135>
    8927:	call   2f70 <__stack_chk_fail@plt>
    892c:	nop    DWORD PTR [rax+0x0]

0000000000008930 <vmdk_open>:
    8930:	push   r13
    8932:	push   r12
    8934:	mov    r12,rsi
    8937:	push   rbp
    8938:	push   rbx
    8939:	mov    rbp,rdi
    893c:	sub    rsp,0xa8
    8943:	mov    ecx,DWORD PTR [rip+0x21ebcb]        # 227514 <parent_open>
    8949:	mov    rbx,QWORD PTR [rdi+0x40]
    894d:	mov    rax,QWORD PTR fs:0x28
    8956:	mov    QWORD PTR [rsp+0x98],rax
    895e:	xor    eax,eax
    8960:	test   ecx,ecx
    8962:	mov    rdi,rbx
    8965:	cmovne edx,eax
    8968:	call   18060 <bdrv_file_open>
    896d:	test   eax,eax
    896f:	js     8ad5 <vmdk_open+0x1a5>
    8975:	mov    rdi,QWORD PTR [rbx]
    8978:	lea    rdx,[rsp+0xc]
    897d:	xor    esi,esi
    897f:	mov    ecx,0x4
    8984:	call   17b00 <bdrv_pread>
    8989:	cmp    eax,0x4
    898c:	jne    8b00 <vmdk_open+0x1d0>
    8992:	mov    eax,DWORD PTR [rsp+0xc]
    8996:	bswap  eax
    8998:	cmp    eax,0x434f5744
    899d:	mov    DWORD PTR [rsp+0xc],eax
    89a1:	je     8b30 <vmdk_open+0x200>
    89a7:	cmp    eax,0x4b444d56
    89ac:	jne    8b00 <vmdk_open+0x1d0>
    89b2:	mov    rdi,QWORD PTR [rbx]
    89b5:	lea    rdx,[rsp+0x40]
    89ba:	mov    ecx,0x49
    89bf:	mov    esi,0x4
    89c4:	call   17b00 <bdrv_pread>
    89c9:	cmp    eax,0x49
    89cc:	jne    8b00 <vmdk_open+0x1d0>
    89d2:	mov    rax,QWORD PTR [rsp+0x48]
    89d7:	mov    rdx,QWORD PTR [rsp+0x50]
    89dc:	mov    QWORD PTR [rbp+0x0],rax
    89e0:	mov    eax,DWORD PTR [rsp+0x68]
    89e4:	mov    DWORD PTR [rbx+0xc0],edx
    89ea:	mov    DWORD PTR [rbx+0x30],eax
    89ed:	imul   eax,edx
    89f0:	test   eax,eax
    89f2:	mov    DWORD PTR [rbx+0x2c],eax
    89f5:	je     8b00 <vmdk_open+0x1d0>
    89fb:	mov    ecx,eax
    89fd:	mov    rax,QWORD PTR [rbp+0x0]
    8a01:	mov    rsi,r12
    8a04:	add    rax,rcx
    8a07:	sub    rax,0x1
    8a0b:	cqo    
    8a0d:	idiv   rcx
    8a10:	mov    edx,DWORD PTR [rip+0x21eafe]        # 227514 <parent_open>
    8a16:	mov    DWORD PTR [rbx+0x28],eax
    8a19:	mov    rax,QWORD PTR [rsp+0x6c]
    8a1e:	shl    rax,0x9
    8a22:	mov    QWORD PTR [rbx+0x8],rax
    8a26:	mov    rax,QWORD PTR [rsp+0x74]
    8a2b:	shl    rax,0x9
    8a2f:	mov    QWORD PTR [rbx+0x10],rax
    8a33:	xor    eax,eax
    8a35:	test   edx,edx
    8a37:	setne  al
    8a3a:	mov    DWORD PTR [rbx+0xc8],eax
    8a40:	mov    rdi,QWORD PTR [rbp+0x40]
    8a44:	call   8790 <vmdk_parent_open.isra.8>
    8a49:	test   eax,eax
    8a4b:	jne    8b00 <vmdk_open+0x1d0>
    8a51:	mov    rdi,QWORD PTR [rbp+0x40]
    8a55:	mov    esi,0x1
    8a5a:	call   7e10 <vmdk_read_cid.isra.2>
    8a5f:	mov    DWORD PTR [rbx+0xc4],eax
    8a65:	mov    eax,DWORD PTR [rbx+0x28]
    8a68:	lea    ebp,[rax*4+0x0]
    8a6f:	movsxd r13,ebp
    8a72:	mov    rdi,r13
    8a75:	call   49d0 <qemu_malloc>
    8a7a:	mov    rsi,QWORD PTR [rbx+0x8]
    8a7e:	mov    rdi,QWORD PTR [rbx]
    8a81:	mov    ecx,ebp
    8a83:	mov    QWORD PTR [rbx+0x18],rax
    8a87:	mov    rdx,rax
    8a8a:	call   17b00 <bdrv_pread>
    8a8f:	cmp    eax,ebp
    8a91:	mov    r12d,eax
    8a94:	jne    8b00 <vmdk_open+0x1d0>
    8a96:	cmp    QWORD PTR [rbx+0x10],0x0
    8a9b:	je     8ac0 <vmdk_open+0x190>
    8a9d:	mov    rdi,r13
    8aa0:	call   49d0 <qemu_malloc>
    8aa5:	mov    rsi,QWORD PTR [rbx+0x10]
    8aa9:	mov    rdi,QWORD PTR [rbx]
    8aac:	mov    ecx,r12d
    8aaf:	mov    QWORD PTR [rbx+0x20],rax
    8ab3:	mov    rdx,rax
    8ab6:	call   17b00 <bdrv_pread>
    8abb:	cmp    eax,r12d
    8abe:	jne    8b00 <vmdk_open+0x1d0>
    8ac0:	mov    edi,DWORD PTR [rbx+0x30]
    8ac3:	shl    edi,0x4
    8ac6:	shl    rdi,0x2
    8aca:	call   49d0 <qemu_malloc>
    8acf:	mov    QWORD PTR [rbx+0x38],rax
    8ad3:	xor    eax,eax
    8ad5:	mov    rcx,QWORD PTR [rsp+0x98]
    8add:	xor    rcx,QWORD PTR fs:0x28
    8ae6:	jne    8b91 <vmdk_open+0x261>
    8aec:	add    rsp,0xa8
    8af3:	pop    rbx
    8af4:	pop    rbp
    8af5:	pop    r12
    8af7:	pop    r13
    8af9:	ret    
    8afa:	nop    WORD PTR [rax+rax*1+0x0]
    8b00:	mov    rdi,QWORD PTR [rbx+0x20]
    8b04:	call   49c0 <qemu_free>
    8b09:	mov    rdi,QWORD PTR [rbx+0x18]
    8b0d:	call   49c0 <qemu_free>
    8b12:	mov    rdi,QWORD PTR [rbx+0x38]
    8b16:	call   49c0 <qemu_free>
    8b1b:	mov    rdi,QWORD PTR [rbx]
    8b1e:	call   170f0 <bdrv_delete>
    8b23:	mov    eax,0xffffffff
    8b28:	jmp    8ad5 <vmdk_open+0x1a5>
    8b2a:	nop    WORD PTR [rax+rax*1+0x0]
    8b30:	mov    rdi,QWORD PTR [rbx]
    8b33:	lea    rdx,[rsp+0x10]
    8b38:	mov    ecx,0x28
    8b3d:	mov    esi,0x4
    8b42:	call   17b00 <bdrv_pread>
    8b47:	cmp    eax,0x28
    8b4a:	jne    8b00 <vmdk_open+0x1d0>
    8b4c:	mov    eax,DWORD PTR [rsp+0x1c]
    8b50:	mov    DWORD PTR [rbx+0x30],0x200
    8b57:	mov    DWORD PTR [rbx+0x28],0x40
    8b5e:	mov    DWORD PTR [rbx+0xc0],eax
    8b64:	mov    eax,DWORD PTR [rsp+0x18]
    8b68:	mov    QWORD PTR [rbp+0x0],rax
    8b6c:	mov    eax,DWORD PTR [rsp+0x20]
    8b70:	mov    QWORD PTR [rbx+0x10],0x0
    8b78:	shl    eax,0x9
    8b7b:	mov    QWORD PTR [rbx+0x8],rax
    8b7f:	mov    eax,DWORD PTR [rbx+0x30]
    8b82:	imul   eax,DWORD PTR [rbx+0xc0]
    8b89:	mov    DWORD PTR [rbx+0x2c],eax
    8b8c:	jmp    8a65 <vmdk_open+0x135>
    8b91:	call   2f70 <__stack_chk_fail@plt>
    8b96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000008ba0 <vmdk_create.part.5>:
    8ba0:	push   r15
    8ba2:	push   r14
    8ba4:	mov    r15,rsi
    8ba7:	push   r13
    8ba9:	push   r12
    8bab:	mov    esi,0x241
    8bb0:	push   rbp
    8bb1:	push   rbx
    8bb2:	mov    r14,rdi
    8bb5:	sub    rsp,0x488
    8bbc:	mov    rax,QWORD PTR fs:0x28
    8bc5:	mov    QWORD PTR [rsp+0x478],rax
    8bcd:	xor    eax,eax
    8bcf:	mov    DWORD PTR [rsp+0x4],edx
    8bd3:	mov    edx,0x1a4
    8bd8:	call   32e0 <open64@plt>
    8bdd:	test   eax,eax
    8bdf:	js     8ec3 <vmdk_create.part.5+0x323>
    8be5:	mov    ebp,eax
    8be7:	movabs rax,0x300000001
    8bf1:	lea    r12,[r15+0xfe]
    8bf8:	mov    QWORD PTR [rsp+0x20],rax
    8bfd:	mov    rax,r15
    8c00:	lea    rsi,[rsp+0x1c]
    8c05:	add    rax,0x7f
    8c09:	lea    rbx,[rsp+0x20]
    8c0e:	mov    edi,ebp
    8c10:	cmovns r12,rax
    8c14:	mov    DWORD PTR [rsp+0x1c],0x564d444b
    8c1c:	mov    BYTE PTR [rsp+0x64],0x0
    8c21:	sar    r12,0x7
    8c25:	mov    QWORD PTR [rsp+0x28],r15
    8c2a:	mov    QWORD PTR [rsp+0x30],0x80
    8c33:	add    r12d,0x1ff
    8c3a:	mov    DWORD PTR [rsp+0x48],0x200
    8c42:	mov    QWORD PTR [rsp+0x38],0x1
    8c4b:	shr    r12d,0x9
    8c4f:	mov    QWORD PTR [rsp+0x40],0x14
    8c58:	mov    QWORD PTR [rsp+0x4c],0x15
    8c61:	mov    eax,r12d
    8c64:	lea    edx,[r12*4+0x0]
    8c6c:	mov    DWORD PTR [rsp+0x65],0xa0d200a
    8c74:	lea    rax,[rax*4+0x1ff]
    8c7c:	mov    r13,rax
    8c7f:	shr    r13,0x9
    8c83:	lea    rax,[r13+rdx*1+0x15]
    8c88:	mov    QWORD PTR [rsp+0x8],r13
    8c8d:	mov    QWORD PTR [rsp+0x54],rax
    8c92:	add    rax,r13
    8c95:	lea    rax,[rdx+rax*1+0x7f]
    8c9a:	mov    edx,0x4
    8c9f:	and    eax,0x3fffff80
    8ca4:	mov    QWORD PTR [rsp+0x5c],rax
    8ca9:	call   2f10 <write@plt>
    8cae:	mov    edx,0x49
    8cb3:	mov    rsi,rbx
    8cb6:	mov    edi,ebp
    8cb8:	call   2f10 <write@plt>
    8cbd:	mov    rsi,QWORD PTR [rsp+0x5c]
    8cc2:	mov    edi,ebp
    8cc4:	shl    rsi,0x9
    8cc8:	call   32a0 <ftruncate64@plt>
    8ccd:	mov    rsi,QWORD PTR [rsp+0x4c]
    8cd2:	xor    edx,edx
    8cd4:	mov    edi,ebp
    8cd6:	shl    rsi,0x9
    8cda:	call   33f0 <lseek64@plt>
    8cdf:	mov    eax,DWORD PTR [rsp+0x4c]
    8ce3:	add    eax,r13d
    8ce6:	test   r12d,r12d
    8ce9:	mov    DWORD PTR [rsp+0x18],eax
    8ced:	je     8ea0 <vmdk_create.part.5+0x300>
    8cf3:	lea    r13,[rsp+0x18]
    8cf8:	xor    ebx,ebx
    8cfa:	nop    WORD PTR [rax+rax*1+0x0]
    8d00:	mov    edx,0x4
    8d05:	mov    rsi,r13
    8d08:	mov    edi,ebp
    8d0a:	add    ebx,0x1
    8d0d:	call   2f10 <write@plt>
    8d12:	add    DWORD PTR [rsp+0x18],0x4
    8d17:	cmp    r12d,ebx
    8d1a:	jne    8d00 <vmdk_create.part.5+0x160>
    8d1c:	mov    rsi,QWORD PTR [rsp+0x54]
    8d21:	xor    edx,edx
    8d23:	mov    edi,ebp
    8d25:	xor    r12d,r12d
    8d28:	shl    rsi,0x9
    8d2c:	call   33f0 <lseek64@plt>
    8d31:	mov    eax,DWORD PTR [rsp+0x8]
    8d35:	add    eax,DWORD PTR [rsp+0x54]
    8d39:	mov    DWORD PTR [rsp+0x18],eax
    8d3d:	nop    DWORD PTR [rax]
    8d40:	mov    edx,0x4
    8d45:	mov    rsi,r13
    8d48:	mov    edi,ebp
    8d4a:	add    r12d,0x1
    8d4e:	call   2f10 <write@plt>
    8d53:	add    DWORD PTR [rsp+0x18],0x4
    8d58:	cmp    ebx,r12d
    8d5b:	jne    8d40 <vmdk_create.part.5+0x1a0>
    8d5d:	mov    rdi,r14
    8d60:	mov    esi,0x5c
    8d65:	lea    r13,[rsp+0x70]
    8d6a:	call   2fe0 <strrchr@plt>
    8d6f:	lea    rdx,[rax+0x1]
    8d73:	test   rax,rax
    8d76:	mov    esi,0x2f
    8d7b:	cmovne r14,rdx
    8d7f:	mov    rdi,r14
    8d82:	call   2fe0 <strrchr@plt>
    8d87:	lea    rdx,[rax+0x1]
    8d8b:	test   rax,rax
    8d8e:	mov    esi,0x3a
    8d93:	cmovne r14,rdx
    8d97:	mov    rdi,r14
    8d9a:	call   2fe0 <strrchr@plt>
    8d9f:	lea    rdx,[rax+0x1]
    8da3:	test   rax,rax
    8da6:	mov    rax,r15
    8da9:	cmovne r14,rdx
    8dad:	movabs rdx,0x8208208208208209
    8db7:	imul   rdx
    8dba:	mov    rax,r15
    8dbd:	sar    rax,0x3f
    8dc1:	lea    rbx,[rdx+r15*1]
    8dc5:	sar    rbx,0x9
    8dc9:	sub    rbx,rax
    8dcc:	mov    eax,DWORD PTR [rsp+0x4]
    8dd0:	and    eax,0x4
    8dd3:	cmp    eax,0x1
    8dd6:	sbb    r12d,r12d
    8dd9:	xor    edi,edi
    8ddb:	and    r12d,0xfffffffe
    8ddf:	add    r12d,0x6
    8de3:	call   31c0 <time@plt>
    8de8:	push   rbx
    8de9:	lea    r8,[rip+0x15d90]        # 1eb80 <desc_template.13816>
    8df0:	push   r12
    8df2:	push   r14
    8df4:	push   r15
    8df6:	mov    r9d,eax
    8df9:	mov    ecx,0x400
    8dfe:	mov    edx,0x1
    8e03:	mov    esi,0x400
    8e08:	mov    rdi,r13
    8e0b:	xor    eax,eax
    8e0d:	call   2e30 <__snprintf_chk@plt>
    8e12:	add    rsp,0x20
    8e16:	mov    rsi,QWORD PTR [rsp+0x38]
    8e1b:	xor    edx,edx
    8e1d:	mov    edi,ebp
    8e1f:	shl    rsi,0x9
    8e23:	call   33f0 <lseek64@plt>
    8e28:	mov    rdx,r13
    8e2b:	mov    ecx,DWORD PTR [rdx]
    8e2d:	add    rdx,0x4
    8e31:	lea    eax,[rcx-0x1010101]
    8e37:	not    ecx
    8e39:	and    eax,ecx
    8e3b:	and    eax,0x80808080
    8e40:	je     8e2b <vmdk_create.part.5+0x28b>
    8e42:	mov    ecx,eax
    8e44:	mov    rsi,r13
    8e47:	mov    edi,ebp
    8e49:	shr    ecx,0x10
    8e4c:	test   eax,0x8080
    8e51:	cmove  eax,ecx
    8e54:	lea    rcx,[rdx+0x2]
    8e58:	cmove  rdx,rcx
    8e5c:	mov    ecx,eax
    8e5e:	add    cl,al
    8e60:	sbb    rdx,0x3
    8e64:	sub    rdx,r13
    8e67:	call   2f10 <write@plt>
    8e6c:	mov    edi,ebp
    8e6e:	call   3040 <close@plt>
    8e73:	xor    eax,eax
    8e75:	mov    rcx,QWORD PTR [rsp+0x478]
    8e7d:	xor    rcx,QWORD PTR fs:0x28
    8e86:	jne    8eca <vmdk_create.part.5+0x32a>
    8e88:	add    rsp,0x488
    8e8f:	pop    rbx
    8e90:	pop    rbp
    8e91:	pop    r12
    8e93:	pop    r13
    8e95:	pop    r14
    8e97:	pop    r15
    8e99:	ret    
    8e9a:	nop    WORD PTR [rax+rax*1+0x0]
    8ea0:	mov    rsi,QWORD PTR [rsp+0x54]
    8ea5:	xor    edx,edx
    8ea7:	mov    edi,ebp
    8ea9:	shl    rsi,0x9
    8ead:	call   33f0 <lseek64@plt>
    8eb2:	mov    eax,DWORD PTR [rsp+0x8]
    8eb6:	add    eax,DWORD PTR [rsp+0x54]
    8eba:	mov    DWORD PTR [rsp+0x18],eax
    8ebe:	jmp    8d5d <vmdk_create.part.5+0x1bd>
    8ec3:	mov    eax,0xffffffff
    8ec8:	jmp    8e75 <vmdk_create.part.5+0x2d5>
    8eca:	call   2f70 <__stack_chk_fail@plt>
    8ecf:	nop

0000000000008ed0 <vmdk_create>:
    8ed0:	test   rdx,rdx
    8ed3:	je     8ee0 <vmdk_create+0x10>
    8ed5:	mov    rsi,rdx
    8ed8:	jmp    79d0 <vmdk_snapshot_create>
    8edd:	nop    DWORD PTR [rax]
    8ee0:	mov    edx,ecx
    8ee2:	jmp    8ba0 <vmdk_create.part.5>
    8ee7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000008ef0 <cloop_close>:
    8ef0:	push   rbx
    8ef1:	mov    rbx,QWORD PTR [rdi+0x40]
    8ef5:	mov    edi,DWORD PTR [rbx]
    8ef7:	call   3040 <close@plt>
    8efc:	mov    eax,DWORD PTR [rbx+0x8]
    8eff:	test   eax,eax
    8f01:	je     8f0c <cloop_close+0x1c>
    8f03:	mov    rdi,QWORD PTR [rbx+0x10]
    8f07:	call   2e40 <free@plt>
    8f0c:	mov    rdi,QWORD PTR [rbx+0x20]
    8f10:	call   2e40 <free@plt>
    8f15:	mov    rdi,QWORD PTR [rbx+0x28]
    8f19:	call   2e40 <free@plt>
    8f1e:	lea    rdi,[rbx+0x30]
    8f22:	pop    rbx
    8f23:	jmp    31a0 <inflateEnd@plt>
    8f28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000008f30 <cloop_read>:
    8f30:	push   r15
    8f32:	push   r14
    8f34:	push   r13
    8f36:	push   r12
    8f38:	push   rbp
    8f39:	push   rbx
    8f3a:	sub    rsp,0x18
    8f3e:	test   ecx,ecx
    8f40:	mov    r13,QWORD PTR [rdi+0x40]
    8f44:	jle    9061 <cloop_read+0x131>
    8f4a:	lea    eax,[rcx-0x1]
    8f4d:	mov    rbp,rsi
    8f50:	mov    r12,rdx
    8f53:	lea    rax,[rsi+rax*1+0x1]
    8f58:	mov    QWORD PTR [rsp],rax
    8f5c:	lea    rax,[r13+0x30]
    8f60:	mov    QWORD PTR [rsp+0x8],rax
    8f65:	nop    DWORD PTR [rax]
    8f68:	mov    ebx,DWORD PTR [r13+0x18]
    8f6c:	mov    rax,rbp
    8f6f:	cqo    
    8f71:	idiv   rbx
    8f74:	cmp    eax,DWORD PTR [r13+0x1c]
    8f78:	mov    rbx,rdx
    8f7b:	mov    r15,rax
    8f7e:	je     900e <cloop_read+0xde>
    8f84:	mov    rdx,QWORD PTR [r13+0x10]
    8f88:	cdqe   
    8f8a:	mov    edi,DWORD PTR [r13+0x0]
    8f8e:	add    rax,0x1
    8f92:	mov    rsi,QWORD PTR [rdx+rax*8-0x8]
    8f97:	mov    r14,QWORD PTR [rdx+rax*8]
    8f9b:	xor    edx,edx
    8f9d:	sub    r14d,esi
    8fa0:	call   33f0 <lseek64@plt>
    8fa5:	mov    rsi,QWORD PTR [r13+0x20]
    8fa9:	mov    edi,DWORD PTR [r13+0x0]
    8fad:	mov    edx,r14d
    8fb0:	call   4300 <qemu_read_ok>
    8fb5:	test   eax,eax
    8fb7:	js     9078 <cloop_read+0x148>
    8fbd:	mov    rax,QWORD PTR [r13+0x20]
    8fc1:	mov    DWORD PTR [r13+0x38],r14d
    8fc5:	mov    r14,QWORD PTR [rsp+0x8]
    8fca:	mov    QWORD PTR [r13+0x30],rax
    8fce:	mov    rax,QWORD PTR [r13+0x28]
    8fd2:	mov    rdi,r14
    8fd5:	mov    QWORD PTR [r13+0x48],rax
    8fd9:	mov    eax,DWORD PTR [r13+0x4]
    8fdd:	mov    DWORD PTR [r13+0x50],eax
    8fe1:	call   33a0 <inflateReset@plt>
    8fe6:	test   eax,eax
    8fe8:	jne    9078 <cloop_read+0x148>
    8fee:	mov    esi,0x4
    8ff3:	mov    rdi,r14
    8ff6:	call   2ec0 <inflate@plt>
    8ffb:	cmp    eax,0x1
    8ffe:	jne    9078 <cloop_read+0x148>
    9000:	mov    eax,DWORD PTR [r13+0x4]
    9004:	cmp    QWORD PTR [r13+0x58],rax
    9008:	jne    9078 <cloop_read+0x148>
    900a:	mov    DWORD PTR [r13+0x1c],r15d
    900e:	shl    ebx,0x9
    9011:	lea    rdi,[r12+0x8]
    9016:	mov    rcx,r12
    9019:	mov    esi,ebx
    901b:	add    rsi,QWORD PTR [r13+0x28]
    901f:	add    rbp,0x1
    9023:	and    rdi,0xfffffffffffffff8
    9027:	add    r12,0x200
    902e:	sub    rcx,rdi
    9031:	mov    rax,QWORD PTR [rsi]
    9034:	mov    QWORD PTR [r12-0x200],rax
    903c:	mov    rax,QWORD PTR [rsi+0x1f8]
    9043:	sub    rsi,rcx
    9046:	add    ecx,0x200
    904c:	shr    ecx,0x3
    904f:	mov    QWORD PTR [r12-0x8],rax
    9054:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    9057:	cmp    QWORD PTR [rsp],rbp
    905b:	jne    8f68 <cloop_read+0x38>
    9061:	add    rsp,0x18
    9065:	xor    eax,eax
    9067:	pop    rbx
    9068:	pop    rbp
    9069:	pop    r12
    906b:	pop    r13
    906d:	pop    r14
    906f:	pop    r15
    9071:	ret    
    9072:	nop    WORD PTR [rax+rax*1+0x0]
    9078:	add    rsp,0x18
    907c:	mov    eax,0xffffffff
    9081:	pop    rbx
    9082:	pop    rbp
    9083:	pop    r12
    9085:	pop    r13
    9087:	pop    r14
    9089:	pop    r15
    908b:	ret    
    908c:	nop    DWORD PTR [rax+0x0]

0000000000009090 <cloop_probe>:
    9090:	sub    rsp,0x8
    9094:	mov    eax,0x53
    9099:	cmp    esi,0x53
    909c:	cmovge esi,eax
    909f:	movsxd rdx,esi
    90a2:	mov    rsi,rdi
    90a5:	lea    rdi,[rip+0x15bfc]        # 1eca8 <desc_template.13816+0x128>
    90ac:	call   30b0 <memcmp@plt>
    90b1:	test   eax,eax
    90b3:	sete   al
    90b6:	add    rsp,0x8
    90ba:	movzx  eax,al
    90bd:	add    eax,eax
    90bf:	ret    

00000000000090c0 <cloop_open>:
    90c0:	push   r12
    90c2:	push   rbp
    90c3:	mov    rbp,rdi
    90c6:	push   rbx
    90c7:	mov    rbx,QWORD PTR [rbp+0x40]
    90cb:	mov    rdi,rsi
    90ce:	xor    eax,eax
    90d0:	xor    esi,esi
    90d2:	call   32e0 <open64@plt>
    90d7:	test   eax,eax
    90d9:	mov    DWORD PTR [rbx],eax
    90db:	js     9228 <cloop_open+0x168>
    90e1:	mov    DWORD PTR [rbp+0x8],0x1
    90e8:	mov    edi,DWORD PTR [rbx]
    90ea:	xor    edx,edx
    90ec:	mov    esi,0x80
    90f1:	call   33f0 <lseek64@plt>
    90f6:	test   rax,rax
    90f9:	js     9240 <cloop_open+0x180>
    90ff:	mov    edi,DWORD PTR [rbx]
    9101:	lea    rsi,[rbx+0x4]
    9105:	mov    edx,0x4
    910a:	call   4300 <qemu_read_ok>
    910f:	test   eax,eax
    9111:	js     9240 <cloop_open+0x180>
    9117:	mov    eax,DWORD PTR [rbx+0x4]
    911a:	mov    edi,DWORD PTR [rbx]
    911c:	lea    rsi,[rbx+0x8]
    9120:	mov    edx,0x4
    9125:	bswap  eax
    9127:	mov    DWORD PTR [rbx+0x4],eax
    912a:	call   4300 <qemu_read_ok>
    912f:	test   eax,eax
    9131:	js     9240 <cloop_open+0x180>
    9137:	mov    r12d,DWORD PTR [rbx+0x8]
    913b:	bswap  r12d
    913e:	mov    DWORD PTR [rbx+0x8],r12d
    9142:	shl    r12d,0x3
    9146:	mov    rdi,r12
    9149:	call   3230 <malloc@plt>
    914e:	test   rax,rax
    9151:	mov    QWORD PTR [rbx+0x10],rax
    9155:	mov    edi,DWORD PTR [rbx]
    9157:	je     9242 <cloop_open+0x182>
    915d:	mov    rdx,r12
    9160:	mov    rsi,rax
    9163:	call   30a0 <read@plt>
    9168:	cmp    r12,rax
    916b:	jg     9240 <cloop_open+0x180>
    9171:	mov    eax,DWORD PTR [rbx+0x8]
    9174:	mov    edi,0x2
    9179:	test   eax,eax
    917b:	je     91d7 <cloop_open+0x117>
    917d:	mov    rdx,QWORD PTR [rbx+0x10]
    9181:	mov    r8d,0x1
    9187:	mov    rax,QWORD PTR [rdx]
    918a:	bswap  rax
    918d:	mov    QWORD PTR [rdx],rax
    9190:	xor    edx,edx
    9192:	lea    eax,[rdx+0x1]
    9195:	cmp    DWORD PTR [rbx+0x8],eax
    9198:	jbe    91d3 <cloop_open+0x113>
    919a:	nop    WORD PTR [rax+rax*1+0x0]
    91a0:	mov    rcx,QWORD PTR [rbx+0x10]
    91a4:	mov    edi,eax
    91a6:	test   eax,eax
    91a8:	lea    rsi,[rcx+rdi*8]
    91ac:	mov    rcx,QWORD PTR [rsi]
    91af:	bswap  rcx
    91b2:	mov    QWORD PTR [rsi],rcx
    91b5:	je     91c9 <cloop_open+0x109>
    91b7:	mov    rsi,QWORD PTR [rbx+0x10]
    91bb:	mov    rcx,QWORD PTR [rsi+rdi*8]
    91bf:	sub    ecx,DWORD PTR [rsi+rdx*8]
    91c2:	cmp    r8d,ecx
    91c5:	cmovb  r8d,ecx
    91c9:	mov    edx,eax
    91cb:	lea    eax,[rdx+0x1]
    91ce:	cmp    DWORD PTR [rbx+0x8],eax
    91d1:	ja     91a0 <cloop_open+0xe0>
    91d3:	lea    edi,[r8+0x1]
    91d7:	call   49d0 <qemu_malloc>
    91dc:	mov    edi,DWORD PTR [rbx+0x4]
    91df:	mov    QWORD PTR [rbx+0x20],rax
    91e3:	call   49d0 <qemu_malloc>
    91e8:	lea    rdi,[rbx+0x30]
    91ec:	lea    rsi,[rip+0x12fec]        # 1c1df <__PRETTY_FUNCTION__.13304+0x8f>
    91f3:	mov    QWORD PTR [rbx+0x28],rax
    91f7:	mov    edx,0x70
    91fc:	call   32c0 <inflateInit_@plt>
    9201:	test   eax,eax
    9203:	jne    9240 <cloop_open+0x180>
    9205:	mov    ecx,DWORD PTR [rbx+0x4]
    9208:	mov    edx,DWORD PTR [rbx+0x8]
    920b:	shr    ecx,0x9
    920e:	mov    DWORD PTR [rbx+0x1c],edx
    9211:	imul   edx,ecx
    9214:	mov    DWORD PTR [rbx+0x18],ecx
    9217:	mov    esi,edx
    9219:	mov    QWORD PTR [rbp+0x0],rsi
    921d:	pop    rbx
    921e:	pop    rbp
    921f:	pop    r12
    9221:	ret    
    9222:	nop    WORD PTR [rax+rax*1+0x0]
    9228:	call   2e80 <__errno_location@plt>
    922d:	mov    eax,DWORD PTR [rax]
    922f:	neg    eax
    9231:	pop    rbx
    9232:	pop    rbp
    9233:	pop    r12
    9235:	ret    
    9236:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9240:	mov    edi,DWORD PTR [rbx]
    9242:	call   3040 <close@plt>
    9247:	mov    eax,0xffffffff
    924c:	jmp    9231 <cloop_open+0x171>
    924e:	xchg   ax,ax

0000000000009250 <dmg_close>:
    9250:	push   rbx
    9251:	mov    rbx,QWORD PTR [rdi+0x40]
    9255:	mov    edi,DWORD PTR [rbx]
    9257:	call   3040 <close@plt>
    925c:	mov    eax,DWORD PTR [rbx+0x4]
    925f:	test   eax,eax
    9261:	je     9290 <dmg_close+0x40>
    9263:	mov    rdi,QWORD PTR [rbx+0x8]
    9267:	call   2e40 <free@plt>
    926c:	mov    rdi,QWORD PTR [rbx+0x10]
    9270:	call   2e40 <free@plt>
    9275:	mov    rdi,QWORD PTR [rbx+0x18]
    9279:	call   2e40 <free@plt>
    927e:	mov    rdi,QWORD PTR [rbx+0x20]
    9282:	call   2e40 <free@plt>
    9287:	mov    rdi,QWORD PTR [rbx+0x28]
    928b:	call   2e40 <free@plt>
    9290:	mov    rdi,QWORD PTR [rbx+0x38]
    9294:	call   2e40 <free@plt>
    9299:	mov    rdi,QWORD PTR [rbx+0x40]
    929d:	call   2e40 <free@plt>
    92a2:	lea    rdi,[rbx+0x48]
    92a6:	pop    rbx
    92a7:	jmp    31a0 <inflateEnd@plt>
    92ac:	nop    DWORD PTR [rax+0x0]

00000000000092b0 <dmg_read>:
    92b0:	push   r15
    92b2:	push   r14
    92b4:	push   r13
    92b6:	push   r12
    92b8:	push   rbp
    92b9:	push   rbx
    92ba:	sub    rsp,0x18
    92be:	test   ecx,ecx
    92c0:	mov    r13,QWORD PTR [rdi+0x40]
    92c4:	jle    9508 <dmg_read+0x258>
    92ca:	lea    rax,[r13+0x48]
    92ce:	mov    r15d,esi
    92d1:	mov    r14,rdx
    92d4:	lea    ebp,[rcx+rsi*1]
    92d7:	mov    QWORD PTR [rsp+0x8],rax
    92dc:	jmp    9352 <dmg_read+0xa2>
    92de:	xchg   ax,ax
    92e0:	mov    rdx,QWORD PTR [r13+0x20]
    92e4:	movsxd rcx,r15d
    92e7:	mov    rdx,QWORD PTR [rdx+rax*8]
    92eb:	cmp    rdx,rcx
    92ee:	ja     935f <dmg_read+0xaf>
    92f0:	mov    rsi,QWORD PTR [r13+0x28]
    92f4:	mov    rdi,QWORD PTR [rsi+rax*8]
    92f8:	add    rdi,rdx
    92fb:	cmp    rcx,rdi
    92fe:	jae    935f <dmg_read+0xaf>
    9300:	mov    esi,r15d
    9303:	lea    rdi,[r14+0x8]
    9307:	mov    rcx,r14
    930a:	sub    esi,edx
    930c:	add    r15d,0x1
    9310:	add    r14,0x200
    9317:	shl    esi,0x9
    931a:	add    rsi,QWORD PTR [r13+0x40]
    931e:	and    rdi,0xfffffffffffffff8
    9322:	sub    rcx,rdi
    9325:	mov    rax,QWORD PTR [rsi]
    9328:	mov    QWORD PTR [r14-0x200],rax
    932f:	mov    rax,QWORD PTR [rsi+0x1f8]
    9336:	sub    rsi,rcx
    9339:	add    ecx,0x200
    933f:	shr    ecx,0x3
    9342:	mov    QWORD PTR [r14-0x8],rax
    9346:	cmp    ebp,r15d
    9349:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    934c:	je     9508 <dmg_read+0x258>
    9352:	mov    eax,DWORD PTR [r13+0x30]
    9356:	mov    r8d,DWORD PTR [r13+0x4]
    935a:	cmp    eax,r8d
    935d:	jb     92e0 <dmg_read+0x30>
    935f:	mov    r10d,r8d
    9362:	xor    ecx,ecx
    9364:	movsxd rdi,r15d
    9367:	cmp    ecx,r10d
    936a:	je     93ae <dmg_read+0xfe>
    936c:	lea    eax,[rcx+r10*1]
    9370:	mov    rsi,QWORD PTR [r13+0x20]
    9374:	shr    eax,1
    9376:	mov    edx,eax
    9378:	mov    ebx,eax
    937a:	lea    r9,[rdx*8+0x0]
    9382:	mov    rdx,QWORD PTR [rsi+rdx*8]
    9386:	cmp    rdi,rdx
    9389:	jb     93aa <dmg_read+0xfa>
    938b:	jmp    93cb <dmg_read+0x11b>
    938d:	nop    DWORD PTR [rax]
    9390:	lea    ebx,[rcx+rax*1]
    9393:	shr    ebx,1
    9395:	mov    edx,ebx
    9397:	lea    r9,[rdx*8+0x0]
    939f:	mov    rdx,QWORD PTR [rsi+rdx*8]
    93a3:	cmp    rdx,rdi
    93a6:	jbe    93c8 <dmg_read+0x118>
    93a8:	mov    eax,ebx
    93aa:	cmp    ecx,eax
    93ac:	jne    9390 <dmg_read+0xe0>
    93ae:	add    rsp,0x18
    93b2:	mov    eax,0xffffffff
    93b7:	pop    rbx
    93b8:	pop    rbp
    93b9:	pop    r12
    93bb:	pop    r13
    93bd:	pop    r14
    93bf:	pop    r15
    93c1:	ret    
    93c2:	nop    WORD PTR [rax+rax*1+0x0]
    93c8:	mov    r10d,eax
    93cb:	mov    rax,QWORD PTR [r13+0x28]
    93cf:	mov    ecx,ebx
    93d1:	add    rdx,QWORD PTR [rax+r9*1]
    93d5:	cmp    rdx,rdi
    93d8:	jbe    9367 <dmg_read+0xb7>
    93da:	cmp    r8d,ebx
    93dd:	jbe    93ae <dmg_read+0xfe>
    93df:	mov    rdx,QWORD PTR [r13+0x8]
    93e3:	mov    r12d,ebx
    93e6:	mov    DWORD PTR [r13+0x30],r8d
    93ea:	mov    edx,DWORD PTR [rdx+r12*4]
    93ee:	cmp    edx,0x2
    93f1:	je     94f0 <dmg_read+0x240>
    93f7:	cmp    edx,0x80000005
    93fd:	je     9440 <dmg_read+0x190>
    93ff:	cmp    edx,0x1
    9402:	je     9418 <dmg_read+0x168>
    9404:	mov    DWORD PTR [r13+0x30],ebx
    9408:	mov    rdx,QWORD PTR [rsi+r12*8]
    940c:	jmp    9300 <dmg_read+0x50>
    9411:	nop    DWORD PTR [rax+0x0]
    9418:	mov    rax,QWORD PTR [r13+0x18]
    941c:	mov    rsi,QWORD PTR [r13+0x40]
    9420:	mov    edi,DWORD PTR [r13+0x0]
    9424:	mov    rdx,QWORD PTR [rax+r12*8]
    9428:	call   4300 <qemu_read_ok>
    942d:	test   eax,eax
    942f:	js     93ae <dmg_read+0xfe>
    9435:	mov    rsi,QWORD PTR [r13+0x20]
    9439:	jmp    9404 <dmg_read+0x154>
    943b:	nop    DWORD PTR [rax+rax*1+0x0]
    9440:	mov    rax,QWORD PTR [r13+0x10]
    9444:	mov    edi,DWORD PTR [r13+0x0]
    9448:	xor    edx,edx
    944a:	mov    rsi,QWORD PTR [rax+r12*8]
    944e:	call   33f0 <lseek64@plt>
    9453:	test   eax,eax
    9455:	js     93ae <dmg_read+0xfe>
    945b:	mov    rax,QWORD PTR [r13+0x18]
    945f:	mov    rsi,QWORD PTR [r13+0x38]
    9463:	mov    edi,DWORD PTR [r13+0x0]
    9467:	mov    rdx,QWORD PTR [rax+r12*8]
    946b:	call   4300 <qemu_read_ok>
    9470:	test   eax,eax
    9472:	js     93ae <dmg_read+0xfe>
    9478:	mov    rax,QWORD PTR [r13+0x38]
    947c:	mov    rdi,QWORD PTR [rsp+0x8]
    9481:	mov    QWORD PTR [r13+0x48],rax
    9485:	mov    rax,QWORD PTR [r13+0x18]
    9489:	mov    rax,QWORD PTR [rax+r12*8]
    948d:	mov    DWORD PTR [r13+0x50],eax
    9491:	mov    rax,QWORD PTR [r13+0x40]
    9495:	mov    QWORD PTR [r13+0x60],rax
    9499:	mov    rax,QWORD PTR [r13+0x28]
    949d:	mov    rax,QWORD PTR [rax+r12*8]
    94a1:	shl    eax,0x9
    94a4:	mov    DWORD PTR [r13+0x68],eax
    94a8:	call   33a0 <inflateReset@plt>
    94ad:	test   eax,eax
    94af:	jne    93ae <dmg_read+0xfe>
    94b5:	mov    rdi,QWORD PTR [rsp+0x8]
    94ba:	mov    esi,0x4
    94bf:	call   2ec0 <inflate@plt>
    94c4:	cmp    eax,0x1
    94c7:	jne    93ae <dmg_read+0xfe>
    94cd:	mov    rax,QWORD PTR [r13+0x28]
    94d1:	mov    rax,QWORD PTR [rax+r12*8]
    94d5:	shl    rax,0x9
    94d9:	cmp    QWORD PTR [r13+0x70],rax
    94dd:	je     9435 <dmg_read+0x185>
    94e3:	jmp    93ae <dmg_read+0xfe>
    94e8:	nop    DWORD PTR [rax+rax*1+0x0]
    94f0:	mov    rdx,QWORD PTR [rax+r12*8]
    94f4:	mov    rdi,QWORD PTR [r13+0x40]
    94f8:	xor    esi,esi
    94fa:	shl    rdx,0x9
    94fe:	call   3020 <memset@plt>
    9503:	jmp    9435 <dmg_read+0x185>
    9508:	add    rsp,0x18
    950c:	xor    eax,eax
    950e:	pop    rbx
    950f:	pop    rbp
    9510:	pop    r12
    9512:	pop    r13
    9514:	pop    r14
    9516:	pop    r15
    9518:	ret    
    9519:	nop    DWORD PTR [rax+0x0]

0000000000009520 <read_uint32>:
    9520:	sub    rsp,0x18
    9524:	mov    edx,0x4
    9529:	lea    rsi,[rsp+0x4]
    952e:	mov    rax,QWORD PTR fs:0x28
    9537:	mov    QWORD PTR [rsp+0x8],rax
    953c:	xor    eax,eax
    953e:	call   4300 <qemu_read_ok>
    9543:	xor    edx,edx
    9545:	test   eax,eax
    9547:	js     9551 <read_uint32+0x31>
    9549:	mov    edx,DWORD PTR [rsp+0x4]
    954d:	bswap  edx
    954f:	mov    edx,edx
    9551:	mov    rcx,QWORD PTR [rsp+0x8]
    9556:	xor    rcx,QWORD PTR fs:0x28
    955f:	mov    rax,rdx
    9562:	jne    9569 <read_uint32+0x49>
    9564:	add    rsp,0x18
    9568:	ret    
    9569:	call   2f70 <__stack_chk_fail@plt>
    956e:	xchg   ax,ax

0000000000009570 <read_off>:
    9570:	sub    rsp,0x18
    9574:	mov    edx,0x8
    9579:	mov    rsi,rsp
    957c:	mov    rax,QWORD PTR fs:0x28
    9585:	mov    QWORD PTR [rsp+0x8],rax
    958a:	xor    eax,eax
    958c:	call   4300 <qemu_read_ok>
    9591:	xor    edx,edx
    9593:	test   eax,eax
    9595:	js     959e <read_off+0x2e>
    9597:	mov    rdx,QWORD PTR [rsp]
    959b:	bswap  rdx
    959e:	mov    rcx,QWORD PTR [rsp+0x8]
    95a3:	xor    rcx,QWORD PTR fs:0x28
    95ac:	mov    rax,rdx
    95af:	jne    95b6 <read_off+0x46>
    95b1:	add    rsp,0x18
    95b5:	ret    
    95b6:	call   2f70 <__stack_chk_fail@plt>
    95bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000095c0 <dmg_open>:
    95c0:	push   r15
    95c2:	push   r14
    95c4:	xor    eax,eax
    95c6:	push   r13
    95c8:	push   r12
    95ca:	mov    r12d,edx
    95cd:	push   rbp
    95ce:	push   rbx
    95cf:	mov    rbp,rsi
    95d2:	mov    rbx,rdi
    95d5:	xor    esi,esi
    95d7:	sub    rsp,0x48
    95db:	mov    r15,QWORD PTR [rdi+0x40]
    95df:	mov    rdi,rbp
    95e2:	call   32e0 <open64@plt>
    95e7:	test   eax,eax
    95e9:	mov    DWORD PTR [r15],eax
    95ec:	js     9680 <dmg_open+0xc0>
    95f2:	mov    DWORD PTR [rbx+0x8],0x1
    95f9:	mov    edi,DWORD PTR [r15]
    95fc:	mov    edx,0x2
    9601:	mov    DWORD PTR [r15+0x4],0x0
    9609:	mov    QWORD PTR [r15+0x28],0x0
    9611:	mov    rsi,0xfffffffffffffe28
    9618:	mov    QWORD PTR [r15+0x20],0x0
    9620:	mov    QWORD PTR [r15+0x18],0x0
    9628:	mov    QWORD PTR [r15+0x10],0x0
    9630:	call   33f0 <lseek64@plt>
    9635:	test   rax,rax
    9638:	js     964a <dmg_open+0x8a>
    963a:	mov    edi,DWORD PTR [r15]
    963d:	call   9570 <read_off>
    9642:	test   rax,rax
    9645:	mov    r14,rax
    9648:	jne    96a0 <dmg_open+0xe0>
    964a:	mov    edi,DWORD PTR [r15]
    964d:	call   3040 <close@plt>
    9652:	lea    rax,[rip+0x21dd47]        # 2273a0 <bdrv_raw>
    9659:	mov    edx,r12d
    965c:	mov    rsi,rbp
    965f:	mov    rdi,rbx
    9662:	mov    QWORD PTR [rbx+0x38],rax
    9666:	add    rsp,0x48
    966a:	pop    rbx
    966b:	pop    rbp
    966c:	pop    r12
    966e:	pop    r13
    9670:	pop    r14
    9672:	pop    r15
    9674:	jmp    QWORD PTR [rip+0x21dd3e]        # 2273b8 <bdrv_raw+0x18>
    967a:	nop    WORD PTR [rax+rax*1+0x0]
    9680:	call   2e80 <__errno_location@plt>
    9685:	mov    eax,DWORD PTR [rax]
    9687:	neg    eax
    9689:	add    rsp,0x48
    968d:	pop    rbx
    968e:	pop    rbp
    968f:	pop    r12
    9691:	pop    r13
    9693:	pop    r14
    9695:	pop    r15
    9697:	ret    
    9698:	nop    DWORD PTR [rax+rax*1+0x0]
    96a0:	mov    edi,DWORD PTR [r15]
    96a3:	xor    edx,edx
    96a5:	mov    rsi,rax
    96a8:	call   33f0 <lseek64@plt>
    96ad:	test   rax,rax
    96b0:	js     964a <dmg_open+0x8a>
    96b2:	mov    edi,DWORD PTR [r15]
    96b5:	call   9520 <read_uint32>
    96ba:	cmp    rax,0x100
    96c0:	jne    964a <dmg_open+0x8a>
    96c2:	mov    edi,DWORD PTR [r15]
    96c5:	call   9520 <read_uint32>
    96ca:	test   eax,eax
    96cc:	mov    r13,rax
    96cf:	je     964a <dmg_open+0x8a>
    96d5:	mov    edi,DWORD PTR [r15]
    96d8:	mov    edx,0x1
    96dd:	mov    esi,0xf8
    96e2:	call   33f0 <lseek64@plt>
    96e7:	test   rax,rax
    96ea:	js     964a <dmg_open+0x8a>
    96f0:	mov    eax,r13d
    96f3:	mov    QWORD PTR [rsp+0x20],rbx
    96f8:	mov    QWORD PTR [rsp+0x28],rbp
    96fd:	mov    DWORD PTR [rsp+0x1c],0x1
    9705:	mov    rbp,r15
    9708:	mov    DWORD PTR [rsp+0x30],0x1
    9710:	mov    QWORD PTR [rsp+0x10],0x0
    9719:	mov    QWORD PTR [rsp+0x8],0x0
    9722:	mov    rbx,r14
    9725:	mov    QWORD PTR [rsp],rax
    9729:	mov    r15d,r12d
    972c:	mov    edi,DWORD PTR [rbp+0x0]
    972f:	mov    edx,0x1
    9734:	xor    esi,esi
    9736:	call   33f0 <lseek64@plt>
    973b:	mov    rcx,QWORD PTR [rsp]
    973f:	lea    rdx,[rcx+rbx*1]
    9743:	cmp    rax,rdx
    9746:	jge    99a8 <dmg_open+0x3e8>
    974c:	mov    edi,DWORD PTR [rbp+0x0]
    974f:	call   9520 <read_uint32>
    9754:	test   eax,eax
    9756:	mov    r13,rax
    9759:	je     9993 <dmg_open+0x3d3>
    975f:	mov    edi,DWORD PTR [rbp+0x0]
    9762:	call   9520 <read_uint32>
    9767:	cmp    eax,0x6d697368
    976c:	jne    98ed <dmg_open+0x32d>
    9772:	cmp    r13d,0xf3
    9779:	jbe    98ed <dmg_open+0x32d>
    977f:	mov    edi,DWORD PTR [rbp+0x0]
    9782:	mov    edx,0x1
    9787:	mov    esi,0xc8
    978c:	call   33f0 <lseek64@plt>
    9791:	test   rax,rax
    9794:	js     9993 <dmg_open+0x3d3>
    979a:	sub    r13d,0xcc
    97a1:	mov    eax,0xcccccccd
    97a6:	mov    r14d,DWORD PTR [rbp+0x4]
    97aa:	mul    r13d
    97ad:	mov    rdi,QWORD PTR [rbp+0x8]
    97b1:	mov    r13d,edx
    97b4:	shr    r13d,0x5
    97b8:	add    r14d,r13d
    97bb:	shl    r14d,0x3
    97bf:	mov    esi,r14d
    97c2:	movsxd r14,r14d
    97c5:	sar    esi,1
    97c7:	movsxd rsi,esi
    97ca:	call   49f0 <qemu_realloc>
    97cf:	mov    rdi,QWORD PTR [rbp+0x10]
    97d3:	mov    rsi,r14
    97d6:	mov    QWORD PTR [rbp+0x8],rax
    97da:	call   49f0 <qemu_realloc>
    97df:	mov    rdi,QWORD PTR [rbp+0x18]
    97e3:	mov    rsi,r14
    97e6:	mov    QWORD PTR [rbp+0x10],rax
    97ea:	call   49f0 <qemu_realloc>
    97ef:	mov    rdi,QWORD PTR [rbp+0x20]
    97f3:	mov    rsi,r14
    97f6:	mov    QWORD PTR [rbp+0x18],rax
    97fa:	call   49f0 <qemu_realloc>
    97ff:	mov    rdi,QWORD PTR [rbp+0x28]
    9803:	mov    rsi,r14
    9806:	mov    QWORD PTR [rbp+0x20],rax
    980a:	call   49f0 <qemu_realloc>
    980f:	mov    r14d,DWORD PTR [rbp+0x4]
    9813:	mov    QWORD PTR [rbp+0x28],rax
    9817:	lea    eax,[r13+r14*1+0x0]
    981c:	cmp    r14d,eax
    981f:	jae    98e5 <dmg_open+0x325>
    9825:	mov    QWORD PTR [rsp+0x38],rbx
    982a:	mov    r12d,DWORD PTR [rsp+0x1c]
    982f:	mov    ebx,DWORD PTR [rsp+0x30]
    9833:	mov    DWORD PTR [rsp+0x34],r15d
    9838:	mov    edi,DWORD PTR [rbp+0x0]
    983b:	mov    r15d,r14d
    983e:	call   9520 <read_uint32>
    9843:	mov    rsi,QWORD PTR [rbp+0x8]
    9847:	mov    DWORD PTR [rsi+r15*4],eax
    984b:	mov    rax,QWORD PTR [rbp+0x8]
    984f:	mov    eax,DWORD PTR [rax+r15*4]
    9853:	lea    esi,[rax-0x1]
    9856:	cmp    esi,0x1
    9859:	jbe    9903 <dmg_open+0x343>
    985f:	cmp    eax,0x80000005
    9864:	je     9903 <dmg_open+0x343>
    986a:	sub    r14d,0x1
    986e:	cmp    eax,0xffffffff
    9871:	jne    98a0 <dmg_open+0x2e0>
    9873:	mov    rsi,QWORD PTR [rbp+0x10]
    9877:	mov    rdx,QWORD PTR [rbp+0x18]
    987b:	mov    eax,r14d
    987e:	mov    rdx,QWORD PTR [rdx+rax*8]
    9882:	add    rdx,QWORD PTR [rsi+rax*8]
    9886:	mov    rsi,QWORD PTR [rbp+0x20]
    988a:	mov    QWORD PTR [rsp+0x8],rdx
    988f:	mov    rdx,QWORD PTR [rbp+0x28]
    9893:	mov    rdx,QWORD PTR [rdx+rax*8]
    9897:	add    rdx,QWORD PTR [rsi+rax*8]
    989b:	mov    QWORD PTR [rsp+0x10],rdx
    98a0:	mov    edi,DWORD PTR [rbp+0x0]
    98a3:	mov    edx,0x1
    98a8:	mov    esi,0x24
    98ad:	call   33f0 <lseek64@plt>
    98b2:	test   rax,rax
    98b5:	js     997c <dmg_open+0x3bc>
    98bb:	sub    r13d,0x1
    98bf:	mov    eax,DWORD PTR [rbp+0x4]
    98c2:	add    r14d,0x1
    98c6:	add    eax,r13d
    98c9:	cmp    eax,r14d
    98cc:	ja     9838 <dmg_open+0x278>
    98d2:	mov    DWORD PTR [rsp+0x30],ebx
    98d6:	mov    r15d,DWORD PTR [rsp+0x34]
    98db:	mov    rbx,QWORD PTR [rsp+0x38]
    98e0:	mov    DWORD PTR [rsp+0x1c],r12d
    98e5:	mov    DWORD PTR [rbp+0x4],eax
    98e8:	jmp    972c <dmg_open+0x16c>
    98ed:	mov    edi,DWORD PTR [rbp+0x0]
    98f0:	lea    esi,[r13-0x4]
    98f4:	mov    edx,0x1
    98f9:	call   33f0 <lseek64@plt>
    98fe:	jmp    972c <dmg_open+0x16c>
    9903:	mov    edi,DWORD PTR [rbp+0x0]
    9906:	call   9520 <read_uint32>
    990b:	mov    edi,DWORD PTR [rbp+0x0]
    990e:	call   9570 <read_off>
    9913:	add    rax,QWORD PTR [rsp+0x10]
    9918:	mov    rsi,QWORD PTR [rbp+0x20]
    991c:	mov    QWORD PTR [rsi+r15*8],rax
    9920:	mov    edi,DWORD PTR [rbp+0x0]
    9923:	call   9570 <read_off>
    9928:	mov    rsi,QWORD PTR [rbp+0x28]
    992c:	mov    QWORD PTR [rsi+r15*8],rax
    9930:	mov    edi,DWORD PTR [rbp+0x0]
    9933:	call   9570 <read_off>
    9938:	add    rax,QWORD PTR [rsp+0x8]
    993d:	mov    rsi,QWORD PTR [rbp+0x10]
    9941:	mov    QWORD PTR [rsi+r15*8],rax
    9945:	mov    edi,DWORD PTR [rbp+0x0]
    9948:	call   9570 <read_off>
    994d:	mov    rsi,QWORD PTR [rbp+0x18]
    9951:	mov    edx,r12d
    9954:	mov    QWORD PTR [rsi+r15*8],rax
    9958:	mov    rax,QWORD PTR [rbp+0x18]
    995c:	mov    esi,ebx
    995e:	mov    rax,QWORD PTR [rax+r15*8]
    9962:	cmp    rax,rsi
    9965:	cmova  ebx,eax
    9968:	mov    rax,QWORD PTR [rbp+0x28]
    996c:	mov    rax,QWORD PTR [rax+r15*8]
    9970:	cmp    rax,rdx
    9973:	cmova  r12d,eax
    9977:	jmp    98bf <dmg_open+0x2ff>
    997c:	mov    r15,rbp
    997f:	mov    rbx,QWORD PTR [rsp+0x20]
    9984:	mov    rbp,QWORD PTR [rsp+0x28]
    9989:	mov    r12d,DWORD PTR [rsp+0x34]
    998e:	jmp    964a <dmg_open+0x8a>
    9993:	mov    r12d,r15d
    9996:	mov    rbx,QWORD PTR [rsp+0x20]
    999b:	mov    r15,rbp
    999e:	mov    rbp,QWORD PTR [rsp+0x28]
    99a3:	jmp    964a <dmg_open+0x8a>
    99a8:	mov    eax,DWORD PTR [rsp+0x30]
    99ac:	mov    rbx,QWORD PTR [rsp+0x20]
    99b1:	mov    r12d,r15d
    99b4:	mov    r15,rbp
    99b7:	mov    rbp,QWORD PTR [rsp+0x28]
    99bc:	lea    edi,[rax+0x1]
    99bf:	call   49d0 <qemu_malloc>
    99c4:	mov    edi,DWORD PTR [rsp+0x1c]
    99c8:	mov    QWORD PTR [r15+0x38],rax
    99cc:	shl    edi,0x9
    99cf:	call   49d0 <qemu_malloc>
    99d4:	lea    rdi,[r15+0x48]
    99d8:	lea    rsi,[rip+0x12800]        # 1c1df <__PRETTY_FUNCTION__.13304+0x8f>
    99df:	mov    QWORD PTR [r15+0x40],rax
    99e3:	mov    edx,0x70
    99e8:	call   32c0 <inflateInit_@plt>
    99ed:	test   eax,eax
    99ef:	jne    964a <dmg_open+0x8a>
    99f5:	mov    edx,DWORD PTR [r15+0x4]
    99f9:	mov    DWORD PTR [r15+0x30],edx
    99fd:	jmp    9689 <dmg_open+0xc9>
    9a02:	nop    DWORD PTR [rax+0x0]
    9a06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000009a10 <dmg_probe>:
    9a10:	push   rbx
    9a11:	mov    rdi,rdx
    9a14:	mov    rbx,rdx
    9a17:	call   2f60 <strlen@plt>
    9a1c:	xor    ecx,ecx
    9a1e:	cmp    eax,0x4
    9a21:	jle    9a46 <dmg_probe+0x36>
    9a23:	cdqe   
    9a25:	lea    rdi,[rip+0x152d6]        # 1ed02 <desc_template.13816+0x182>
    9a2c:	mov    ecx,0x5
    9a31:	lea    rsi,[rbx+rax*1-0x4]
    9a36:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9a38:	seta   al
    9a3b:	sbb    al,0x0
    9a3d:	xor    ecx,ecx
    9a3f:	test   al,al
    9a41:	sete   cl
    9a44:	add    ecx,ecx
    9a46:	mov    eax,ecx
    9a48:	pop    rbx
    9a49:	ret    
    9a4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000009a50 <bochs_close>:
    9a50:	push   rbx
    9a51:	mov    rbx,QWORD PTR [rdi+0x40]
    9a55:	mov    rdi,QWORD PTR [rbx+0x8]
    9a59:	call   49c0 <qemu_free>
    9a5e:	mov    edi,DWORD PTR [rbx]
    9a60:	pop    rbx
    9a61:	jmp    3040 <close@plt>
    9a66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000009a70 <bochs_read>:
    9a70:	push   r15
    9a72:	push   r14
    9a74:	push   r13
    9a76:	push   r12
    9a78:	push   rbp
    9a79:	push   rbx
    9a7a:	sub    rsp,0x38
    9a7e:	mov    r14,QWORD PTR [rdi+0x40]
    9a82:	mov    rax,QWORD PTR fs:0x28
    9a8b:	mov    QWORD PTR [rsp+0x28],rax
    9a90:	xor    eax,eax
    9a92:	test   ecx,ecx
    9a94:	mov    QWORD PTR [rsp+0x18],r14
    9a99:	jle    9c18 <bochs_read+0x1a8>
    9a9f:	lea    ebx,[rcx-0x1]
    9aa2:	shl    rsi,0x9
    9aa6:	mov    r12,rdi
    9aa9:	sub    rsi,rdx
    9aac:	mov    r13,rdx
    9aaf:	add    rbx,0x1
    9ab3:	mov    rbp,rsi
    9ab6:	shl    rbx,0x9
    9aba:	lea    rax,[rdx+rbx*1]
    9abe:	mov    QWORD PTR [rsp],rax
    9ac2:	lea    rax,[rsp+0x27]
    9ac7:	mov    QWORD PTR [rsp+0x10],rax
    9acc:	jmp    9b25 <bochs_read+0xb5>
    9ace:	xchg   ax,ax
    9ad0:	call   2e80 <__errno_location@plt>
    9ad5:	mov    DWORD PTR [rax],0x5
    9adb:	nop    DWORD PTR [rax+rax*1+0x0]
    9ae0:	lea    rdi,[r13+0x8]
    9ae4:	mov    rcx,r13
    9ae7:	xor    eax,eax
    9ae9:	mov    QWORD PTR [r13+0x0],0x0
    9af1:	mov    QWORD PTR [r13+0x1f8],0x0
    9afc:	and    rdi,0xfffffffffffffff8
    9b00:	sub    rcx,rdi
    9b03:	add    ecx,0x200
    9b09:	shr    ecx,0x3
    9b0c:	rep stos QWORD PTR es:[rdi],rax
    9b0f:	add    r13,0x200
    9b16:	cmp    r13,QWORD PTR [rsp]
    9b1a:	je     9c18 <bochs_read+0x1a8>
    9b20:	mov    r14,QWORD PTR [r12+0x40]
    9b25:	movsxd rbx,DWORD PTR [r14+0x20]
    9b29:	lea    rax,[r13+rbp*1+0x0]
    9b2e:	cqo    
    9b30:	idiv   rbx
    9b33:	mov    r9,rdx
    9b36:	mov    rdx,QWORD PTR [r14+0x8]
    9b3a:	mov    esi,DWORD PTR [rdx+rax*4]
    9b3d:	cmp    esi,0xffffffff
    9b40:	je     9ae0 <bochs_read+0x70>
    9b42:	mov    ebx,DWORD PTR [r14+0x18]
    9b46:	mov    r15d,DWORD PTR [r14+0x1c]
    9b4a:	mov    edi,DWORD PTR [r14]
    9b4d:	mov    QWORD PTR [rsp+0x8],r9
    9b52:	add    r15d,ebx
    9b55:	shl    r15d,0x9
    9b59:	imul   r15d,esi
    9b5d:	lea    rsi,[r9+0xfff]
    9b64:	add    r15d,DWORD PTR [r14+0x14]
    9b68:	test   r9,r9
    9b6b:	cmovns rsi,r9
    9b6f:	xor    edx,edx
    9b71:	sar    rsi,0xc
    9b75:	add    rsi,r15
    9b78:	call   33f0 <lseek64@plt>
    9b7d:	mov    rsi,QWORD PTR [rsp+0x10]
    9b82:	mov    edi,DWORD PTR [r14]
    9b85:	mov    edx,0x1
    9b8a:	call   30a0 <read@plt>
    9b8f:	test   eax,eax
    9b91:	js     9ae0 <bochs_read+0x70>
    9b97:	mov    r9,QWORD PTR [rsp+0x8]
    9b9c:	je     9ad0 <bochs_read+0x60>
    9ba2:	lea    rax,[r9+0x1ff]
    9ba9:	test   r9,r9
    9bac:	movsx  esi,BYTE PTR [rsp+0x27]
    9bb1:	cmovns rax,r9
    9bb5:	mov    rdx,rax
    9bb8:	sar    rax,0x3f
    9bbc:	shr    rax,0x3d
    9bc0:	sar    rdx,0x9
    9bc4:	lea    rdi,[rdx+rax*1]
    9bc8:	and    edi,0x7
    9bcb:	sub    rdi,rax
    9bce:	bt     esi,edi
    9bd1:	jae    9ae0 <bochs_read+0x70>
    9bd7:	movsxd rsi,ebx
    9bda:	mov    edi,DWORD PTR [r14]
    9bdd:	add    rsi,rdx
    9be0:	xor    edx,edx
    9be2:	shl    rsi,0x9
    9be6:	add    rsi,r15
    9be9:	call   33f0 <lseek64@plt>
    9bee:	mov    rax,QWORD PTR [rsp+0x18]
    9bf3:	mov    edx,0x200
    9bf8:	mov    rsi,r13
    9bfb:	mov    edi,DWORD PTR [rax]
    9bfd:	call   4300 <qemu_read_ok>
    9c02:	test   eax,eax
    9c04:	jns    9b0f <bochs_read+0x9f>
    9c0a:	mov    eax,0xffffffff
    9c0f:	jmp    9c1a <bochs_read+0x1aa>
    9c11:	nop    DWORD PTR [rax+0x0]
    9c18:	xor    eax,eax
    9c1a:	mov    rbx,QWORD PTR [rsp+0x28]
    9c1f:	xor    rbx,QWORD PTR fs:0x28
    9c28:	jne    9c39 <bochs_read+0x1c9>
    9c2a:	add    rsp,0x38
    9c2e:	pop    rbx
    9c2f:	pop    rbp
    9c30:	pop    r12
    9c32:	pop    r13
    9c34:	pop    r14
    9c36:	pop    r15
    9c38:	ret    
    9c39:	call   2f70 <__stack_chk_fail@plt>
    9c3e:	xchg   ax,ax

0000000000009c40 <bochs_open>:
    9c40:	push   r13
    9c42:	push   r12
    9c44:	mov    r13,rdi
    9c47:	push   rbp
    9c48:	push   rbx
    9c49:	mov    rbp,rsi
    9c4c:	mov    esi,0x2
    9c51:	sub    rsp,0x218
    9c58:	mov    rbx,QWORD PTR [rdi+0x40]
    9c5c:	mov    rdi,rbp
    9c5f:	mov    rax,QWORD PTR fs:0x28
    9c68:	mov    QWORD PTR [rsp+0x208],rax
    9c70:	xor    eax,eax
    9c72:	call   32e0 <open64@plt>
    9c77:	test   eax,eax
    9c79:	mov    r12d,eax
    9c7c:	js     9de0 <bochs_open+0x1a0>
    9c82:	mov    rbp,rsp
    9c85:	mov    DWORD PTR [r13+0x8],0x1
    9c8d:	mov    edx,0x200
    9c92:	mov    DWORD PTR [rbx],r12d
    9c95:	mov    rsi,rbp
    9c98:	mov    edi,r12d
    9c9b:	call   4250 <qemu_read>
    9ca0:	cmp    rax,0x200
    9ca6:	jne    9e00 <bochs_open+0x1c0>
    9cac:	lea    rdi,[rip+0x15054]        # 1ed07 <desc_template.13816+0x187>
    9cb3:	mov    ecx,0x17
    9cb8:	mov    rsi,rbp
    9cbb:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9cbd:	seta   al
    9cc0:	sbb    al,0x0
    9cc2:	test   al,al
    9cc4:	jne    9e00 <bochs_open+0x1c0>
    9cca:	lea    rsi,[rbp+0x20]
    9cce:	lea    rdi,[rip+0x15049]        # 1ed1e <desc_template.13816+0x19e>
    9cd5:	mov    ecx,0x8
    9cda:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9cdc:	seta   al
    9cdf:	sbb    al,0x0
    9ce1:	test   al,al
    9ce3:	jne    9e00 <bochs_open+0x1c0>
    9ce9:	lea    rsi,[rbp+0x30]
    9ced:	lea    rdi,[rip+0x15032]        # 1ed26 <desc_template.13816+0x1a6>
    9cf4:	mov    ecx,0x8
    9cf9:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9cfb:	seta   bpl
    9cff:	sbb    bpl,0x0
    9d03:	movsx  ebp,bpl
    9d07:	test   ebp,ebp
    9d09:	jne    9e00 <bochs_open+0x1c0>
    9d0f:	mov    eax,DWORD PTR [rsp+0x40]
    9d13:	cmp    eax,0x20000
    9d18:	je     9d25 <bochs_open+0xe5>
    9d1a:	cmp    eax,0x10000
    9d1f:	jne    9e00 <bochs_open+0x1c0>
    9d25:	mov    rax,QWORD PTR [rsp+0x58]
    9d2a:	mov    esi,DWORD PTR [rsp+0x44]
    9d2e:	xor    edx,edx
    9d30:	shr    rax,0x9
    9d34:	mov    QWORD PTR [r13+0x0],rax
    9d38:	mov    edi,DWORD PTR [rbx]
    9d3a:	call   33f0 <lseek64@plt>
    9d3f:	mov    edi,DWORD PTR [rsp+0x48]
    9d43:	mov    DWORD PTR [rbx+0x10],edi
    9d46:	shl    edi,0x2
    9d49:	movsxd rdi,edi
    9d4c:	call   49d0 <qemu_malloc>
    9d51:	test   rax,rax
    9d54:	mov    QWORD PTR [rbx+0x8],rax
    9d58:	je     9e00 <bochs_open+0x1c0>
    9d5e:	mov    ecx,DWORD PTR [rbx+0x10]
    9d61:	mov    edi,DWORD PTR [rbx]
    9d63:	mov    rsi,rax
    9d66:	lea    edx,[rcx*4+0x0]
    9d6d:	movsxd rdx,edx
    9d70:	call   30a0 <read@plt>
    9d75:	mov    ecx,DWORD PTR [rbx+0x10]
    9d78:	lea    edx,[rcx*4+0x0]
    9d7f:	movsxd rcx,edx
    9d82:	cmp    rcx,rax
    9d85:	jne    9e00 <bochs_open+0x1c0>
    9d87:	add    edx,DWORD PTR [rsp+0x44]
    9d8b:	mov    DWORD PTR [rbx+0x14],edx
    9d8e:	mov    eax,DWORD PTR [rsp+0x4c]
    9d92:	sub    eax,0x1
    9d95:	shr    eax,0x9
    9d98:	add    eax,0x1
    9d9b:	mov    DWORD PTR [rbx+0x18],eax
    9d9e:	mov    eax,DWORD PTR [rsp+0x50]
    9da2:	sub    eax,0x1
    9da5:	shr    eax,0x9
    9da8:	add    eax,0x1
    9dab:	mov    DWORD PTR [rbx+0x1c],eax
    9dae:	mov    eax,DWORD PTR [rsp+0x50]
    9db2:	mov    DWORD PTR [rbx+0x20],eax
    9db5:	mov    rdx,QWORD PTR [rsp+0x208]
    9dbd:	xor    rdx,QWORD PTR fs:0x28
    9dc6:	mov    eax,ebp
    9dc8:	jne    9e0f <bochs_open+0x1cf>
    9dca:	add    rsp,0x218
    9dd1:	pop    rbx
    9dd2:	pop    rbp
    9dd3:	pop    r12
    9dd5:	pop    r13
    9dd7:	ret    
    9dd8:	nop    DWORD PTR [rax+rax*1+0x0]
    9de0:	xor    esi,esi
    9de2:	xor    eax,eax
    9de4:	mov    rdi,rbp
    9de7:	call   32e0 <open64@plt>
    9dec:	test   eax,eax
    9dee:	mov    r12d,eax
    9df1:	jns    9c82 <bochs_open+0x42>
    9df7:	mov    ebp,0xffffffff
    9dfc:	jmp    9db5 <bochs_open+0x175>
    9dfe:	xchg   ax,ax
    9e00:	mov    edi,r12d
    9e03:	mov    ebp,0xffffffff
    9e08:	call   3040 <close@plt>
    9e0d:	jmp    9db5 <bochs_open+0x175>
    9e0f:	call   2f70 <__stack_chk_fail@plt>
    9e14:	xchg   ax,ax
    9e16:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000009e20 <bochs_probe>:
    9e20:	xor    eax,eax
    9e22:	cmp    esi,0x1ff
    9e28:	mov    r8,rdi
    9e2b:	jle    9ea2 <bochs_probe+0x82>
    9e2d:	lea    rdi,[rip+0x14ed3]        # 1ed07 <desc_template.13816+0x187>
    9e34:	mov    ecx,0x17
    9e39:	mov    rsi,r8
    9e3c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9e3e:	seta   al
    9e41:	sbb    al,0x0
    9e43:	movsx  eax,al
    9e46:	test   eax,eax
    9e48:	jne    9ea0 <bochs_probe+0x80>
    9e4a:	lea    rsi,[r8+0x20]
    9e4e:	lea    rdi,[rip+0x14ec9]        # 1ed1e <desc_template.13816+0x19e>
    9e55:	mov    ecx,0x8
    9e5a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9e5c:	seta   dl
    9e5f:	sbb    dl,0x0
    9e62:	test   dl,dl
    9e64:	jne    9ea2 <bochs_probe+0x82>
    9e66:	lea    rsi,[r8+0x30]
    9e6a:	lea    rdi,[rip+0x14eb5]        # 1ed26 <desc_template.13816+0x1a6>
    9e71:	mov    ecx,0x8
    9e76:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    9e78:	seta   al
    9e7b:	sbb    al,0x0
    9e7d:	movsx  eax,al
    9e80:	test   eax,eax
    9e82:	jne    9ea0 <bochs_probe+0x80>
    9e84:	mov    edx,DWORD PTR [r8+0x40]
    9e88:	sub    edx,0x10000
    9e8e:	and    edx,0xfffeffff
    9e94:	mov    edx,0x64
    9e99:	cmove  eax,edx
    9e9c:	ret    
    9e9d:	nop    DWORD PTR [rax]
    9ea0:	xor    eax,eax
    9ea2:	repz ret 
    9ea4:	nop    WORD PTR cs:[rax+rax*1+0x0]
    9eae:	xchg   ax,ax

0000000000009eb0 <vpc_close>:
    9eb0:	push   rbx
    9eb1:	mov    rbx,QWORD PTR [rdi+0x40]
    9eb5:	mov    rdi,QWORD PTR [rbx+0x218]
    9ebc:	call   49c0 <qemu_free>
    9ec1:	mov    rdi,QWORD PTR [rbx]
    9ec4:	pop    rbx
    9ec5:	jmp    170f0 <bdrv_delete>
    9eca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000009ed0 <vpc_write>:
    9ed0:	push   rbp
    9ed1:	mov    rbp,rsp
    9ed4:	push   r15
    9ed6:	push   r14
    9ed8:	push   r13
    9eda:	push   r12
    9edc:	push   rbx
    9edd:	sub    rsp,0x48
    9ee1:	mov    r15,QWORD PTR [rdi+0x40]
    9ee5:	mov    rax,QWORD PTR fs:0x28
    9eee:	mov    QWORD PTR [rbp-0x38],rax
    9ef2:	xor    eax,eax
    9ef4:	test   ecx,ecx
    9ef6:	mov    QWORD PTR [rbp-0x50],r15
    9efa:	jle    a1a0 <vpc_write+0x2d0>
    9f00:	lea    eax,[rcx-0x1]
    9f03:	mov    rbx,rsi
    9f06:	mov    r14,rdi
    9f09:	mov    r12,rsi
    9f0c:	mov    r13,rdx
    9f0f:	shl    rbx,0x9
    9f13:	lea    rax,[rsi+rax*1+0x1]
    9f18:	shl    rax,0x9
    9f1c:	mov    QWORD PTR [rbp-0x58],rax
    9f20:	lea    rax,[rbp-0x3c]
    9f24:	mov    QWORD PTR [rbp-0x70],rax
    9f28:	jmp    9ff7 <vpc_write+0x127>
    9f2d:	nop    DWORD PTR [rax]
    9f30:	mov    rsi,QWORD PTR [r15+0x218]
    9f37:	mov    eax,eax
    9f39:	mov    r10d,DWORD PTR [rsi+rax*4]
    9f3d:	cmp    r10d,0xffffffff
    9f41:	je     a01a <vpc_write+0x14a>
    9f47:	shl    r10,0x9
    9f4b:	and    edx,0xfffffe00
    9f51:	cmp    r10,QWORD PTR [r15+0x228]
    9f58:	lea    rsi,[rdx+rdi*1]
    9f5c:	lea    r9,[rsi+r10*1]
    9f60:	je     9fb5 <vpc_write+0xe5>
    9f62:	lea    rax,[rdi+0xf]
    9f66:	mov    QWORD PTR [rbp-0x48],rsp
    9f6a:	mov    rdx,rdi
    9f6d:	mov    QWORD PTR [r15+0x228],r10
    9f74:	mov    esi,0xff
    9f79:	mov    QWORD PTR [rbp-0x68],r9
    9f7d:	shr    rax,0x4
    9f81:	mov    QWORD PTR [rbp-0x60],r10
    9f85:	shl    rax,0x4
    9f89:	sub    rsp,rax
    9f8c:	mov    rdi,rsp
    9f8f:	call   3020 <memset@plt>
    9f94:	mov    r10,QWORD PTR [rbp-0x60]
    9f98:	mov    ecx,DWORD PTR [r15+0x234]
    9f9f:	mov    rdx,rsp
    9fa2:	mov    rdi,QWORD PTR [r15]
    9fa5:	mov    rsi,r10
    9fa8:	call   180f0 <bdrv_pwrite>
    9fad:	mov    rsp,QWORD PTR [rbp-0x48]
    9fb1:	mov    r9,QWORD PTR [rbp-0x68]
    9fb5:	mov    rsi,r9
    9fb8:	mov    rax,QWORD PTR [rbp-0x50]
    9fbc:	mov    ecx,0x200
    9fc1:	mov    rdx,r13
    9fc4:	mov    rdi,QWORD PTR [rax]
    9fc7:	call   180f0 <bdrv_pwrite>
    9fcc:	cmp    eax,0x200
    9fd1:	jne    a1a8 <vpc_write+0x2d8>
    9fd7:	add    r12,0x1
    9fdb:	add    r13,0x200
    9fe2:	add    rbx,0x200
    9fe9:	cmp    QWORD PTR [rbp-0x58],rbx
    9fed:	je     a1a0 <vpc_write+0x2d0>
    9ff3:	mov    r15,QWORD PTR [r14+0x40]
    9ff7:	mov    ecx,DWORD PTR [r15+0x230]
    9ffe:	xor    edx,edx
    a000:	mov    rax,rbx
    a003:	mov    edi,DWORD PTR [r15+0x234]
    a00a:	div    rcx
    a00d:	cmp    DWORD PTR [r15+0x210],eax
    a014:	ja     9f30 <vpc_write+0x60>
    a01a:	lea    rdx,[rdi+0xf]
    a01e:	mov    QWORD PTR [rbp-0x48],rsp
    a022:	shr    rdx,0x4
    a026:	shl    rdx,0x4
    a02a:	sub    rsp,rdx
    a02d:	test   r12,r12
    a030:	js     a170 <vpc_write+0x2a0>
    a036:	cmp    QWORD PTR [r14],r12
    a039:	jl     a170 <vpc_write+0x2a0>
    a03f:	mov    rax,rbx
    a042:	cqo    
    a044:	idiv   rcx
    a047:	mov    r9d,eax
    a04a:	mov    QWORD PTR [rbp-0x68],rax
    a04e:	mov    rax,QWORD PTR [r15+0x218]
    a055:	mov    QWORD PTR [rbp-0x60],r9
    a059:	lea    rdx,[rax+r9*4]
    a05d:	cmp    DWORD PTR [rdx],0xffffffff
    a060:	jne    a170 <vpc_write+0x2a0>
    a066:	mov    rax,QWORD PTR [r15+0x208]
    a06d:	mov    esi,0xff
    a072:	mov    rdi,rsp
    a075:	shr    rax,0x9
    a079:	mov    DWORD PTR [rdx],eax
    a07b:	mov    edx,DWORD PTR [r15+0x234]
    a082:	call   3020 <memset@plt>
    a087:	mov    ecx,DWORD PTR [r15+0x234]
    a08e:	mov    rsi,QWORD PTR [r15+0x208]
    a095:	mov    rdx,rsp
    a098:	mov    rdi,QWORD PTR [r15]
    a09b:	call   180f0 <bdrv_pwrite>
    a0a0:	mov    eax,DWORD PTR [r15+0x234]
    a0a7:	add    eax,DWORD PTR [r15+0x230]
    a0ae:	mov    ecx,0x200
    a0b3:	add    QWORD PTR [r15+0x208],rax
    a0ba:	mov    rax,QWORD PTR [r14+0x40]
    a0be:	mov    rsi,QWORD PTR [rax+0x208]
    a0c5:	lea    rdx,[rax+0x8]
    a0c9:	mov    rdi,QWORD PTR [rax]
    a0cc:	call   180f0 <bdrv_pwrite>
    a0d1:	test   eax,eax
    a0d3:	js     a1b0 <vpc_write+0x2e0>
    a0d9:	mov    rax,QWORD PTR [r15+0x218]
    a0e0:	mov    r9,QWORD PTR [rbp-0x60]
    a0e4:	mov    ecx,0x4
    a0e9:	mov    r10,QWORD PTR [rbp-0x68]
    a0ed:	mov    rdx,QWORD PTR [rbp-0x70]
    a0f1:	mov    eax,DWORD PTR [rax+r9*4]
    a0f5:	lea    esi,[r10*4+0x0]
    a0fd:	add    rsi,QWORD PTR [r15+0x220]
    a104:	bswap  eax
    a106:	mov    DWORD PTR [rbp-0x3c],eax
    a109:	mov    rdi,QWORD PTR [r15]
    a10c:	call   180f0 <bdrv_pwrite>
    a111:	test   eax,eax
    a113:	js     a1b0 <vpc_write+0x2e0>
    a119:	mov    rcx,QWORD PTR [r14+0x40]
    a11d:	xor    edx,edx
    a11f:	mov    rax,rbx
    a122:	mov    esi,DWORD PTR [rcx+0x230]
    a128:	div    rsi
    a12b:	shr    rdx,0x9
    a12f:	cmp    DWORD PTR [rcx+0x210],eax
    a135:	jbe    a170 <vpc_write+0x2a0>
    a137:	mov    rsi,QWORD PTR [rcx+0x218]
    a13e:	mov    eax,eax
    a140:	mov    eax,DWORD PTR [rsi+rax*4]
    a143:	cmp    eax,0xffffffff
    a146:	je     a1d0 <vpc_write+0x300>
    a14c:	mov    ecx,DWORD PTR [rcx+0x234]
    a152:	mov    esi,eax
    a154:	shl    rdx,0x9
    a158:	mov    rax,rsi
    a15b:	mov    rsp,QWORD PTR [rbp-0x48]
    a15f:	shl    rax,0x9
    a163:	add    rdx,rcx
    a166:	lea    rsi,[rdx+rax*1]
    a16a:	jmp    9fb8 <vpc_write+0xe8>
    a16f:	nop
    a170:	mov    rsp,QWORD PTR [rbp-0x48]
    a174:	mov    eax,0xffffffff
    a179:	mov    rbx,QWORD PTR [rbp-0x38]
    a17d:	xor    rbx,QWORD PTR fs:0x28
    a186:	jne    a1d6 <vpc_write+0x306>
    a188:	lea    rsp,[rbp-0x28]
    a18c:	pop    rbx
    a18d:	pop    r12
    a18f:	pop    r13
    a191:	pop    r14
    a193:	pop    r15
    a195:	pop    rbp
    a196:	ret    
    a197:	nop    WORD PTR [rax+rax*1+0x0]
    a1a0:	xor    eax,eax
    a1a2:	jmp    a179 <vpc_write+0x2a9>
    a1a4:	nop    DWORD PTR [rax+0x0]
    a1a8:	mov    eax,0xffffffff
    a1ad:	jmp    a179 <vpc_write+0x2a9>
    a1af:	nop
    a1b0:	mov    eax,DWORD PTR [r15+0x234]
    a1b7:	add    eax,DWORD PTR [r15+0x230]
    a1be:	sub    QWORD PTR [r15+0x208],rax
    a1c5:	mov    eax,0xffffffff
    a1ca:	mov    rsp,QWORD PTR [rbp-0x48]
    a1ce:	jmp    a179 <vpc_write+0x2a9>
    a1d0:	mov    rsp,QWORD PTR [rbp-0x48]
    a1d4:	jmp    a179 <vpc_write+0x2a9>
    a1d6:	call   2f70 <__stack_chk_fail@plt>
    a1db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000a1e0 <vpc_read>:
    a1e0:	push   r15
    a1e2:	push   r14
    a1e4:	push   r13
    a1e6:	push   r12
    a1e8:	push   rbp
    a1e9:	push   rbx
    a1ea:	sub    rsp,0x8
    a1ee:	test   ecx,ecx
    a1f0:	mov    r12,QWORD PTR [rdi+0x40]
    a1f4:	jle    a2cd <vpc_read+0xed>
    a1fa:	lea    r13d,[rcx-0x1]
    a1fe:	shl    rsi,0x9
    a202:	mov    r15,rdi
    a205:	sub    rsi,rdx
    a208:	mov    rbx,rdx
    a20b:	mov    rcx,r12
    a20e:	add    r13,0x1
    a212:	mov    r14,rsi
    a215:	xor    ebp,ebp
    a217:	shl    r13,0x9
    a21b:	add    r13,rdx
    a21e:	jmp    a26a <vpc_read+0x8a>
    a220:	mov    esi,DWORD PTR [rcx+0x234]
    a226:	mov    rax,rdx
    a229:	mov    ecx,0x200
    a22e:	and    eax,0xfffffe00
    a233:	mov    rdx,rbx
    a236:	add    rax,rsi
    a239:	mov    esi,edi
    a23b:	mov    rdi,rsi
    a23e:	shl    rdi,0x9
    a242:	lea    rsi,[rax+rdi*1]
    a246:	mov    rdi,QWORD PTR [r12]
    a24a:	call   17b00 <bdrv_pread>
    a24f:	cmp    eax,0x200
    a254:	jne    a2e0 <vpc_read+0x100>
    a25a:	add    rbx,0x200
    a261:	cmp    rbx,r13
    a264:	je     a2cd <vpc_read+0xed>
    a266:	mov    rcx,QWORD PTR [r15+0x40]
    a26a:	mov    esi,DWORD PTR [rcx+0x230]
    a270:	lea    rax,[rbx+r14*1]
    a274:	xor    edx,edx
    a276:	div    rsi
    a279:	cmp    DWORD PTR [rcx+0x210],eax
    a27f:	jbe    a292 <vpc_read+0xb2>
    a281:	mov    rsi,QWORD PTR [rcx+0x218]
    a288:	mov    eax,eax
    a28a:	mov    edi,DWORD PTR [rsi+rax*4]
    a28d:	cmp    edi,0xffffffff
    a290:	jne    a220 <vpc_read+0x40>
    a292:	lea    rdi,[rbx+0x8]
    a296:	mov    rcx,rbx
    a299:	mov    QWORD PTR [rbx],0x0
    a2a0:	mov    QWORD PTR [rbx+0x1f8],0x0
    a2ab:	add    rbx,0x200
    a2b2:	mov    rax,rbp
    a2b5:	and    rdi,0xfffffffffffffff8
    a2b9:	sub    rcx,rdi
    a2bc:	add    ecx,0x200
    a2c2:	shr    ecx,0x3
    a2c5:	cmp    rbx,r13
    a2c8:	rep stos QWORD PTR es:[rdi],rax
    a2cb:	jne    a266 <vpc_read+0x86>
    a2cd:	add    rsp,0x8
    a2d1:	xor    eax,eax
    a2d3:	pop    rbx
    a2d4:	pop    rbp
    a2d5:	pop    r12
    a2d7:	pop    r13
    a2d9:	pop    r14
    a2db:	pop    r15
    a2dd:	ret    
    a2de:	xchg   ax,ax
    a2e0:	add    rsp,0x8
    a2e4:	mov    eax,0xffffffff
    a2e9:	pop    rbx
    a2ea:	pop    rbp
    a2eb:	pop    r12
    a2ed:	pop    r13
    a2ef:	pop    r14
    a2f1:	pop    r15
    a2f3:	ret    
    a2f4:	xchg   ax,ax
    a2f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000a300 <vpc_probe>:
    a300:	xor    eax,eax
    a302:	cmp    esi,0x7
    a305:	mov    rdx,rdi
    a308:	jle    a32b <vpc_probe+0x2b>
    a30a:	lea    rdi,[rip+0x14a23]        # 1ed34 <desc_template.13816+0x1b4>
    a311:	mov    ecx,0x8
    a316:	mov    rsi,rdx
    a319:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a31b:	seta   al
    a31e:	sbb    al,0x0
    a320:	movsx  eax,al
    a323:	cmp    eax,0x1
    a326:	sbb    eax,eax
    a328:	and    eax,0x64
    a32b:	repz ret 
    a32d:	nop    DWORD PTR [rax]

000000000000a330 <vpc_open>:
    a330:	push   r13
    a332:	push   r12
    a334:	mov    r12,rsi
    a337:	push   rbp
    a338:	push   rbx
    a339:	mov    rbp,rdi
    a33c:	sub    rsp,0x218
    a343:	mov    r13,QWORD PTR [rdi+0x40]
    a347:	mov    rax,QWORD PTR fs:0x28
    a350:	mov    QWORD PTR [rsp+0x208],rax
    a358:	xor    eax,eax
    a35a:	mov    rdi,r13
    a35d:	call   18060 <bdrv_file_open>
    a362:	test   eax,eax
    a364:	mov    ebx,eax
    a366:	js     a57b <vpc_open+0x24b>
    a36c:	lea    rbx,[r13+0x8]
    a370:	mov    rdi,QWORD PTR [r13+0x0]
    a374:	xor    esi,esi
    a376:	mov    ecx,0x200
    a37b:	mov    rdx,rbx
    a37e:	call   17b00 <bdrv_pread>
    a383:	cmp    eax,0x200
    a388:	jne    a59e <vpc_open+0x26e>
    a38e:	lea    rdi,[rip+0x1499f]        # 1ed34 <desc_template.13816+0x1b4>
    a395:	mov    ecx,0x8
    a39a:	mov    rsi,rbx
    a39d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a39f:	seta   al
    a3a2:	sbb    al,0x0
    a3a4:	test   al,al
    a3a6:	jne    a59e <vpc_open+0x26e>
    a3ac:	mov    edi,DWORD PTR [r13+0x48]
    a3b0:	lea    rcx,[r13+0x208]
    a3b7:	mov    DWORD PTR [r13+0x48],0x0
    a3bf:	mov    rsi,rbx
    a3c2:	xor    eax,eax
    a3c4:	bswap  edi
    a3c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    a3d0:	movzx  edx,BYTE PTR [rsi]
    a3d3:	add    rsi,0x1
    a3d7:	add    eax,edx
    a3d9:	cmp    rcx,rsi
    a3dc:	jne    a3d0 <vpc_open+0xa0>
    a3de:	not    eax
    a3e0:	cmp    edi,eax
    a3e2:	je     a401 <vpc_open+0xd1>
    a3e4:	mov    rdi,QWORD PTR [rip+0x21d115]        # 227500 <stderr@@GLIBC_2.2.5>
    a3eb:	lea    rdx,[rip+0x1495e]        # 1ed50 <desc_template.13816+0x1d0>
    a3f2:	mov    rcx,r12
    a3f5:	mov    esi,0x1
    a3fa:	xor    eax,eax
    a3fc:	call   3400 <__fprintf_chk@plt>
    a401:	movzx  edx,BYTE PTR [r13+0x42]
    a406:	movzx  eax,WORD PTR [r13+0x40]
    a40b:	mov    rbx,rsp
    a40e:	ror    ax,0x8
    a412:	movzx  eax,ax
    a415:	mov    ecx,0x200
    a41a:	imul   rax,rdx
    a41e:	movzx  edx,BYTE PTR [r13+0x43]
    a423:	imul   rax,rdx
    a427:	mov    rdx,rbx
    a42a:	mov    QWORD PTR [rbp+0x0],rax
    a42e:	mov    rsi,QWORD PTR [r13+0x18]
    a432:	mov    rdi,QWORD PTR [r13+0x0]
    a436:	bswap  rsi
    a439:	call   17b00 <bdrv_pread>
    a43e:	cmp    eax,0x200
    a443:	jne    a59e <vpc_open+0x26e>
    a449:	lea    rdi,[rip+0x148ed]        # 1ed3d <desc_template.13816+0x1bd>
    a450:	mov    rsi,rbx
    a453:	mov    ecx,0x8
    a458:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    a45a:	seta   bl
    a45d:	sbb    bl,0x0
    a460:	movsx  ebx,bl
    a463:	test   ebx,ebx
    a465:	jne    a59e <vpc_open+0x26e>
    a46b:	mov    eax,DWORD PTR [rsp+0x20]
    a46f:	bswap  eax
    a471:	mov    DWORD PTR [r13+0x230],eax
    a478:	shr    eax,0xc
    a47b:	add    eax,0x1ff
    a480:	and    eax,0xfffffe00
    a485:	mov    DWORD PTR [r13+0x234],eax
    a48c:	mov    eax,DWORD PTR [rsp+0x1c]
    a490:	bswap  eax
    a492:	mov    DWORD PTR [r13+0x210],eax
    a499:	shl    eax,0x2
    a49c:	movsxd rdi,eax
    a49f:	call   49d0 <qemu_malloc>
    a4a4:	mov    edi,DWORD PTR [r13+0x210]
    a4ab:	mov    rsi,QWORD PTR [rsp+0x10]
    a4b0:	mov    rdx,rax
    a4b3:	mov    QWORD PTR [r13+0x218],rax
    a4ba:	lea    ecx,[rdi*4+0x0]
    a4c1:	mov    rdi,QWORD PTR [r13+0x0]
    a4c5:	bswap  rsi
    a4c8:	mov    QWORD PTR [r13+0x220],rsi
    a4cf:	call   17b00 <bdrv_pread>
    a4d4:	mov    edx,DWORD PTR [r13+0x210]
    a4db:	lea    ecx,[rdx*4+0x0]
    a4e2:	cmp    eax,ecx
    a4e4:	jne    a59e <vpc_open+0x26e>
    a4ea:	mov    rcx,QWORD PTR [r13+0x220]
    a4f1:	cdqe   
    a4f3:	lea    rax,[rcx+rax*1+0x1ff]
    a4fb:	and    rax,0xfffffffffffffe00
    a501:	test   edx,edx
    a503:	mov    QWORD PTR [r13+0x208],rax
    a50a:	jle    a570 <vpc_open+0x240>
    a50c:	mov    rdx,QWORD PTR [r13+0x218]
    a513:	xor    esi,esi
    a515:	xor    ecx,ecx
    a517:	nop    WORD PTR [rax+rax*1+0x0]
    a520:	add    rdx,rcx
    a523:	mov    eax,DWORD PTR [rdx]
    a525:	bswap  eax
    a527:	mov    DWORD PTR [rdx],eax
    a529:	mov    rdx,QWORD PTR [r13+0x218]
    a530:	mov    eax,DWORD PTR [rdx+rcx*1]
    a533:	cmp    eax,0xffffffff
    a536:	je     a560 <vpc_open+0x230>
    a538:	mov    edi,DWORD PTR [r13+0x234]
    a53f:	shl    rax,0x9
    a543:	add    rax,rdi
    a546:	mov    edi,DWORD PTR [r13+0x230]
    a54d:	add    rax,rdi
    a550:	cmp    QWORD PTR [r13+0x208],rax
    a557:	jae    a560 <vpc_open+0x230>
    a559:	mov    QWORD PTR [r13+0x208],rax
    a560:	add    esi,0x1
    a563:	add    rcx,0x4
    a567:	cmp    DWORD PTR [r13+0x210],esi
    a56e:	jg     a520 <vpc_open+0x1f0>
    a570:	mov    QWORD PTR [r13+0x228],0xffffffffffffffff
    a57b:	mov    eax,ebx
    a57d:	mov    rbx,QWORD PTR [rsp+0x208]
    a585:	xor    rbx,QWORD PTR fs:0x28
    a58e:	jne    a5ae <vpc_open+0x27e>
    a590:	add    rsp,0x218
    a597:	pop    rbx
    a598:	pop    rbp
    a599:	pop    r12
    a59b:	pop    r13
    a59d:	ret    
    a59e:	mov    rdi,QWORD PTR [r13+0x0]
    a5a2:	mov    ebx,0xffffffff
    a5a7:	call   170f0 <bdrv_delete>
    a5ac:	jmp    a57b <vpc_open+0x24b>
    a5ae:	call   2f70 <__stack_chk_fail@plt>
    a5b3:	nop    DWORD PTR [rax]
    a5b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000a5c0 <vpc_create>:
    a5c0:	push   r15
    a5c2:	push   r14
    a5c4:	push   r13
    a5c6:	push   r12
    a5c8:	push   rbp
    a5c9:	push   rbx
    a5ca:	sub    rsp,0x428
    a5d1:	mov    rax,QWORD PTR fs:0x28
    a5da:	mov    QWORD PTR [rsp+0x418],rax
    a5e2:	xor    eax,eax
    a5e4:	test   rdx,rdx
    a5e7:	mov    eax,0xffffffa1
    a5ec:	jne    a7c3 <vpc_create+0x203>
    a5f2:	xor    eax,eax
    a5f4:	mov    rbx,rsi
    a5f7:	mov    edx,0x1a4
    a5fc:	mov    esi,0x241
    a601:	call   32e0 <open64@plt>
    a606:	test   eax,eax
    a608:	mov    ebp,eax
    a60a:	js     a97c <vpc_create+0x3bc>
    a610:	cmp    rbx,0xfeff010
    a617:	jg     a7ec <vpc_create+0x22c>
    a61d:	cmp    rbx,0x3effc10
    a624:	jg     a986 <vpc_create+0x3c6>
    a62a:	mov    rax,rbx
    a62d:	movabs rdx,0x7878787878787879
    a637:	imul   rdx
    a63a:	mov    rax,rdx
    a63d:	mov    rdx,rbx
    a640:	sar    rdx,0x3f
    a644:	sar    rax,0x3
    a648:	sub    rax,rdx
    a64b:	lea    ecx,[rax+0x3ff]
    a651:	mov    edx,eax
    a653:	shr    ecx,0xa
    a656:	cmp    cl,0x3
    a659:	mov    r15d,ecx
    a65c:	jbe    a9d8 <vpc_create+0x418>
    a662:	movzx  esi,cl
    a665:	shl    esi,0xa
    a668:	cmp    esi,eax
    a66a:	jbe    a679 <vpc_create+0xb9>
    a66c:	cmp    cl,0x10
    a66f:	mov    eax,esi
    a671:	mov    r14d,0x11
    a677:	jbe    a6aa <vpc_create+0xea>
    a679:	mov    rax,rbx
    a67c:	movabs rdx,0x8421084210842109
    a686:	mov    r14d,0x1f
    a68c:	imul   rdx
    a68f:	mov    rax,rbx
    a692:	mov    r15d,0x10
    a698:	sar    rax,0x3f
    a69c:	add    rdx,rbx
    a69f:	sar    rdx,0x4
    a6a3:	sub    edx,eax
    a6a5:	mov    eax,0x4000
    a6aa:	cmp    edx,eax
    a6ac:	jb     aa1f <vpc_create+0x45f>
    a6b2:	mov    rax,rbx
    a6b5:	movabs rdx,0x8208208208208209
    a6bf:	mov    r14d,0x3f
    a6c5:	imul   rdx
    a6c8:	mov    r15d,0x10
    a6ce:	lea    rax,[rdx+rbx*1]
    a6d2:	sar    rbx,0x3f
    a6d6:	sar    rax,0x5
    a6da:	sub    rax,rbx
    a6dd:	add    eax,0xf
    a6e0:	shr    eax,0x4
    a6e3:	mov    WORD PTR [rsp+0xe],ax
    a6e8:	movzx  eax,ax
    a6eb:	mov    rdx,rax
    a6ee:	shl    rax,0xa
    a6f2:	shl    rdx,0x4
    a6f6:	sub    rax,rdx
    a6f9:	lea    r12,[rax+0x1000]
    a700:	shl    rax,0x9
    a704:	bswap  rax
    a707:	shr    r12,0xc
    a70b:	mov    r13,rax
    a70e:	jmp    a812 <vpc_create+0x252>
    a713:	xor    eax,eax
    a715:	mov    ecx,0x80
    a71a:	mov    rdi,rbx
    a71d:	rep stos QWORD PTR es:[rdi],rax
    a720:	movabs rax,0x6573726170737863
    a72a:	bswap  r12d
    a72d:	lea    rcx,[rbx+0x400]
    a734:	mov    QWORD PTR [rbx],rax
    a737:	movabs rax,0xffffffff00000000
    a741:	mov    DWORD PTR [rsp+0x28],0x100
    a749:	mov    QWORD PTR [rsp+0x18],rax
    a74e:	movabs rax,0x6000000000000
    a758:	mov    DWORD PTR [rsp+0x30],0x2000
    a760:	mov    QWORD PTR [rsp+0x20],rax
    a765:	mov    DWORD PTR [rsp+0x2c],r12d
    a76a:	xor    eax,eax
    a76c:	nop    DWORD PTR [rax+0x0]
    a770:	movzx  edx,BYTE PTR [r13+0x0]
    a775:	add    r13,0x1
    a779:	add    eax,edx
    a77b:	cmp    rcx,r13
    a77e:	jne    a770 <vpc_create+0x1b0>
    a780:	not    eax
    a782:	xor    edx,edx
    a784:	mov    esi,0x200
    a789:	bswap  eax
    a78b:	mov    edi,ebp
    a78d:	mov    DWORD PTR [rsp+0x34],eax
    a791:	call   33f0 <lseek64@plt>
    a796:	test   rax,rax
    a799:	js     a97c <vpc_create+0x3bc>
    a79f:	mov    edx,0x400
    a7a4:	mov    rsi,rbx
    a7a7:	mov    edi,ebp
    a7a9:	call   2f10 <write@plt>
    a7ae:	cmp    rax,0x400
    a7b4:	jne    a97c <vpc_create+0x3bc>
    a7ba:	mov    edi,ebp
    a7bc:	call   3040 <close@plt>
    a7c1:	xor    eax,eax
    a7c3:	mov    rdi,QWORD PTR [rsp+0x418]
    a7cb:	xor    rdi,QWORD PTR fs:0x28
    a7d4:	jne    aa5c <vpc_create+0x49c>
    a7da:	add    rsp,0x428
    a7e1:	pop    rbx
    a7e2:	pop    rbp
    a7e3:	pop    r12
    a7e5:	pop    r13
    a7e7:	pop    r14
    a7e9:	pop    r15
    a7eb:	ret    
    a7ec:	mov    eax,0xffffffff
    a7f1:	movabs r13,0x20e0df1f000000
    a7fb:	mov    r12d,0xff00
    a801:	mov    WORD PTR [rsp+0xe],ax
    a806:	mov    r14d,0xffffffff
    a80c:	mov    r15d,0x10
    a812:	lea    rbx,[rsp+0x10]
    a817:	xor    eax,eax
    a819:	mov    ecx,0x80
    a81e:	mov    rdi,rbx
    a821:	rep stos QWORD PTR es:[rdi],rax
    a824:	movabs rax,0x78697463656e6f63
    a82e:	xor    edi,edi
    a830:	mov    DWORD PTR [rsp+0x2c],0x756d6571
    a838:	mov    QWORD PTR [rsp+0x10],rax
    a83d:	movabs rax,0x10002000000
    a847:	mov    DWORD PTR [rsp+0x34],0x6b326957
    a84f:	mov    QWORD PTR [rsp+0x18],rax
    a854:	movabs rax,0x2000000000000
    a85e:	mov    QWORD PTR [rsp+0x20],rax
    a863:	call   31c0 <time@plt>
    a868:	sub    eax,0x386d4380
    a86d:	lea    rsi,[rbx+0x200]
    a874:	mov    QWORD PTR [rsp+0x38],r13
    a879:	bswap  eax
    a87b:	mov    QWORD PTR [rsp+0x40],r13
    a880:	mov    DWORD PTR [rsp+0x30],0x3000500
    a888:	mov    DWORD PTR [rsp+0x28],eax
    a88c:	mov    BYTE PTR [rsp+0x4a],r15b
    a891:	mov    r13,rbx
    a894:	movzx  eax,WORD PTR [rsp+0xe]
    a899:	mov    BYTE PTR [rsp+0x4b],r14b
    a89e:	xor    edx,edx
    a8a0:	ror    ax,0x8
    a8a4:	mov    DWORD PTR [rsp+0x4c],0x3000000
    a8ac:	mov    WORD PTR [rsp+0x48],ax
    a8b1:	mov    rax,rbx
    a8b4:	nop    DWORD PTR [rax+0x0]
    a8b8:	movzx  ecx,BYTE PTR [rax]
    a8bb:	add    rax,0x1
    a8bf:	add    edx,ecx
    a8c1:	cmp    rax,rsi
    a8c4:	jne    a8b8 <vpc_create+0x2f8>
    a8c6:	not    edx
    a8c8:	mov    rsi,rbx
    a8cb:	mov    edi,ebp
    a8cd:	bswap  edx
    a8cf:	mov    DWORD PTR [rsp+0x50],edx
    a8d3:	mov    edx,0x200
    a8d8:	call   2f10 <write@plt>
    a8dd:	cmp    rax,0x200
    a8e3:	jne    a97c <vpc_create+0x3bc>
    a8e9:	lea    r15,[r12*4+0x1ff]
    a8f1:	xor    edx,edx
    a8f3:	mov    edi,ebp
    a8f5:	mov    rsi,r15
    a8f8:	and    rsi,0xfffffffffffffe00
    a8ff:	add    rsi,0x600
    a906:	call   33f0 <lseek64@plt>
    a90b:	test   rax,rax
    a90e:	js     a97c <vpc_create+0x3bc>
    a910:	mov    edx,0x200
    a915:	mov    rsi,rbx
    a918:	mov    edi,ebp
    a91a:	call   2f10 <write@plt>
    a91f:	cmp    rax,0x200
    a925:	jne    a97c <vpc_create+0x3bc>
    a927:	xor    edx,edx
    a929:	mov    esi,0x600
    a92e:	mov    edi,ebp
    a930:	call   33f0 <lseek64@plt>
    a935:	test   rax,rax
    a938:	js     a97c <vpc_create+0x3bc>
    a93a:	mov    ecx,0x40
    a93f:	mov    rax,0xffffffffffffffff
    a946:	mov    rdi,rbx
    a949:	rep stos QWORD PTR es:[rdi],rax
    a94c:	shr    r15,0x9
    a950:	xor    r14d,r14d
    a953:	jmp    a965 <vpc_create+0x3a5>
    a955:	nop    DWORD PTR [rax]
    a958:	add    r14d,0x1
    a95c:	cmp    r14d,r15d
    a95f:	je     a713 <vpc_create+0x153>
    a965:	mov    edx,0x200
    a96a:	mov    rsi,rbx
    a96d:	mov    edi,ebp
    a96f:	call   2f10 <write@plt>
    a974:	cmp    rax,0x200
    a97a:	je     a958 <vpc_create+0x398>
    a97c:	mov    eax,0xfffffffb
    a981:	jmp    a7c3 <vpc_create+0x203>
    a986:	mov    rax,rbx
    a989:	movabs rdx,0x8080808080808081
    a993:	imul   rdx
    a996:	lea    r13,[rdx+rbx*1]
    a99a:	sar    rbx,0x3f
    a99e:	sar    r13,0x7
    a9a2:	sub    r13,rbx
    a9a5:	add    r13d,0xf
    a9a9:	shr    r13d,0x4
    a9ad:	mov    rax,r13
    a9b0:	mov    WORD PTR [rsp+0xe],r13w
    a9b6:	shl    r13,0xc
    a9ba:	shl    rax,0x4
    a9be:	sub    r13,rax
    a9c1:	lea    r12,[r13+0x1000]
    a9c8:	shl    r13,0x9
    a9cc:	bswap  r13
    a9cf:	shr    r12,0xc
    a9d3:	jmp    a806 <vpc_create+0x246>
    a9d8:	cmp    eax,0xfff
    a9dd:	ja     a679 <vpc_create+0xb9>
    a9e3:	add    eax,0x3
    a9e6:	mov    r14d,0x11
    a9ec:	mov    r15d,0x4
    a9f2:	shr    eax,0x2
    a9f5:	mov    rdx,rax
    a9f8:	mov    WORD PTR [rsp+0xe],ax
    a9fd:	shl    rdx,0x6
    aa01:	lea    rax,[rdx+rax*4]
    aa05:	lea    r12,[rax+0x1000]
    aa0c:	shl    rax,0x9
    aa10:	bswap  rax
    aa13:	shr    r12,0xc
    aa17:	mov    r13,rax
    aa1a:	jmp    a812 <vpc_create+0x252>
    aa1f:	movzx  ecx,r15b
    aa23:	lea    eax,[rcx+rdx*1-0x1]
    aa27:	xor    edx,edx
    aa29:	div    ecx
    aa2b:	movzx  edx,r14b
    aa2f:	mov    ecx,eax
    aa31:	movzx  eax,r15b
    aa35:	imul   rax,rcx
    aa39:	mov    WORD PTR [rsp+0xe],cx
    aa3e:	imul   rax,rdx
    aa42:	lea    r12,[rax+0x1000]
    aa49:	shl    rax,0x9
    aa4d:	bswap  rax
    aa50:	shr    r12,0xc
    aa54:	mov    r13,rax
    aa57:	jmp    a812 <vpc_create+0x252>
    aa5c:	call   2f70 <__stack_chk_fail@plt>
    aa61:	nop    WORD PTR cs:[rax+rax*1+0x0]
    aa6b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000aa70 <is_file>:
    aa70:	movzx  eax,BYTE PTR [rdi+0xb]
    aa74:	cmp    al,0x28
    aa76:	je     aa98 <is_file+0x28>
    aa78:	cmp    al,0xf
    aa7a:	je     aa98 <is_file+0x28>
    aa7c:	movzx  edx,BYTE PTR [rdi]
    aa7f:	cmp    dl,0xe5
    aa82:	je     aa98 <is_file+0x28>
    aa84:	test   dl,dl
    aa86:	je     aa98 <is_file+0x28>
    aa88:	shr    al,0x4
    aa8b:	xor    eax,0x1
    aa8e:	and    eax,0x1
    aa91:	ret    
    aa92:	nop    WORD PTR [rax+rax*1+0x0]
    aa98:	xor    eax,eax
    aa9a:	ret    
    aa9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000aaa0 <adjust_dirindices>:
    aaa0:	mov    eax,DWORD PTR [rdi+0x804c]
    aaa6:	test   eax,eax
    aaa8:	je     aaf1 <adjust_dirindices+0x51>
    aaaa:	xor    ecx,ecx
    aaac:	nop    DWORD PTR [rax+0x0]
    aab0:	mov    eax,ecx
    aab2:	imul   eax,DWORD PTR [rdi+0x8050]
    aab9:	add    rax,QWORD PTR [rdi+0x8040]
    aac0:	mov    r8d,DWORD PTR [rax+0x8]
    aac4:	cmp    r8d,esi
    aac7:	jb     aad0 <adjust_dirindices+0x30>
    aac9:	add    r8d,edx
    aacc:	mov    DWORD PTR [rax+0x8],r8d
    aad0:	test   BYTE PTR [rax+0x20],0x4
    aad4:	je     aae6 <adjust_dirindices+0x46>
    aad6:	mov    r8d,DWORD PTR [rax+0x14]
    aada:	cmp    r8d,esi
    aadd:	jl     aae6 <adjust_dirindices+0x46>
    aadf:	add    r8d,edx
    aae2:	mov    DWORD PTR [rax+0x14],r8d
    aae6:	add    ecx,0x1
    aae9:	cmp    DWORD PTR [rdi+0x804c],ecx
    aaef:	ja     aab0 <adjust_dirindices+0x10>
    aaf1:	repz ret 
    aaf3:	nop    DWORD PTR [rax]
    aaf6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000ab00 <vvfat_is_allocated>:
    ab00:	mov    rax,QWORD PTR [rdi+0x40]
    ab04:	mov    eax,DWORD PTR [rax+0x8070]
    ab0a:	sub    eax,esi
    ab0c:	cmp    eax,edx
    ab0e:	jg     ab20 <vvfat_is_allocated+0x20>
    ab10:	mov    DWORD PTR [rcx],eax
    ab12:	not    eax
    ab14:	shr    eax,0x1f
    ab17:	ret    
    ab18:	nop    DWORD PTR [rax+rax*1+0x0]
    ab20:	mov    DWORD PTR [rcx],edx
    ab22:	mov    eax,0x1
    ab27:	ret    
    ab28:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ab30 <vvfat_close>:
    ab30:	push   rbx
    ab31:	mov    rbx,QWORD PTR [rdi+0x40]
    ab35:	cmp    QWORD PTR [rbx+0x8080],0x0
    ab3d:	je     ab54 <vvfat_close+0x24>
    ab3f:	mov    edi,DWORD PTR [rbx+0x807c]
    ab45:	mov    QWORD PTR [rbx+0x8080],0x0
    ab50:	test   edi,edi
    ab52:	jne    abc8 <vvfat_close+0x98>
    ab54:	mov    rdi,QWORD PTR [rbx+0x8010]
    ab5b:	mov    DWORD PTR [rbx+0x8098],0xffffffff
    ab65:	test   rdi,rdi
    ab68:	je     ab6f <vvfat_close+0x3f>
    ab6a:	call   2e40 <free@plt>
    ab6f:	mov    rdi,QWORD PTR [rbx+0x8028]
    ab76:	mov    QWORD PTR [rbx+0x8018],0x0
    ab81:	test   rdi,rdi
    ab84:	je     ab8b <vvfat_close+0x5b>
    ab86:	call   2e40 <free@plt>
    ab8b:	mov    rdi,QWORD PTR [rbx+0x8040]
    ab92:	mov    QWORD PTR [rbx+0x8030],0x0
    ab9d:	test   rdi,rdi
    aba0:	je     aba7 <vvfat_close+0x77>
    aba2:	call   2e40 <free@plt>
    aba7:	mov    rdi,QWORD PTR [rbx+0x8090]
    abae:	mov    QWORD PTR [rbx+0x8048],0x0
    abb9:	test   rdi,rdi
    abbc:	je     abe0 <vvfat_close+0xb0>
    abbe:	pop    rbx
    abbf:	jmp    2e40 <free@plt>
    abc4:	nop    DWORD PTR [rax+0x0]
    abc8:	call   3040 <close@plt>
    abcd:	mov    DWORD PTR [rbx+0x807c],0x0
    abd7:	jmp    ab54 <vvfat_close+0x24>
    abdc:	nop    DWORD PTR [rax+0x0]
    abe0:	pop    rbx
    abe1:	ret    
    abe2:	nop    DWORD PTR [rax+0x0]
    abe6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000abf0 <array_remove>:
    abf0:	push   r15
    abf2:	push   r14
    abf4:	push   r13
    abf6:	push   r12
    abf8:	push   rbp
    abf9:	push   rbx
    abfa:	sub    rsp,0x28
    abfe:	test   esi,esi
    ac00:	js     ad0a <array_remove+0x11a>
    ac06:	mov    eax,DWORD PTR [rdi+0xc]
    ac09:	lea    edx,[rsi+0x1]
    ac0c:	mov    r15,rdi
    ac0f:	mov    ebx,esi
    ac11:	cmp    edx,eax
    ac13:	ja     ad29 <array_remove+0x139>
    ac19:	mov    ebp,eax
    ac1b:	add    ebp,0xffffffff
    ac1e:	mov    edx,ebp
    ac20:	jae    ad00 <array_remove+0x110>
    ac26:	test   ebp,ebp
    ac28:	js     ad00 <array_remove+0x110>
    ac2e:	cmp    eax,esi
    ac30:	jbe    ad00 <array_remove+0x110>
    ac36:	cmp    esi,ebp
    ac38:	jne    ac50 <array_remove+0x60>
    ac3a:	mov    DWORD PTR [r15+0xc],edx
    ac3e:	xor    eax,eax
    ac40:	add    rsp,0x28
    ac44:	pop    rbx
    ac45:	pop    rbp
    ac46:	pop    r12
    ac48:	pop    r13
    ac4a:	pop    r14
    ac4c:	pop    r15
    ac4e:	ret    
    ac4f:	nop
    ac50:	movsxd r12,DWORD PTR [rdi+0x10]
    ac54:	mov    r9d,esi
    ac57:	mov    r13,QWORD PTR [rdi]
    ac5a:	mov    r8d,ebp
    ac5d:	imul   r9d,r12d
    ac61:	mov    rdi,r12
    ac64:	imul   r8d,r12d
    ac68:	movsxd r9,r9d
    ac6b:	lea    rax,[r13+r9*1+0x0]
    ac70:	movsxd r8,r8d
    ac73:	mov    QWORD PTR [rsp+0x18],r9
    ac78:	add    r13,r8
    ac7b:	mov    QWORD PTR [rsp+0x10],r8
    ac80:	mov    QWORD PTR [rsp+0x8],rax
    ac85:	call   49d0 <qemu_malloc>
    ac8a:	mov    rsi,QWORD PTR [rsp+0x8]
    ac8f:	mov    rdx,r12
    ac92:	mov    rdi,rax
    ac95:	mov    r14,rax
    ac98:	call   3190 <memcpy@plt>
    ac9d:	cmp    ebx,ebp
    ac9f:	mov    r8,QWORD PTR [rsp+0x10]
    aca4:	mov    r9,QWORD PTR [rsp+0x18]
    aca9:	jle    ace0 <array_remove+0xf0>
    acab:	mov    rdx,r9
    acae:	lea    rdi,[r13+r12*1+0x0]
    acb3:	mov    rsi,r13
    acb6:	sub    rdx,r8
    acb9:	call   3300 <memmove@plt>
    acbe:	mov    rdx,r12
    acc1:	mov    rsi,r14
    acc4:	mov    rdi,r13
    acc7:	call   3190 <memcpy@plt>
    accc:	mov    rdi,r14
    accf:	call   2e40 <free@plt>
    acd4:	mov    eax,DWORD PTR [r15+0xc]
    acd8:	lea    edx,[rax-0x1]
    acdb:	jmp    ac3a <array_remove+0x4a>
    ace0:	mov    rdi,QWORD PTR [rsp+0x8]
    ace5:	mov    rdx,r8
    ace8:	sub    rdx,r9
    aceb:	lea    rsi,[rdi+r12*1]
    acef:	call   3300 <memmove@plt>
    acf4:	jmp    acbe <array_remove+0xce>
    acf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ad00:	mov    eax,0xffffffff
    ad05:	jmp    ac40 <array_remove+0x50>
    ad0a:	lea    rcx,[rip+0x1499f]        # 1f6b0 <__PRETTY_FUNCTION__.13739>
    ad11:	lea    rsi,[rip+0x14070]        # 1ed88 <desc_template.13816+0x208>
    ad18:	lea    rdi,[rip+0x145d8]        # 1f2f7 <desc_template.13816+0x777>
    ad1f:	mov    edx,0xb3
    ad24:	call   3000 <__assert_fail@plt>
    ad29:	lea    rcx,[rip+0x14980]        # 1f6b0 <__PRETTY_FUNCTION__.13739>
    ad30:	lea    rsi,[rip+0x14051]        # 1ed88 <desc_template.13816+0x208>
    ad37:	lea    rdi,[rip+0x145c3]        # 1f301 <desc_template.13816+0x781>
    ad3e:	mov    edx,0xb5
    ad43:	call   3000 <__assert_fail@plt>
    ad48:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ad50 <remove_mapping>:
    ad50:	push   r12
    ad52:	push   rbp
    ad53:	push   rbx
    ad54:	cmp    esi,DWORD PTR [rdi+0x804c]
    ad5a:	jae    ae3e <remove_mapping+0xee>
    ad60:	mov    eax,esi
    ad62:	mov    r12,QWORD PTR [rdi+0x8040]
    ad69:	mov    rbx,rdi
    ad6c:	imul   eax,DWORD PTR [rdi+0x8050]
    ad73:	mov    ebp,esi
    ad75:	add    rax,r12
    ad78:	mov    edx,DWORD PTR [rax+0xc]
    ad7b:	test   edx,edx
    ad7d:	js     ae30 <remove_mapping+0xe0>
    ad83:	lea    rdi,[rbx+0x8040]
    ad8a:	mov    esi,ebp
    ad8c:	call   abf0 <array_remove>
    ad91:	mov    eax,DWORD PTR [rbx+0x804c]
    ad97:	test   eax,eax
    ad99:	je     addd <remove_mapping+0x8d>
    ad9b:	xor    edx,edx
    ad9d:	nop    DWORD PTR [rax]
    ada0:	mov    eax,edx
    ada2:	imul   eax,DWORD PTR [rbx+0x8050]
    ada9:	add    rax,QWORD PTR [rbx+0x8040]
    adb0:	mov    ecx,DWORD PTR [rax+0xc]
    adb3:	cmp    ebp,ecx
    adb5:	jg     adbd <remove_mapping+0x6d>
    adb7:	sub    ecx,0x1
    adba:	mov    DWORD PTR [rax+0xc],ecx
    adbd:	test   BYTE PTR [rax+0x20],0x4
    adc1:	je     add0 <remove_mapping+0x80>
    adc3:	mov    ecx,DWORD PTR [rax+0x10]
    adc6:	cmp    ebp,ecx
    adc8:	jg     add0 <remove_mapping+0x80>
    adca:	sub    ecx,0x1
    adcd:	mov    DWORD PTR [rax+0x10],ecx
    add0:	mov    eax,DWORD PTR [rbx+0x804c]
    add6:	add    edx,0x1
    add9:	cmp    edx,eax
    addb:	jb     ada0 <remove_mapping+0x50>
    addd:	mov    rdx,QWORD PTR [rbx+0x8080]
    ade4:	test   rdx,rdx
    ade7:	je     ae1f <remove_mapping+0xcf>
    ade9:	mov    rcx,QWORD PTR [rbx+0x8040]
    adf0:	cmp    rcx,r12
    adf3:	je     ae1f <remove_mapping+0xcf>
    adf5:	sub    rdx,r12
    adf8:	movabs rsi,0xcccccccccccccccd
    ae02:	sar    rdx,0x3
    ae06:	imul   rdx,rsi
    ae0a:	cmp    edx,eax
    ae0c:	jae    ae3e <remove_mapping+0xee>
    ae0e:	imul   edx,DWORD PTR [rbx+0x8050]
    ae15:	add    rdx,rcx
    ae18:	mov    QWORD PTR [rbx+0x8080],rdx
    ae1f:	pop    rbx
    ae20:	xor    eax,eax
    ae22:	pop    rbp
    ae23:	pop    r12
    ae25:	ret    
    ae26:	nop    WORD PTR cs:[rax+rax*1+0x0]
    ae30:	mov    rdi,QWORD PTR [rax+0x18]
    ae34:	call   2e40 <free@plt>
    ae39:	jmp    ad83 <remove_mapping+0x33>
    ae3e:	lea    rcx,[rip+0x1492b]        # 1f770 <__PRETTY_FUNCTION__.13707>
    ae45:	lea    rsi,[rip+0x13f3c]        # 1ed88 <desc_template.13816+0x208>
    ae4c:	lea    rdi,[rip+0x144cb]        # 1f31e <desc_template.13816+0x79e>
    ae53:	mov    edx,0x60
    ae58:	call   3000 <__assert_fail@plt>
    ae5d:	nop    DWORD PTR [rax]

000000000000ae60 <insert_mapping>:
    ae60:	push   r15
    ae62:	push   r14
    ae64:	push   r13
    ae66:	push   r12
    ae68:	mov    r13d,esi
    ae6b:	push   rbp
    ae6c:	push   rbx
    ae6d:	mov    r12,rdi
    ae70:	mov    ebx,edx
    ae72:	xor    ebp,ebp
    ae74:	sub    rsp,0x8
    ae78:	mov    esi,DWORD PTR [rdi+0x804c]
    ae7e:	mov    ecx,esi
    ae80:	jmp    aea2 <insert_mapping+0x42>
    ae82:	nop    WORD PTR [rax+rax*1+0x0]
    ae88:	cmp    ecx,eax
    ae8a:	jne    ae94 <insert_mapping+0x34>
    ae8c:	test   ecx,ecx
    ae8e:	jne    b120 <insert_mapping+0x2c0>
    ae94:	cmp    ecx,eax
    ae96:	je     aefb <insert_mapping+0x9b>
    ae98:	mov    ecx,eax
    ae9a:	cmp    ebp,ecx
    ae9c:	jg     b0e2 <insert_mapping+0x282>
    aea2:	lea    edx,[rbp+rcx*1+0x0]
    aea6:	mov    eax,edx
    aea8:	shr    eax,0x1f
    aeab:	add    eax,edx
    aead:	sar    eax,1
    aeaf:	cmp    esi,eax
    aeb1:	jbe    b0c3 <insert_mapping+0x263>
    aeb7:	mov    r14d,DWORD PTR [r12+0x8050]
    aebf:	mov    edx,eax
    aec1:	mov    rdi,QWORD PTR [r12+0x8040]
    aec9:	imul   edx,r14d
    aecd:	mov    r15,rdi
    aed0:	add    rdx,rdi
    aed3:	mov    r8d,DWORD PTR [rdx]
    aed6:	mov    edx,DWORD PTR [rdx+0x4]
    aed9:	cmp    r8d,edx
    aedc:	jae    b101 <insert_mapping+0x2a1>
    aee2:	cmp    r13d,r8d
    aee5:	jbe    ae88 <insert_mapping+0x28>
    aee7:	cmp    ebp,eax
    aee9:	je     aef0 <insert_mapping+0x90>
    aeeb:	mov    ebp,eax
    aeed:	jmp    ae9a <insert_mapping+0x3a>
    aeef:	nop
    aef0:	cmp    r13d,edx
    aef3:	jb     b051 <insert_mapping+0x1f1>
    aef9:	mov    ebp,ecx
    aefb:	test   esi,esi
    aefd:	je     b0c3 <insert_mapping+0x263>
    af03:	cmp    esi,ebp
    af05:	mov    rax,rdi
    af08:	ja     b055 <insert_mapping+0x1f5>
    af0e:	add    esi,0x1
    af11:	mov    edx,DWORD PTR [r12+0x8048]
    af19:	imul   esi,r14d
    af1d:	cmp    esi,edx
    af1f:	ja     b026 <insert_mapping+0x1c6>
    af25:	mov    edx,DWORD PTR [r12+0x804c]
    af2d:	mov    ecx,r14d
    af30:	imul   ecx,ebp
    af33:	sub    edx,ebp
    af35:	imul   edx,r14d
    af39:	lea    edi,[rcx+r14*1]
    af3d:	mov    esi,ecx
    af3f:	add    rsi,rax
    af42:	add    rdi,rax
    af45:	call   3300 <memmove@plt>
    af4a:	mov    eax,ebp
    af4c:	add    DWORD PTR [r12+0x804c],0x1
    af55:	imul   eax,DWORD PTR [r12+0x8050]
    af5e:	add    rax,QWORD PTR [r12+0x8040]
    af66:	mov    QWORD PTR [rax+0x18],0x0
    af6e:	mov    edx,DWORD PTR [r12+0x804c]
    af76:	test   edx,edx
    af78:	je     afc0 <insert_mapping+0x160>
    af7a:	xor    ecx,ecx
    af7c:	nop    DWORD PTR [rax+0x0]
    af80:	mov    edx,ecx
    af82:	imul   edx,DWORD PTR [r12+0x8050]
    af8b:	add    rdx,QWORD PTR [r12+0x8040]
    af93:	mov    esi,DWORD PTR [rdx+0xc]
    af96:	cmp    esi,ebp
    af98:	jl     afa0 <insert_mapping+0x140>
    af9a:	add    esi,0x1
    af9d:	mov    DWORD PTR [rdx+0xc],esi
    afa0:	test   BYTE PTR [rdx+0x20],0x4
    afa4:	je     afb3 <insert_mapping+0x153>
    afa6:	mov    esi,DWORD PTR [rdx+0x10]
    afa9:	cmp    esi,ebp
    afab:	jl     afb3 <insert_mapping+0x153>
    afad:	add    esi,0x1
    afb0:	mov    DWORD PTR [rdx+0x10],esi
    afb3:	add    ecx,0x1
    afb6:	cmp    ecx,DWORD PTR [r12+0x804c]
    afbe:	jb     af80 <insert_mapping+0x120>
    afc0:	mov    DWORD PTR [rax],r13d
    afc3:	mov    DWORD PTR [rax+0x4],ebx
    afc6:	mov    rdx,QWORD PTR [r12+0x8080]
    afce:	test   rdx,rdx
    afd1:	je     b017 <insert_mapping+0x1b7>
    afd3:	mov    rcx,QWORD PTR [r12+0x8040]
    afdb:	cmp    rcx,r15
    afde:	je     b017 <insert_mapping+0x1b7>
    afe0:	sub    rdx,r15
    afe3:	movabs rsi,0xcccccccccccccccd
    afed:	sar    rdx,0x3
    aff1:	imul   rdx,rsi
    aff5:	cmp    edx,DWORD PTR [r12+0x804c]
    affd:	jae    b0c3 <insert_mapping+0x263>
    b003:	imul   edx,DWORD PTR [r12+0x8050]
    b00c:	add    rdx,rcx
    b00f:	mov    QWORD PTR [r12+0x8080],rdx
    b017:	add    rsp,0x8
    b01b:	pop    rbx
    b01c:	pop    rbp
    b01d:	pop    r12
    b01f:	pop    r13
    b021:	pop    r14
    b023:	pop    r15
    b025:	ret    
    b026:	lea    esi,[rdx+r14*1]
    b02a:	call   49f0 <qemu_realloc>
    b02f:	test   rax,rax
    b032:	mov    QWORD PTR [r12+0x8040],rax
    b03a:	je     b0ac <insert_mapping+0x24c>
    b03c:	add    DWORD PTR [r12+0x8048],r14d
    b044:	mov    r14d,DWORD PTR [r12+0x8050]
    b04c:	jmp    af25 <insert_mapping+0xc5>
    b051:	test   esi,esi
    b053:	je     b0c3 <insert_mapping+0x263>
    b055:	imul   r14d,ebp
    b059:	mov    rax,r14
    b05c:	add    rax,rdi
    b05f:	je     b0ba <insert_mapping+0x25a>
    b061:	mov    edx,DWORD PTR [rax]
    b063:	cmp    edx,r13d
    b066:	jae    b093 <insert_mapping+0x233>
    b068:	mov    DWORD PTR [rax+0x4],r13d
    b06c:	mov    esi,DWORD PTR [r12+0x804c]
    b074:	add    ebp,0x1
    b077:	cmp    ebp,esi
    b079:	jae    b0c3 <insert_mapping+0x263>
    b07b:	mov    eax,ebp
    b07d:	mov    rdi,QWORD PTR [r12+0x8040]
    b085:	imul   eax,DWORD PTR [r12+0x8050]
    b08e:	add    rax,rdi
    b091:	mov    edx,DWORD PTR [rax]
    b093:	cmp    r13d,edx
    b096:	jae    afc0 <insert_mapping+0x160>
    b09c:	mov    r14d,DWORD PTR [r12+0x8050]
    b0a4:	mov    rax,rdi
    b0a7:	jmp    af0e <insert_mapping+0xae>
    b0ac:	mov    QWORD PTR ds:0x18,0x0
    b0b8:	ud2    
    b0ba:	mov    edx,DWORD PTR ds:0x0
    b0c1:	jmp    b093 <insert_mapping+0x233>
    b0c3:	lea    rcx,[rip+0x146a6]        # 1f770 <__PRETTY_FUNCTION__.13707>
    b0ca:	lea    rsi,[rip+0x13cb7]        # 1ed88 <desc_template.13816+0x208>
    b0d1:	lea    rdi,[rip+0x14246]        # 1f31e <desc_template.13816+0x79e>
    b0d8:	mov    edx,0x60
    b0dd:	call   3000 <__assert_fail@plt>
    b0e2:	lea    rcx,[rip+0x14697]        # 1f780 <__PRETTY_FUNCTION__.14126>
    b0e9:	lea    rsi,[rip+0x13c98]        # 1ed88 <desc_template.13816+0x208>
    b0f0:	lea    rdi,[rip+0x14275]        # 1f36c <desc_template.13816+0x7ec>
    b0f7:	mov    edx,0x465
    b0fc:	call   3000 <__assert_fail@plt>
    b101:	lea    rcx,[rip+0x14678]        # 1f780 <__PRETTY_FUNCTION__.14126>
    b108:	lea    rsi,[rip+0x13c79]        # 1ed88 <desc_template.13816+0x208>
    b10f:	lea    rdi,[rip+0x1421c]        # 1f332 <desc_template.13816+0x7b2>
    b116:	mov    edx,0x45a
    b11b:	call   3000 <__assert_fail@plt>
    b120:	lea    rcx,[rip+0x14659]        # 1f780 <__PRETTY_FUNCTION__.14126>
    b127:	lea    rsi,[rip+0x13c5a]        # 1ed88 <desc_template.13816+0x208>
    b12e:	lea    rdi,[rip+0x1421b]        # 1f350 <desc_template.13816+0x7d0>
    b135:	mov    edx,0x45c
    b13a:	call   3000 <__assert_fail@plt>
    b13f:	nop

000000000000b140 <insert_direntries>:
    b140:	push   r13
    b142:	push   r12
    b144:	mov    r13d,edx
    b147:	push   rbp
    b148:	push   rbx
    b149:	mov    r12d,esi
    b14c:	mov    rbx,rdi
    b14f:	sub    rsp,0x8
    b153:	mov    edx,DWORD PTR [rdi+0x8034]
    b159:	mov    ecx,DWORD PTR [rdi+0x8038]
    b15f:	mov    edi,DWORD PTR [rdi+0x8030]
    b165:	mov    rax,QWORD PTR [rbx+0x8028]
    b16c:	lea    esi,[r13+rdx*1+0x0]
    b171:	imul   esi,ecx
    b174:	cmp    esi,edi
    b176:	jbe    b1a7 <insert_direntries+0x67>
    b178:	imul   ecx,r13d
    b17c:	lea    esi,[rdi+rcx*1]
    b17f:	mov    rdi,rax
    b182:	mov    ebp,ecx
    b184:	call   49f0 <qemu_realloc>
    b189:	test   rax,rax
    b18c:	mov    QWORD PTR [rbx+0x8028],rax
    b193:	je     b200 <insert_direntries+0xc0>
    b195:	add    DWORD PTR [rbx+0x8030],ebp
    b19b:	mov    edx,DWORD PTR [rbx+0x8034]
    b1a1:	mov    ecx,DWORD PTR [rbx+0x8038]
    b1a7:	lea    edi,[r13+r12*1+0x0]
    b1ac:	sub    edx,r12d
    b1af:	mov    esi,r12d
    b1b2:	imul   edx,ecx
    b1b5:	imul   esi,ecx
    b1b8:	imul   ecx,edi
    b1bb:	add    rsi,rax
    b1be:	lea    rdi,[rax+rcx*1]
    b1c2:	call   3300 <memmove@plt>
    b1c7:	mov    eax,r12d
    b1ca:	add    DWORD PTR [rbx+0x8034],r13d
    b1d1:	imul   eax,DWORD PTR [rbx+0x8038]
    b1d8:	add    rax,QWORD PTR [rbx+0x8028]
    b1df:	mov    r9,rax
    b1e2:	je     b1f2 <insert_direntries+0xb2>
    b1e4:	mov    edx,r13d
    b1e7:	mov    esi,r12d
    b1ea:	mov    rdi,rbx
    b1ed:	call   aaa0 <adjust_dirindices>
    b1f2:	add    rsp,0x8
    b1f6:	mov    rax,r9
    b1f9:	pop    rbx
    b1fa:	pop    rbp
    b1fb:	pop    r12
    b1fd:	pop    r13
    b1ff:	ret    
    b200:	xor    r9d,r9d
    b203:	jmp    b1f2 <insert_direntries+0xb2>
    b205:	nop
    b206:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000b210 <remove_direntries>:
    b210:	push   r15
    b212:	push   r14
    b214:	push   r13
    b216:	push   r12
    b218:	push   rbp
    b219:	push   rbx
    b21a:	sub    rsp,0x28
    b21e:	test   esi,esi
    b220:	js     b362 <remove_direntries+0x152>
    b226:	test   edx,edx
    b228:	mov    ebx,edx
    b22a:	jle    b3a0 <remove_direntries+0x190>
    b230:	mov    eax,DWORD PTR [rdi+0x8034]
    b236:	lea    edx,[rsi+rdx*1]
    b239:	mov    r15,rdi
    b23c:	mov    ebp,esi
    b23e:	cmp    edx,eax
    b240:	ja     b381 <remove_direntries+0x171>
    b246:	test   eax,eax
    b248:	lea    r8d,[rax-0x1]
    b24c:	je     b358 <remove_direntries+0x148>
    b252:	test   r8d,r8d
    b255:	js     b358 <remove_direntries+0x148>
    b25b:	cmp    eax,esi
    b25d:	jbe    b358 <remove_direntries+0x148>
    b263:	cmp    esi,r8d
    b266:	jne    b290 <remove_direntries+0x80>
    b268:	sub    eax,ebx
    b26a:	neg    ebx
    b26c:	mov    esi,ebp
    b26e:	mov    DWORD PTR [r15+0x8034],eax
    b275:	mov    edx,ebx
    b277:	mov    rdi,r15
    b27a:	call   aaa0 <adjust_dirindices>
    b27f:	xor    eax,eax
    b281:	add    rsp,0x28
    b285:	pop    rbx
    b286:	pop    rbp
    b287:	pop    r12
    b289:	pop    r13
    b28b:	pop    r14
    b28d:	pop    r15
    b28f:	ret    
    b290:	mov    r12d,DWORD PTR [rdi+0x8038]
    b297:	mov    r10d,esi
    b29a:	mov    r9d,r8d
    b29d:	mov    r13,QWORD PTR [rdi+0x8028]
    b2a4:	mov    DWORD PTR [rsp+0x14],r8d
    b2a9:	imul   r10d,r12d
    b2ad:	imul   r9d,r12d
    b2b1:	movsxd r10,r10d
    b2b4:	imul   r12d,ebx
    b2b8:	lea    rax,[r13+r10*1+0x0]
    b2bd:	movsxd r9,r9d
    b2c0:	add    r13,r9
    b2c3:	mov    QWORD PTR [rsp+0x18],r10
    b2c8:	mov    QWORD PTR [rsp+0x8],r9
    b2cd:	mov    QWORD PTR [rsp],rax
    b2d1:	movsxd r12,r12d
    b2d4:	mov    rdi,r12
    b2d7:	call   49d0 <qemu_malloc>
    b2dc:	mov    rsi,QWORD PTR [rsp]
    b2e0:	mov    rdx,r12
    b2e3:	mov    rdi,rax
    b2e6:	mov    r14,rax
    b2e9:	call   3190 <memcpy@plt>
    b2ee:	mov    r8d,DWORD PTR [rsp+0x14]
    b2f3:	mov    r9,QWORD PTR [rsp+0x8]
    b2f8:	mov    r10,QWORD PTR [rsp+0x18]
    b2fd:	cmp    ebp,r8d
    b300:	jle    b340 <remove_direntries+0x130>
    b302:	mov    rdx,r10
    b305:	lea    rdi,[r13+r12*1+0x0]
    b30a:	mov    rsi,r13
    b30d:	sub    rdx,r9
    b310:	call   3300 <memmove@plt>
    b315:	mov    rdx,r12
    b318:	mov    rsi,r14
    b31b:	mov    rdi,r13
    b31e:	call   3190 <memcpy@plt>
    b323:	mov    rdi,r14
    b326:	call   2e40 <free@plt>
    b32b:	mov    eax,DWORD PTR [r15+0x8034]
    b332:	jmp    b268 <remove_direntries+0x58>
    b337:	nop    WORD PTR [rax+rax*1+0x0]
    b340:	mov    rdi,QWORD PTR [rsp]
    b344:	mov    rdx,r9
    b347:	sub    rdx,r10
    b34a:	lea    rsi,[rdi+r12*1]
    b34e:	call   3300 <memmove@plt>
    b353:	jmp    b315 <remove_direntries+0x105>
    b355:	nop    DWORD PTR [rax]
    b358:	mov    eax,0xffffffff
    b35d:	jmp    b281 <remove_direntries+0x71>
    b362:	lea    rcx,[rip+0x14347]        # 1f6b0 <__PRETTY_FUNCTION__.13739>
    b369:	lea    rsi,[rip+0x13a18]        # 1ed88 <desc_template.13816+0x208>
    b370:	lea    rdi,[rip+0x13f80]        # 1f2f7 <desc_template.13816+0x777>
    b377:	mov    edx,0xb3
    b37c:	call   3000 <__assert_fail@plt>
    b381:	lea    rcx,[rip+0x14328]        # 1f6b0 <__PRETTY_FUNCTION__.13739>
    b388:	lea    rsi,[rip+0x139f9]        # 1ed88 <desc_template.13816+0x208>
    b38f:	lea    rdi,[rip+0x13f6b]        # 1f301 <desc_template.13816+0x781>
    b396:	mov    edx,0xb5
    b39b:	call   3000 <__assert_fail@plt>
    b3a0:	lea    rcx,[rip+0x14309]        # 1f6b0 <__PRETTY_FUNCTION__.13739>
    b3a7:	lea    rsi,[rip+0x139da]        # 1ed88 <desc_template.13816+0x208>
    b3ae:	lea    rdi,[rip+0x13fc6]        # 1f37b <desc_template.13816+0x7fb>
    b3b5:	mov    edx,0xb4
    b3ba:	call   3000 <__assert_fail@plt>
    b3bf:	nop

000000000000b3c0 <vvfat_read>:
    b3c0:	push   r15
    b3c2:	push   r14
    b3c4:	push   r13
    b3c6:	push   r12
    b3c8:	push   rbp
    b3c9:	push   rbx
    b3ca:	sub    rsp,0x38
    b3ce:	mov    rbp,QWORD PTR [rdi+0x40]
    b3d2:	mov    rax,QWORD PTR fs:0x28
    b3db:	mov    QWORD PTR [rsp+0x28],rax
    b3e0:	xor    eax,eax
    b3e2:	test   ecx,ecx
    b3e4:	jle    b520 <vvfat_read+0x160>
    b3ea:	mov    eax,DWORD PTR [rbp+0x8070]
    b3f0:	mov    r12,rsi
    b3f3:	cmp    rsi,rax
    b3f6:	jge    b6a0 <vvfat_read+0x2e0>
    b3fc:	lea    rax,[rsp+0x24]
    b401:	mov    r15,rdx
    b404:	mov    ebx,ecx
    b406:	xor    r13d,r13d
    b409:	mov    QWORD PTR [rsp],rax
    b40d:	jmp    b468 <vvfat_read+0xa8>
    b40f:	nop
    b410:	mov    rdi,QWORD PTR [rbp+0x80b0]
    b417:	mov    edx,r13d
    b41a:	mov    ecx,DWORD PTR [rsp+0x24]
    b41e:	shl    edx,0x9
    b421:	mov    rsi,r12
    b424:	movsxd rdx,edx
    b427:	mov    rax,QWORD PTR [rdi+0x38]
    b42b:	add    rdx,r15
    b42e:	call   QWORD PTR [rax+0x20]
    b431:	test   eax,eax
    b433:	jne    b6a0 <vvfat_read+0x2e0>
    b439:	mov    eax,DWORD PTR [rsp+0x24]
    b43d:	sub    eax,0x1
    b440:	add    r13d,eax
    b443:	cdqe   
    b445:	add    r12,rax
    b448:	add    r13d,0x1
    b44c:	add    r12,0x1
    b450:	cmp    ebx,r13d
    b453:	jle    b520 <vvfat_read+0x160>
    b459:	mov    eax,DWORD PTR [rbp+0x8070]
    b45f:	cmp    rax,r12
    b462:	jle    b6a0 <vvfat_read+0x2e0>
    b468:	mov    rdi,QWORD PTR [rbp+0x80b0]
    b46f:	test   rdi,rdi
    b472:	je     b48b <vvfat_read+0xcb>
    b474:	mov    rax,QWORD PTR [rdi+0x38]
    b478:	mov    edx,ebx
    b47a:	mov    rcx,QWORD PTR [rsp]
    b47e:	sub    edx,r13d
    b481:	mov    rsi,r12
    b484:	call   QWORD PTR [rax+0x48]
    b487:	test   eax,eax
    b489:	jne    b410 <vvfat_read+0x50>
    b48b:	mov    edx,DWORD PTR [rbp+0x806c]
    b491:	cmp    rdx,r12
    b494:	jle    b530 <vvfat_read+0x170>
    b49a:	mov    eax,DWORD PTR [rbp+0x8]
    b49d:	cmp    rax,r12
    b4a0:	jg     b788 <vvfat_read+0x3c8>
    b4a6:	mov    edx,DWORD PTR [rbp+0x8060]
    b4ac:	mov    rsi,r12
    b4af:	sub    rsi,rax
    b4b2:	mov    rax,rsi
    b4b5:	cmp    rsi,rdx
    b4b8:	jl     b4c2 <vvfat_read+0x102>
    b4ba:	sub    rax,rdx
    b4bd:	cmp    rdx,rax
    b4c0:	jle    b448 <vvfat_read+0x88>
    b4c2:	shl    rax,0x9
    b4c6:	add    rax,QWORD PTR [rbp+0x8010]
    b4cd:	mov    edx,r13d
    b4d0:	shl    edx,0x9
    b4d3:	movsxd rdx,edx
    b4d6:	add    rdx,r15
    b4d9:	mov    rsi,rax
    b4dc:	mov    rax,QWORD PTR [rsi]
    b4df:	lea    rdi,[rdx+0x8]
    b4e3:	add    r13d,0x1
    b4e7:	add    r12,0x1
    b4eb:	and    rdi,0xfffffffffffffff8
    b4ef:	mov    QWORD PTR [rdx],rax
    b4f2:	mov    rax,QWORD PTR [rsi+0x1f8]
    b4f9:	mov    QWORD PTR [rdx+0x1f8],rax
    b500:	sub    rdx,rdi
    b503:	sub    rsi,rdx
    b506:	add    edx,0x200
    b50c:	shr    edx,0x3
    b50f:	cmp    ebx,r13d
    b512:	mov    ecx,edx
    b514:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    b517:	jg     b459 <vvfat_read+0x99>
    b51d:	nop    DWORD PTR [rax]
    b520:	xor    eax,eax
    b522:	jmp    b6a5 <vvfat_read+0x2e5>
    b527:	nop    WORD PTR [rax+rax*1+0x0]
    b530:	mov    esi,r12d
    b533:	sub    esi,edx
    b535:	xor    edx,edx
    b537:	mov    eax,esi
    b539:	div    DWORD PTR [rbp+0x805c]
    b53f:	cmp    eax,DWORD PTR [rbp+0x8098]
    b545:	mov    DWORD PTR [rsp+0x14],edx
    b549:	mov    r14d,eax
    b54c:	je     b8b8 <vvfat_read+0x4f8>
    b552:	mov    rax,QWORD PTR [rbp+0x8080]
    b559:	test   rax,rax
    b55c:	mov    QWORD PTR [rsp+0x8],rax
    b561:	je     b620 <vvfat_read+0x260>
    b567:	mov    ecx,DWORD PTR [rbp+0x807c]
    b56d:	test   ecx,ecx
    b56f:	je     b6d0 <vvfat_read+0x310>
    b575:	mov    rax,QWORD PTR [rsp+0x8]
    b57a:	mov    esi,DWORD PTR [rax]
    b57c:	cmp    r14d,esi
    b57f:	jb     b620 <vvfat_read+0x260>
    b585:	cmp    r14d,DWORD PTR [rax+0x4]
    b589:	jae    b620 <vvfat_read+0x260>
    b58f:	mov    rax,QWORD PTR [rsp+0x8]
    b594:	test   BYTE PTR [rax+0x20],0x4
    b598:	je     b706 <vvfat_read+0x346>
    b59e:	mov    rax,QWORD PTR [rsp+0x8]
    b5a3:	mov    edi,DWORD PTR [rbp+0x8058]
    b5a9:	mov    rcx,QWORD PTR [rbp+0x8028]
    b5b0:	mov    eax,DWORD PTR [rax+0x14]
    b5b3:	shl    eax,0x5
    b5b6:	movsxd rdx,eax
    b5b9:	mov    eax,r14d
    b5bc:	sub    eax,esi
    b5be:	imul   eax,edi
    b5c1:	add    rax,rdx
    b5c4:	cqo    
    b5c6:	lea    rsi,[rcx+rax*1]
    b5ca:	idiv   rdi
    b5cd:	mov    QWORD PTR [rbp+0x8088],rsi
    b5d4:	test   rdx,rdx
    b5d7:	jne    ba3d <vvfat_read+0x67d>
    b5dd:	mov    eax,DWORD PTR [rbp+0x8034]
    b5e3:	add    rdi,rsi
    b5e6:	imul   eax,DWORD PTR [rbp+0x8038]
    b5ed:	add    rcx,rax
    b5f0:	cmp    rdi,rcx
    b5f3:	ja     ba5c <vvfat_read+0x69c>
    b5f9:	mov    DWORD PTR [rbp+0x8098],r14d
    b600:	mov    eax,DWORD PTR [rsp+0x14]
    b604:	mov    edx,r13d
    b607:	shl    edx,0x9
    b60a:	movsxd rdx,edx
    b60d:	shl    eax,0x9
    b610:	add    rdx,r15
    b613:	add    rsi,rax
    b616:	jmp    b4dc <vvfat_read+0x11c>
    b61b:	nop    DWORD PTR [rax+rax*1+0x0]
    b620:	mov    r11d,DWORD PTR [rbp+0x804c]
    b627:	xor    edi,edi
    b629:	mov    esi,r11d
    b62c:	jmp    b64e <vvfat_read+0x28e>
    b62e:	xchg   ax,ax
    b630:	cmp    esi,edx
    b632:	jne    b63c <vvfat_read+0x27c>
    b634:	test   esi,esi
    b636:	jne    b9db <vvfat_read+0x61b>
    b63c:	cmp    esi,edx
    b63e:	je     b8a0 <vvfat_read+0x4e0>
    b644:	mov    esi,edx
    b646:	cmp    edi,esi
    b648:	jg     b97e <vvfat_read+0x5be>
    b64e:	lea    eax,[rsi+rdi*1]
    b651:	mov    edx,eax
    b653:	shr    edx,0x1f
    b656:	add    edx,eax
    b658:	sar    edx,1
    b65a:	cmp    r11d,edx
    b65d:	mov    r10d,edx
    b660:	jbe    b9bc <vvfat_read+0x5fc>
    b666:	mov    eax,DWORD PTR [rbp+0x8050]
    b66c:	mov    ecx,edx
    b66e:	mov    r9,QWORD PTR [rbp+0x8040]
    b675:	imul   ecx,eax
    b678:	add    rcx,r9
    b67b:	mov    r8d,DWORD PTR [rcx]
    b67e:	mov    ecx,DWORD PTR [rcx+0x4]
    b681:	cmp    r8d,ecx
    b684:	jae    b99d <vvfat_read+0x5dd>
    b68a:	cmp    r14d,r8d
    b68d:	jbe    b630 <vvfat_read+0x270>
    b68f:	cmp    edi,edx
    b691:	je     b7d8 <vvfat_read+0x418>
    b697:	mov    edi,edx
    b699:	jmp    b646 <vvfat_read+0x286>
    b69b:	nop    DWORD PTR [rax+rax*1+0x0]
    b6a0:	mov    eax,0xffffffff
    b6a5:	mov    rbx,QWORD PTR [rsp+0x28]
    b6aa:	xor    rbx,QWORD PTR fs:0x28
    b6b3:	jne    b9fa <vvfat_read+0x63a>
    b6b9:	add    rsp,0x38
    b6bd:	pop    rbx
    b6be:	pop    rbp
    b6bf:	pop    r12
    b6c1:	pop    r13
    b6c3:	pop    r14
    b6c5:	pop    r15
    b6c7:	ret    
    b6c8:	nop    DWORD PTR [rax+rax*1+0x0]
    b6d0:	test   BYTE PTR [rax+0x20],0x4
    b6d4:	jne    b575 <vvfat_read+0x1b5>
    b6da:	lea    rcx,[rip+0x13f67]        # 1f648 <__PRETTY_FUNCTION__.14154>
    b6e1:	lea    rsi,[rip+0x136a0]        # 1ed88 <desc_template.13816+0x208>
    b6e8:	lea    rdi,[rip+0x136e1]        # 1edd0 <desc_template.13816+0x250>
    b6ef:	mov    edx,0x4a3
    b6f4:	call   3000 <__assert_fail@plt>
    b6f9:	nop    DWORD PTR [rax+0x0]
    b700:	mov    ecx,DWORD PTR [rbp+0x807c]
    b706:	test   ecx,ecx
    b708:	je     b9ff <vvfat_read+0x63f>
    b70e:	mov    rax,QWORD PTR [rbp+0x8080]
    b715:	mov    r8d,r14d
    b718:	xor    edx,edx
    b71a:	mov    edi,ecx
    b71c:	sub    r8d,DWORD PTR [rax]
    b71f:	imul   r8d,DWORD PTR [rbp+0x8058]
    b727:	add    r8d,DWORD PTR [rax+0x10]
    b72b:	mov    rsi,r8
    b72e:	mov    QWORD PTR [rsp+0x8],r8
    b733:	call   33f0 <lseek64@plt>
    b738:	mov    r8,QWORD PTR [rsp+0x8]
    b73d:	cmp    r8,rax
    b740:	je     b939 <vvfat_read+0x579>
    b746:	mov    eax,r13d
    b749:	shl    eax,0x9
    b74c:	cdqe   
    b74e:	add    rax,r15
    b751:	lea    rdi,[rax+0x8]
    b755:	mov    QWORD PTR [rax],0x0
    b75c:	mov    QWORD PTR [rax+0x1f8],0x0
    b767:	and    rdi,0xfffffffffffffff8
    b76b:	sub    rax,rdi
    b76e:	lea    ecx,[rax+0x200]
    b774:	xor    eax,eax
    b776:	shr    ecx,0x3
    b779:	rep stos QWORD PTR es:[rdi],rax
    b77c:	jmp    b448 <vvfat_read+0x88>
    b781:	nop    DWORD PTR [rax+0x0]
    b788:	mov    rdx,r12
    b78b:	mov    eax,r13d
    b78e:	shl    rdx,0x9
    b792:	shl    eax,0x9
    b795:	lea    rsi,[rbp+rdx*1+0xc]
    b79a:	cdqe   
    b79c:	add    rax,r15
    b79f:	mov    rdx,QWORD PTR [rsi]
    b7a2:	lea    rdi,[rax+0x8]
    b7a6:	and    rdi,0xfffffffffffffff8
    b7aa:	mov    QWORD PTR [rax],rdx
    b7ad:	mov    rdx,QWORD PTR [rsi+0x1f8]
    b7b4:	mov    QWORD PTR [rax+0x1f8],rdx
    b7bb:	sub    rax,rdi
    b7be:	sub    rsi,rax
    b7c1:	add    eax,0x200
    b7c6:	shr    eax,0x3
    b7c9:	mov    ecx,eax
    b7cb:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
    b7ce:	jmp    b448 <vvfat_read+0x88>
    b7d3:	nop    DWORD PTR [rax+rax*1+0x0]
    b7d8:	cmp    r14d,ecx
    b7db:	jae    b8c4 <vvfat_read+0x504>
    b7e1:	imul   eax,r10d
    b7e5:	add    r9,rax
    b7e8:	cmp    r14d,DWORD PTR [r9]
    b7eb:	jb     b746 <vvfat_read+0x386>
    b7f1:	cmp    r14d,DWORD PTR [r9+0x4]
    b7f5:	jae    ba1e <vvfat_read+0x65e>
    b7fb:	test   BYTE PTR [r9+0x20],0x4
    b800:	jne    b8c9 <vvfat_read+0x509>
    b806:	mov    rax,QWORD PTR [rsp+0x8]
    b80b:	mov    rdx,QWORD PTR [r9+0x18]
    b80f:	test   rax,rax
    b812:	je     b83c <vvfat_read+0x47c>
    b814:	mov    rdi,QWORD PTR [rax+0x18]
    b818:	mov    rsi,rdx
    b81b:	mov    QWORD PTR [rsp+0x18],r9
    b820:	mov    QWORD PTR [rsp+0x8],rdx
    b825:	call   3110 <strcmp@plt>
    b82a:	test   eax,eax
    b82c:	mov    rdx,QWORD PTR [rsp+0x8]
    b831:	mov    r9,QWORD PTR [rsp+0x18]
    b836:	je     b700 <vvfat_read+0x340>
    b83c:	xor    esi,esi
    b83e:	xor    eax,eax
    b840:	mov    rdi,rdx
    b843:	mov    QWORD PTR [rsp+0x8],r9
    b848:	call   32e0 <open64@plt>
    b84d:	test   eax,eax
    b84f:	mov    ecx,eax
    b851:	js     b746 <vvfat_read+0x386>
    b857:	cmp    QWORD PTR [rbp+0x8080],0x0
    b85f:	mov    r9,QWORD PTR [rsp+0x8]
    b864:	je     b87f <vvfat_read+0x4bf>
    b866:	mov    edi,DWORD PTR [rbp+0x807c]
    b86c:	mov    QWORD PTR [rbp+0x8080],0x0
    b877:	test   edi,edi
    b879:	jne    b91d <vvfat_read+0x55d>
    b87f:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    b889:	mov    DWORD PTR [rbp+0x807c],ecx
    b88f:	mov    QWORD PTR [rbp+0x8080],r9
    b896:	jmp    b706 <vvfat_read+0x346>
    b89b:	nop    DWORD PTR [rax+rax*1+0x0]
    b8a0:	mov    r10d,edi
    b8a3:	cmp    r11d,r10d
    b8a6:	ja     b7e1 <vvfat_read+0x421>
    b8ac:	jmp    b746 <vvfat_read+0x386>
    b8b1:	nop    DWORD PTR [rax+0x0]
    b8b8:	mov    rsi,QWORD PTR [rbp+0x8088]
    b8bf:	jmp    b600 <vvfat_read+0x240>
    b8c4:	mov    r10d,esi
    b8c7:	jmp    b8a3 <vvfat_read+0x4e3>
    b8c9:	cmp    QWORD PTR [rsp+0x8],0x0
    b8cf:	je     b8ff <vvfat_read+0x53f>
    b8d1:	mov    edi,DWORD PTR [rbp+0x807c]
    b8d7:	mov    QWORD PTR [rbp+0x8080],0x0
    b8e2:	test   edi,edi
    b8e4:	je     b8ff <vvfat_read+0x53f>
    b8e6:	mov    QWORD PTR [rsp+0x8],r9
    b8eb:	call   3040 <close@plt>
    b8f0:	mov    r9,QWORD PTR [rsp+0x8]
    b8f5:	mov    DWORD PTR [rbp+0x807c],0x0
    b8ff:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    b909:	mov    QWORD PTR [rbp+0x8080],r9
    b910:	mov    QWORD PTR [rsp+0x8],r9
    b915:	mov    esi,DWORD PTR [r9]
    b918:	jmp    b59e <vvfat_read+0x1de>
    b91d:	mov    QWORD PTR [rsp+0x18],r9
    b922:	mov    DWORD PTR [rsp+0x8],eax
    b926:	call   3040 <close@plt>
    b92b:	mov    r9,QWORD PTR [rsp+0x18]
    b930:	mov    ecx,DWORD PTR [rsp+0x8]
    b934:	jmp    b87f <vvfat_read+0x4bf>
    b939:	mov    rsi,QWORD PTR [rbp+0x8090]
    b940:	mov    edx,DWORD PTR [rbp+0x8058]
    b946:	mov    edi,DWORD PTR [rbp+0x807c]
    b94c:	mov    QWORD PTR [rbp+0x8088],rsi
    b953:	call   4300 <qemu_read_ok>
    b958:	test   eax,eax
    b95a:	js     b96f <vvfat_read+0x5af>
    b95c:	mov    DWORD PTR [rbp+0x8098],r14d
    b963:	mov    rsi,QWORD PTR [rbp+0x8088]
    b96a:	jmp    b600 <vvfat_read+0x240>
    b96f:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    b979:	jmp    b746 <vvfat_read+0x386>
    b97e:	lea    rcx,[rip+0x13dfb]        # 1f780 <__PRETTY_FUNCTION__.14126>
    b985:	lea    rsi,[rip+0x133fc]        # 1ed88 <desc_template.13816+0x208>
    b98c:	lea    rdi,[rip+0x139d9]        # 1f36c <desc_template.13816+0x7ec>
    b993:	mov    edx,0x465
    b998:	call   3000 <__assert_fail@plt>
    b99d:	lea    rcx,[rip+0x13ddc]        # 1f780 <__PRETTY_FUNCTION__.14126>
    b9a4:	lea    rsi,[rip+0x133dd]        # 1ed88 <desc_template.13816+0x208>
    b9ab:	lea    rdi,[rip+0x13980]        # 1f332 <desc_template.13816+0x7b2>
    b9b2:	mov    edx,0x45a
    b9b7:	call   3000 <__assert_fail@plt>
    b9bc:	lea    rcx,[rip+0x13dad]        # 1f770 <__PRETTY_FUNCTION__.13707>
    b9c3:	lea    rsi,[rip+0x133be]        # 1ed88 <desc_template.13816+0x208>
    b9ca:	lea    rdi,[rip+0x1394d]        # 1f31e <desc_template.13816+0x79e>
    b9d1:	mov    edx,0x60
    b9d6:	call   3000 <__assert_fail@plt>
    b9db:	lea    rcx,[rip+0x13d9e]        # 1f780 <__PRETTY_FUNCTION__.14126>
    b9e2:	lea    rsi,[rip+0x1339f]        # 1ed88 <desc_template.13816+0x208>
    b9e9:	lea    rdi,[rip+0x13960]        # 1f350 <desc_template.13816+0x7d0>
    b9f0:	mov    edx,0x45c
    b9f5:	call   3000 <__assert_fail@plt>
    b9fa:	call   2f70 <__stack_chk_fail@plt>
    b9ff:	lea    rcx,[rip+0x13c42]        # 1f648 <__PRETTY_FUNCTION__.14154>
    ba06:	lea    rsi,[rip+0x1337b]        # 1ed88 <desc_template.13816+0x208>
    ba0d:	lea    rdi,[rip+0x13971]        # 1f385 <desc_template.13816+0x805>
    ba14:	mov    edx,0x4be
    ba19:	call   3000 <__assert_fail@plt>
    ba1e:	lea    rcx,[rip+0x13d7b]        # 1f7a0 <__PRETTY_FUNCTION__.14134>
    ba25:	lea    rsi,[rip+0x1335c]        # 1ed88 <desc_template.13816+0x208>
    ba2c:	lea    rdi,[rip+0x133f5]        # 1ee28 <desc_template.13816+0x2a8>
    ba33:	mov    edx,0x477
    ba38:	call   3000 <__assert_fail@plt>
    ba3d:	lea    rcx,[rip+0x13c04]        # 1f648 <__PRETTY_FUNCTION__.14154>
    ba44:	lea    rsi,[rip+0x1333d]        # 1ed88 <desc_template.13816+0x208>
    ba4b:	lea    rdi,[rip+0x1340e]        # 1ee60 <desc_template.13816+0x2e0>
    ba52:	mov    edx,0x4b3
    ba57:	call   3000 <__assert_fail@plt>
    ba5c:	lea    rcx,[rip+0x13be5]        # 1f648 <__PRETTY_FUNCTION__.14154>
    ba63:	lea    rsi,[rip+0x1331e]        # 1ed88 <desc_template.13816+0x208>
    ba6a:	lea    rdi,[rip+0x13437]        # 1eea8 <desc_template.13816+0x328>
    ba71:	mov    edx,0x4b4
    ba76:	call   3000 <__assert_fail@plt>
    ba7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ba80 <write_target_close>:
    ba80:	push   rbx
    ba81:	mov    rbx,QWORD PTR [rdi+0x40]
    ba85:	mov    rdi,QWORD PTR [rbx+0x80b0]
    ba8c:	call   170f0 <bdrv_delete>
    ba91:	mov    rdi,QWORD PTR [rbx+0x80a8]
    ba98:	pop    rbx
    ba99:	jmp    2e40 <free@plt>
    ba9e:	xchg   ax,ax

000000000000baa0 <schedule_rename>:
    baa0:	push   r14
    baa2:	push   r13
    baa4:	mov    r14d,esi
    baa7:	push   r12
    baa9:	push   rbp
    baaa:	mov    rbp,rdi
    baad:	push   rbx
    baae:	sub    rsp,0x10
    bab2:	mov    ebx,DWORD PTR [rdi+0x80d4]
    bab8:	mov    eax,DWORD PTR [rdi+0x80d8]
    babe:	lea    r12d,[rbx+0x1]
    bac2:	mov    ecx,r12d
    bac5:	imul   ecx,eax
    bac8:	cmp    ecx,DWORD PTR [rdi+0x80d0]
    bace:	ja     bb10 <schedule_rename+0x70>
    bad0:	cmp    ebx,r12d
    bad3:	mov    DWORD PTR [rbp+0x80d4],r12d
    bada:	jae    bb5a <schedule_rename+0xba>
    badc:	imul   ebx,DWORD PTR [rbp+0x80d8]
    bae3:	mov    rax,QWORD PTR [rbp+0x80c8]
    baea:	add    rax,rbx
    baed:	mov    QWORD PTR [rax],rdx
    baf0:	mov    DWORD PTR [rax+0x8],r14d
    baf4:	mov    DWORD PTR [rax+0x10],0x0
    bafb:	add    rsp,0x10
    baff:	pop    rbx
    bb00:	pop    rbp
    bb01:	pop    r12
    bb03:	pop    r13
    bb05:	pop    r14
    bb07:	ret    
    bb08:	nop    DWORD PTR [rax+rax*1+0x0]
    bb10:	mov    r13d,eax
    bb13:	mov    rdi,QWORD PTR [rdi+0x80c8]
    bb1a:	mov    QWORD PTR [rsp+0x8],rdx
    bb1f:	shl    r13d,0x5
    bb23:	sub    r13d,eax
    bb26:	add    r13d,ecx
    bb29:	movsxd rsi,r13d
    bb2c:	call   49f0 <qemu_realloc>
    bb31:	test   rax,rax
    bb34:	mov    QWORD PTR [rbp+0x80c8],rax
    bb3b:	mov    rdx,QWORD PTR [rsp+0x8]
    bb40:	je     bb50 <schedule_rename+0xb0>
    bb42:	mov    DWORD PTR [rbp+0x80d0],r13d
    bb49:	jmp    bad0 <schedule_rename+0x30>
    bb4b:	nop    DWORD PTR [rax+rax*1+0x0]
    bb50:	mov    QWORD PTR ds:0x0,rdx
    bb58:	ud2    
    bb5a:	lea    rcx,[rip+0x13c0f]        # 1f770 <__PRETTY_FUNCTION__.13707>
    bb61:	lea    rsi,[rip+0x13220]        # 1ed88 <desc_template.13816+0x208>
    bb68:	lea    rdi,[rip+0x137af]        # 1f31e <desc_template.13816+0x79e>
    bb6f:	mov    edx,0x60
    bb74:	call   3000 <__assert_fail@plt>
    bb79:	nop    DWORD PTR [rax+0x0]

000000000000bb80 <array_index.isra.6>:
    bb80:	mov    rax,rcx
    bb83:	sub    rsp,0x8
    bb87:	sub    rax,rdi
    bb8a:	mov    edi,edx
    bb8c:	xor    edx,edx
    bb8e:	div    rdi
    bb91:	test   rdx,rdx
    bb94:	jne    bba2 <array_index.isra.6+0x22>
    bb96:	mov    esi,esi
    bb98:	cmp    rax,rsi
    bb9b:	jae    bbc1 <array_index.isra.6+0x41>
    bb9d:	add    rsp,0x8
    bba1:	ret    
    bba2:	lea    rcx,[rip+0x13b57]        # 1f700 <__PRETTY_FUNCTION__.13749>
    bba9:	lea    rsi,[rip+0x131d8]        # 1ed88 <desc_template.13816+0x208>
    bbb0:	lea    rdi,[rip+0x13359]        # 1ef10 <desc_template.13816+0x390>
    bbb7:	mov    edx,0xc5
    bbbc:	call   3000 <__assert_fail@plt>
    bbc1:	lea    rcx,[rip+0x13b38]        # 1f700 <__PRETTY_FUNCTION__.13749>
    bbc8:	lea    rsi,[rip+0x131b9]        # 1ed88 <desc_template.13816+0x208>
    bbcf:	lea    rdi,[rip+0x13362]        # 1ef38 <desc_template.13816+0x3b8>
    bbd6:	mov    edx,0xc6
    bbdb:	call   3000 <__assert_fail@plt>

000000000000bbe0 <commit_mappings>:
    bbe0:	push   r15
    bbe2:	push   r14
    bbe4:	xor    r8d,r8d
    bbe7:	push   r13
    bbe9:	push   r12
    bbeb:	push   rbp
    bbec:	push   rbx
    bbed:	mov    rbp,rdi
    bbf0:	mov    ebx,esi
    bbf2:	sub    rsp,0x18
    bbf6:	mov    r10d,DWORD PTR [rdi+0x804c]
    bbfd:	mov    esi,r10d
    bc00:	jmp    bc23 <commit_mappings+0x43>
    bc02:	nop    WORD PTR [rax+rax*1+0x0]
    bc08:	cmp    eax,esi
    bc0a:	jne    bc14 <commit_mappings+0x34>
    bc0c:	test   esi,esi
    bc0e:	jne    befa <commit_mappings+0x31a>
    bc14:	cmp    eax,esi
    bc16:	je     bc72 <commit_mappings+0x92>
    bc18:	mov    esi,eax
    bc1a:	cmp    r8d,esi
    bc1d:	jg     bebc <commit_mappings+0x2dc>
    bc23:	lea    ecx,[r8+rsi*1]
    bc27:	mov    eax,ecx
    bc29:	shr    eax,0x1f
    bc2c:	add    eax,ecx
    bc2e:	sar    eax,1
    bc30:	cmp    r10d,eax
    bc33:	mov    r12d,eax
    bc36:	jbe    bdb1 <commit_mappings+0x1d1>
    bc3c:	mov    r9d,DWORD PTR [rbp+0x8050]
    bc43:	mov    ecx,eax
    bc45:	mov    r11,QWORD PTR [rbp+0x8040]
    bc4c:	imul   ecx,r9d
    bc50:	add    rcx,r11
    bc53:	mov    edi,DWORD PTR [rcx]
    bc55:	mov    ecx,DWORD PTR [rcx+0x4]
    bc58:	cmp    edi,ecx
    bc5a:	jae    bedb <commit_mappings+0x2fb>
    bc60:	cmp    ebx,edi
    bc62:	jbe    bc08 <commit_mappings+0x28>
    bc64:	cmp    eax,r8d
    bc67:	je     bea8 <commit_mappings+0x2c8>
    bc6d:	mov    r8d,eax
    bc70:	jmp    bc1a <commit_mappings+0x3a>
    bc72:	mov    r12d,r8d
    bc75:	xor    r13d,r13d
    bc78:	cmp    r10d,r12d
    bc7b:	ja     be6e <commit_mappings+0x28e>
    bc81:	cmp    edx,DWORD PTR [rbp+0x8034]
    bc87:	jae    bdb1 <commit_mappings+0x1d1>
    bc8d:	cmp    QWORD PTR [rbp+0x8080],0x0
    bc95:	mov    r12,QWORD PTR [rbp+0x8028]
    bc9c:	mov    r14d,DWORD PTR [rbp+0x8038]
    bca3:	je     bcd1 <commit_mappings+0xf1>
    bca5:	mov    edi,DWORD PTR [rbp+0x807c]
    bcab:	mov    QWORD PTR [rbp+0x8080],0x0
    bcb6:	test   edi,edi
    bcb8:	je     bcd1 <commit_mappings+0xf1>
    bcba:	mov    DWORD PTR [rsp+0xc],edx
    bcbe:	call   3040 <close@plt>
    bcc3:	mov    edx,DWORD PTR [rsp+0xc]
    bcc7:	mov    DWORD PTR [rbp+0x807c],0x0
    bcd1:	test   r13,r13
    bcd4:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    bcde:	je     bf19 <commit_mappings+0x339>
    bce4:	cmp    DWORD PTR [r13+0x0],ebx
    bce8:	jne    bf38 <commit_mappings+0x358>
    bcee:	test   edx,edx
    bcf0:	mov    DWORD PTR [r13+0xc],0xffffffff
    bcf8:	mov    DWORD PTR [r13+0x8],edx
    bcfc:	mov    eax,0x4
    bd01:	jle    bd1a <commit_mappings+0x13a>
    bd03:	imul   edx,r14d
    bd07:	add    rdx,r12
    bd0a:	test   BYTE PTR [rdx+0xb],0x10
    bd0e:	je     bd15 <commit_mappings+0x135>
    bd10:	cmp    BYTE PTR [rdx],0xe5
    bd13:	jne    bd1a <commit_mappings+0x13a>
    bd15:	mov    eax,0x1
    bd1a:	mov    DWORD PTR [r13+0x20],eax
    bd1e:	mov    esi,DWORD PTR [rbp+0x8078]
    bd24:	lea    eax,[rsi-0x8]
    bd27:	nop    WORD PTR [rax+rax*1+0x0]
    bd30:	cmp    ebx,eax
    bd32:	ja     be5d <commit_mappings+0x27d>
    bd38:	mov    eax,DWORD PTR [rbp+0x8068]
    bd3e:	cmp    ebx,eax
    bd40:	jae    bd5d <commit_mappings+0x17d>
    bd42:	nop    WORD PTR [rax+rax*1+0x0]
    bd48:	add    ebx,0x1
    bd4b:	mov    r12d,esi
    bd4e:	cmp    eax,ebx
    bd50:	cmovne r12d,ebx
    bd54:	cmp    ebx,r12d
    bd57:	jne    bd9a <commit_mappings+0x1ba>
    bd59:	cmp    ebx,eax
    bd5b:	jb     bd48 <commit_mappings+0x168>
    bd5d:	mov    edx,DWORD PTR [rbp+0x800c]
    bd63:	mov    rcx,QWORD PTR [rbp+0x80b8]
    bd6a:	cmp    edx,0x20
    bd6d:	je     bdd0 <commit_mappings+0x1f0>
    bd6f:	cmp    edx,0x10
    bd72:	je     bde0 <commit_mappings+0x200>
    bd74:	lea    edx,[rbx+rbx*2]
    bd77:	shr    edx,1
    bd79:	movzx  r12d,WORD PTR [rcx+rdx*1]
    bd7e:	lea    ecx,[rbx*4+0x0]
    bd85:	add    ebx,0x1
    bd88:	and    ecx,0x4
    bd8b:	sar    r12d,cl
    bd8e:	and    r12d,0xfff
    bd95:	cmp    ebx,r12d
    bd98:	je     bd59 <commit_mappings+0x179>
    bd9a:	cmp    ebx,DWORD PTR [r13+0x4]
    bd9e:	mov    r14d,DWORD PTR [rbp+0x804c]
    bda5:	ja     bdf0 <commit_mappings+0x210>
    bda7:	add    r14d,0xffffffff
    bdab:	jb     bf57 <commit_mappings+0x377>
    bdb1:	lea    rcx,[rip+0x139b8]        # 1f770 <__PRETTY_FUNCTION__.13707>
    bdb8:	lea    rsi,[rip+0x12fc9]        # 1ed88 <desc_template.13816+0x208>
    bdbf:	lea    rdi,[rip+0x13558]        # 1f31e <desc_template.13816+0x79e>
    bdc6:	mov    edx,0x60
    bdcb:	call   3000 <__assert_fail@plt>
    bdd0:	mov    edx,ebx
    bdd2:	add    ebx,0x1
    bdd5:	mov    r12d,DWORD PTR [rcx+rdx*4]
    bdd9:	jmp    bd54 <commit_mappings+0x174>
    bdde:	xchg   ax,ax
    bde0:	mov    edx,ebx
    bde2:	add    ebx,0x1
    bde5:	movzx  r12d,WORD PTR [rcx+rdx*2]
    bdea:	jmp    bd54 <commit_mappings+0x174>
    bdef:	nop
    bdf0:	mov    edx,DWORD PTR [rbp+0x8050]
    bdf6:	mov    rdi,QWORD PTR [rbp+0x8040]
    bdfd:	mov    esi,r14d
    be00:	mov    rcx,r13
    be03:	call   bb80 <array_index.isra.6>
    be08:	mov    esi,r14d
    be0b:	sub    esi,eax
    be0d:	cmp    esi,0x1
    be10:	jle    bda7 <commit_mappings+0x1c7>
    be12:	cmp    ebx,DWORD PTR [r13+0x28]
    be16:	jbe    bda7 <commit_mappings+0x1c7>
    be18:	lea    rdx,[r13+0x50]
    be1c:	mov    r14d,0x1
    be22:	jmp    be34 <commit_mappings+0x254>
    be24:	nop    DWORD PTR [rax+0x0]
    be28:	add    rdx,0x28
    be2c:	cmp    ebx,DWORD PTR [rdx-0x28]
    be2f:	jbe    be3c <commit_mappings+0x25c>
    be31:	mov    r14d,ecx
    be34:	lea    ecx,[r14+0x1]
    be38:	cmp    esi,ecx
    be3a:	jne    be28 <commit_mappings+0x248>
    be3c:	lea    r15d,[rax+0x1]
    be40:	mov    esi,r15d
    be43:	mov    rdi,rbp
    be46:	call   ad50 <remove_mapping>
    be4b:	sub    r14d,0x1
    be4f:	jne    be40 <commit_mappings+0x260>
    be51:	mov    r14d,DWORD PTR [rbp+0x804c]
    be58:	jmp    bda7 <commit_mappings+0x1c7>
    be5d:	add    rsp,0x18
    be61:	xor    eax,eax
    be63:	pop    rbx
    be64:	pop    rbp
    be65:	pop    r12
    be67:	pop    r13
    be69:	pop    r14
    be6b:	pop    r15
    be6d:	ret    
    be6e:	imul   r9d,r12d
    be72:	lea    r13,[r11+r9*1]
    be76:	cmp    ebx,DWORD PTR [r13+0x0]
    be7a:	jb     beb4 <commit_mappings+0x2d4>
    be7c:	cmp    ebx,DWORD PTR [r13+0x4]
    be80:	jb     bc81 <commit_mappings+0xa1>
    be86:	lea    rcx,[rip+0x13913]        # 1f7a0 <__PRETTY_FUNCTION__.14134>
    be8d:	lea    rsi,[rip+0x12ef4]        # 1ed88 <desc_template.13816+0x208>
    be94:	lea    rdi,[rip+0x12f8d]        # 1ee28 <desc_template.13816+0x2a8>
    be9b:	mov    edx,0x477
    bea0:	call   3000 <__assert_fail@plt>
    bea5:	nop    DWORD PTR [rax]
    bea8:	cmp    ebx,ecx
    beaa:	jb     be6e <commit_mappings+0x28e>
    beac:	mov    r12d,esi
    beaf:	jmp    bc75 <commit_mappings+0x95>
    beb4:	xor    r13d,r13d
    beb7:	jmp    bc81 <commit_mappings+0xa1>
    bebc:	lea    rcx,[rip+0x138bd]        # 1f780 <__PRETTY_FUNCTION__.14126>
    bec3:	lea    rsi,[rip+0x12ebe]        # 1ed88 <desc_template.13816+0x208>
    beca:	lea    rdi,[rip+0x1349b]        # 1f36c <desc_template.13816+0x7ec>
    bed1:	mov    edx,0x465
    bed6:	call   3000 <__assert_fail@plt>
    bedb:	lea    rcx,[rip+0x1389e]        # 1f780 <__PRETTY_FUNCTION__.14126>
    bee2:	lea    rsi,[rip+0x12e9f]        # 1ed88 <desc_template.13816+0x208>
    bee9:	lea    rdi,[rip+0x13442]        # 1f332 <desc_template.13816+0x7b2>
    bef0:	mov    edx,0x45a
    bef5:	call   3000 <__assert_fail@plt>
    befa:	lea    rcx,[rip+0x1387f]        # 1f780 <__PRETTY_FUNCTION__.14126>
    bf01:	lea    rsi,[rip+0x12e80]        # 1ed88 <desc_template.13816+0x208>
    bf08:	lea    rdi,[rip+0x13441]        # 1f350 <desc_template.13816+0x7d0>
    bf0f:	mov    edx,0x45c
    bf14:	call   3000 <__assert_fail@plt>
    bf19:	lea    rcx,[rip+0x13760]        # 1f680 <__PRETTY_FUNCTION__.14422>
    bf20:	lea    rsi,[rip+0x12e61]        # 1ed88 <desc_template.13816+0x208>
    bf27:	lea    rdi,[rip+0x13465]        # 1f393 <desc_template.13816+0x813>
    bf2e:	mov    edx,0x811
    bf33:	call   3000 <__assert_fail@plt>
    bf38:	lea    rcx,[rip+0x13741]        # 1f680 <__PRETTY_FUNCTION__.14422>
    bf3f:	lea    rsi,[rip+0x12e42]        # 1ed88 <desc_template.13816+0x208>
    bf46:	lea    rdi,[rip+0x13013]        # 1ef60 <desc_template.13816+0x3e0>
    bf4d:	mov    edx,0x812
    bf52:	call   3000 <__assert_fail@plt>
    bf57:	imul   r14d,DWORD PTR [rbp+0x8050]
    bf5f:	mov    rax,QWORD PTR [rbp+0x8040]
    bf66:	add    rax,r14
    bf69:	cmp    r13,rax
    bf6c:	je     bf78 <commit_mappings+0x398>
    bf6e:	cmp    ebx,DWORD PTR [r13+0x28]
    bf72:	ja     c15d <commit_mappings+0x57d>
    bf78:	mov    DWORD PTR [r13+0x4],ebx
    bf7c:	mov    esi,DWORD PTR [rbp+0x8078]
    bf82:	lea    eax,[rsi-0x8]
    bf85:	cmp    r12d,eax
    bf88:	jbe    bf98 <commit_mappings+0x3b8>
    bf8a:	mov    ebx,r12d
    bf8d:	jmp    bd30 <commit_mappings+0x150>
    bf92:	nop    WORD PTR [rax+rax*1+0x0]
    bf98:	mov    esi,DWORD PTR [rbp+0x804c]
    bf9e:	xor    r9d,r9d
    bfa1:	mov    r8d,esi
    bfa4:	jmp    bfcf <commit_mappings+0x3ef>
    bfa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    bfb0:	cmp    r8d,eax
    bfb3:	jne    bfbe <commit_mappings+0x3de>
    bfb5:	test   r8d,r8d
    bfb8:	jne    befa <commit_mappings+0x31a>
    bfbe:	cmp    r8d,eax
    bfc1:	je     c020 <commit_mappings+0x440>
    bfc3:	mov    r8d,eax
    bfc6:	cmp    r9d,r8d
    bfc9:	jg     bebc <commit_mappings+0x2dc>
    bfcf:	lea    edx,[r9+r8*1]
    bfd3:	mov    eax,edx
    bfd5:	shr    eax,0x1f
    bfd8:	add    eax,edx
    bfda:	sar    eax,1
    bfdc:	cmp    esi,eax
    bfde:	mov    r11d,eax
    bfe1:	jbe    bdb1 <commit_mappings+0x1d1>
    bfe7:	mov    edx,DWORD PTR [rbp+0x8050]
    bfed:	mov    ecx,eax
    bfef:	mov    rdi,QWORD PTR [rbp+0x8040]
    bff6:	imul   ecx,edx
    bff9:	add    rcx,rdi
    bffc:	mov    r10d,DWORD PTR [rcx]
    bfff:	mov    ecx,DWORD PTR [rcx+0x4]
    c002:	cmp    r10d,ecx
    c005:	jae    bedb <commit_mappings+0x2fb>
    c00b:	cmp    r12d,r10d
    c00e:	jbe    bfb0 <commit_mappings+0x3d0>
    c010:	cmp    r9d,eax
    c013:	je     c128 <commit_mappings+0x548>
    c019:	mov    r9d,eax
    c01c:	jmp    bfc6 <commit_mappings+0x3e6>
    c01e:	xchg   ax,ax
    c020:	mov    r11d,r9d
    c023:	cmp    esi,r11d
    c026:	jbe    c0b0 <commit_mappings+0x4d0>
    c02c:	imul   r11d,edx
    c030:	add    r11,rdi
    c033:	je     c0b0 <commit_mappings+0x4d0>
    c035:	cmp    DWORD PTR [r11],r12d
    c038:	ja     c0b0 <commit_mappings+0x4d0>
    c03a:	mov    r14,r13
    c03d:	mov    r13,r11
    c040:	mov    eax,DWORD PTR [r14+0x8]
    c044:	mov    DWORD PTR [r13+0x8],eax
    c048:	mov    eax,DWORD PTR [r14+0xc]
    c04c:	test   eax,eax
    c04e:	js     c105 <commit_mappings+0x525>
    c054:	nop    DWORD PTR [rax+0x0]
    c058:	mov    DWORD PTR [r13+0xc],eax
    c05c:	mov    rax,QWORD PTR [r14+0x18]
    c060:	mov    QWORD PTR [r13+0x18],rax
    c064:	mov    eax,DWORD PTR [r14+0x20]
    c068:	mov    DWORD PTR [r13+0x20],eax
    c06c:	mov    eax,DWORD PTR [r14+0x24]
    c070:	mov    DWORD PTR [r13+0x24],eax
    c074:	test   BYTE PTR [r14+0x20],0x4
    c079:	je     c140 <commit_mappings+0x560>
    c07f:	mov    eax,DWORD PTR [r14+0x10]
    c083:	mov    DWORD PTR [r13+0x10],eax
    c087:	mov    eax,DWORD PTR [r14+0x4]
    c08b:	mov    edx,DWORD PTR [rbp+0x805c]
    c091:	sub    eax,DWORD PTR [r14]
    c094:	shl    edx,0x4
    c097:	imul   eax,edx
    c09a:	add    eax,DWORD PTR [r14+0x14]
    c09e:	mov    DWORD PTR [r13+0x14],eax
    c0a2:	mov    esi,DWORD PTR [rbp+0x8078]
    c0a8:	lea    eax,[rsi-0x8]
    c0ab:	jmp    bf8a <commit_mappings+0x3aa>
    c0b0:	mov    rcx,r13
    c0b3:	call   bb80 <array_index.isra.6>
    c0b8:	lea    edx,[r12+0x1]
    c0bd:	mov    esi,r12d
    c0c0:	mov    rdi,rbp
    c0c3:	mov    r14d,eax
    c0c6:	call   ae60 <insert_mapping>
    c0cb:	cmp    r12d,ebx
    c0ce:	mov    r13,rax
    c0d1:	adc    r14d,0x0
    c0d5:	cmp    r14d,DWORD PTR [rbp+0x804c]
    c0dc:	jae    bdb1 <commit_mappings+0x1d1>
    c0e2:	imul   r14d,DWORD PTR [rbp+0x8050]
    c0ea:	add    r14,QWORD PTR [rbp+0x8040]
    c0f1:	mov    eax,DWORD PTR [r14+0x8]
    c0f5:	mov    DWORD PTR [r13+0x8],eax
    c0f9:	mov    eax,DWORD PTR [r14+0xc]
    c0fd:	test   eax,eax
    c0ff:	jns    c058 <commit_mappings+0x478>
    c105:	mov    edx,DWORD PTR [rbp+0x8050]
    c10b:	mov    esi,DWORD PTR [rbp+0x804c]
    c111:	mov    rcx,r14
    c114:	mov    rdi,QWORD PTR [rbp+0x8040]
    c11b:	call   bb80 <array_index.isra.6>
    c120:	jmp    c058 <commit_mappings+0x478>
    c125:	nop    DWORD PTR [rax]
    c128:	cmp    r12d,ecx
    c12b:	jb     c02c <commit_mappings+0x44c>
    c131:	mov    r11d,r8d
    c134:	jmp    c023 <commit_mappings+0x443>
    c139:	nop    DWORD PTR [rax+0x0]
    c140:	mov    eax,DWORD PTR [r14+0x4]
    c144:	add    eax,DWORD PTR [r14+0x10]
    c148:	sub    eax,DWORD PTR [r14]
    c14b:	mov    DWORD PTR [r13+0x10],eax
    c14f:	mov    esi,DWORD PTR [rbp+0x8078]
    c155:	lea    eax,[rsi-0x8]
    c158:	jmp    bf8a <commit_mappings+0x3aa>
    c15d:	lea    rcx,[rip+0x1351c]        # 1f680 <__PRETTY_FUNCTION__.14422>
    c164:	lea    rsi,[rip+0x12c1d]        # 1ed88 <desc_template.13816+0x208>
    c16b:	lea    rdi,[rip+0x12e0e]        # 1ef80 <desc_template.13816+0x400>
    c172:	mov    edx,0x827
    c177:	call   3000 <__assert_fail@plt>
    c17c:	nop    DWORD PTR [rax+0x0]

000000000000c180 <commit_one_file>:
    c180:	push   r15
    c182:	push   r14
    c184:	push   r13
    c186:	push   r12
    c188:	push   rbp
    c189:	push   rbx
    c18a:	sub    rsp,0x28
    c18e:	cmp    esi,DWORD PTR [rdi+0x8034]
    c194:	mov    DWORD PTR [rsp+0x18],esi
    c198:	jae    c5f6 <commit_one_file+0x476>
    c19e:	mov    r9d,DWORD PTR [rsp+0x18]
    c1a3:	mov    r10d,DWORD PTR [rdi+0x804c]
    c1aa:	mov    r15,rdi
    c1ad:	imul   r9d,DWORD PTR [rdi+0x8038]
    c1b5:	mov    r12d,edx
    c1b8:	xor    esi,esi
    c1ba:	mov    ecx,r10d
    c1bd:	add    r9,QWORD PTR [rdi+0x8028]
    c1c4:	movzx  ebp,WORD PTR [r9+0x14]
    c1c9:	movzx  eax,WORD PTR [r9+0x1a]
    c1ce:	shl    ebp,0x10
    c1d1:	or     ebp,eax
    c1d3:	jmp    c1f2 <commit_one_file+0x72>
    c1d5:	nop    DWORD PTR [rax]
    c1d8:	cmp    eax,ecx
    c1da:	jne    c1e4 <commit_one_file+0x64>
    c1dc:	test   ecx,ecx
    c1de:	jne    c615 <commit_one_file+0x495>
    c1e4:	cmp    eax,ecx
    c1e6:	je     c240 <commit_one_file+0xc0>
    c1e8:	mov    ecx,eax
    c1ea:	cmp    esi,ecx
    c1ec:	jg     c5b8 <commit_one_file+0x438>
    c1f2:	lea    edx,[rcx+rsi*1]
    c1f5:	mov    eax,edx
    c1f7:	shr    eax,0x1f
    c1fa:	add    eax,edx
    c1fc:	sar    eax,1
    c1fe:	cmp    eax,r10d
    c201:	mov    r13d,eax
    c204:	jae    c5f6 <commit_one_file+0x476>
    c20a:	mov    ebx,DWORD PTR [r15+0x8050]
    c211:	mov    edx,eax
    c213:	mov    r11,QWORD PTR [r15+0x8040]
    c21a:	imul   edx,ebx
    c21d:	add    rdx,r11
    c220:	mov    edi,DWORD PTR [rdx]
    c222:	mov    edx,DWORD PTR [rdx+0x4]
    c225:	cmp    edi,edx
    c227:	jae    c5d7 <commit_one_file+0x457>
    c22d:	cmp    edi,ebp
    c22f:	jae    c1d8 <commit_one_file+0x58>
    c231:	cmp    eax,esi
    c233:	je     c4a0 <commit_one_file+0x320>
    c239:	mov    esi,eax
    c23b:	jmp    c1ea <commit_one_file+0x6a>
    c23d:	nop    DWORD PTR [rax]
    c240:	mov    r13d,esi
    c243:	cmp    r10d,r13d
    c246:	jbe    c488 <commit_one_file+0x308>
    c24c:	imul   ebx,r13d
    c250:	add    rbx,r11
    c253:	cmp    DWORD PTR [rbx],ebp
    c255:	ja     c488 <commit_one_file+0x308>
    c25b:	cmp    DWORD PTR [rbx+0x4],ebp
    c25e:	jbe    c672 <commit_one_file+0x4f2>
    c264:	mov    edi,DWORD PTR [r15+0x8058]
    c26b:	mov    r13d,DWORD PTR [r9+0x1c]
    c26f:	call   49d0 <qemu_malloc>
    c274:	cmp    r12d,r13d
    c277:	mov    QWORD PTR [rsp+0x8],rax
    c27c:	jae    c691 <commit_one_file+0x511>
    c282:	mov    esi,DWORD PTR [r15+0x8058]
    c289:	xor    edx,edx
    c28b:	mov    eax,r12d
    c28e:	div    esi
    c290:	test   edx,edx
    c292:	jne    c653 <commit_one_file+0x4d3>
    c298:	cmp    esi,r12d
    c29b:	mov    r9d,ebp
    c29e:	jae    c318 <commit_one_file+0x198>
    c2a0:	mov    edx,DWORD PTR [r15+0x8068]
    c2a7:	mov    eax,esi
    c2a9:	mov    r9d,ebp
    c2ac:	jmp    c2c7 <commit_one_file+0x147>
    c2ae:	xchg   ax,ax
    c2b0:	add    r9d,0x1
    c2b4:	cmp    edx,r9d
    c2b7:	jne    c2c0 <commit_one_file+0x140>
    c2b9:	mov    r9d,DWORD PTR [r15+0x8078]
    c2c0:	add    eax,esi
    c2c2:	cmp    r12d,eax
    c2c5:	jbe    c318 <commit_one_file+0x198>
    c2c7:	cmp    edx,r9d
    c2ca:	ja     c2b0 <commit_one_file+0x130>
    c2cc:	mov    ecx,DWORD PTR [r15+0x800c]
    c2d3:	mov    rdi,QWORD PTR [r15+0x80b8]
    c2da:	cmp    ecx,0x20
    c2dd:	je     c478 <commit_one_file+0x2f8>
    c2e3:	cmp    ecx,0x10
    c2e6:	je     c490 <commit_one_file+0x310>
    c2ec:	lea    ecx,[r9+r9*2]
    c2f0:	add    eax,esi
    c2f2:	shr    ecx,1
    c2f4:	movzx  edi,WORD PTR [rdi+rcx*1]
    c2f8:	lea    ecx,[r9*4+0x0]
    c300:	and    ecx,0x4
    c303:	sar    edi,cl
    c305:	mov    r9d,edi
    c308:	and    r9d,0xfff
    c30f:	cmp    r12d,eax
    c312:	ja     c2c7 <commit_one_file+0x147>
    c314:	nop    DWORD PTR [rax+0x0]
    c318:	mov    rdi,QWORD PTR [rbx+0x18]
    c31c:	xor    eax,eax
    c31e:	mov    edx,0x1b6
    c323:	mov    esi,0x42
    c328:	mov    DWORD PTR [rsp+0x1c],r9d
    c32d:	call   32e0 <open64@plt>
    c332:	test   eax,eax
    c334:	mov    DWORD PTR [rsp+0x14],eax
    c338:	mov    r9d,DWORD PTR [rsp+0x1c]
    c33d:	js     c576 <commit_one_file+0x3f6>
    c343:	test   r12d,r12d
    c346:	jne    c4eb <commit_one_file+0x36b>
    c34c:	test   r13d,r13d
    c34f:	jne    c3f1 <commit_one_file+0x271>
    c355:	jmp    c4b0 <commit_one_file+0x330>
    c35a:	nop    WORD PTR [rax+rax*1+0x0]
    c360:	lea    ebx,[r9+0x1]
    c364:	cmp    eax,ebx
    c366:	jne    c370 <commit_one_file+0x1f0>
    c368:	mov    ebx,DWORD PTR [r15+0x8078]
    c36f:	nop
    c370:	cmp    r9d,0x1
    c374:	jbe    c634 <commit_one_file+0x4b4>
    c37a:	mov    eax,DWORD PTR [r15+0x8078]
    c381:	sub    eax,0x8
    c384:	cmp    eax,r9d
    c387:	jb     c634 <commit_one_file+0x4b4>
    c38d:	lea    ecx,[r14+0x3fe]
    c394:	mov    eax,r14d
    c397:	mov    rdx,QWORD PTR [rsp+0x8]
    c39c:	add    eax,0x1ff
    c3a1:	mov    rdi,QWORD PTR [r15]
    c3a4:	cmovns ecx,eax
    c3a7:	imul   r9d,DWORD PTR [r15+0x805c]
    c3af:	sar    ecx,0x9
    c3b2:	mov    esi,r9d
    c3b5:	add    esi,DWORD PTR [r15+0x806c]
    c3bc:	call   b3c0 <vvfat_read>
    c3c1:	test   eax,eax
    c3c3:	js     c530 <commit_one_file+0x3b0>
    c3c9:	mov    rsi,QWORD PTR [rsp+0x8]
    c3ce:	mov    edi,DWORD PTR [rsp+0x14]
    c3d2:	movsxd rdx,r14d
    c3d5:	call   43d0 <qemu_write_ok>
    c3da:	test   eax,eax
    c3dc:	js     c55c <commit_one_file+0x3dc>
    c3e2:	add    r12d,r14d
    c3e5:	mov    r9d,ebx
    c3e8:	cmp    r13d,r12d
    c3eb:	jbe    c4b0 <commit_one_file+0x330>
    c3f1:	mov    eax,DWORD PTR [r15+0x8058]
    c3f8:	mov    r10d,r13d
    c3fb:	sub    r10d,r12d
    c3fe:	cmp    r10d,eax
    c401:	cmovbe eax,r10d
    c405:	mov    r14d,eax
    c408:	mov    eax,DWORD PTR [r15+0x8068]
    c40f:	cmp    eax,r9d
    c412:	ja     c360 <commit_one_file+0x1e0>
    c418:	mov    eax,DWORD PTR [r15+0x800c]
    c41f:	mov    rdx,QWORD PTR [r15+0x80b8]
    c426:	cmp    eax,0x20
    c429:	je     c458 <commit_one_file+0x2d8>
    c42b:	cmp    eax,0x10
    c42e:	je     c468 <commit_one_file+0x2e8>
    c430:	lea    eax,[r9+r9*2]
    c434:	lea    ecx,[r9*4+0x0]
    c43c:	shr    eax,1
    c43e:	and    ecx,0x4
    c441:	movzx  ebx,WORD PTR [rdx+rax*1]
    c445:	sar    ebx,cl
    c447:	and    ebx,0xfff
    c44d:	jmp    c370 <commit_one_file+0x1f0>
    c452:	nop    WORD PTR [rax+rax*1+0x0]
    c458:	mov    eax,r9d
    c45b:	mov    ebx,DWORD PTR [rdx+rax*4]
    c45e:	jmp    c370 <commit_one_file+0x1f0>
    c463:	nop    DWORD PTR [rax+rax*1+0x0]
    c468:	mov    eax,r9d
    c46b:	movzx  ebx,WORD PTR [rdx+rax*2]
    c46f:	jmp    c370 <commit_one_file+0x1f0>
    c474:	nop    DWORD PTR [rax+0x0]
    c478:	mov    r9d,DWORD PTR [rdi+r9*4]
    c47c:	jmp    c2c0 <commit_one_file+0x140>
    c481:	nop    DWORD PTR [rax+0x0]
    c488:	xor    ebx,ebx
    c48a:	jmp    c264 <commit_one_file+0xe4>
    c48f:	nop
    c490:	movzx  r9d,WORD PTR [rdi+r9*2]
    c495:	jmp    c2c0 <commit_one_file+0x140>
    c49a:	nop    WORD PTR [rax+rax*1+0x0]
    c4a0:	cmp    edx,ebp
    c4a2:	ja     c24c <commit_one_file+0xcc>
    c4a8:	mov    r13d,ecx
    c4ab:	jmp    c243 <commit_one_file+0xc3>
    c4b0:	mov    ebx,DWORD PTR [rsp+0x14]
    c4b4:	mov    esi,r13d
    c4b7:	mov    edi,ebx
    c4b9:	call   32a0 <ftruncate64@plt>
    c4be:	mov    edi,ebx
    c4c0:	call   3040 <close@plt>
    c4c5:	mov    rdi,QWORD PTR [rsp+0x8]
    c4ca:	call   49c0 <qemu_free>
    c4cf:	mov    edx,DWORD PTR [rsp+0x18]
    c4d3:	add    rsp,0x28
    c4d7:	mov    esi,ebp
    c4d9:	pop    rbx
    c4da:	mov    rdi,r15
    c4dd:	pop    rbp
    c4de:	pop    r12
    c4e0:	pop    r13
    c4e2:	pop    r14
    c4e4:	pop    r15
    c4e6:	jmp    bbe0 <commit_mappings>
    c4eb:	mov    edi,DWORD PTR [rsp+0x14]
    c4ef:	mov    ebx,r12d
    c4f2:	xor    edx,edx
    c4f4:	mov    rsi,rbx
    c4f7:	mov    DWORD PTR [rsp+0x1c],r9d
    c4fc:	call   33f0 <lseek64@plt>
    c501:	cmp    rbx,rax
    c504:	mov    r9d,DWORD PTR [rsp+0x1c]
    c509:	je     c3f1 <commit_one_file+0x271>
    c50f:	mov    edi,DWORD PTR [rsp+0x14]
    c513:	call   3040 <close@plt>
    c518:	mov    rdi,QWORD PTR [rsp+0x8]
    c51d:	call   49c0 <qemu_free>
    c522:	mov    edx,0xfffffffd
    c527:	jmp    c54b <commit_one_file+0x3cb>
    c529:	nop    DWORD PTR [rax+0x0]
    c530:	mov    edi,DWORD PTR [rsp+0x14]
    c534:	mov    DWORD PTR [rsp+0x18],eax
    c538:	call   3040 <close@plt>
    c53d:	mov    rdi,QWORD PTR [rsp+0x8]
    c542:	call   49c0 <qemu_free>
    c547:	mov    edx,DWORD PTR [rsp+0x18]
    c54b:	add    rsp,0x28
    c54f:	mov    eax,edx
    c551:	pop    rbx
    c552:	pop    rbp
    c553:	pop    r12
    c555:	pop    r13
    c557:	pop    r14
    c559:	pop    r15
    c55b:	ret    
    c55c:	mov    edi,DWORD PTR [rsp+0x14]
    c560:	call   3040 <close@plt>
    c565:	mov    rdi,QWORD PTR [rsp+0x8]
    c56a:	call   49c0 <qemu_free>
    c56f:	mov    edx,0xfffffffe
    c574:	jmp    c54b <commit_one_file+0x3cb>
    c576:	call   2e80 <__errno_location@plt>
    c57b:	mov    ebp,DWORD PTR [rax]
    c57d:	mov    edi,ebp
    c57f:	call   3430 <strerror@plt>
    c584:	mov    rcx,QWORD PTR [rbx+0x18]
    c588:	mov    rdi,QWORD PTR [rip+0x21af71]        # 227500 <stderr@@GLIBC_2.2.5>
    c58f:	lea    rdx,[rip+0x12a62]        # 1eff8 <desc_template.13816+0x478>
    c596:	mov    r8,rax
    c599:	mov    r9d,ebp
    c59c:	mov    esi,0x1
    c5a1:	xor    eax,eax
    c5a3:	call   3400 <__fprintf_chk@plt>
    c5a8:	mov    rdi,QWORD PTR [rsp+0x8]
    c5ad:	call   49c0 <qemu_free>
    c5b2:	mov    edx,DWORD PTR [rsp+0x14]
    c5b6:	jmp    c54b <commit_one_file+0x3cb>
    c5b8:	lea    rcx,[rip+0x131c1]        # 1f780 <__PRETTY_FUNCTION__.14126>
    c5bf:	lea    rsi,[rip+0x127c2]        # 1ed88 <desc_template.13816+0x208>
    c5c6:	lea    rdi,[rip+0x12d9f]        # 1f36c <desc_template.13816+0x7ec>
    c5cd:	mov    edx,0x465
    c5d2:	call   3000 <__assert_fail@plt>
    c5d7:	lea    rcx,[rip+0x131a2]        # 1f780 <__PRETTY_FUNCTION__.14126>
    c5de:	lea    rsi,[rip+0x127a3]        # 1ed88 <desc_template.13816+0x208>
    c5e5:	lea    rdi,[rip+0x12d46]        # 1f332 <desc_template.13816+0x7b2>
    c5ec:	mov    edx,0x45a
    c5f1:	call   3000 <__assert_fail@plt>
    c5f6:	lea    rcx,[rip+0x13173]        # 1f770 <__PRETTY_FUNCTION__.13707>
    c5fd:	lea    rsi,[rip+0x12784]        # 1ed88 <desc_template.13816+0x208>
    c604:	lea    rdi,[rip+0x12d13]        # 1f31e <desc_template.13816+0x79e>
    c60b:	mov    edx,0x60
    c610:	call   3000 <__assert_fail@plt>
    c615:	lea    rcx,[rip+0x13164]        # 1f780 <__PRETTY_FUNCTION__.14126>
    c61c:	lea    rsi,[rip+0x12765]        # 1ed88 <desc_template.13816+0x208>
    c623:	lea    rdi,[rip+0x12d26]        # 1f350 <desc_template.13816+0x7d0>
    c62a:	mov    edx,0x45c
    c62f:	call   3000 <__assert_fail@plt>
    c634:	lea    rcx,[rip+0x13025]        # 1f660 <__PRETTY_FUNCTION__.14487>
    c63b:	lea    rsi,[rip+0x12746]        # 1ed88 <desc_template.13816+0x208>
    c642:	lea    rdi,[rip+0x129cf]        # 1f018 <desc_template.13816+0x498>
    c649:	mov    edx,0x8ce
    c64e:	call   3000 <__assert_fail@plt>
    c653:	lea    rcx,[rip+0x13006]        # 1f660 <__PRETTY_FUNCTION__.14487>
    c65a:	lea    rsi,[rip+0x12727]        # 1ed88 <desc_template.13816+0x208>
    c661:	lea    rdi,[rip+0x12970]        # 1efd8 <desc_template.13816+0x458>
    c668:	mov    edx,0x8b2
    c66d:	call   3000 <__assert_fail@plt>
    c672:	lea    rcx,[rip+0x13127]        # 1f7a0 <__PRETTY_FUNCTION__.14134>
    c679:	lea    rsi,[rip+0x12708]        # 1ed88 <desc_template.13816+0x208>
    c680:	lea    rdi,[rip+0x127a1]        # 1ee28 <desc_template.13816+0x2a8>
    c687:	mov    edx,0x477
    c68c:	call   3000 <__assert_fail@plt>
    c691:	lea    rcx,[rip+0x12fc8]        # 1f660 <__PRETTY_FUNCTION__.14487>
    c698:	lea    rsi,[rip+0x126e9]        # 1ed88 <desc_template.13816+0x208>
    c69f:	lea    rdi,[rip+0x12cf5]        # 1f39b <desc_template.13816+0x81b>
    c6a6:	mov    edx,0x8b1
    c6ab:	call   3000 <__assert_fail@plt>

000000000000c6b0 <commit_direntries>:
    c6b0:	push   r15
    c6b2:	push   r14
    c6b4:	push   r13
    c6b6:	push   r12
    c6b8:	push   rbp
    c6b9:	push   rbx
    c6ba:	sub    rsp,0x18
    c6be:	mov    r9d,DWORD PTR [rdi+0x8034]
    c6c5:	mov    DWORD PTR [rsp+0xc],esi
    c6c9:	cmp    esi,r9d
    c6cc:	jae    cc1c <commit_direntries+0x56c>
    c6d2:	mov    eax,DWORD PTR [rsp+0xc]
    c6d6:	mov    rbx,rdi
    c6d9:	xor    r8d,r8d
    c6dc:	mov    edi,eax
    c6de:	imul   edi,DWORD PTR [rbx+0x8038]
    c6e5:	add    rdi,QWORD PTR [rbx+0x8028]
    c6ec:	test   eax,eax
    c6ee:	je     c700 <commit_direntries+0x50>
    c6f0:	movzx  r8d,WORD PTR [rdi+0x14]
    c6f5:	movzx  eax,WORD PTR [rdi+0x1a]
    c6f9:	shl    r8d,0x10
    c6fd:	or     r8d,eax
    c700:	mov    r11d,DWORD PTR [rbx+0x804c]
    c707:	xor    r10d,r10d
    c70a:	mov    esi,r11d
    c70d:	jmp    c72b <commit_direntries+0x7b>
    c70f:	nop
    c710:	cmp    esi,eax
    c712:	jne    c71c <commit_direntries+0x6c>
    c714:	test   esi,esi
    c716:	jne    cd3e <commit_direntries+0x68e>
    c71c:	cmp    esi,eax
    c71e:	je     c780 <commit_direntries+0xd0>
    c720:	mov    esi,eax
    c722:	cmp    r10d,esi
    c725:	jg     cd00 <commit_direntries+0x650>
    c72b:	lea    ecx,[r10+rsi*1]
    c72f:	mov    eax,ecx
    c731:	shr    eax,0x1f
    c734:	add    eax,ecx
    c736:	sar    eax,1
    c738:	cmp    r11d,eax
    c73b:	mov    r14d,eax
    c73e:	jbe    cc1c <commit_direntries+0x56c>
    c744:	mov    r12d,DWORD PTR [rbx+0x8050]
    c74b:	mov    ecx,eax
    c74d:	mov    rbp,QWORD PTR [rbx+0x8040]
    c754:	imul   ecx,r12d
    c758:	add    rcx,rbp
    c75b:	mov    r15d,DWORD PTR [rcx]
    c75e:	mov    ecx,DWORD PTR [rcx+0x4]
    c761:	cmp    r15d,ecx
    c764:	jae    cd1f <commit_direntries+0x66f>
    c76a:	cmp    r8d,r15d
    c76d:	jbe    c710 <commit_direntries+0x60>
    c76f:	cmp    r10d,eax
    c772:	je     c798 <commit_direntries+0xe8>
    c774:	mov    r10d,eax
    c777:	jmp    c722 <commit_direntries+0x72>
    c779:	nop    DWORD PTR [rax+0x0]
    c780:	mov    r14d,r10d
    c783:	cmp    r11d,r14d
    c786:	ja     c7a8 <commit_direntries+0xf8>
    c788:	mov    eax,DWORD PTR ds:0x14
    c78f:	ud2    
    c791:	nop    DWORD PTR [rax+0x0]
    c798:	cmp    r8d,ecx
    c79b:	jb     c7a8 <commit_direntries+0xf8>
    c79d:	mov    r14d,esi
    c7a0:	cmp    r11d,r14d
    c7a3:	jbe    c788 <commit_direntries+0xd8>
    c7a5:	nop    DWORD PTR [rax]
    c7a8:	imul   r12d,r14d
    c7ac:	lea    rax,[rbp+r12*1+0x0]
    c7b1:	mov    esi,DWORD PTR [rax]
    c7b3:	cmp    r8d,esi
    c7b6:	jb     c788 <commit_direntries+0xd8>
    c7b8:	cmp    r8d,DWORD PTR [rax+0x4]
    c7bc:	jae    ce22 <commit_direntries+0x772>
    c7c2:	mov    r12d,DWORD PTR [rbx+0x805c]
    c7c9:	mov    ebp,DWORD PTR [rax+0x14]
    c7cc:	shl    r12d,0x4
    c7d0:	test   rdi,rdi
    c7d3:	je     cd87 <commit_direntries+0x6d7>
    c7d9:	cmp    r8d,esi
    c7dc:	jne    cda6 <commit_direntries+0x6f6>
    c7e2:	cmp    ebp,r9d
    c7e5:	jae    cdc5 <commit_direntries+0x715>
    c7eb:	test   BYTE PTR [rax+0x20],0x4
    c7ef:	je     cde4 <commit_direntries+0x734>
    c7f5:	mov    ecx,DWORD PTR [rsp+0xc]
    c7f9:	test   ecx,ecx
    c7fb:	je     c830 <commit_direntries+0x180>
    c7fd:	test   BYTE PTR [rdi+0xb],0x10
    c801:	je     c808 <commit_direntries+0x158>
    c803:	cmp    BYTE PTR [rdi],0xe5
    c806:	jne    c830 <commit_direntries+0x180>
    c808:	lea    rcx,[rip+0x12e81]        # 1f690 <__PRETTY_FUNCTION__.14459>
    c80f:	lea    rsi,[rip+0x12572]        # 1ed88 <desc_template.13816+0x208>
    c816:	lea    rdi,[rip+0x128db]        # 1f0f8 <desc_template.13816+0x578>
    c81d:	mov    edx,0x86a
    c822:	call   3000 <__assert_fail@plt>
    c827:	nop    WORD PTR [rax+rax*1+0x0]
    c830:	test   r8d,r8d
    c833:	mov    DWORD PTR [rax+0x10],edx
    c836:	je     c9a0 <commit_direntries+0x2f0>
    c83c:	mov    eax,DWORD PTR [rbx+0x8078]
    c842:	mov    ecx,r8d
    c845:	xor    edi,edi
    c847:	lea    r9d,[rax-0x8]
    c84b:	nop    DWORD PTR [rax+rax*1+0x0]
    c850:	cmp    ecx,r9d
    c853:	ja     c896 <commit_direntries+0x1e6>
    c855:	mov    edx,DWORD PTR [rbx+0x800c]
    c85b:	add    edi,0x1
    c85e:	cmp    edx,0x20
    c861:	je     c950 <commit_direntries+0x2a0>
    c867:	cmp    edx,0x10
    c86a:	je     c978 <commit_direntries+0x2c8>
    c870:	lea    edx,[rcx+rcx*2]
    c873:	mov    r10,QWORD PTR [rbx+0x8010]
    c87a:	shl    ecx,0x2
    c87d:	and    ecx,0x4
    c880:	shr    edx,1
    c882:	movzx  edx,WORD PTR [r10+rdx*1]
    c887:	sar    edx,cl
    c889:	mov    ecx,edx
    c88b:	and    ecx,0xfff
    c891:	cmp    ecx,r9d
    c894:	jbe    c855 <commit_direntries+0x1a5>
    c896:	cmp    esi,r9d
    c899:	ja     ccc0 <commit_direntries+0x610>
    c89f:	mov    edx,DWORD PTR [rbx+0x8068]
    c8a5:	mov    DWORD PTR [rsp+0x8],0x0
    c8ad:	jmp    c8be <commit_direntries+0x20e>
    c8af:	nop
    c8b0:	add    esi,0x1
    c8b3:	cmp    edx,esi
    c8b5:	cmove  rsi,rax
    c8b9:	cmp    r9d,esi
    c8bc:	jb     c90a <commit_direntries+0x25a>
    c8be:	add    DWORD PTR [rsp+0x8],0x1
    c8c3:	cmp    edx,esi
    c8c5:	ja     c8b0 <commit_direntries+0x200>
    c8c7:	mov    ecx,DWORD PTR [rbx+0x800c]
    c8cd:	mov    r10,QWORD PTR [rbx+0x80b8]
    c8d4:	cmp    ecx,0x20
    c8d7:	je     cc80 <commit_direntries+0x5d0>
    c8dd:	cmp    ecx,0x10
    c8e0:	je     ccb6 <commit_direntries+0x606>
    c8e6:	lea    ecx,[rsi+rsi*2]
    c8e9:	shr    ecx,1
    c8eb:	movzx  r10d,WORD PTR [r10+rcx*1]
    c8f0:	lea    ecx,[rsi*4+0x0]
    c8f7:	and    ecx,0x4
    c8fa:	mov    esi,r10d
    c8fd:	sar    esi,cl
    c8ff:	and    esi,0xfff
    c905:	cmp    r9d,esi
    c908:	jae    c8be <commit_direntries+0x20e>
    c90a:	mov    esi,DWORD PTR [rsp+0x8]
    c90e:	cmp    edi,esi
    c910:	jge    ccc8 <commit_direntries+0x618>
    c916:	sub    esi,edi
    c918:	mov    DWORD PTR [rsp+0x4],r8d
    c91d:	imul   edi,r12d
    c921:	mov    edx,esi
    c923:	imul   edx,r12d
    c927:	lea    esi,[rdi+rbp*1]
    c92a:	mov    rdi,rbx
    c92d:	call   b140 <insert_direntries>
    c932:	test   rax,rax
    c935:	je     cd5d <commit_direntries+0x6ad>
    c93b:	mov    eax,DWORD PTR [rbx+0x8078]
    c941:	mov    r8d,DWORD PTR [rsp+0x4]
    c946:	jmp    c9b0 <commit_direntries+0x300>
    c948:	nop    DWORD PTR [rax+rax*1+0x0]
    c950:	cmp    ecx,DWORD PTR [rbx+0x801c]
    c956:	jae    cc1c <commit_direntries+0x56c>
    c95c:	imul   ecx,DWORD PTR [rbx+0x8020]
    c963:	mov    rdx,QWORD PTR [rbx+0x8010]
    c96a:	mov    ecx,DWORD PTR [rdx+rcx*1]
    c96d:	jmp    c850 <commit_direntries+0x1a0>
    c972:	nop    WORD PTR [rax+rax*1+0x0]
    c978:	cmp    ecx,DWORD PTR [rbx+0x801c]
    c97e:	jae    cc1c <commit_direntries+0x56c>
    c984:	imul   ecx,DWORD PTR [rbx+0x8020]
    c98b:	mov    rdx,QWORD PTR [rbx+0x8010]
    c992:	movzx  ecx,WORD PTR [rdx+rcx*1]
    c996:	jmp    c850 <commit_direntries+0x1a0>
    c99b:	nop    DWORD PTR [rax+rax*1+0x0]
    c9a0:	mov    eax,DWORD PTR [rbx+0x8068]
    c9a6:	mov    DWORD PTR [rsp+0x8],eax
    c9aa:	mov    eax,DWORD PTR [rbx+0x8078]
    c9b0:	lea    r14,[rip+0x129fb]        # 1f3b2 <desc_template.13816+0x832>
    c9b7:	mov    esi,eax
    c9b9:	mov    r15d,r8d
    c9bc:	mov    r13d,ebp
    c9bf:	nop
    c9c0:	lea    eax,[rsi-0x8]
    c9c3:	cmp    r15d,eax
    c9c6:	ja     ca66 <commit_direntries+0x3b6>
    c9cc:	cmp    r13d,DWORD PTR [rbx+0x8034]
    c9d3:	jae    cc1c <commit_direntries+0x56c>
    c9d9:	mov    ecx,DWORD PTR [rbx+0x805c]
    c9df:	mov    edx,r13d
    c9e2:	mov    rdi,QWORD PTR [rbx]
    c9e5:	imul   edx,DWORD PTR [rbx+0x8038]
    c9ec:	mov    DWORD PTR [rsp+0x4],r8d
    c9f1:	mov    esi,ecx
    c9f3:	add    rdx,QWORD PTR [rbx+0x8028]
    c9fa:	imul   esi,r15d
    c9fe:	add    esi,DWORD PTR [rbx+0x806c]
    ca04:	call   b3c0 <vvfat_read>
    ca09:	test   eax,eax
    ca0b:	mov    r9d,eax
    ca0e:	jne    cc6e <commit_direntries+0x5be>
    ca14:	mov    rsi,QWORD PTR [rbx+0x8028]
    ca1b:	mov    ecx,0x4
    ca20:	mov    rdi,r14
    ca23:	mov    r8d,DWORD PTR [rsp+0x4]
    ca28:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    ca2a:	seta   al
    ca2d:	sbb    al,0x0
    ca2f:	test   al,al
    ca31:	jne    cd68 <commit_direntries+0x6b8>
    ca37:	mov    eax,DWORD PTR [rbx+0x8068]
    ca3d:	add    r13d,r12d
    ca40:	mov    esi,DWORD PTR [rbx+0x8078]
    ca46:	cmp    r15d,eax
    ca49:	jae    cb68 <commit_direntries+0x4b8>
    ca4f:	add    r15d,0x1
    ca53:	cmp    eax,r15d
    ca56:	lea    eax,[rsi-0x8]
    ca59:	cmove  r15d,esi
    ca5d:	cmp    r15d,eax
    ca60:	jbe    c9cc <commit_direntries+0x31c>
    ca66:	mov    edx,DWORD PTR [rsp+0xc]
    ca6a:	mov    esi,r8d
    ca6d:	mov    rdi,rbx
    ca70:	mov    DWORD PTR [rsp+0x4],r8d
    ca75:	call   bbe0 <commit_mappings>
    ca7a:	test   eax,eax
    ca7c:	mov    r9d,eax
    ca7f:	jne    cc6e <commit_direntries+0x5be>
    ca85:	imul   r12d,DWORD PTR [rsp+0x8]
    ca8b:	test   r12d,r12d
    ca8e:	jle    cc6e <commit_direntries+0x5be>
    ca94:	cmp    ebp,DWORD PTR [rbx+0x8034]
    ca9a:	mov    r8d,DWORD PTR [rsp+0x4]
    ca9f:	jae    cc1c <commit_direntries+0x56c>
    caa5:	lea    r12d,[r12+rbp*1-0x1]
    caaa:	nop    WORD PTR [rax+rax*1+0x0]
    cab0:	mov    eax,ebp
    cab2:	imul   eax,DWORD PTR [rbx+0x8038]
    cab9:	add    rax,QWORD PTR [rbx+0x8028]
    cac0:	movzx  edx,BYTE PTR [rax]
    cac3:	movzx  eax,BYTE PTR [rax+0xb]
    cac7:	test   al,0x10
    cac9:	je     cc08 <commit_direntries+0x558>
    cacf:	cmp    dl,0xe5
    cad2:	je     cc08 <commit_direntries+0x558>
    cad8:	cmp    al,0x28
    cada:	jne    cc60 <commit_direntries+0x5b0>
    cae0:	mov    esi,DWORD PTR [rbx+0x804c]
    cae6:	xor    r13d,r13d
    cae9:	mov    r10d,esi
    caec:	jmp    cb13 <commit_direntries+0x463>
    caee:	xchg   ax,ax
    caf0:	cmp    r10d,eax
    caf3:	jne    cafe <commit_direntries+0x44e>
    caf5:	test   r10d,r10d
    caf8:	jne    cd3e <commit_direntries+0x68e>
    cafe:	cmp    r10d,eax
    cb01:	je     cc90 <commit_direntries+0x5e0>
    cb07:	mov    r10d,eax
    cb0a:	cmp    r13d,r10d
    cb0d:	jg     cd00 <commit_direntries+0x650>
    cb13:	lea    edx,[r10+r13*1]
    cb17:	mov    eax,edx
    cb19:	shr    eax,0x1f
    cb1c:	add    eax,edx
    cb1e:	sar    eax,1
    cb20:	cmp    esi,eax
    cb22:	mov    r14d,eax
    cb25:	jbe    cc1c <commit_direntries+0x56c>
    cb2b:	mov    edx,DWORD PTR [rbx+0x8050]
    cb31:	mov    ecx,eax
    cb33:	mov    rdi,QWORD PTR [rbx+0x8040]
    cb3a:	imul   ecx,edx
    cb3d:	add    rcx,rdi
    cb40:	mov    r11d,DWORD PTR [rcx]
    cb43:	mov    ecx,DWORD PTR [rcx+0x4]
    cb46:	cmp    r11d,ecx
    cb49:	jae    cd1f <commit_direntries+0x66f>
    cb4f:	cmp    r8d,r11d
    cb52:	jbe    caf0 <commit_direntries+0x440>
    cb54:	cmp    r13d,eax
    cb57:	je     cca8 <commit_direntries+0x5f8>
    cb5d:	mov    r13d,eax
    cb60:	jmp    cb0a <commit_direntries+0x45a>
    cb62:	nop    WORD PTR [rax+rax*1+0x0]
    cb68:	mov    edx,DWORD PTR [rbx+0x800c]
    cb6e:	mov    rcx,QWORD PTR [rbx+0x80b8]
    cb75:	cmp    edx,0x20
    cb78:	je     cc40 <commit_direntries+0x590>
    cb7e:	cmp    edx,0x10
    cb81:	je     cc50 <commit_direntries+0x5a0>
    cb87:	lea    eax,[r15+r15*2]
    cb8b:	shr    eax,1
    cb8d:	movzx  eax,WORD PTR [rcx+rax*1]
    cb91:	lea    ecx,[r15*4+0x0]
    cb99:	and    ecx,0x4
    cb9c:	sar    eax,cl
    cb9e:	mov    r15d,eax
    cba1:	and    r15d,0xfff
    cba8:	jmp    c9c0 <commit_direntries+0x310>
    cbad:	nop    DWORD PTR [rax]
    cbb0:	imul   r14d,edx
    cbb4:	lea    rcx,[rdi+r14*1]
    cbb8:	cmp    r8d,DWORD PTR [rcx]
    cbbb:	jb     cc9c <commit_direntries+0x5ec>
    cbc1:	cmp    r8d,DWORD PTR [rcx+0x4]
    cbc5:	jae    ce22 <commit_direntries+0x772>
    cbcb:	test   BYTE PTR [rcx+0x20],0x4
    cbcf:	je     ce03 <commit_direntries+0x753>
    cbd5:	mov    DWORD PTR [rsp+0x8],r9d
    cbda:	mov    DWORD PTR [rsp+0x4],r8d
    cbdf:	call   bb80 <array_index.isra.6>
    cbe4:	mov    esi,ebp
    cbe6:	mov    edx,eax
    cbe8:	mov    rdi,rbx
    cbeb:	call   c6b0 <commit_direntries>
    cbf0:	test   eax,eax
    cbf2:	mov    r8d,DWORD PTR [rsp+0x4]
    cbf7:	mov    r9d,DWORD PTR [rsp+0x8]
    cbfc:	jne    ccf8 <commit_direntries+0x648>
    cc02:	nop    WORD PTR [rax+rax*1+0x0]
    cc08:	cmp    ebp,r12d
    cc0b:	je     cc6e <commit_direntries+0x5be>
    cc0d:	add    ebp,0x1
    cc10:	cmp    DWORD PTR [rbx+0x8034],ebp
    cc16:	ja     cab0 <commit_direntries+0x400>
    cc1c:	lea    rcx,[rip+0x12b4d]        # 1f770 <__PRETTY_FUNCTION__.13707>
    cc23:	lea    rsi,[rip+0x1215e]        # 1ed88 <desc_template.13816+0x208>
    cc2a:	lea    rdi,[rip+0x126ed]        # 1f31e <desc_template.13816+0x79e>
    cc31:	mov    edx,0x60
    cc36:	call   3000 <__assert_fail@plt>
    cc3b:	nop    DWORD PTR [rax+rax*1+0x0]
    cc40:	mov    r10d,r15d
    cc43:	mov    r15d,DWORD PTR [rcx+r10*4]
    cc47:	jmp    c9c0 <commit_direntries+0x310>
    cc4c:	nop    DWORD PTR [rax+0x0]
    cc50:	mov    r10d,r15d
    cc53:	movzx  r15d,WORD PTR [rcx+r10*2]
    cc58:	jmp    c9c0 <commit_direntries+0x310>
    cc5d:	nop    DWORD PTR [rax]
    cc60:	cmp    dl,0x2e
    cc63:	jne    cae0 <commit_direntries+0x430>
    cc69:	cmp    ebp,r12d
    cc6c:	jne    cc0d <commit_direntries+0x55d>
    cc6e:	add    rsp,0x18
    cc72:	mov    eax,r9d
    cc75:	pop    rbx
    cc76:	pop    rbp
    cc77:	pop    r12
    cc79:	pop    r13
    cc7b:	pop    r14
    cc7d:	pop    r15
    cc7f:	ret    
    cc80:	mov    esi,DWORD PTR [r10+rsi*4]
    cc84:	jmp    c8b9 <commit_direntries+0x209>
    cc89:	nop    DWORD PTR [rax+0x0]
    cc90:	mov    r14d,r13d
    cc93:	cmp    esi,r14d
    cc96:	ja     cbb0 <commit_direntries+0x500>
    cc9c:	mov    eax,DWORD PTR ds:0x20
    cca3:	ud2    
    cca5:	nop    DWORD PTR [rax]
    cca8:	cmp    r8d,ecx
    ccab:	jb     cbb0 <commit_direntries+0x500>
    ccb1:	mov    r14d,r10d
    ccb4:	jmp    cc93 <commit_direntries+0x5e3>
    ccb6:	movzx  esi,WORD PTR [r10+rsi*2]
    ccbb:	jmp    c8b9 <commit_direntries+0x209>
    ccc0:	mov    DWORD PTR [rsp+0x8],0x0
    ccc8:	mov    esi,DWORD PTR [rsp+0x8]
    cccc:	cmp    edi,esi
    ccce:	jle    c9b0 <commit_direntries+0x300>
    ccd4:	mov    eax,esi
    ccd6:	sub    edi,esi
    ccd8:	mov    DWORD PTR [rsp+0x4],r8d
    ccdd:	imul   eax,r12d
    cce1:	mov    edx,edi
    cce3:	mov    rdi,rbx
    cce6:	imul   edx,r12d
    ccea:	mov    esi,eax
    ccec:	add    esi,ebp
    ccee:	call   b210 <remove_direntries>
    ccf3:	jmp    c93b <commit_direntries+0x28b>
    ccf8:	mov    r9d,eax
    ccfb:	jmp    cc6e <commit_direntries+0x5be>
    cd00:	lea    rcx,[rip+0x12a79]        # 1f780 <__PRETTY_FUNCTION__.14126>
    cd07:	lea    rsi,[rip+0x1207a]        # 1ed88 <desc_template.13816+0x208>
    cd0e:	lea    rdi,[rip+0x12657]        # 1f36c <desc_template.13816+0x7ec>
    cd15:	mov    edx,0x465
    cd1a:	call   3000 <__assert_fail@plt>
    cd1f:	lea    rcx,[rip+0x12a5a]        # 1f780 <__PRETTY_FUNCTION__.14126>
    cd26:	lea    rsi,[rip+0x1205b]        # 1ed88 <desc_template.13816+0x208>
    cd2d:	lea    rdi,[rip+0x125fe]        # 1f332 <desc_template.13816+0x7b2>
    cd34:	mov    edx,0x45a
    cd39:	call   3000 <__assert_fail@plt>
    cd3e:	lea    rcx,[rip+0x12a3b]        # 1f780 <__PRETTY_FUNCTION__.14126>
    cd45:	lea    rsi,[rip+0x1203c]        # 1ed88 <desc_template.13816+0x208>
    cd4c:	lea    rdi,[rip+0x125fd]        # 1f350 <desc_template.13816+0x7d0>
    cd53:	mov    edx,0x45c
    cd58:	call   3000 <__assert_fail@plt>
    cd5d:	mov    r9d,0xffffffff
    cd63:	jmp    cc6e <commit_direntries+0x5be>
    cd68:	lea    rcx,[rip+0x12921]        # 1f690 <__PRETTY_FUNCTION__.14459>
    cd6f:	lea    rsi,[rip+0x12012]        # 1ed88 <desc_template.13816+0x208>
    cd76:	lea    rdi,[rip+0x1234b]        # 1f0c8 <desc_template.13816+0x548>
    cd7d:	mov    edx,0x88b
    cd82:	call   3000 <__assert_fail@plt>
    cd87:	lea    rcx,[rip+0x12902]        # 1f690 <__PRETTY_FUNCTION__.14459>
    cd8e:	lea    rsi,[rip+0x11ff3]        # 1ed88 <desc_template.13816+0x208>
    cd95:	lea    rdi,[rip+0x1260d]        # 1f3a9 <desc_template.13816+0x829>
    cd9c:	mov    edx,0x865
    cda1:	call   3000 <__assert_fail@plt>
    cda6:	lea    rcx,[rip+0x128e3]        # 1f690 <__PRETTY_FUNCTION__.14459>
    cdad:	lea    rsi,[rip+0x11fd4]        # 1ed88 <desc_template.13816+0x208>
    cdb4:	lea    rdi,[rip+0x121a5]        # 1ef60 <desc_template.13816+0x3e0>
    cdbb:	mov    edx,0x867
    cdc0:	call   3000 <__assert_fail@plt>
    cdc5:	lea    rcx,[rip+0x128c4]        # 1f690 <__PRETTY_FUNCTION__.14459>
    cdcc:	lea    rsi,[rip+0x11fb5]        # 1ed88 <desc_template.13816+0x208>
    cdd3:	lea    rdi,[rip+0x12296]        # 1f070 <desc_template.13816+0x4f0>
    cdda:	mov    edx,0x868
    cddf:	call   3000 <__assert_fail@plt>
    cde4:	lea    rcx,[rip+0x128a5]        # 1f690 <__PRETTY_FUNCTION__.14459>
    cdeb:	lea    rsi,[rip+0x11f96]        # 1ed88 <desc_template.13816+0x208>
    cdf2:	lea    rdi,[rip+0x122af]        # 1f0a8 <desc_template.13816+0x528>
    cdf9:	mov    edx,0x869
    cdfe:	call   3000 <__assert_fail@plt>
    ce03:	lea    rcx,[rip+0x12886]        # 1f690 <__PRETTY_FUNCTION__.14459>
    ce0a:	lea    rsi,[rip+0x11f77]        # 1ed88 <desc_template.13816+0x208>
    ce11:	lea    rdi,[rip+0x12290]        # 1f0a8 <desc_template.13816+0x528>
    ce18:	mov    edx,0x898
    ce1d:	call   3000 <__assert_fail@plt>
    ce22:	lea    rcx,[rip+0x12977]        # 1f7a0 <__PRETTY_FUNCTION__.14134>
    ce29:	lea    rsi,[rip+0x11f58]        # 1ed88 <desc_template.13816+0x208>
    ce30:	lea    rdi,[rip+0x11ff1]        # 1ee28 <desc_template.13816+0x2a8>
    ce37:	mov    edx,0x477
    ce3c:	call   3000 <__assert_fail@plt>
    ce41:	nop    DWORD PTR [rax+rax*1+0x0]
    ce46:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000000ce50 <parse_long_name>:
    ce50:	cmp    BYTE PTR [rsi+0xb],0xf
    ce54:	push   r12
    ce56:	mov    r12d,0x1
    ce5c:	push   rbp
    ce5d:	push   rbx
    ce5e:	je     ce70 <parse_long_name+0x20>
    ce60:	mov    eax,r12d
    ce63:	pop    rbx
    ce64:	pop    rbp
    ce65:	pop    r12
    ce67:	ret    
    ce68:	nop    DWORD PTR [rax+rax*1+0x0]
    ce70:	movzx  edx,BYTE PTR [rsi]
    ce73:	mov    eax,edx
    ce75:	and    eax,0x3f
    ce78:	and    edx,0x40
    ce7b:	jne    cf70 <parse_long_name+0x120>
    ce81:	mov    ebx,DWORD PTR [rdi+0x33c]
    ce87:	lea    edx,[rbx-0x1]
    ce8a:	cmp    edx,eax
    ce8c:	mov    DWORD PTR [rdi+0x33c],edx
    ce92:	jne    cfe1 <parse_long_name+0x191>
    ce98:	movzx  edx,BYTE PTR [rsi+0xd]
    ce9c:	cmp    edx,DWORD PTR [rdi+0x334]
    cea2:	jne    cfec <parse_long_name+0x19c>
    cea8:	cmp    BYTE PTR [rsi+0xc],0x0
    ceac:	jne    cfd6 <parse_long_name+0x186>
    ceb2:	cmp    BYTE PTR [rsi+0x1a],0x0
    ceb6:	jne    cfd6 <parse_long_name+0x186>
    cebc:	cmp    BYTE PTR [rsi+0x1b],0x0
    cec0:	jne    cfd6 <parse_long_name+0x186>
    cec6:	sub    eax,0x1
    cec9:	lea    edx,[rax+rax*2]
    cecc:	lea    ebp,[rax+rdx*4]
    cecf:	mov    eax,0x1
    ced4:	lea    r9d,[rbp+0xd]
    ced8:	mov    edx,ebp
    ceda:	jmp    cef7 <parse_long_name+0xa7>
    cedc:	nop    DWORD PTR [rax+0x0]
    cee0:	movzx  r8d,BYTE PTR [rsi+r8*1]
    cee5:	movsxd rcx,edx
    cee8:	add    edx,0x1
    ceeb:	add    eax,0x2
    ceee:	cmp    r9d,edx
    cef1:	mov    BYTE PTR [rdi+rcx*1],r8b
    cef5:	je     cf3c <parse_long_name+0xec>
    cef7:	cmp    eax,0xb
    cefa:	je     cf98 <parse_long_name+0x148>
    cf00:	cmp    eax,0x1a
    cf03:	je     cfb0 <parse_long_name+0x160>
    cf09:	movsxd r8,eax
    cf0c:	lea    rcx,[r8+0x1]
    cf10:	movzx  ecx,BYTE PTR [rsi+rcx*1]
    cf14:	test   cl,cl
    cf16:	je     cee0 <parse_long_name+0x90>
    cf18:	cmp    cl,0xff
    cf1b:	jne    cfc8 <parse_long_name+0x178>
    cf21:	test   BYTE PTR [rsi],0x40
    cf24:	je     cfc8 <parse_long_name+0x178>
    cf2a:	movsxd rcx,edx
    cf2d:	add    edx,0x1
    cf30:	add    eax,0x2
    cf33:	cmp    r9d,edx
    cf36:	mov    BYTE PTR [rdi+rcx*1],0x0
    cf3a:	jne    cef7 <parse_long_name+0xa7>
    cf3c:	xor    r12d,r12d
    cf3f:	test   BYTE PTR [rsi],0x40
    cf42:	je     ce60 <parse_long_name+0x10>
    cf48:	mov    rbx,rdi
    cf4b:	movsxd rdi,ebp
    cf4e:	add    rdi,rbx
    cf51:	call   2f60 <strlen@plt>
    cf56:	add    ebp,eax
    cf58:	mov    eax,r12d
    cf5b:	mov    DWORD PTR [rbx+0x338],ebp
    cf61:	pop    rbx
    cf62:	pop    rbp
    cf63:	pop    r12
    cf65:	ret    
    cf66:	nop    WORD PTR cs:[rax+rax*1+0x0]
    cf70:	mov    DWORD PTR [rdi+0x33c],eax
    cf76:	movzx  edx,BYTE PTR [rsi+0xd]
    cf7a:	mov    BYTE PTR [rdi],0x0
    cf7d:	mov    DWORD PTR [rdi+0x334],edx
    cf83:	lea    edx,[rax+rax*2]
    cf86:	lea    edx,[rax+rdx*4]
    cf89:	movsxd rdx,edx
    cf8c:	mov    BYTE PTR [rdi+rdx*1],0x0
    cf90:	jmp    cec6 <parse_long_name+0x76>
    cf95:	nop    DWORD PTR [rax]
    cf98:	mov    ecx,0xf
    cf9d:	mov    r8d,0xe
    cfa3:	mov    eax,0xe
    cfa8:	jmp    cf10 <parse_long_name+0xc0>
    cfad:	nop    DWORD PTR [rax]
    cfb0:	mov    ecx,0x1d
    cfb5:	mov    r8d,0x1c
    cfbb:	mov    eax,0x1c
    cfc0:	jmp    cf10 <parse_long_name+0xc0>
    cfc5:	nop    DWORD PTR [rax]
    cfc8:	mov    r12d,0xfffffffc
    cfce:	mov    eax,r12d
    cfd1:	pop    rbx
    cfd2:	pop    rbp
    cfd3:	pop    r12
    cfd5:	ret    
    cfd6:	mov    r12d,0xfffffffd
    cfdc:	jmp    ce60 <parse_long_name+0x10>
    cfe1:	mov    r12d,0xffffffff
    cfe7:	jmp    ce60 <parse_long_name+0x10>
    cfec:	mov    r12d,0xfffffffe
    cff2:	jmp    ce60 <parse_long_name+0x10>
    cff7:	nop    WORD PTR [rax+rax*1+0x0]

000000000000d000 <check_directory_consistency>:
    d000:	push   r15
    d002:	push   r14
    d004:	mov    r14,rdi
    d007:	push   r13
    d009:	push   r12
    d00b:	push   rbp
    d00c:	push   rbx
    d00d:	mov    ebx,esi
    d00f:	sub    rsp,0x13d8
    d016:	mov    edi,DWORD PTR [rdi+0x8058]
    d01c:	mov    DWORD PTR [rsp+0x28],esi
    d020:	mov    QWORD PTR [rsp+0x40],rdx
    d025:	mov    rax,QWORD PTR fs:0x28
    d02e:	mov    QWORD PTR [rsp+0x13c8],rax
    d036:	xor    eax,eax
    d038:	call   49d0 <qemu_malloc>
    d03d:	mov    r8d,DWORD PTR [r14+0x804c]
    d044:	mov    QWORD PTR [rsp+0x10],rax
    d049:	xor    esi,esi
    d04b:	mov    r11d,ebx
    d04e:	mov    ecx,r8d
    d051:	jmp    d072 <check_directory_consistency+0x72>
    d053:	nop    DWORD PTR [rax+rax*1+0x0]
    d058:	cmp    ecx,eax
    d05a:	jne    d064 <check_directory_consistency+0x64>
    d05c:	test   ecx,ecx
    d05e:	jne    e108 <check_directory_consistency+0x1108>
    d064:	cmp    ecx,eax
    d066:	je     d0c0 <check_directory_consistency+0xc0>
    d068:	mov    ecx,eax
    d06a:	cmp    esi,ecx
    d06c:	jg     e0ca <check_directory_consistency+0x10ca>
    d072:	lea    edx,[rsi+rcx*1]
    d075:	mov    eax,edx
    d077:	shr    eax,0x1f
    d07a:	add    eax,edx
    d07c:	sar    eax,1
    d07e:	cmp    r8d,eax
    d081:	mov    r10d,eax
    d084:	jbe    e0ab <check_directory_consistency+0x10ab>
    d08a:	mov    ebp,DWORD PTR [r14+0x8050]
    d091:	mov    r9,QWORD PTR [r14+0x8040]
    d098:	mov    edx,ebp
    d09a:	imul   edx,eax
    d09d:	add    rdx,r9
    d0a0:	mov    edi,DWORD PTR [rdx]
    d0a2:	mov    edx,DWORD PTR [rdx+0x4]
    d0a5:	cmp    edx,edi
    d0a7:	jbe    e0e9 <check_directory_consistency+0x10e9>
    d0ad:	cmp    r11d,edi
    d0b0:	jbe    d058 <check_directory_consistency+0x58>
    d0b2:	cmp    esi,eax
    d0b4:	je     d100 <check_directory_consistency+0x100>
    d0b6:	mov    esi,eax
    d0b8:	jmp    d06a <check_directory_consistency+0x6a>
    d0ba:	nop    WORD PTR [rax+rax*1+0x0]
    d0c0:	mov    r10d,esi
    d0c3:	cmp    r8d,r10d
    d0c6:	ja     d110 <check_directory_consistency+0x110>
    d0c8:	mov    rdi,QWORD PTR [rsp+0x40]
    d0cd:	call   2f60 <strlen@plt>
    d0d2:	cmp    eax,0xfff
    d0d7:	movsxd rbx,eax
    d0da:	jle    dddf <check_directory_consistency+0xddf>
    d0e0:	lea    rcx,[rip+0x12649]        # 1f730 <__PRETTY_FUNCTION__.14337>
    d0e7:	lea    rsi,[rip+0x11c9a]        # 1ed88 <desc_template.13816+0x208>
    d0ee:	lea    rdi,[rip+0x122c2]        # 1f3b7 <desc_template.13816+0x837>
    d0f5:	mov    edx,0x6d2
    d0fa:	call   3000 <__assert_fail@plt>
    d0ff:	nop
    d100:	cmp    DWORD PTR [rsp+0x28],edx
    d104:	jb     d110 <check_directory_consistency+0x110>
    d106:	mov    r10d,ecx
    d109:	cmp    r8d,r10d
    d10c:	jbe    d0c8 <check_directory_consistency+0xc8>
    d10e:	xchg   ax,ax
    d110:	imul   ebp,r10d
    d114:	mov    eax,DWORD PTR [rsp+0x28]
    d118:	add    rbp,r9
    d11b:	cmp    eax,DWORD PTR [rbp+0x0]
    d11e:	jb     d0c8 <check_directory_consistency+0xc8>
    d120:	cmp    eax,DWORD PTR [rbp+0x4]
    d123:	jae    e1e8 <check_directory_consistency+0x11e8>
    d129:	mov    rdi,QWORD PTR [rsp+0x40]
    d12e:	call   2f60 <strlen@plt>
    d133:	cmp    eax,0xfff
    d138:	mov    r12,rax
    d13b:	movsxd rbx,eax
    d13e:	jg     d0e0 <check_directory_consistency+0xe0>
    d140:	mov    r15,QWORD PTR [rsp+0x40]
    d145:	lea    rax,[rsp+0x3c0]
    d14d:	mov    esi,0x1000
    d152:	mov    rdi,rax
    d155:	mov    QWORD PTR [rsp+0x8],rax
    d15a:	mov    rdx,r15
    d15d:	call   45a0 <pstrcpy>
    d162:	movsxd rax,r12d
    d165:	mov    esi,0x2f
    d16a:	mov    BYTE PTR [rsp+rax*1+0x3c0],0x2f
    d172:	lea    eax,[r12+0x1]
    d177:	mov    DWORD PTR [rsp+0x2c],eax
    d17b:	cdqe   
    d17d:	mov    BYTE PTR [rsp+rax*1+0x3c0],0x0
    d185:	mov    r12,QWORD PTR [rbp+0x18]
    d189:	mov    rdi,r12
    d18c:	call   2fe0 <strrchr@plt>
    d191:	lea    rdx,[rax+0x1]
    d195:	test   rax,rax
    d198:	mov    esi,0x2f
    d19d:	mov    rdi,r15
    d1a0:	cmovne r12,rdx
    d1a4:	call   2fe0 <strrchr@plt>
    d1a9:	test   rax,rax
    d1ac:	lea    rsi,[rax+0x1]
    d1b0:	mov    eax,DWORD PTR [rbp+0x20]
    d1b3:	cmove  rsi,r15
    d1b7:	test   al,0x4
    d1b9:	je     e22b <check_directory_consistency+0x122b>
    d1bf:	test   al,0x10
    d1c1:	je     e24a <check_directory_consistency+0x124a>
    d1c7:	and    eax,0xffffffef
    d1ca:	mov    rdi,r12
    d1cd:	mov    DWORD PTR [rbp+0x20],eax
    d1d0:	call   3110 <strcmp@plt>
    d1d5:	test   eax,eax
    d1d7:	jne    d7ae <check_directory_consistency+0x7ae>
    d1dd:	mov    eax,0xfff
    d1e2:	mov    QWORD PTR [rsp+0x3b4],0x100
    d1ee:	mov    DWORD PTR [rsp+0x3bc],0x0
    d1f9:	sub    rax,rbx
    d1fc:	mov    DWORD PTR [rsp],0x0
    d203:	mov    QWORD PTR [rsp+0x30],rbx
    d208:	mov    QWORD PTR [rsp+0x38],rax
    d20d:	movsxd rax,DWORD PTR [rsp+0x28]
    d212:	add    DWORD PTR [rsp],0x1
    d216:	add    rax,QWORD PTR [r14+0x80c0]
    d21d:	test   BYTE PTR [rax],0x3
    d220:	jne    df43 <check_directory_consistency+0xf43>
    d226:	mov    BYTE PTR [rax],0x1
    d229:	mov    esi,DWORD PTR [rsp+0x28]
    d22d:	mov    ecx,DWORD PTR [r14+0x805c]
    d234:	mov    r13,QWORD PTR [rsp+0x10]
    d239:	mov    rdi,QWORD PTR [r14]
    d23c:	imul   esi,ecx
    d23f:	add    esi,DWORD PTR [r14+0x806c]
    d246:	mov    rdx,r13
    d249:	call   b3c0 <vvfat_read>
    d24e:	test   eax,eax
    d250:	jne    df21 <check_directory_consistency+0xf21>
    d256:	mov    edi,DWORD PTR [r14+0x805c]
    d25d:	xor    r12d,r12d
    d260:	mov    eax,edi
    d262:	shl    eax,0x4
    d265:	test   eax,eax
    d267:	je     d3c5 <check_directory_consistency+0x3c5>
    d26d:	nop    DWORD PTR [rax]
    d270:	movzx  edx,BYTE PTR [r13+0xb]
    d275:	cmp    dl,0x28
    d278:	je     d3af <check_directory_consistency+0x3af>
    d27e:	movzx  ecx,BYTE PTR [r13+0x0]
    d283:	test   cl,cl
    d285:	sete   al
    d288:	cmp    cl,0xe5
    d28b:	sete   sil
    d28f:	or     eax,esi
    d291:	cmp    dl,0xf
    d294:	je     d780 <check_directory_consistency+0x780>
    d29a:	test   al,al
    d29c:	jne    d3af <check_directory_consistency+0x3af>
    d2a2:	cmp    cl,0x2e
    d2a5:	je     d3af <check_directory_consistency+0x3af>
    d2ab:	lea    rbx,[rsp+0x80]
    d2b3:	mov    rsi,r13
    d2b6:	mov    rdi,rbx
    d2b9:	call   ce50 <parse_long_name>
    d2be:	test   eax,eax
    d2c0:	js     d6e2 <check_directory_consistency+0x6e2>
    d2c6:	je     d3a8 <check_directory_consistency+0x3a8>
    d2cc:	movzx  ebp,BYTE PTR [r13+0x0]
    d2d1:	cmp    bpl,0xe5
    d2d5:	je     d3a8 <check_directory_consistency+0x3a8>
    d2db:	test   bpl,bpl
    d2de:	je     d3a8 <check_directory_consistency+0x3a8>
    d2e4:	lea    rcx,[r13+0x8]
    d2e8:	mov    rdx,r13
    d2eb:	xor    eax,eax
    d2ed:	nop    DWORD PTR [rax]
    d2f0:	ror    al,1
    d2f2:	add    rdx,0x1
    d2f6:	add    al,BYTE PTR [rdx-0x1]
    d2f9:	cmp    rcx,rdx
    d2fc:	jne    d2f0 <check_directory_consistency+0x2f0>
    d2fe:	xor    edx,edx
    d300:	ror    al,1
    d302:	add    al,BYTE PTR [rcx+rdx*1]
    d305:	add    rdx,0x1
    d309:	cmp    rdx,0x3
    d30d:	jne    d300 <check_directory_consistency+0x300>
    d30f:	movzx  eax,al
    d312:	cmp    DWORD PTR [rsp+0x3b4],eax
    d319:	jne    d410 <check_directory_consistency+0x410>
    d31f:	mov    eax,DWORD PTR [rsp+0x3b8]
    d326:	add    eax,DWORD PTR [rsp+0x2c]
    d32a:	mov    DWORD PTR [rsp+0x3b4],0x100
    d335:	cmp    eax,0xfff
    d33a:	jg     defa <check_directory_consistency+0xefa>
    d340:	mov    rax,QWORD PTR [rsp+0x8]
    d345:	mov    rdi,QWORD PTR [rsp+0x30]
    d34a:	mov    rdx,rbx
    d34d:	mov    rsi,QWORD PTR [rsp+0x38]
    d352:	lea    rdi,[rax+rdi*1+0x1]
    d357:	call   45a0 <pstrcpy>
    d35c:	test   BYTE PTR [r13+0xb],0x10
    d361:	je     d508 <check_directory_consistency+0x508>
    d367:	cmp    BYTE PTR [r13+0x0],0xe5
    d36c:	je     d508 <check_directory_consistency+0x508>
    d372:	movzx  esi,WORD PTR [r13+0x14]
    d377:	movzx  eax,WORD PTR [r13+0x1a]
    d37c:	shl    esi,0x10
    d37f:	or     esi,eax
    d381:	je     d637 <check_directory_consistency+0x637>
    d387:	mov    rdx,QWORD PTR [rsp+0x8]
    d38c:	mov    rdi,r14
    d38f:	call   d000 <check_directory_consistency>
    d394:	test   eax,eax
    d396:	mov    ebx,eax
    d398:	je     d637 <check_directory_consistency+0x637>
    d39e:	add    DWORD PTR [rsp],ebx
    d3a1:	nop    DWORD PTR [rax+0x0]
    d3a8:	mov    edi,DWORD PTR [r14+0x805c]
    d3af:	mov    eax,edi
    d3b1:	add    r12d,0x1
    d3b5:	add    r13,0x20
    d3b9:	shl    eax,0x4
    d3bc:	cmp    eax,r12d
    d3bf:	ja     d270 <check_directory_consistency+0x270>
    d3c5:	mov    ecx,DWORD PTR [r14+0x8068]
    d3cc:	mov    ebx,DWORD PTR [rsp+0x28]
    d3d0:	mov    eax,DWORD PTR [r14+0x8078]
    d3d7:	cmp    ebx,ecx
    d3d9:	jae    d678 <check_directory_consistency+0x678>
    d3df:	add    ebx,0x1
    d3e2:	mov    edx,ebx
    d3e4:	cmp    ecx,ebx
    d3e6:	cmove  edx,eax
    d3e9:	sub    eax,0x8
    d3ec:	mov    DWORD PTR [rsp+0x28],edx
    d3f0:	cmp    eax,edx
    d3f2:	jae    d20d <check_directory_consistency+0x20d>
    d3f8:	mov    rdi,QWORD PTR [rsp+0x10]
    d3fd:	call   2e40 <free@plt>
    d402:	jmp    d648 <check_directory_consistency+0x648>
    d407:	nop    WORD PTR [rax+rax*1+0x0]
    d410:	movzx  eax,BYTE PTR [r13+0xb]
    d415:	cmp    al,0x28
    d417:	je     d3a8 <check_directory_consistency+0x3a8>
    d419:	cmp    al,0xf
    d41b:	je     d3a8 <check_directory_consistency+0x3a8>
    d41d:	cmp    BYTE PTR [r13+0x7],0x20
    d422:	mov    eax,0x6
    d427:	mov    edx,0x7
    d42c:	jne    d704 <check_directory_consistency+0x704>
    d432:	nop    WORD PTR [rax+rax*1+0x0]
    d438:	cmp    BYTE PTR [r13+rax*1+0x0],0x20
    d43e:	mov    edx,eax
    d440:	jne    d704 <check_directory_consistency+0x704>
    d446:	sub    rax,0x1
    d44a:	cmp    rax,0xffffffffffffffff
    d44e:	jne    d438 <check_directory_consistency+0x438>
    d450:	xor    eax,eax
    d452:	cmp    BYTE PTR [r13+0xa],0x20
    d457:	jne    e010 <check_directory_consistency+0x1010>
    d45d:	cmp    BYTE PTR [r13+0x9],0x20
    d462:	jne    e0a1 <check_directory_consistency+0x10a1>
    d468:	cmp    BYTE PTR [r13+0x8],0x20
    d46d:	jne    e09a <check_directory_consistency+0x109a>
    d473:	mov    BYTE PTR [rsp+rax*1+0x80],0x0
    d47b:	mov    rdx,rbx
    d47e:	mov    ecx,DWORD PTR [rdx]
    d480:	add    rdx,0x4
    d484:	lea    eax,[rcx-0x1010101]
    d48a:	not    ecx
    d48c:	and    eax,ecx
    d48e:	and    eax,0x80808080
    d493:	je     d47e <check_directory_consistency+0x47e>
    d495:	mov    ecx,eax
    d497:	mov    rsi,rbx
    d49a:	shr    ecx,0x10
    d49d:	test   eax,0x8080
    d4a2:	cmove  eax,ecx
    d4a5:	lea    rcx,[rdx+0x2]
    d4a9:	mov    edi,eax
    d4ab:	cmove  rdx,rcx
    d4af:	add    dil,al
    d4b2:	lea    rdi,[rip+0x11f5f]        # 1f418 <desc_template.13816+0x898>
    d4b9:	sbb    rdx,0x3
    d4bd:	mov    ecx,0x2
    d4c2:	sub    rdx,rbx
    d4c5:	mov    DWORD PTR [rsp+0x3b8],edx
    d4cc:	mov    eax,edx
    d4ce:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    d4d0:	seta   dl
    d4d3:	sbb    dl,0x0
    d4d6:	test   dl,dl
    d4d8:	je     d3a8 <check_directory_consistency+0x3a8>
    d4de:	lea    rdi,[rip+0x11f32]        # 1f417 <desc_template.13816+0x897>
    d4e5:	mov    ecx,0x3
    d4ea:	mov    rsi,rbx
    d4ed:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    d4ef:	seta   dl
    d4f2:	sbb    dl,0x0
    d4f5:	test   dl,dl
    d4f7:	jne    d326 <check_directory_consistency+0x326>
    d4fd:	jmp    d3a8 <check_directory_consistency+0x3a8>
    d502:	nop    WORD PTR [rax+rax*1+0x0]
    d508:	mov    rdi,r13
    d50b:	call   aa70 <is_file>
    d510:	test   al,al
    d512:	je     e269 <check_directory_consistency+0x1269>
    d518:	movzx  r8d,WORD PTR [r13+0x14]
    d51d:	movzx  eax,WORD PTR [r13+0x1a]
    d522:	shl    r8d,0x10
    d526:	or     r8d,eax
    d529:	cmp    QWORD PTR [r14+0x8080],0x0
    d531:	mov    ebp,r8d
    d534:	je     d550 <check_directory_consistency+0x550>
    d536:	mov    edi,DWORD PTR [r14+0x807c]
    d53d:	mov    QWORD PTR [r14+0x8080],0x0
    d548:	test   edi,edi
    d54a:	jne    d799 <check_directory_consistency+0x799>
    d550:	test   ebp,ebp
    d552:	mov    DWORD PTR [r14+0x8098],0xffffffff
    d55d:	je     d6c0 <check_directory_consistency+0x6c0>
    d563:	mov    rax,QWORD PTR [r14+0x80b0]
    d56a:	test   rax,rax
    d56d:	je     dda2 <check_directory_consistency+0xda2>
    d573:	mov    rbx,QWORD PTR [rsp+0x8]
    d578:	mov    esi,0x2f
    d57d:	mov    rdi,rbx
    d580:	call   2fe0 <strrchr@plt>
    d585:	mov    edi,DWORD PTR [r14+0x804c]
    d58c:	lea    rdx,[rax+0x1]
    d590:	test   rax,rax
    d593:	cmove  rdx,rbx
    d597:	xor    esi,esi
    d599:	mov    QWORD PTR [rsp+0x58],rdx
    d59e:	mov    ecx,edi
    d5a0:	jmp    d5c6 <check_directory_consistency+0x5c6>
    d5a2:	nop    WORD PTR [rax+rax*1+0x0]
    d5a8:	cmp    ecx,eax
    d5aa:	jne    d5b4 <check_directory_consistency+0x5b4>
    d5ac:	test   ecx,ecx
    d5ae:	jne    e108 <check_directory_consistency+0x1108>
    d5b4:	cmp    ecx,eax
    d5b6:	je     d9a4 <check_directory_consistency+0x9a4>
    d5bc:	mov    ecx,eax
    d5be:	cmp    esi,ecx
    d5c0:	jg     e0ca <check_directory_consistency+0x10ca>
    d5c6:	lea    edx,[rcx+rsi*1]
    d5c9:	mov    eax,edx
    d5cb:	shr    eax,0x1f
    d5ce:	add    eax,edx
    d5d0:	sar    eax,1
    d5d2:	cmp    edi,eax
    d5d4:	mov    r11d,eax
    d5d7:	jbe    e0ab <check_directory_consistency+0x10ab>
    d5dd:	mov    r9d,DWORD PTR [r14+0x8050]
    d5e4:	mov    edx,eax
    d5e6:	mov    r10,QWORD PTR [r14+0x8040]
    d5ed:	imul   edx,r9d
    d5f1:	add    rdx,r10
    d5f4:	mov    r8d,DWORD PTR [rdx]
    d5f7:	mov    edx,DWORD PTR [rdx+0x4]
    d5fa:	cmp    r8d,edx
    d5fd:	jae    e0e9 <check_directory_consistency+0x10e9>
    d603:	cmp    ebp,r8d
    d606:	jbe    d5a8 <check_directory_consistency+0x5a8>
    d608:	cmp    esi,eax
    d60a:	je     d7cc <check_directory_consistency+0x7cc>
    d610:	mov    esi,eax
    d612:	jmp    d5be <check_directory_consistency+0x5be>
    d614:	nop    DWORD PTR [rax+0x0]
    d618:	mov    ecx,0xffffffff
    d61d:	mov    rdi,QWORD PTR [rip+0x219edc]        # 227500 <stderr@@GLIBC_2.2.5>
    d624:	lea    rdx,[rip+0x11e21]        # 1f44c <desc_template.13816+0x8cc>
    d62b:	mov    esi,0x1
    d630:	xor    eax,eax
    d632:	call   3400 <__fprintf_chk@plt>
    d637:	mov    rdi,QWORD PTR [rsp+0x10]
    d63c:	call   2e40 <free@plt>
    d641:	mov    DWORD PTR [rsp],0x0
    d648:	mov    rbx,QWORD PTR [rsp+0x13c8]
    d650:	xor    rbx,QWORD PTR fs:0x28
    d659:	mov    eax,DWORD PTR [rsp]
    d65c:	jne    e226 <check_directory_consistency+0x1226>
    d662:	add    rsp,0x13d8
    d669:	pop    rbx
    d66a:	pop    rbp
    d66b:	pop    r12
    d66d:	pop    r13
    d66f:	pop    r14
    d671:	pop    r15
    d673:	ret    
    d674:	nop    DWORD PTR [rax+0x0]
    d678:	mov    edx,DWORD PTR [r14+0x800c]
    d67f:	mov    rcx,QWORD PTR [r14+0x80b8]
    d686:	cmp    edx,0x20
    d689:	je     d78d <check_directory_consistency+0x78d>
    d68f:	cmp    edx,0x10
    d692:	je     ddb9 <check_directory_consistency+0xdb9>
    d698:	mov    ebx,DWORD PTR [rsp+0x28]
    d69c:	lea    edx,[rbx+rbx*2]
    d69f:	shr    edx,1
    d6a1:	movzx  edx,WORD PTR [rcx+rdx*1]
    d6a5:	lea    ecx,[rbx*4+0x0]
    d6ac:	and    ecx,0x4
    d6af:	sar    edx,cl
    d6b1:	and    edx,0xfff
    d6b7:	jmp    d3e9 <check_directory_consistency+0x3e9>
    d6bc:	nop    DWORD PTR [rax+0x0]
    d6c0:	mov    ecx,DWORD PTR [r14+0x8058]
    d6c7:	xor    ebx,ebx
    d6c9:	mov    eax,DWORD PTR [r13+0x1c]
    d6cd:	xor    edx,edx
    d6cf:	lea    eax,[rcx+rax*1-0x1]
    d6d3:	div    ecx
    d6d5:	cmp    eax,ebp
    d6d7:	je     d39e <check_directory_consistency+0x39e>
    d6dd:	jmp    d637 <check_directory_consistency+0x637>
    d6e2:	mov    rcx,QWORD PTR [rip+0x219e17]        # 227500 <stderr@@GLIBC_2.2.5>
    d6e9:	lea    rdi,[rip+0x11d13]        # 1f403 <desc_template.13816+0x883>
    d6f0:	mov    edx,0x13
    d6f5:	mov    esi,0x1
    d6fa:	call   33e0 <fwrite@plt>
    d6ff:	jmp    d637 <check_directory_consistency+0x637>
    d704:	lea    eax,[rbp-0x21]
    d707:	cmp    al,0x5e
    d709:	ja     d618 <check_directory_consistency+0x618>
    d70f:	mov    ecx,DWORD PTR [r14+0x80e8]
    d716:	lea    rsi,[rsp+0x7f]
    d71b:	mov    DWORD PTR [rsp+0x18],r12d
    d720:	mov    QWORD PTR [rsp+0x20],r14
    d725:	mov    QWORD PTR [rsp+0x48],rbx
    d72a:	mov    r15d,0x1
    d730:	mov    r14,rsi
    d733:	mov    ebx,edx
    d735:	mov    r12d,ecx
    d738:	jmp    d770 <check_directory_consistency+0x770>
    d73a:	nop    WORD PTR [rax+rax*1+0x0]
    d740:	call   3490 <__ctype_tolower_loc@plt>
    d745:	mov    rax,QWORD PTR [rax]
    d748:	mov    eax,DWORD PTR [rax+rbp*4]
    d74b:	mov    BYTE PTR [r14+r15*1],al
    d74f:	cmp    r15d,ebx
    d752:	movsxd rax,r15d
    d755:	jg     e1d4 <check_directory_consistency+0x11d4>
    d75b:	movzx  ebp,BYTE PTR [r13+r15*1+0x0]
    d761:	add    r15,0x1
    d765:	lea    eax,[rbp-0x21]
    d768:	cmp    al,0x5e
    d76a:	ja     d618 <check_directory_consistency+0x618>
    d770:	test   r12d,r12d
    d773:	jne    d740 <check_directory_consistency+0x740>
    d775:	mov    BYTE PTR [r14+r15*1],bpl
    d779:	jmp    d74f <check_directory_consistency+0x74f>
    d77b:	nop    DWORD PTR [rax+rax*1+0x0]
    d780:	test   al,al
    d782:	je     d2ab <check_directory_consistency+0x2ab>
    d788:	jmp    d3af <check_directory_consistency+0x3af>
    d78d:	mov    edx,DWORD PTR [rsp+0x28]
    d791:	mov    edx,DWORD PTR [rcx+rdx*4]
    d794:	jmp    d3e9 <check_directory_consistency+0x3e9>
    d799:	call   3040 <close@plt>
    d79e:	mov    DWORD PTR [r14+0x807c],0x0
    d7a9:	jmp    d550 <check_directory_consistency+0x550>
    d7ae:	mov    rdi,QWORD PTR [rsp+0x40]
    d7b3:	call   3420 <strdup@plt>
    d7b8:	mov    esi,DWORD PTR [rsp+0x28]
    d7bc:	mov    rdx,rax
    d7bf:	mov    rdi,r14
    d7c2:	call   baa0 <schedule_rename>
    d7c7:	jmp    d1dd <check_directory_consistency+0x1dd>
    d7cc:	cmp    ebp,edx
    d7ce:	jb     d9b0 <check_directory_consistency+0x9b0>
    d7d4:	mov    r11d,ecx
    d7d7:	cmp    edi,r11d
    d7da:	ja     d9b0 <check_directory_consistency+0x9b0>
    d7e0:	mov    rdi,r13
    d7e3:	call   aa70 <is_file>
    d7e8:	test   al,al
    d7ea:	je     e207 <check_directory_consistency+0x1207>
    d7f0:	mov    rdi,QWORD PTR [rsp+0x8]
    d7f5:	call   3420 <strdup@plt>
    d7fa:	mov    ebx,DWORD PTR [r14+0x80d4]
    d801:	mov    r15,rax
    d804:	mov    eax,DWORD PTR [r14+0x80d8]
    d80b:	lea    r8d,[rbx+0x1]
    d80f:	mov    edx,r8d
    d812:	imul   edx,eax
    d815:	cmp    edx,DWORD PTR [r14+0x80d0]
    d81c:	ja     deae <check_directory_consistency+0xeae>
    d822:	cmp    ebx,r8d
    d825:	mov    DWORD PTR [r14+0x80d4],r8d
    d82c:	jae    e0ab <check_directory_consistency+0x10ab>
    d832:	imul   ebx,DWORD PTR [r14+0x80d8]
    d83a:	mov    rax,QWORD PTR [r14+0x80c8]
    d841:	mov    QWORD PTR [rsp+0x48],0x0
    d84a:	add    rax,rbx
    d84d:	mov    QWORD PTR [rax],r15
    d850:	mov    DWORD PTR [rax+0x8],ebp
    d853:	mov    DWORD PTR [rax+0x10],0x2
    d85a:	mov    rax,QWORD PTR [r14+0x80b0]
    d861:	xor    edi,edi
    d863:	lea    rbx,[rsp+0x7c]
    d868:	mov    DWORD PTR [rsp+0x60],r12d
    d86d:	mov    QWORD PTR [rsp+0x50],r13
    d872:	mov    DWORD PTR [rsp+0x64],0x0
    d87a:	mov    r12d,edi
    d87d:	mov    DWORD PTR [rsp+0x18],0x0
    d885:	mov    DWORD PTR [rsp+0x68],0xffffffff
    d88d:	mov    r13,r14
    d890:	mov    DWORD PTR [rsp+0x20],0x0
    d898:	nop    DWORD PTR [rax+rax*1+0x0]
    d8a0:	test   rax,rax
    d8a3:	je     dbc0 <check_directory_consistency+0xbc0>
    d8a9:	mov    esi,DWORD PTR [rsp+0x18]
    d8ad:	test   esi,esi
    d8af:	je     dc80 <check_directory_consistency+0xc80>
    d8b5:	mov    eax,DWORD PTR [r13+0x805c]
    d8bc:	mov    r14d,ebp
    d8bf:	imul   r14d,eax
    d8c3:	add    r14d,DWORD PTR [r13+0x806c]
    d8ca:	cmp    QWORD PTR [r13+0x8080],0x0
    d8d2:	je     d8ee <check_directory_consistency+0x8ee>
    d8d4:	mov    edi,DWORD PTR [r13+0x807c]
    d8db:	mov    QWORD PTR [r13+0x8080],0x0
    d8e6:	test   edi,edi
    d8e8:	jne    dd86 <check_directory_consistency+0xd86>
    d8ee:	test   eax,eax
    d8f0:	mov    DWORD PTR [r13+0x8098],0xffffffff
    d8fb:	je     dd70 <check_directory_consistency+0xd70>
    d901:	xor    r15d,r15d
    d904:	jmp    d925 <check_directory_consistency+0x925>
    d906:	nop    WORD PTR cs:[rax+rax*1+0x0]
    d910:	lea    eax,[r15+0x1]
    d914:	add    r15,0x1
    d918:	cmp    DWORD PTR [r13+0x805c],eax
    d91f:	jbe    dd70 <check_directory_consistency+0xd70>
    d925:	mov    rdi,QWORD PTR [r13+0x80b0]
    d92c:	lea    rsi,[r14+r15*1]
    d930:	mov    rcx,rbx
    d933:	mov    edx,0x1
    d938:	mov    rax,QWORD PTR [rdi+0x38]
    d93c:	call   QWORD PTR [rax+0x48]
    d93f:	test   eax,eax
    d941:	jne    d910 <check_directory_consistency+0x910>
    d943:	mov    rdx,QWORD PTR [r13+0x8090]
    d94a:	mov    rdi,QWORD PTR [r13+0x0]
    d94e:	mov    ecx,0x1
    d953:	mov    rsi,r14
    d956:	call   b3c0 <vvfat_read>
    d95b:	test   eax,eax
    d95d:	jne    ddc6 <check_directory_consistency+0xdc6>
    d963:	mov    rdi,QWORD PTR [r13+0x80b0]
    d96a:	mov    rdx,QWORD PTR [r13+0x8090]
    d971:	mov    ecx,0x1
    d976:	mov    rsi,r14
    d979:	mov    rax,QWORD PTR [rdi+0x38]
    d97d:	call   QWORD PTR [rax+0x28]
    d980:	test   eax,eax
    d982:	je     d910 <check_directory_consistency+0x910>
    d984:	mov    r14,r13
    d987:	mov    r12d,DWORD PTR [rsp+0x60]
    d98c:	mov    r13,QWORD PTR [rsp+0x50]
    d991:	mov    ebp,0xfffffffe
    d996:	mov    ebx,ebp
    d998:	mov    ecx,DWORD PTR [r14+0x8058]
    d99f:	jmp    d6c9 <check_directory_consistency+0x6c9>
    d9a4:	mov    r11d,esi
    d9a7:	cmp    edi,r11d
    d9aa:	jbe    d7e0 <check_directory_consistency+0x7e0>
    d9b0:	imul   r9d,r11d
    d9b4:	lea    rax,[r10+r9*1]
    d9b8:	cmp    ebp,DWORD PTR [rax]
    d9ba:	mov    QWORD PTR [rsp+0x48],rax
    d9bf:	jb     d7e0 <check_directory_consistency+0x7e0>
    d9c5:	cmp    ebp,DWORD PTR [rax+0x4]
    d9c8:	jae    e1e8 <check_directory_consistency+0x11e8>
    d9ce:	mov    r15d,DWORD PTR [rax+0x20]
    d9d2:	test   r15b,0x10
    d9d6:	je     e196 <check_directory_consistency+0x1196>
    d9dc:	mov    rbx,QWORD PTR [rsp+0x48]
    d9e1:	mov    eax,r15d
    d9e4:	mov    esi,0x2f
    d9e9:	and    eax,0xffffffef
    d9ec:	mov    DWORD PTR [rbx+0x20],eax
    d9ef:	mov    rbx,QWORD PTR [rbx+0x18]
    d9f3:	mov    rdi,rbx
    d9f6:	call   2fe0 <strrchr@plt>
    d9fb:	lea    rdx,[rax+0x1]
    d9ff:	test   rax,rax
    da02:	cmovne rbx,rdx
    da06:	and    r15d,0x1
    da0a:	je     e177 <check_directory_consistency+0x1177>
    da10:	mov    rsi,QWORD PTR [rsp+0x58]
    da15:	mov    rdi,rbx
    da18:	call   3110 <strcmp@plt>
    da1d:	test   eax,eax
    da1f:	je     da38 <check_directory_consistency+0xa38>
    da21:	mov    rdi,QWORD PTR [rsp+0x8]
    da26:	call   3420 <strdup@plt>
    da2b:	mov    esi,ebp
    da2d:	mov    rdx,rax
    da30:	mov    rdi,r14
    da33:	call   baa0 <schedule_rename>
    da38:	mov    rax,QWORD PTR [r14+0x80b0]
    da3f:	jmp    d861 <check_directory_consistency+0x861>
    da44:	cmp    ebp,edx
    da46:	jb     da5d <check_directory_consistency+0xa5d>
    da48:	mov    r11d,ecx
    da4b:	cmp    r14d,r11d
    da4e:	mov    QWORD PTR [rsp+0x48],0x0
    da57:	jbe    dbc0 <check_directory_consistency+0xbc0>
    da5d:	imul   r10d,r11d
    da61:	lea    rax,[r9+r10*1]
    da65:	cmp    ebp,DWORD PTR [rax]
    da67:	mov    QWORD PTR [rsp+0x48],rax
    da6c:	jb     df83 <check_directory_consistency+0xf83>
    da72:	cmp    ebp,DWORD PTR [rax+0x4]
    da75:	jae    e1e8 <check_directory_consistency+0x11e8>
    da7b:	mov    rax,QWORD PTR [rsp+0x48]
    da80:	test   BYTE PTR [rax+0x20],0x4
    da84:	jne    dbc0 <check_directory_consistency+0xbc0>
    da8a:	mov    rax,QWORD PTR [rsp+0x48]
    da8f:	mov    edi,ebp
    da91:	sub    edi,DWORD PTR [rax]
    da93:	mov    r14d,DWORD PTR [rax+0x10]
    da97:	mov    eax,DWORD PTR [r13+0x8058]
    da9e:	imul   eax,edi
    daa1:	add    eax,r14d
    daa4:	cmp    eax,DWORD PTR [rsp+0x20]
    daa8:	jne    e1b5 <check_directory_consistency+0x11b5>
    daae:	mov    ecx,DWORD PTR [rsp+0x20]
    dab2:	test   ecx,ecx
    dab4:	jne    db13 <check_directory_consistency+0xb13>
    dab6:	mov    rax,QWORD PTR [rsp+0x48]
    dabb:	mov    esi,0x2f
    dac0:	mov    r15,QWORD PTR [rax+0x18]
    dac4:	mov    rdi,r15
    dac7:	call   2fe0 <strrchr@plt>
    dacc:	lea    rcx,[rax+0x1]
    dad0:	test   rax,rax
    dad3:	mov    rsi,QWORD PTR [rsp+0x58]
    dad8:	cmovne r15,rcx
    dadc:	mov    rdi,r15
    dadf:	call   3110 <strcmp@plt>
    dae4:	xor    edi,edi
    dae6:	test   eax,eax
    dae8:	mov    edx,DWORD PTR [r13+0x8050]
    daef:	setne  dil
    daf3:	mov    esi,DWORD PTR [r13+0x804c]
    dafa:	mov    rcx,QWORD PTR [rsp+0x48]
    daff:	mov    DWORD PTR [rsp+0x18],edi
    db03:	mov    rdi,QWORD PTR [r13+0x8040]
    db0a:	call   bb80 <array_index.isra.6>
    db0f:	mov    DWORD PTR [rsp+0x68],eax
    db13:	mov    rax,QWORD PTR [rsp+0x48]
    db18:	mov    edi,DWORD PTR [rsp+0x68]
    db1c:	cmp    DWORD PTR [rax+0xc],edi
    db1f:	jne    dfe5 <check_directory_consistency+0xfe5>
    db25:	mov    edx,DWORD PTR [rsp+0x64]
    db29:	test   edx,edx
    db2b:	jne    dbac <check_directory_consistency+0xbac>
    db2d:	mov    rdi,QWORD PTR [rsp+0x50]
    db32:	call   aa70 <is_file>
    db37:	test   al,al
    db39:	je     dbac <check_directory_consistency+0xbac>
    db3b:	mov    rax,QWORD PTR [rsp+0x48]
    db40:	mov    r14d,DWORD PTR [r13+0x80d4]
    db47:	mov    r15d,DWORD PTR [rax+0x8]
    db4b:	lea    r9d,[r14+0x1]
    db4f:	mov    eax,DWORD PTR [r13+0x80d8]
    db56:	mov    esi,r9d
    db59:	imul   esi,eax
    db5c:	cmp    esi,DWORD PTR [r13+0x80d0]
    db63:	ja     e127 <check_directory_consistency+0x1127>
    db69:	cmp    r14d,r9d
    db6c:	mov    DWORD PTR [r13+0x80d4],r9d
    db73:	jae    e0ab <check_directory_consistency+0x10ab>
    db79:	mov    eax,r14d
    db7c:	mov    edi,DWORD PTR [rsp+0x20]
    db80:	mov    DWORD PTR [rsp+0x64],0x1
    db88:	imul   eax,DWORD PTR [r13+0x80d8]
    db90:	add    rax,QWORD PTR [r13+0x80c8]
    db97:	mov    QWORD PTR [rax],0x0
    db9e:	mov    DWORD PTR [rax+0x8],r15d
    dba2:	mov    DWORD PTR [rax+0xc],edi
    dba5:	mov    DWORD PTR [rax+0x10],0x1
    dbac:	mov    eax,DWORD PTR [rsp+0x18]
    dbb0:	test   eax,eax
    dbb2:	jne    d8b5 <check_directory_consistency+0x8b5>
    dbb8:	nop    DWORD PTR [rax+rax*1+0x0]
    dbc0:	mov    rax,QWORD PTR [r13+0x80c0]
    dbc7:	mov    ecx,ebp
    dbc9:	add    r12d,0x1
    dbcd:	add    rax,rcx
    dbd0:	test   BYTE PTR [rax],0x3
    dbd3:	jne    df66 <check_directory_consistency+0xf66>
    dbd9:	mov    BYTE PTR [rax],0x2
    dbdc:	mov    edx,DWORD PTR [r13+0x8068]
    dbe3:	cmp    ebp,edx
    dbe5:	jae    dc30 <check_directory_consistency+0xc30>
    dbe7:	mov    eax,DWORD PTR [r13+0x8078]
    dbee:	add    ebp,0x1
    dbf1:	cmp    edx,ebp
    dbf3:	cmove  ebp,eax
    dbf6:	lea    edx,[rax-0x8]
    dbf9:	mov    ecx,DWORD PTR [r13+0x8058]
    dc00:	cmp    edx,ebp
    dc02:	jb     df91 <check_directory_consistency+0xf91>
    dc08:	cmp    ebp,0x1
    dc0b:	jbe    de95 <check_directory_consistency+0xe95>
    dc11:	sub    eax,0x10
    dc14:	cmp    ebp,eax
    dc16:	ja     de95 <check_directory_consistency+0xe95>
    dc1c:	add    DWORD PTR [rsp+0x20],ecx
    dc20:	mov    rax,QWORD PTR [r13+0x80b0]
    dc27:	jmp    d8a0 <check_directory_consistency+0x8a0>
    dc2c:	nop    DWORD PTR [rax+0x0]
    dc30:	mov    edx,DWORD PTR [r13+0x800c]
    dc37:	mov    eax,DWORD PTR [r13+0x8078]
    dc3e:	mov    rsi,QWORD PTR [r13+0x80b8]
    dc45:	cmp    edx,0x20
    dc48:	je     dd60 <check_directory_consistency+0xd60>
    dc4e:	cmp    edx,0x10
    dc51:	je     dd7d <check_directory_consistency+0xd7d>
    dc57:	lea    edx,[rbp+rbp*2+0x0]
    dc5b:	lea    ecx,[rbp*4+0x0]
    dc62:	shr    edx,1
    dc64:	and    ecx,0x4
    dc67:	movzx  edx,WORD PTR [rsi+rdx*1]
    dc6b:	sar    edx,cl
    dc6d:	mov    ebp,edx
    dc6f:	and    ebp,0xfff
    dc75:	jmp    dbf6 <check_directory_consistency+0xbf6>
    dc7a:	nop    WORD PTR [rax+rax*1+0x0]
    dc80:	xor    r14d,r14d
    dc83:	nop    DWORD PTR [rax+rax*1+0x0]
    dc88:	mov    esi,DWORD PTR [r13+0x805c]
    dc8f:	cmp    esi,r14d
    dc92:	jbe    dbc0 <check_directory_consistency+0xbc0>
    dc98:	mov    rdi,QWORD PTR [r13+0x80b0]
    dc9f:	mov    rcx,rbx
    dca2:	mov    edx,0x1
    dca7:	imul   esi,ebp
    dcaa:	add    esi,DWORD PTR [r13+0x806c]
    dcb1:	mov    rax,QWORD PTR [rdi+0x38]
    dcb5:	add    rsi,r14
    dcb8:	add    r14,0x1
    dcbc:	call   QWORD PTR [rax+0x48]
    dcbf:	test   eax,eax
    dcc1:	je     dc88 <check_directory_consistency+0xc88>
    dcc3:	cmp    QWORD PTR [rsp+0x48],0x0
    dcc9:	je     dcdd <check_directory_consistency+0xcdd>
    dccb:	mov    rax,QWORD PTR [rsp+0x48]
    dcd0:	cmp    ebp,DWORD PTR [rax]
    dcd2:	jb     dcdd <check_directory_consistency+0xcdd>
    dcd4:	cmp    ebp,DWORD PTR [rax+0x4]
    dcd7:	jb     da7b <check_directory_consistency+0xa7b>
    dcdd:	mov    r14d,DWORD PTR [r13+0x804c]
    dce4:	xor    edi,edi
    dce6:	mov    ecx,r14d
    dce9:	jmp    dd0e <check_directory_consistency+0xd0e>
    dceb:	nop    DWORD PTR [rax+rax*1+0x0]
    dcf0:	cmp    ecx,eax
    dcf2:	jne    dcfc <check_directory_consistency+0xcfc>
    dcf4:	test   ecx,ecx
    dcf6:	jne    e108 <check_directory_consistency+0x1108>
    dcfc:	cmp    ecx,eax
    dcfe:	je     de8d <check_directory_consistency+0xe8d>
    dd04:	mov    ecx,eax
    dd06:	cmp    edi,ecx
    dd08:	jg     e0ca <check_directory_consistency+0x10ca>
    dd0e:	lea    edx,[rcx+rdi*1]
    dd11:	mov    eax,edx
    dd13:	shr    eax,0x1f
    dd16:	add    eax,edx
    dd18:	sar    eax,1
    dd1a:	cmp    r14d,eax
    dd1d:	mov    r11d,eax
    dd20:	jbe    e0ab <check_directory_consistency+0x10ab>
    dd26:	mov    r10d,DWORD PTR [r13+0x8050]
    dd2d:	mov    edx,eax
    dd2f:	mov    r9,QWORD PTR [r13+0x8040]
    dd36:	imul   edx,r10d
    dd3a:	add    rdx,r9
    dd3d:	mov    esi,DWORD PTR [rdx]
    dd3f:	mov    edx,DWORD PTR [rdx+0x4]
    dd42:	cmp    esi,edx
    dd44:	jae    e0e9 <check_directory_consistency+0x10e9>
    dd4a:	cmp    ebp,esi
    dd4c:	jbe    dcf0 <check_directory_consistency+0xcf0>
    dd4e:	cmp    edi,eax
    dd50:	je     da44 <check_directory_consistency+0xa44>
    dd56:	mov    edi,eax
    dd58:	jmp    dd06 <check_directory_consistency+0xd06>
    dd5a:	nop    WORD PTR [rax+rax*1+0x0]
    dd60:	mov    ebp,DWORD PTR [rsi+rcx*4]
    dd63:	jmp    dbf6 <check_directory_consistency+0xbf6>
    dd68:	nop    DWORD PTR [rax+rax*1+0x0]
    dd70:	mov    DWORD PTR [rsp+0x18],0x1
    dd78:	jmp    dbc0 <check_directory_consistency+0xbc0>
    dd7d:	movzx  ebp,WORD PTR [rsi+rcx*2]
    dd81:	jmp    dbf6 <check_directory_consistency+0xbf6>
    dd86:	call   3040 <close@plt>
    dd8b:	mov    DWORD PTR [r13+0x807c],0x0
    dd96:	mov    eax,DWORD PTR [r13+0x805c]
    dd9d:	jmp    d8ee <check_directory_consistency+0x8ee>
    dda2:	mov    QWORD PTR [rsp+0x58],0x0
    ddab:	mov    QWORD PTR [rsp+0x48],0x0
    ddb4:	jmp    d861 <check_directory_consistency+0x861>
    ddb9:	mov    edx,DWORD PTR [rsp+0x28]
    ddbd:	movzx  edx,WORD PTR [rcx+rdx*2]
    ddc1:	jmp    d3e9 <check_directory_consistency+0x3e9>
    ddc6:	mov    ebp,0xffffffff
    ddcb:	mov    r14,r13
    ddce:	mov    r12d,DWORD PTR [rsp+0x60]
    ddd3:	mov    r13,QWORD PTR [rsp+0x50]
    ddd8:	mov    ebx,ebp
    ddda:	jmp    d998 <check_directory_consistency+0x998>
    dddf:	mov    r15,QWORD PTR [rsp+0x40]
    dde4:	mov    QWORD PTR [rsp],rax
    dde8:	lea    rax,[rsp+0x3c0]
    ddf0:	mov    esi,0x1000
    ddf5:	mov    rdi,rax
    ddf8:	mov    QWORD PTR [rsp+0x8],rax
    ddfd:	mov    rdx,r15
    de00:	call   45a0 <pstrcpy>
    de05:	mov    rax,QWORD PTR [rsp]
    de09:	mov    rdi,r15
    de0c:	movsxd rdx,eax
    de0f:	add    eax,0x1
    de12:	mov    DWORD PTR [rsp+0x2c],eax
    de16:	cdqe   
    de18:	mov    BYTE PTR [rsp+rdx*1+0x3c0],0x2f
    de20:	mov    BYTE PTR [rsp+rax*1+0x3c0],0x0
    de28:	call   3420 <strdup@plt>
    de2d:	mov    ebp,DWORD PTR [r14+0x80d4]
    de34:	mov    edx,DWORD PTR [r14+0x80d8]
    de3b:	mov    r13,rax
    de3e:	lea    r12d,[rbp+0x1]
    de42:	mov    eax,r12d
    de45:	imul   eax,edx
    de48:	cmp    eax,DWORD PTR [r14+0x80d0]
    de4f:	ja     dfa9 <check_directory_consistency+0xfa9>
    de55:	cmp    ebp,r12d
    de58:	mov    DWORD PTR [r14+0x80d4],r12d
    de5f:	jae    e0ab <check_directory_consistency+0x10ab>
    de65:	imul   ebp,DWORD PTR [r14+0x80d8]
    de6d:	mov    rax,QWORD PTR [r14+0x80c8]
    de74:	mov    edi,DWORD PTR [rsp+0x28]
    de78:	add    rax,rbp
    de7b:	mov    QWORD PTR [rax],r13
    de7e:	mov    DWORD PTR [rax+0x8],edi
    de81:	mov    DWORD PTR [rax+0x10],0x3
    de88:	jmp    d1dd <check_directory_consistency+0x1dd>
    de8d:	mov    r11d,edi
    de90:	jmp    da4b <check_directory_consistency+0xa4b>
    de95:	mov    ebp,0xffffffff
    de9a:	mov    r14,r13
    de9d:	mov    r12d,DWORD PTR [rsp+0x60]
    dea2:	mov    r13,QWORD PTR [rsp+0x50]
    dea7:	mov    ebx,ebp
    dea9:	jmp    d6c9 <check_directory_consistency+0x6c9>
    deae:	mov    ecx,eax
    deb0:	mov    rdi,QWORD PTR [r14+0x80c8]
    deb7:	mov    DWORD PTR [rsp+0x20],r8d
    debc:	shl    ecx,0x5
    debf:	sub    ecx,eax
    dec1:	add    edx,ecx
    dec3:	movsxd rsi,edx
    dec6:	mov    DWORD PTR [rsp+0x18],edx
    deca:	call   49f0 <qemu_realloc>
    decf:	test   rax,rax
    ded2:	mov    QWORD PTR [r14+0x80c8],rax
    ded9:	je     def0 <check_directory_consistency+0xef0>
    dedb:	mov    edx,DWORD PTR [rsp+0x18]
    dedf:	mov    r8d,DWORD PTR [rsp+0x20]
    dee4:	mov    DWORD PTR [r14+0x80d0],edx
    deeb:	jmp    d822 <check_directory_consistency+0x822>
    def0:	mov    QWORD PTR ds:0x0,r15
    def8:	ud2    
    defa:	mov    rcx,QWORD PTR [rsp+0x40]
    deff:	mov    rdi,QWORD PTR [rip+0x2195fa]        # 227500 <stderr@@GLIBC_2.2.5>
    df06:	lea    rdx,[rip+0x1150d]        # 1f41a <desc_template.13816+0x89a>
    df0d:	mov    r8,rbx
    df10:	mov    esi,0x1
    df15:	xor    eax,eax
    df17:	call   3400 <__fprintf_chk@plt>
    df1c:	jmp    d637 <check_directory_consistency+0x637>
    df21:	mov    rcx,QWORD PTR [rip+0x2195d8]        # 227500 <stderr@@GLIBC_2.2.5>
    df28:	lea    rdi,[rip+0x114b9]        # 1f3e8 <desc_template.13816+0x868>
    df2f:	mov    edx,0x1a
    df34:	mov    esi,0x1
    df39:	call   33e0 <fwrite@plt>
    df3e:	jmp    d637 <check_directory_consistency+0x637>
    df43:	mov    ecx,DWORD PTR [rsp+0x28]
    df47:	mov    rdi,QWORD PTR [rip+0x2195b2]        # 227500 <stderr@@GLIBC_2.2.5>
    df4e:	lea    rdx,[rip+0x111d3]        # 1f128 <desc_template.13816+0x5a8>
    df55:	mov    esi,0x1
    df5a:	xor    eax,eax
    df5c:	call   3400 <__fprintf_chk@plt>
    df61:	jmp    d637 <check_directory_consistency+0x637>
    df66:	mov    r14,r13
    df69:	mov    r12d,DWORD PTR [rsp+0x60]
    df6e:	mov    r13,QWORD PTR [rsp+0x50]
    df73:	mov    ecx,DWORD PTR [r14+0x8058]
    df7a:	xor    ebx,ebx
    df7c:	xor    ebp,ebp
    df7e:	jmp    d6c9 <check_directory_consistency+0x6c9>
    df83:	mov    QWORD PTR [rsp+0x48],0x0
    df8c:	jmp    dbc0 <check_directory_consistency+0xbc0>
    df91:	mov    ebp,r12d
    df94:	mov    ebx,r12d
    df97:	mov    r14,r13
    df9a:	mov    r12d,DWORD PTR [rsp+0x60]
    df9f:	mov    r13,QWORD PTR [rsp+0x50]
    dfa4:	jmp    d6c9 <check_directory_consistency+0x6c9>
    dfa9:	mov    ecx,edx
    dfab:	mov    rdi,QWORD PTR [r14+0x80c8]
    dfb2:	shl    ecx,0x5
    dfb5:	sub    ecx,edx
    dfb7:	lea    r15d,[rcx+rax*1]
    dfbb:	movsxd rsi,r15d
    dfbe:	call   49f0 <qemu_realloc>
    dfc3:	test   rax,rax
    dfc6:	mov    QWORD PTR [r14+0x80c8],rax
    dfcd:	je     dfdb <check_directory_consistency+0xfdb>
    dfcf:	mov    DWORD PTR [r14+0x80d0],r15d
    dfd6:	jmp    de55 <check_directory_consistency+0xe55>
    dfdb:	mov    QWORD PTR ds:0x0,r13
    dfe3:	ud2    
    dfe5:	test   r14d,r14d
    dfe8:	je     db25 <check_directory_consistency+0xb25>
    dfee:	lea    rcx,[rip+0x1171b]        # 1f710 <__PRETTY_FUNCTION__.14316>
    dff5:	lea    rsi,[rip+0x10d8c]        # 1ed88 <desc_template.13816+0x208>
    dffc:	lea    rdi,[rip+0x11380]        # 1f383 <desc_template.13816+0x803>
    e003:	mov    edx,0x68f
    e008:	call   3000 <__assert_fail@plt>
    e00d:	nop    DWORD PTR [rax]
    e010:	mov    ebp,0x2
    e015:	movsxd rdx,eax
    e018:	lea    eax,[rax+rbp*1+0x1]
    e01c:	mov    QWORD PTR [rsp+0x18],rbx
    e021:	mov    BYTE PTR [rsp+rdx*1+0x80],0x2e
    e029:	lea    edx,[rax+0x1]
    e02c:	cdqe   
    e02e:	sub    rax,rbp
    e031:	movsxd rdx,edx
    e034:	mov    BYTE PTR [rsp+rdx*1+0x80],0x0
    e03c:	lea    rdx,[rbx+rax*1]
    e040:	mov    rbx,rdx
    e043:	jmp    e060 <check_directory_consistency+0x1060>
    e045:	nop    DWORD PTR [rax]
    e048:	call   3490 <__ctype_tolower_loc@plt>
    e04d:	mov    rax,QWORD PTR [rax]
    e050:	mov    eax,DWORD PTR [rax+r15*4]
    e054:	mov    BYTE PTR [rbx+rbp*1],al
    e057:	sub    rbp,0x1
    e05b:	cmp    ebp,0xffffffff
    e05e:	je     e086 <check_directory_consistency+0x1086>
    e060:	movzx  r15d,BYTE PTR [r13+rbp*1+0x8]
    e066:	lea    eax,[r15-0x21]
    e06a:	cmp    al,0x5e
    e06c:	ja     e090 <check_directory_consistency+0x1090>
    e06e:	mov    edi,DWORD PTR [r14+0x80e8]
    e075:	test   edi,edi
    e077:	jne    e048 <check_directory_consistency+0x1048>
    e079:	mov    BYTE PTR [rbx+rbp*1],r15b
    e07d:	sub    rbp,0x1
    e081:	cmp    ebp,0xffffffff
    e084:	jne    e060 <check_directory_consistency+0x1060>
    e086:	mov    rbx,QWORD PTR [rsp+0x18]
    e08b:	jmp    d47b <check_directory_consistency+0x47b>
    e090:	mov    ecx,0xfffffffe
    e095:	jmp    d61d <check_directory_consistency+0x61d>
    e09a:	xor    ebp,ebp
    e09c:	jmp    e015 <check_directory_consistency+0x1015>
    e0a1:	mov    ebp,0x1
    e0a6:	jmp    e015 <check_directory_consistency+0x1015>
    e0ab:	lea    rcx,[rip+0x116be]        # 1f770 <__PRETTY_FUNCTION__.13707>
    e0b2:	lea    rsi,[rip+0x10ccf]        # 1ed88 <desc_template.13816+0x208>
    e0b9:	lea    rdi,[rip+0x1125e]        # 1f31e <desc_template.13816+0x79e>
    e0c0:	mov    edx,0x60
    e0c5:	call   3000 <__assert_fail@plt>
    e0ca:	lea    rcx,[rip+0x116af]        # 1f780 <__PRETTY_FUNCTION__.14126>
    e0d1:	lea    rsi,[rip+0x10cb0]        # 1ed88 <desc_template.13816+0x208>
    e0d8:	lea    rdi,[rip+0x1128d]        # 1f36c <desc_template.13816+0x7ec>
    e0df:	mov    edx,0x465
    e0e4:	call   3000 <__assert_fail@plt>
    e0e9:	lea    rcx,[rip+0x11690]        # 1f780 <__PRETTY_FUNCTION__.14126>
    e0f0:	lea    rsi,[rip+0x10c91]        # 1ed88 <desc_template.13816+0x208>
    e0f7:	lea    rdi,[rip+0x11234]        # 1f332 <desc_template.13816+0x7b2>
    e0fe:	mov    edx,0x45a
    e103:	call   3000 <__assert_fail@plt>
    e108:	lea    rcx,[rip+0x11671]        # 1f780 <__PRETTY_FUNCTION__.14126>
    e10f:	lea    rsi,[rip+0x10c72]        # 1ed88 <desc_template.13816+0x208>
    e116:	lea    rdi,[rip+0x11233]        # 1f350 <desc_template.13816+0x7d0>
    e11d:	mov    edx,0x45c
    e122:	call   3000 <__assert_fail@plt>
    e127:	mov    edx,eax
    e129:	mov    rdi,QWORD PTR [r13+0x80c8]
    e130:	mov    DWORD PTR [rsp+0x6c],r9d
    e135:	shl    edx,0x5
    e138:	sub    edx,eax
    e13a:	add    edx,esi
    e13c:	movsxd rsi,edx
    e13f:	mov    DWORD PTR [rsp+0x64],edx
    e143:	call   49f0 <qemu_realloc>
    e148:	test   rax,rax
    e14b:	mov    QWORD PTR [r13+0x80c8],rax
    e152:	je     e169 <check_directory_consistency+0x1169>
    e154:	mov    edx,DWORD PTR [rsp+0x64]
    e158:	mov    r9d,DWORD PTR [rsp+0x6c]
    e15d:	mov    DWORD PTR [r13+0x80d0],edx
    e164:	jmp    db69 <check_directory_consistency+0xb69>
    e169:	mov    QWORD PTR ds:0x0,0x0
    e175:	ud2    
    e177:	lea    rcx,[rip+0x11592]        # 1f710 <__PRETTY_FUNCTION__.14316>
    e17e:	lea    rsi,[rip+0x10c03]        # 1ed88 <desc_template.13816+0x208>
    e185:	lea    rdi,[rip+0x112a4]        # 1f430 <desc_template.13816+0x8b0>
    e18c:	mov    edx,0x665
    e191:	call   3000 <__assert_fail@plt>
    e196:	lea    rcx,[rip+0x11573]        # 1f710 <__PRETTY_FUNCTION__.14316>
    e19d:	lea    rsi,[rip+0x10be4]        # 1ed88 <desc_template.13816+0x208>
    e1a4:	lea    rdi,[rip+0x11220]        # 1f3cb <desc_template.13816+0x84b>
    e1ab:	mov    edx,0x660
    e1b0:	call   3000 <__assert_fail@plt>
    e1b5:	lea    rcx,[rip+0x11554]        # 1f710 <__PRETTY_FUNCTION__.14316>
    e1bc:	lea    rsi,[rip+0x10bc5]        # 1ed88 <desc_template.13816+0x208>
    e1c3:	lea    rdi,[rip+0x111b9]        # 1f383 <desc_template.13816+0x803>
    e1ca:	mov    edx,0x683
    e1cf:	call   3000 <__assert_fail@plt>
    e1d4:	mov    r12d,DWORD PTR [rsp+0x18]
    e1d9:	mov    r14,QWORD PTR [rsp+0x20]
    e1de:	mov    rbx,QWORD PTR [rsp+0x48]
    e1e3:	jmp    d452 <check_directory_consistency+0x452>
    e1e8:	lea    rcx,[rip+0x115b1]        # 1f7a0 <__PRETTY_FUNCTION__.14134>
    e1ef:	lea    rsi,[rip+0x10b92]        # 1ed88 <desc_template.13816+0x208>
    e1f6:	lea    rdi,[rip+0x10c2b]        # 1ee28 <desc_template.13816+0x2a8>
    e1fd:	mov    edx,0x477
    e202:	call   3000 <__assert_fail@plt>
    e207:	lea    rcx,[rip+0x11502]        # 1f710 <__PRETTY_FUNCTION__.14316>
    e20e:	lea    rsi,[rip+0x10b73]        # 1ed88 <desc_template.13816+0x208>
    e215:	lea    rdi,[rip+0x11167]        # 1f383 <desc_template.13816+0x803>
    e21c:	mov    edx,0x66e
    e221:	call   3000 <__assert_fail@plt>
    e226:	call   2f70 <__stack_chk_fail@plt>
    e22b:	lea    rcx,[rip+0x114fe]        # 1f730 <__PRETTY_FUNCTION__.14337>
    e232:	lea    rsi,[rip+0x10b4f]        # 1ed88 <desc_template.13816+0x208>
    e239:	lea    rdi,[rip+0x10e68]        # 1f0a8 <desc_template.13816+0x528>
    e240:	mov    edx,0x6db
    e245:	call   3000 <__assert_fail@plt>
    e24a:	lea    rcx,[rip+0x114df]        # 1f730 <__PRETTY_FUNCTION__.14337>
    e251:	lea    rsi,[rip+0x10b30]        # 1ed88 <desc_template.13816+0x208>
    e258:	lea    rdi,[rip+0x1116c]        # 1f3cb <desc_template.13816+0x84b>
    e25f:	mov    edx,0x6dd
    e264:	call   3000 <__assert_fail@plt>
    e269:	lea    rcx,[rip+0x114c0]        # 1f730 <__PRETTY_FUNCTION__.14337>
    e270:	lea    rsi,[rip+0x10b11]        # 1ed88 <desc_template.13816+0x208>
    e277:	lea    rdi,[rip+0x11105]        # 1f383 <desc_template.13816+0x803>
    e27e:	mov    edx,0x735
    e283:	call   3000 <__assert_fail@plt>
    e288:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000e290 <try_commit>:
    e290:	push   r15
    e292:	push   r14
    e294:	push   r13
    e296:	push   r12
    e298:	push   rbp
    e299:	push   rbx
    e29a:	mov    rbp,rdi
    e29d:	sub    rsp,0x68
    e2a1:	cmp    QWORD PTR [rdi+0x8080],0x0
    e2a9:	je     e2c4 <try_commit+0x34>
    e2ab:	mov    QWORD PTR [rdi+0x8080],0x0
    e2b6:	mov    edi,DWORD PTR [rdi+0x807c]
    e2bc:	test   edi,edi
    e2be:	jne    e4f0 <try_commit+0x260>
    e2c4:	mov    rdx,QWORD PTR [rbp+0x80b8]
    e2cb:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    e2d5:	mov    ecx,DWORD PTR [rbp+0x8060]
    e2db:	test   rdx,rdx
    e2de:	je     ec70 <try_commit+0x9e0>
    e2e4:	mov    esi,DWORD PTR [rbp+0x8]
    e2e7:	mov    rdi,QWORD PTR [rbp+0x0]
    e2eb:	call   b3c0 <vvfat_read>
    e2f0:	test   eax,eax
    e2f2:	mov    DWORD PTR [rsp+0x8],eax
    e2f6:	jne    e51b <try_commit+0x28b>
    e2fc:	mov    rsi,QWORD PTR [rbp+0x80c0]
    e303:	test   rsi,rsi
    e306:	je     f23f <try_commit+0xfaf>
    e30c:	mov    edx,DWORD PTR [rbp+0x806c]
    e312:	mov    eax,DWORD PTR [rbp+0x8070]
    e318:	mov    ecx,DWORD PTR [rbp+0x805c]
    e31e:	sub    rax,rdx
    e321:	cqo    
    e323:	idiv   rcx
    e326:	xor    ecx,ecx
    e328:	test   eax,eax
    e32a:	jne    e337 <try_commit+0xa7>
    e32c:	jmp    e360 <try_commit+0xd0>
    e32e:	xchg   ax,ax
    e330:	mov    rsi,QWORD PTR [rbp+0x80c0]
    e337:	and    BYTE PTR [rsi+rcx*1],0xfc
    e33b:	lea    edi,[rcx+0x1]
    e33e:	add    rcx,0x1
    e342:	mov    edx,DWORD PTR [rbp+0x806c]
    e348:	mov    eax,DWORD PTR [rbp+0x8070]
    e34e:	mov    esi,DWORD PTR [rbp+0x805c]
    e354:	sub    rax,rdx
    e357:	cqo    
    e359:	idiv   rsi
    e35c:	cmp    edi,eax
    e35e:	jb     e330 <try_commit+0xa0>
    e360:	mov    edi,DWORD PTR [rbp+0x80d4]
    e366:	test   edi,edi
    e368:	je     e3d0 <try_commit+0x140>
    e36a:	xor    ebx,ebx
    e36c:	jmp    e389 <try_commit+0xf9>
    e36e:	xchg   ax,ax
    e370:	cmp    eax,0x1
    e373:	je     f29c <try_commit+0x100c>
    e379:	call   2e40 <free@plt>
    e37e:	add    ebx,0x1
    e381:	cmp    ebx,DWORD PTR [rbp+0x80d4]
    e387:	jae    e3d0 <try_commit+0x140>
    e389:	mov    eax,ebx
    e38b:	imul   eax,DWORD PTR [rbp+0x80d8]
    e392:	add    rax,QWORD PTR [rbp+0x80c8]
    e399:	mov    rdi,QWORD PTR [rax]
    e39c:	mov    eax,DWORD PTR [rax+0x10]
    e39f:	test   rdi,rdi
    e3a2:	jne    e370 <try_commit+0xe0>
    e3a4:	cmp    eax,0x1
    e3a7:	je     e37e <try_commit+0xee>
    e3a9:	lea    rcx,[rip+0x113a0]        # 1f750 <__PRETTY_FUNCTION__.14202>
    e3b0:	lea    rsi,[rip+0x109d1]        # 1ed88 <desc_template.13816+0x208>
    e3b7:	lea    rdi,[rip+0x10d8a]        # 1f148 <desc_template.13816+0x5c8>
    e3be:	mov    edx,0x55f
    e3c3:	call   3000 <__assert_fail@plt>
    e3c8:	nop    DWORD PTR [rax+rax*1+0x0]
    e3d0:	cmp    QWORD PTR [rbp+0x80b0],0x0
    e3d8:	mov    DWORD PTR [rbp+0x80d4],0x0
    e3e2:	je     e416 <try_commit+0x186>
    e3e4:	mov    esi,DWORD PTR [rbp+0x804c]
    e3ea:	test   esi,esi
    e3ec:	je     e416 <try_commit+0x186>
    e3ee:	xor    edx,edx
    e3f0:	mov    eax,edx
    e3f2:	imul   eax,DWORD PTR [rbp+0x8050]
    e3f9:	add    rax,QWORD PTR [rbp+0x8040]
    e400:	mov    ecx,DWORD PTR [rax+0xc]
    e403:	test   ecx,ecx
    e405:	jns    e40b <try_commit+0x17b>
    e407:	or     DWORD PTR [rax+0x20],0x10
    e40b:	add    edx,0x1
    e40e:	cmp    edx,DWORD PTR [rbp+0x804c]
    e414:	jb     e3f0 <try_commit+0x160>
    e416:	mov    rdx,QWORD PTR [rbp+0x80e0]
    e41d:	xor    esi,esi
    e41f:	mov    rdi,rbp
    e422:	call   d000 <check_directory_consistency>
    e427:	test   eax,eax
    e429:	mov    r9d,eax
    e42c:	jle    e4d5 <try_commit+0x245>
    e432:	mov    edx,DWORD PTR [rbp+0x806c]
    e438:	mov    eax,DWORD PTR [rbp+0x8070]
    e43e:	mov    ecx,DWORD PTR [rbp+0x805c]
    e444:	mov    edi,DWORD PTR [rbp+0x8068]
    e44a:	sub    rax,rdx
    e44d:	mov    r8d,edi
    e450:	cqo    
    e452:	idiv   rcx
    e455:	cmp    edi,eax
    e457:	mov    r11d,eax
    e45a:	jae    e542 <try_commit+0x2b2>
    e460:	mov    r10,QWORD PTR [rbp+0x80c0]
    e467:	movsxd rax,edi
    e46a:	jmp    e491 <try_commit+0x201>
    e46c:	lea    ecx,[rax+0x1]
    e46f:	cmp    edi,ecx
    e471:	je     e504 <try_commit+0x274>
    e477:	test   dl,dl
    e479:	je     e4d5 <try_commit+0x245>
    e47b:	add    r8d,0x1
    e47f:	cmp    dl,0x4
    e482:	je     e4d5 <try_commit+0x245>
    e484:	add    rax,0x1
    e488:	cmp    r11d,eax
    e48b:	jbe    e542 <try_commit+0x2b2>
    e491:	cmp    edi,eax
    e493:	mov    ecx,eax
    e495:	movzx  edx,BYTE PTR [r10+rax*1]
    e49a:	ja     e46c <try_commit+0x1dc>
    e49c:	mov    esi,DWORD PTR [rbp+0x800c]
    e4a2:	mov    rbx,QWORD PTR [rbp+0x80b8]
    e4a9:	cmp    esi,0x20
    e4ac:	je     e50c <try_commit+0x27c>
    e4ae:	cmp    esi,0x10
    e4b1:	je     e513 <try_commit+0x283>
    e4b3:	lea    esi,[rax+rax*2]
    e4b6:	shl    ecx,0x2
    e4b9:	and    ecx,0x4
    e4bc:	shr    esi,1
    e4be:	movzx  esi,WORD PTR [rbx+rsi*1]
    e4c2:	sar    esi,cl
    e4c4:	mov    ecx,esi
    e4c6:	and    ecx,0xfff
    e4cc:	test   ecx,ecx
    e4ce:	jne    e477 <try_commit+0x1e7>
    e4d0:	cmp    dl,0x4
    e4d3:	jne    e484 <try_commit+0x1f4>
    e4d5:	mov    DWORD PTR [rsp+0x8],0xffffffff
    e4dd:	mov    eax,DWORD PTR [rsp+0x8]
    e4e1:	add    rsp,0x68
    e4e5:	pop    rbx
    e4e6:	pop    rbp
    e4e7:	pop    r12
    e4e9:	pop    r13
    e4eb:	pop    r14
    e4ed:	pop    r15
    e4ef:	ret    
    e4f0:	call   3040 <close@plt>
    e4f5:	mov    DWORD PTR [rbp+0x807c],0x0
    e4ff:	jmp    e2c4 <try_commit+0x34>
    e504:	mov    ecx,DWORD PTR [rbp+0x8078]
    e50a:	jmp    e4cc <try_commit+0x23c>
    e50c:	mov    ecx,eax
    e50e:	mov    ecx,DWORD PTR [rbx+rcx*4]
    e511:	jmp    e4cc <try_commit+0x23c>
    e513:	mov    ecx,eax
    e515:	movzx  ecx,WORD PTR [rbx+rcx*2]
    e519:	jmp    e4cc <try_commit+0x23c>
    e51b:	mov    rcx,QWORD PTR [rip+0x218fde]        # 227500 <stderr@@GLIBC_2.2.5>
    e522:	lea    rdi,[rip+0x10f3d]        # 1f466 <desc_template.13816+0x8e6>
    e529:	mov    edx,0x13
    e52e:	mov    esi,0x1
    e533:	call   33e0 <fwrite@plt>
    e538:	mov    DWORD PTR [rsp+0x8],0xffffffff
    e540:	jmp    e4dd <try_commit+0x24d>
    e542:	cmp    r9d,r8d
    e545:	jne    e4d5 <try_commit+0x245>
    e547:	mov    edx,DWORD PTR [rbp+0x80d4]
    e54d:	test   edx,edx
    e54f:	je     e4dd <try_commit+0x24d>
    e551:	cmp    QWORD PTR [rbp+0x8080],0x0
    e559:	je     e585 <try_commit+0x2f5>
    e55b:	mov    edi,DWORD PTR [rbp+0x807c]
    e561:	mov    QWORD PTR [rbp+0x8080],0x0
    e56c:	test   edi,edi
    e56e:	je     e585 <try_commit+0x2f5>
    e570:	call   3040 <close@plt>
    e575:	mov    edx,DWORD PTR [rbp+0x80d4]
    e57b:	mov    DWORD PTR [rbp+0x807c],0x0
    e585:	lea    rax,[rbp+0x80c8]
    e58c:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    e596:	mov    DWORD PTR [rsp+0x2c],0x0
    e59e:	mov    r15,rbp
    e5a1:	mov    QWORD PTR [rsp+0x48],rax
    e5a6:	cmp    DWORD PTR [rsp+0x2c],edx
    e5aa:	jae    e5de <try_commit+0x34e>
    e5ac:	mov    ebx,DWORD PTR [rsp+0x2c]
    e5b0:	imul   ebx,DWORD PTR [r15+0x80d8]
    e5b8:	add    rbx,QWORD PTR [r15+0x80c8]
    e5bf:	mov    eax,DWORD PTR [rbx+0x10]
    e5c2:	test   eax,eax
    e5c4:	je     e721 <try_commit+0x491>
    e5ca:	cmp    eax,0x3
    e5cd:	je     eafe <try_commit+0x86e>
    e5d3:	add    DWORD PTR [rsp+0x2c],0x1
    e5d8:	cmp    DWORD PTR [rsp+0x2c],edx
    e5dc:	jb     e5ac <try_commit+0x31c>
    e5de:	mov    edx,DWORD PTR [r15+0x8060]
    e5e5:	mov    rdi,QWORD PTR [r15+0x8010]
    e5ec:	mov    rbp,r15
    e5ef:	mov    rsi,QWORD PTR [r15+0x80b8]
    e5f6:	shl    edx,0x9
    e5f9:	call   3190 <memcpy@plt>
    e5fe:	xor    esi,esi
    e600:	mov    edx,0xffffffff
    e605:	mov    rdi,r15
    e608:	call   c6b0 <commit_direntries>
    e60d:	test   eax,eax
    e60f:	mov    DWORD PTR [rsp+0x8],eax
    e613:	jne    f1b0 <try_commit+0xf20>
    e619:	cmp    QWORD PTR [rbp+0x8080],0x0
    e621:	je     e647 <try_commit+0x3b7>
    e623:	mov    edi,DWORD PTR [rbp+0x807c]
    e629:	mov    QWORD PTR [rbp+0x8080],0x0
    e634:	test   edi,edi
    e636:	je     e647 <try_commit+0x3b7>
    e638:	call   3040 <close@plt>
    e63d:	mov    DWORD PTR [rbp+0x807c],0x0
    e647:	mov    DWORD PTR [rbp+0x8098],0xffffffff
    e651:	xor    r15d,r15d
    e654:	mov    r12d,DWORD PTR [rbp+0x80d4]
    e65b:	mov    DWORD PTR [rsp+0x10],r15d
    e660:	mov    DWORD PTR [rsp+0x18],r15d
    e665:	cmp    r15d,r12d
    e668:	jae    f44c <try_commit+0x11bc>
    e66e:	mov    ebx,r15d
    e671:	imul   ebx,DWORD PTR [rbp+0x80d8]
    e678:	add    rbx,QWORD PTR [rbp+0x80c8]
    e67f:	mov    eax,DWORD PTR [rbx+0x10]
    e682:	cmp    eax,0x1
    e685:	je     ecd4 <try_commit+0xa44>
    e68b:	jb     f42d <try_commit+0x119d>
    e691:	cmp    eax,0x2
    e694:	jne    f409 <try_commit+0x1179>
    e69a:	mov    r14d,DWORD PTR [rbp+0x804c]
    e6a1:	mov    esi,DWORD PTR [rbx+0x8]
    e6a4:	xor    r8d,r8d
    e6a7:	mov    edi,r14d
    e6aa:	jmp    e6cf <try_commit+0x43f>
    e6ac:	nop    DWORD PTR [rax+0x0]
    e6b0:	cmp    edi,edx
    e6b2:	jne    e6bc <try_commit+0x42c>
    e6b4:	test   edi,edi
    e6b6:	jne    f153 <try_commit+0xec3>
    e6bc:	cmp    edi,edx
    e6be:	je     ed85 <try_commit+0xaf5>
    e6c4:	mov    edi,edx
    e6c6:	cmp    r8d,edi
    e6c9:	jg     e963 <try_commit+0x6d3>
    e6cf:	lea    eax,[rdi+r8*1]
    e6d3:	mov    edx,eax
    e6d5:	shr    edx,0x1f
    e6d8:	add    edx,eax
    e6da:	sar    edx,1
    e6dc:	cmp    r14d,edx
    e6df:	mov    r11d,edx
    e6e2:	jbe    f0d2 <try_commit+0xe42>
    e6e8:	mov    r10d,DWORD PTR [rbp+0x8050]
    e6ef:	mov    ecx,edx
    e6f1:	mov    rax,QWORD PTR [rbp+0x8040]
    e6f8:	imul   ecx,r10d
    e6fc:	add    rcx,rax
    e6ff:	mov    r9d,DWORD PTR [rcx]
    e702:	mov    ecx,DWORD PTR [rcx+0x4]
    e705:	cmp    r9d,ecx
    e708:	jae    f0b3 <try_commit+0xe23>
    e70e:	cmp    esi,r9d
    e711:	jbe    e6b0 <try_commit+0x420>
    e713:	cmp    r8d,edx
    e716:	je     f037 <try_commit+0xda7>
    e71c:	mov    r8d,edx
    e71f:	jmp    e6c6 <try_commit+0x436>
    e721:	mov    r11d,DWORD PTR [r15+0x804c]
    e728:	mov    r10d,DWORD PTR [rbx+0x8]
    e72c:	xor    edi,edi
    e72e:	mov    ecx,r11d
    e731:	jmp    e752 <try_commit+0x4c2>
    e733:	nop    DWORD PTR [rax+rax*1+0x0]
    e738:	cmp    ecx,eax
    e73a:	jne    e744 <try_commit+0x4b4>
    e73c:	test   ecx,ecx
    e73e:	jne    f153 <try_commit+0xec3>
    e744:	cmp    ecx,eax
    e746:	je     e79a <try_commit+0x50a>
    e748:	mov    ecx,eax
    e74a:	cmp    edi,ecx
    e74c:	jg     e963 <try_commit+0x6d3>
    e752:	lea    edx,[rdi+rcx*1]
    e755:	mov    eax,edx
    e757:	shr    eax,0x1f
    e75a:	add    eax,edx
    e75c:	sar    eax,1
    e75e:	cmp    r11d,eax
    e761:	mov    ebp,eax
    e763:	jbe    f0d2 <try_commit+0xe42>
    e769:	mov    r9d,DWORD PTR [r15+0x8050]
    e770:	mov    edx,eax
    e772:	mov    r12,QWORD PTR [r15+0x8040]
    e779:	imul   edx,r9d
    e77d:	add    rdx,r12
    e780:	mov    esi,DWORD PTR [rdx]
    e782:	mov    edx,DWORD PTR [rdx+0x4]
    e785:	cmp    esi,edx
    e787:	jae    f0b3 <try_commit+0xe23>
    e78d:	cmp    r10d,esi
    e790:	jbe    e738 <try_commit+0x4a8>
    e792:	cmp    edi,eax
    e794:	je     e7b2 <try_commit+0x522>
    e796:	mov    edi,eax
    e798:	jmp    e74a <try_commit+0x4ba>
    e79a:	mov    ebp,edi
    e79c:	cmp    r11d,ebp
    e79f:	ja     e7be <try_commit+0x52e>
    e7a1:	nop    DWORD PTR [rax+0x0]
    e7a8:	mov    rax,QWORD PTR ds:0x18
    e7b0:	ud2    
    e7b2:	cmp    r10d,edx
    e7b5:	jb     e7be <try_commit+0x52e>
    e7b7:	mov    ebp,ecx
    e7b9:	cmp    r11d,ebp
    e7bc:	jbe    e7a8 <try_commit+0x518>
    e7be:	imul   r9d,ebp
    e7c2:	lea    rax,[r12+r9*1]
    e7c6:	cmp    r10d,DWORD PTR [rax]
    e7c9:	mov    QWORD PTR [rsp+0x20],rax
    e7ce:	jb     e7a8 <try_commit+0x518>
    e7d0:	cmp    r10d,DWORD PTR [rax+0x4]
    e7d4:	jae    f25e <try_commit+0xfce>
    e7da:	mov    rax,QWORD PTR [rsp+0x20]
    e7df:	mov    rsi,QWORD PTR [rbx]
    e7e2:	mov    rax,QWORD PTR [rax+0x18]
    e7e6:	test   rsi,rsi
    e7e9:	mov    QWORD PTR [rsp+0x38],rax
    e7ee:	je     f27d <try_commit+0xfed>
    e7f4:	mov    rbx,QWORD PTR [rsp+0x20]
    e7f9:	mov    rdi,QWORD PTR [rsp+0x38]
    e7fe:	mov    QWORD PTR [rbx+0x18],rsi
    e802:	call   3370 <rename@plt>
    e807:	test   eax,eax
    e809:	jne    f172 <try_commit+0xee2>
    e80f:	test   BYTE PTR [rbx+0x20],0x4
    e813:	je     eab6 <try_commit+0x826>
    e819:	mov    r14,QWORD PTR [rsp+0x20]
    e81e:	mov    rdi,QWORD PTR [r14+0x18]
    e822:	call   2f60 <strlen@plt>
    e827:	mov    rdi,QWORD PTR [rsp+0x38]
    e82c:	mov    rbx,rax
    e82f:	mov    DWORD PTR [rsp+0x30],eax
    e833:	call   2f60 <strlen@plt>
    e838:	sub    ebx,eax
    e83a:	mov    DWORD PTR [rsp+0x34],eax
    e83e:	mov    eax,DWORD PTR [r14+0x14]
    e842:	cmp    eax,DWORD PTR [r15+0x8034]
    e849:	mov    DWORD PTR [rsp+0x40],ebx
    e84d:	jae    f0d2 <try_commit+0xe42>
    e853:	mov    rsi,QWORD PTR [r15+0x8028]
    e85a:	xor    r13d,r13d
    e85d:	mov    QWORD PTR [rsp+0x50],rsi
    e862:	mov    esi,eax
    e864:	mov    eax,DWORD PTR [r14]
    e867:	imul   esi,DWORD PTR [r15+0x8038]
    e86f:	mov    DWORD PTR [rsp+0x44],eax
    e873:	mov    QWORD PTR [rsp+0x58],rsi
    e878:	mov    eax,DWORD PTR [r15+0x8078]
    e87f:	sub    eax,0x8
    e882:	cmp    DWORD PTR [rsp+0x44],eax
    e886:	ja     eab6 <try_commit+0x826>
    e88c:	movsxd r9,r13d
    e88f:	mov    rax,QWORD PTR [rsp+0x50]
    e894:	shl    r9,0x5
    e898:	add    r9,QWORD PTR [rsp+0x58]
    e89d:	lea    r14,[rax+r9*1]
    e8a1:	mov    rax,r15
    e8a4:	mov    r15,r14
    e8a7:	mov    r14,rax
    e8aa:	nop    WORD PTR [rax+rax*1+0x0]
    e8b0:	mov    rdi,r15
    e8b3:	call   aa70 <is_file>
    e8b8:	test   al,al
    e8ba:	jne    e8de <try_commit+0x64e>
    e8bc:	movzx  eax,BYTE PTR [r15+0xb]
    e8c1:	movzx  edx,BYTE PTR [r15]
    e8c5:	test   al,0x10
    e8c7:	je     ea3c <try_commit+0x7ac>
    e8cd:	cmp    dl,0xe5
    e8d0:	je     ea3c <try_commit+0x7ac>
    e8d6:	cmp    al,0x28
    e8d8:	jne    eaf0 <try_commit+0x860>
    e8de:	movzx  ebp,WORD PTR [r15+0x14]
    e8e3:	movzx  eax,WORD PTR [r15+0x1a]
    e8e8:	xor    esi,esi
    e8ea:	mov    r12d,DWORD PTR [r14+0x804c]
    e8f1:	shl    ebp,0x10
    e8f4:	mov    ecx,r12d
    e8f7:	or     ebp,eax
    e8f9:	jmp    e916 <try_commit+0x686>
    e8fb:	nop    DWORD PTR [rax+rax*1+0x0]
    e900:	cmp    ecx,eax
    e902:	jne    e90c <try_commit+0x67c>
    e904:	test   ecx,ecx
    e906:	jne    f153 <try_commit+0xec3>
    e90c:	cmp    ecx,eax
    e90e:	je     e988 <try_commit+0x6f8>
    e910:	mov    ecx,eax
    e912:	cmp    esi,ecx
    e914:	jg     e963 <try_commit+0x6d3>
    e916:	lea    edx,[rcx+rsi*1]
    e919:	mov    eax,edx
    e91b:	shr    eax,0x1f
    e91e:	add    eax,edx
    e920:	sar    eax,1
    e922:	cmp    r12d,eax
    e925:	mov    r11d,eax
    e928:	jbe    f0d2 <try_commit+0xe42>
    e92e:	mov    ebx,DWORD PTR [r14+0x8050]
    e935:	mov    edx,eax
    e937:	mov    r10,QWORD PTR [r14+0x8040]
    e93e:	imul   edx,ebx
    e941:	add    rdx,r10
    e944:	mov    edi,DWORD PTR [rdx]
    e946:	mov    edx,DWORD PTR [rdx+0x4]
    e949:	cmp    edi,edx
    e94b:	jae    f0b3 <try_commit+0xe23>
    e951:	cmp    ebp,edi
    e953:	jbe    e900 <try_commit+0x670>
    e955:	cmp    esi,eax
    e957:	je     eae0 <try_commit+0x850>
    e95d:	mov    esi,eax
    e95f:	cmp    esi,ecx
    e961:	jle    e916 <try_commit+0x686>
    e963:	lea    rcx,[rip+0x10e16]        # 1f780 <__PRETTY_FUNCTION__.14126>
    e96a:	lea    rsi,[rip+0x10417]        # 1ed88 <desc_template.13816+0x208>
    e971:	lea    rdi,[rip+0x109f4]        # 1f36c <desc_template.13816+0x7ec>
    e978:	mov    edx,0x465
    e97d:	call   3000 <__assert_fail@plt>
    e982:	nop    WORD PTR [rax+rax*1+0x0]
    e988:	mov    r11d,esi
    e98b:	cmp    r12d,r11d
    e98e:	jbe    e7a8 <try_commit+0x518>
    e994:	imul   ebx,r11d
    e998:	add    rbx,r10
    e99b:	cmp    ebp,DWORD PTR [rbx]
    e99d:	jb     e7a8 <try_commit+0x518>
    e9a3:	cmp    ebp,DWORD PTR [rbx+0x4]
    e9a6:	jae    f25e <try_commit+0xfce>
    e9ac:	mov    rdi,QWORD PTR [rbx+0x18]
    e9b0:	call   2f60 <strlen@plt>
    e9b5:	mov    esi,DWORD PTR [rsp+0x40]
    e9b9:	lea    ebp,[rsi+rax*1+0x1]
    e9bd:	movsxd rcx,ebp
    e9c0:	mov    rdi,rcx
    e9c3:	mov    QWORD PTR [rsp+0x18],rcx
    e9c8:	call   49d0 <qemu_malloc>
    e9cd:	mov    r12,rax
    e9d0:	mov    rax,QWORD PTR [rsp+0x20]
    e9d5:	movsxd rdx,DWORD PTR [rsp+0x34]
    e9da:	mov    rdi,QWORD PTR [rbx+0x18]
    e9de:	mov    r10,QWORD PTR [rax+0x18]
    e9e2:	mov    QWORD PTR [rsp+0x8],rdx
    e9e7:	mov    rsi,r10
    e9ea:	mov    QWORD PTR [rsp+0x10],r10
    e9ef:	call   2ea0 <strncmp@plt>
    e9f4:	test   eax,eax
    e9f6:	mov    r10,QWORD PTR [rsp+0x10]
    e9fb:	mov    rcx,QWORD PTR [rsp+0x18]
    ea00:	jne    f1ed <try_commit+0xf5d>
    ea06:	mov    rdx,r10
    ea09:	mov    rsi,rcx
    ea0c:	mov    rdi,r12
    ea0f:	call   45a0 <pstrcpy>
    ea14:	movsxd rdi,DWORD PTR [rsp+0x30]
    ea19:	mov    rdx,QWORD PTR [rsp+0x8]
    ea1e:	add    rdx,QWORD PTR [rbx+0x18]
    ea22:	sub    ebp,edi
    ea24:	add    rdi,r12
    ea27:	movsxd rsi,ebp
    ea2a:	call   45a0 <pstrcpy>
    ea2f:	mov    esi,DWORD PTR [rbx]
    ea31:	mov    rdx,r12
    ea34:	mov    rdi,r14
    ea37:	call   baa0 <schedule_rename>
    ea3c:	mov    ecx,DWORD PTR [r14+0x805c]
    ea43:	add    r13d,0x1
    ea47:	xor    edx,edx
    ea49:	mov    eax,r13d
    ea4c:	add    r15,0x20
    ea50:	shl    ecx,0x4
    ea53:	div    ecx
    ea55:	test   edx,edx
    ea57:	jne    e8b0 <try_commit+0x620>
    ea5d:	mov    eax,DWORD PTR [r14+0x800c]
    ea64:	mov    r15,r14
    ea67:	mov    ebx,DWORD PTR [rsp+0x44]
    ea6b:	cmp    eax,0x20
    ea6e:	je     f0f1 <try_commit+0xe61>
    ea74:	cmp    eax,0x10
    ea77:	je     eca9 <try_commit+0xa19>
    ea7d:	lea    eax,[rbx+rbx*2]
    ea80:	mov    rdx,QWORD PTR [r14+0x8010]
    ea87:	lea    ecx,[rbx*4+0x0]
    ea8e:	shr    eax,1
    ea90:	and    ecx,0x4
    ea93:	movzx  eax,WORD PTR [rdx+rax*1]
    ea97:	sar    eax,cl
    ea99:	and    eax,0xfff
    ea9e:	mov    DWORD PTR [rsp+0x44],eax
    eaa2:	mov    eax,DWORD PTR [r15+0x8078]
    eaa9:	sub    eax,0x8
    eaac:	cmp    DWORD PTR [rsp+0x44],eax
    eab0:	jbe    e88c <try_commit+0x5fc>
    eab6:	mov    rdi,QWORD PTR [rsp+0x38]
    eabb:	call   2e40 <free@plt>
    eac0:	mov    esi,DWORD PTR [rsp+0x2c]
    eac4:	mov    rdi,QWORD PTR [rsp+0x48]
    eac9:	call   abf0 <array_remove>
    eace:	mov    edx,DWORD PTR [r15+0x80d4]
    ead5:	jmp    e5a6 <try_commit+0x316>
    eada:	nop    WORD PTR [rax+rax*1+0x0]
    eae0:	cmp    ebp,edx
    eae2:	jb     e994 <try_commit+0x704>
    eae8:	mov    r11d,ecx
    eaeb:	jmp    e98b <try_commit+0x6fb>
    eaf0:	cmp    dl,0x2e
    eaf3:	jne    e8de <try_commit+0x64e>
    eaf9:	jmp    ea3c <try_commit+0x7ac>
    eafe:	mov    rdi,QWORD PTR [rbx]
    eb01:	mov    esi,0x1ed
    eb06:	call   2ed0 <mkdir@plt>
    eb0b:	test   eax,eax
    eb0d:	mov    ebp,eax
    eb0f:	jne    f20c <try_commit+0xf7c>
    eb15:	mov    esi,DWORD PTR [rbx+0x8]
    eb18:	mov    rdi,r15
    eb1b:	lea    edx,[rsi+0x1]
    eb1e:	call   ae60 <insert_mapping>
    eb23:	test   rax,rax
    eb26:	mov    r13,rax
    eb29:	je     f216 <try_commit+0xf86>
    eb2f:	mov    DWORD PTR [rax+0x20],0x4
    eb36:	mov    DWORD PTR [rax+0x24],0x0
    eb3d:	mov    rax,QWORD PTR [rbx]
    eb40:	mov    QWORD PTR [r13+0x18],rax
    eb44:	mov    r12d,DWORD PTR [r15+0x8034]
    eb4b:	test   r12d,r12d
    eb4e:	je     f220 <try_commit+0xf90>
    eb54:	mov    edx,DWORD PTR [r15+0x805c]
    eb5b:	mov    esi,r12d
    eb5e:	mov    rdi,r15
    eb61:	shl    edx,0x4
    eb64:	call   b140 <insert_direntries>
    eb69:	mov    DWORD PTR [r13+0x14],r12d
    eb6d:	mov    rbx,QWORD PTR [rbx]
    eb70:	mov    rdi,rbx
    eb73:	call   2f60 <strlen@plt>
    eb78:	mov    rdi,rbx
    eb7b:	mov    esi,0x2f
    eb80:	mov    r12,rax
    eb83:	call   2fe0 <strrchr@plt>
    eb88:	test   rax,rax
    eb8b:	mov    ebx,0xffffffff
    eb90:	je     eba3 <try_commit+0x913>
    eb92:	lea    rdi,[rax+0x1]
    eb96:	add    r12d,ebx
    eb99:	mov    ebx,r12d
    eb9c:	call   2f60 <strlen@plt>
    eba1:	sub    ebx,eax
    eba3:	mov    r14d,DWORD PTR [r15+0x804c]
    ebaa:	test   r14d,r14d
    ebad:	je     ec51 <try_commit+0x9c1>
    ebb3:	mov    rcx,QWORD PTR [r15+0x8040]
    ebba:	mov    r8d,DWORD PTR [r15+0x8050]
    ebc1:	movsxd rax,ebx
    ebc4:	mov    QWORD PTR [rsp+0x18],r15
    ebc9:	mov    rbx,r13
    ebcc:	mov    r15d,r14d
    ebcf:	xor    r12d,r12d
    ebd2:	mov    QWORD PTR [rsp+0x8],rax
    ebd7:	mov    r13,rcx
    ebda:	mov    r14d,r8d
    ebdd:	jmp    ebeb <try_commit+0x95b>
    ebdf:	nop
    ebe0:	add    ebp,0x1
    ebe3:	add    r12d,r14d
    ebe6:	cmp    ebp,r15d
    ebe9:	je     ec51 <try_commit+0x9c1>
    ebeb:	mov    eax,r12d
    ebee:	add    rax,r13
    ebf1:	mov    edx,DWORD PTR [rax+0xc]
    ebf4:	test   edx,edx
    ebf6:	jns    ebe0 <try_commit+0x950>
    ebf8:	cmp    rbx,rax
    ebfb:	je     ebe0 <try_commit+0x950>
    ebfd:	mov    r9,QWORD PTR [rax+0x18]
    ec01:	mov    rsi,QWORD PTR [rbx+0x18]
    ec05:	mov    rdx,QWORD PTR [rsp+0x8]
    ec0a:	mov    rdi,r9
    ec0d:	mov    QWORD PTR [rsp+0x10],r9
    ec12:	call   2ea0 <strncmp@plt>
    ec17:	test   eax,eax
    ec19:	jne    ebe0 <try_commit+0x950>
    ec1b:	mov    r9,QWORD PTR [rsp+0x10]
    ec20:	mov    rdi,r9
    ec23:	call   2f60 <strlen@plt>
    ec28:	cmp    QWORD PTR [rsp+0x8],rax
    ec2d:	jne    ebe0 <try_commit+0x950>
    ec2f:	mov    r15,QWORD PTR [rsp+0x18]
    ec34:	mov    esi,DWORD PTR [rsp+0x2c]
    ec38:	mov    rdi,QWORD PTR [rsp+0x48]
    ec3d:	mov    DWORD PTR [rbx+0x10],ebp
    ec40:	call   abf0 <array_remove>
    ec45:	mov    edx,DWORD PTR [r15+0x80d4]
    ec4c:	jmp    e5a6 <try_commit+0x316>
    ec51:	lea    rcx,[rip+0x10a78]        # 1f6d0 <__PRETTY_FUNCTION__.14504>
    ec58:	lea    rsi,[rip+0x10129]        # 1ed88 <desc_template.13816+0x208>
    ec5f:	lea    rdi,[rip+0x1087e]        # 1f4e4 <desc_template.13816+0x964>
    ec66:	mov    edx,0x990
    ec6b:	call   3000 <__assert_fail@plt>
    ec70:	shl    ecx,0x9
    ec73:	movsxd rbx,ecx
    ec76:	mov    rdi,rbx
    ec79:	call   49d0 <qemu_malloc>
    ec7e:	mov    rsi,QWORD PTR [rbp+0x8010]
    ec85:	mov    rdx,rbx
    ec88:	mov    QWORD PTR [rbp+0x80b8],rax
    ec8f:	mov    rdi,rax
    ec92:	call   3190 <memcpy@plt>
    ec97:	mov    ecx,DWORD PTR [rbp+0x8060]
    ec9d:	mov    rdx,QWORD PTR [rbp+0x80b8]
    eca4:	jmp    e2e4 <try_commit+0x54>
    eca9:	cmp    ebx,DWORD PTR [r14+0x801c]
    ecb0:	jae    f0d2 <try_commit+0xe42>
    ecb6:	mov    eax,ebx
    ecb8:	mov    rdx,QWORD PTR [r14+0x8010]
    ecbf:	imul   eax,DWORD PTR [r14+0x8020]
    ecc7:	movzx  eax,WORD PTR [rdx+rax*1]
    eccb:	mov    DWORD PTR [rsp+0x44],eax
    eccf:	jmp    e878 <try_commit+0x5e8>
    ecd4:	mov    esi,DWORD PTR [rbx+0x8]
    ecd7:	cmp    esi,DWORD PTR [rbp+0x8034]
    ecdd:	jae    f0d2 <try_commit+0xe42>
    ece3:	mov    eax,esi
    ece5:	mov    r9d,DWORD PTR [rbp+0x804c]
    ecec:	xor    edi,edi
    ecee:	imul   eax,DWORD PTR [rbp+0x8038]
    ecf5:	mov    ecx,r9d
    ecf8:	add    rax,QWORD PTR [rbp+0x8028]
    ecff:	movzx  r8d,WORD PTR [rax+0x14]
    ed04:	movzx  eax,WORD PTR [rax+0x1a]
    ed08:	shl    r8d,0x10
    ed0c:	or     r8d,eax
    ed0f:	jmp    ed36 <try_commit+0xaa6>
    ed11:	nop    DWORD PTR [rax+0x0]
    ed18:	cmp    ecx,eax
    ed1a:	jne    ed24 <try_commit+0xa94>
    ed1c:	test   ecx,ecx
    ed1e:	jne    f153 <try_commit+0xec3>
    ed24:	cmp    ecx,eax
    ed26:	je     efc5 <try_commit+0xd35>
    ed2c:	mov    ecx,eax
    ed2e:	cmp    edi,ecx
    ed30:	jg     e963 <try_commit+0x6d3>
    ed36:	lea    edx,[rcx+rdi*1]
    ed39:	mov    eax,edx
    ed3b:	shr    eax,0x1f
    ed3e:	add    eax,edx
    ed40:	sar    eax,1
    ed42:	cmp    r9d,eax
    ed45:	mov    r12d,eax
    ed48:	jbe    f0d2 <try_commit+0xe42>
    ed4e:	mov    r11d,DWORD PTR [rbp+0x8050]
    ed55:	mov    edx,eax
    ed57:	mov    r10,QWORD PTR [rbp+0x8040]
    ed5e:	imul   edx,r11d
    ed62:	add    rdx,r10
    ed65:	mov    r13d,DWORD PTR [rdx]
    ed68:	mov    edx,DWORD PTR [rdx+0x4]
    ed6b:	cmp    r13d,edx
    ed6e:	jae    f0b3 <try_commit+0xe23>
    ed74:	cmp    r8d,r13d
    ed77:	jbe    ed18 <try_commit+0xa88>
    ed79:	cmp    edi,eax
    ed7b:	je     f02d <try_commit+0xd9d>
    ed81:	mov    edi,eax
    ed83:	jmp    ed2e <try_commit+0xa9e>
    ed85:	mov    r11d,r8d
    ed88:	cmp    r14d,r11d
    ed8b:	jbe    ef48 <try_commit+0xcb8>
    ed91:	mov    ecx,r10d
    ed94:	imul   ecx,r11d
    ed98:	add    rcx,rax
    ed9b:	cmp    esi,DWORD PTR [rcx]
    ed9d:	jb     ef48 <try_commit+0xcb8>
    eda3:	cmp    esi,DWORD PTR [rcx+0x4]
    eda6:	jae    f25e <try_commit+0xfce>
    edac:	mov    r9d,DWORD PTR [rbp+0x8034]
    edb3:	test   r9d,r9d
    edb6:	je     ee05 <try_commit+0xb75>
    edb8:	mov    r11,QWORD PTR [rbp+0x8028]
    edbf:	mov    r10d,DWORD PTR [rbp+0x8038]
    edc6:	xor    r14d,r14d
    edc9:	xor    r13d,r13d
    edcc:	nop    DWORD PTR [rax+0x0]
    edd0:	mov    r8d,r13d
    edd3:	add    r8,r11
    edd6:	mov    rdi,r8
    edd9:	call   aa70 <is_file>
    edde:	test   al,al
    ede0:	je     edf9 <try_commit+0xb69>
    ede2:	movzx  eax,WORD PTR [r8+0x14]
    ede7:	movzx  edx,WORD PTR [r8+0x1a]
    edec:	shl    eax,0x10
    edef:	or     eax,edx
    edf1:	cmp    esi,eax
    edf3:	je     ef4f <try_commit+0xcbf>
    edf9:	add    r14d,0x1
    edfd:	add    r13d,r10d
    ee00:	cmp    r14d,r9d
    ee03:	jne    edd0 <try_commit+0xb40>
    ee05:	add    DWORD PTR [rsp+0x10],0x1
    ee0a:	mov    r14d,0xfffffffa
    ee10:	cmp    DWORD PTR [rsp+0x10],r12d
    ee15:	ja     f3ea <try_commit+0x115a>
    ee1b:	mov    r15d,r12d
    ee1e:	sub    r15d,0x1
    ee22:	js     f337 <try_commit+0x10a7>
    ee28:	jne    f377 <try_commit+0x10e7>
    ee2e:	mov    eax,r12d
    ee31:	sub    eax,DWORD PTR [rsp+0x10]
    ee35:	test   r14d,r14d
    ee38:	mov    DWORD PTR [rbp+0x80d4],eax
    ee3e:	jne    f33b <try_commit+0x10ab>
    ee44:	cmp    DWORD PTR [rbp+0x804c],0x1
    ee4b:	jbe    f076 <try_commit+0xde6>
    ee51:	xor    r12d,r12d
    ee54:	xor    r13d,r13d
    ee57:	mov    ebx,0x1
    ee5c:	jmp    ee8c <try_commit+0xbfc>
    ee5e:	mov    rdi,QWORD PTR [rax+0x18]
    ee62:	call   2e90 <unlink@plt>
    ee67:	test   eax,eax
    ee69:	jne    f117 <try_commit+0xe87>
    ee6f:	add    r12d,0x1
    ee73:	mov    esi,ebx
    ee75:	mov    rdi,rbp
    ee78:	call   ad50 <remove_mapping>
    ee7d:	add    ebx,0x1
    ee80:	cmp    ebx,DWORD PTR [rbp+0x804c]
    ee86:	jae    f068 <try_commit+0xdd8>
    ee8c:	mov    eax,ebx
    ee8e:	imul   eax,DWORD PTR [rbp+0x8050]
    ee95:	add    rax,QWORD PTR [rbp+0x8040]
    ee9c:	mov    ecx,DWORD PTR [rax+0x20]
    ee9f:	test   cl,0x10
    eea2:	je     ee7d <try_commit+0xbed>
    eea4:	mov    edx,DWORD PTR [rax+0x8]
    eea7:	mov    r14d,DWORD PTR [rbp+0x8034]
    eeae:	cmp    edx,r14d
    eeb1:	jae    f0d2 <try_commit+0xe42>
    eeb7:	imul   edx,DWORD PTR [rbp+0x8038]
    eebe:	mov    rsi,QWORD PTR [rbp+0x8028]
    eec5:	movzx  edx,BYTE PTR [rsi+rdx*1]
    eec9:	cmp    dl,0xe5
    eecc:	je     eed2 <try_commit+0xc42>
    eece:	test   dl,dl
    eed0:	jne    ee5e <try_commit+0xbce>
    eed2:	and    ecx,0x4
    eed5:	je     ee73 <try_commit+0xbe3>
    eed7:	mov    rdi,QWORD PTR [rax+0x18]
    eedb:	mov    r15d,DWORD PTR [rax+0x14]
    eedf:	call   2f50 <rmdir@plt>
    eee4:	test   eax,eax
    eee6:	js     f047 <try_commit+0xdb7>
    eeec:	mov    edi,DWORD PTR [rbp+0x804c]
    eef2:	cmp    edi,0x1
    eef5:	jbe    ef2e <try_commit+0xc9e>
    eef7:	mov    esi,DWORD PTR [rbp+0x8050]
    eefd:	mov    r8,QWORD PTR [rbp+0x8040]
    ef04:	mov    edx,0x1
    ef09:	mov    ecx,esi
    ef0b:	mov    eax,ecx
    ef0d:	add    rax,r8
    ef10:	test   BYTE PTR [rax+0x20],0x4
    ef14:	je     ef25 <try_commit+0xc95>
    ef16:	mov    eax,DWORD PTR [rax+0x14]
    ef19:	cmp    r14d,eax
    ef1c:	jle    ef25 <try_commit+0xc95>
    ef1e:	cmp    r15d,eax
    ef21:	cmovl  r14d,eax
    ef25:	add    edx,0x1
    ef28:	add    ecx,esi
    ef2a:	cmp    edx,edi
    ef2c:	jne    ef0b <try_commit+0xc7b>
    ef2e:	mov    edx,r14d
    ef31:	mov    esi,r15d
    ef34:	mov    rdi,rbp
    ef37:	sub    edx,r15d
    ef3a:	add    r12d,0x1
    ef3e:	call   b210 <remove_direntries>
    ef43:	jmp    ee73 <try_commit+0xbe3>
    ef48:	xor    ecx,ecx
    ef4a:	jmp    edac <try_commit+0xb1c>
    ef4f:	test   rcx,rcx
    ef52:	je     ef5b <try_commit+0xccb>
    ef54:	cmp    esi,DWORD PTR [rcx]
    ef56:	je     ef69 <try_commit+0xcd9>
    ef58:	mov    DWORD PTR [rcx+0x4],esi
    ef5b:	lea    edx,[rsi+0x1]
    ef5e:	mov    rdi,rbp
    ef61:	call   ae60 <insert_mapping>
    ef66:	mov    rcx,rax
    ef69:	mov    rax,QWORD PTR [rbx]
    ef6c:	test   rax,rax
    ef6f:	je     f318 <try_commit+0x1088>
    ef75:	xor    edx,edx
    ef77:	mov    QWORD PTR [rcx+0x18],rax
    ef7b:	mov    DWORD PTR [rcx+0x24],0x0
    ef82:	mov    DWORD PTR [rcx+0x20],0x1
    ef89:	mov    DWORD PTR [rcx+0x10],0x0
    ef90:	mov    esi,r14d
    ef93:	mov    rdi,rbp
    ef96:	call   c180 <commit_one_file>
    ef9b:	mov    ebx,DWORD PTR [rsp+0x18]
    ef9f:	add    ebx,0x1
    efa2:	test   eax,eax
    efa4:	mov    DWORD PTR [rsp+0x10],ebx
    efa8:	je     efbc <try_commit+0xd2c>
    efaa:	mov    r12d,DWORD PTR [rbp+0x80d4]
    efb1:	mov    r14d,0xfffffff9
    efb7:	jmp    ee10 <try_commit+0xb80>
    efbc:	add    r15,0x1
    efc0:	jmp    e654 <try_commit+0x3c4>
    efc5:	mov    r12d,edi
    efc8:	cmp    r9d,r12d
    efcb:	jbe    f2f9 <try_commit+0x1069>
    efd1:	imul   r11d,r12d
    efd5:	add    r10,r11
    efd8:	mov    eax,DWORD PTR [r10]
    efdb:	cmp    r8d,eax
    efde:	jb     f2f9 <try_commit+0x1069>
    efe4:	cmp    r8d,DWORD PTR [r10+0x4]
    efe8:	jae    f25e <try_commit+0xfce>
    efee:	cmp    r8d,eax
    eff1:	jne    f2da <try_commit+0x104a>
    eff7:	cmp    QWORD PTR [rbx],0x0
    effb:	jne    f2bb <try_commit+0x102b>
    f001:	mov    edx,DWORD PTR [rbx+0xc]
    f004:	mov    rdi,rbp
    f007:	call   c180 <commit_one_file>
    f00c:	mov    ebx,DWORD PTR [rsp+0x18]
    f010:	add    ebx,0x1
    f013:	test   eax,eax
    f015:	mov    DWORD PTR [rsp+0x10],ebx
    f019:	je     efbc <try_commit+0xd2c>
    f01b:	mov    r12d,DWORD PTR [rbp+0x80d4]
    f022:	mov    r14d,0xfffffffd
    f028:	jmp    ee10 <try_commit+0xb80>
    f02d:	cmp    r8d,edx
    f030:	jb     efd1 <try_commit+0xd41>
    f032:	mov    r12d,ecx
    f035:	jmp    efc8 <try_commit+0xd38>
    f037:	cmp    esi,ecx
    f039:	jb     ed91 <try_commit+0xb01>
    f03f:	mov    r11d,edi
    f042:	jmp    ed88 <try_commit+0xaf8>
    f047:	call   2e80 <__errno_location@plt>
    f04c:	cmp    DWORD PTR [rax],0x27
    f04f:	jne    f117 <try_commit+0xe87>
    f055:	add    r13d,0x1
    f059:	add    ebx,0x1
    f05c:	cmp    ebx,DWORD PTR [rbp+0x804c]
    f062:	jb     ee8c <try_commit+0xbfc>
    f068:	test   r13d,r13d
    f06b:	je     f076 <try_commit+0xde6>
    f06d:	test   r12d,r12d
    f070:	jne    ee44 <try_commit+0xbb4>
    f076:	mov    rdi,QWORD PTR [rbp+0x80b0]
    f07d:	mov    rax,QWORD PTR [rdi+0x38]
    f081:	call   QWORD PTR [rax+0x58]
    f084:	mov    edx,DWORD PTR [rbp+0x806c]
    f08a:	mov    eax,DWORD PTR [rbp+0x8070]
    f090:	xor    esi,esi
    f092:	mov    ecx,DWORD PTR [rbp+0x805c]
    f098:	mov    rdi,QWORD PTR [rbp+0x80c0]
    f09f:	sub    rax,rdx
    f0a2:	cqo    
    f0a4:	idiv   rcx
    f0a7:	mov    edx,eax
    f0a9:	call   3020 <memset@plt>
    f0ae:	jmp    e4dd <try_commit+0x24d>
    f0b3:	lea    rcx,[rip+0x106c6]        # 1f780 <__PRETTY_FUNCTION__.14126>
    f0ba:	lea    rsi,[rip+0xfcc7]        # 1ed88 <desc_template.13816+0x208>
    f0c1:	lea    rdi,[rip+0x1026a]        # 1f332 <desc_template.13816+0x7b2>
    f0c8:	mov    edx,0x45a
    f0cd:	call   3000 <__assert_fail@plt>
    f0d2:	lea    rcx,[rip+0x10697]        # 1f770 <__PRETTY_FUNCTION__.13707>
    f0d9:	lea    rsi,[rip+0xfca8]        # 1ed88 <desc_template.13816+0x208>
    f0e0:	lea    rdi,[rip+0x10237]        # 1f31e <desc_template.13816+0x79e>
    f0e7:	mov    edx,0x60
    f0ec:	call   3000 <__assert_fail@plt>
    f0f1:	cmp    DWORD PTR [r14+0x801c],ebx
    f0f8:	jbe    f0d2 <try_commit+0xe42>
    f0fa:	mov    eax,ebx
    f0fc:	mov    rdx,QWORD PTR [r14+0x8010]
    f103:	imul   eax,DWORD PTR [r14+0x8020]
    f10b:	mov    eax,DWORD PTR [rdx+rax*1]
    f10e:	mov    DWORD PTR [rsp+0x44],eax
    f112:	jmp    e878 <try_commit+0x5e8>
    f117:	mov    rcx,QWORD PTR [rip+0x2183e2]        # 227500 <stderr@@GLIBC_2.2.5>
    f11e:	lea    rdi,[rip+0x103f0]        # 1f515 <desc_template.13816+0x995>
    f125:	mov    edx,0xf
    f12a:	mov    esi,0x1
    f12f:	call   33e0 <fwrite@plt>
    f134:	lea    rcx,[rip+0x105b5]        # 1f6f0 <__PRETTY_FUNCTION__.14583>
    f13b:	lea    rsi,[rip+0xfc46]        # 1ed88 <desc_template.13816+0x208>
    f142:	lea    rdi,[rip+0x1023a]        # 1f383 <desc_template.13816+0x803>
    f149:	mov    edx,0xa54
    f14e:	call   3000 <__assert_fail@plt>
    f153:	lea    rcx,[rip+0x10626]        # 1f780 <__PRETTY_FUNCTION__.14126>
    f15a:	lea    rsi,[rip+0xfc27]        # 1ed88 <desc_template.13816+0x208>
    f161:	lea    rdi,[rip+0x101e8]        # 1f350 <desc_template.13816+0x7d0>
    f168:	mov    edx,0x45c
    f16d:	call   3000 <__assert_fail@plt>
    f172:	mov    ecx,0xfffffffe
    f177:	mov    rdi,QWORD PTR [rip+0x218382]        # 227500 <stderr@@GLIBC_2.2.5>
    f17e:	lea    rdx,[rip+0x10373]        # 1f4f8 <desc_template.13816+0x978>
    f185:	mov    esi,0x1
    f18a:	xor    eax,eax
    f18c:	call   3400 <__fprintf_chk@plt>
    f191:	lea    rcx,[rip+0x10558]        # 1f6f0 <__PRETTY_FUNCTION__.14583>
    f198:	lea    rsi,[rip+0xfbe9]        # 1ed88 <desc_template.13816+0x208>
    f19f:	lea    rdi,[rip+0x101dd]        # 1f383 <desc_template.13816+0x803>
    f1a6:	mov    edx,0xa3b
    f1ab:	call   3000 <__assert_fail@plt>
    f1b0:	mov    ecx,DWORD PTR [rsp+0x8]
    f1b4:	mov    rdi,QWORD PTR [rip+0x218345]        # 227500 <stderr@@GLIBC_2.2.5>
    f1bb:	lea    rdx,[rip+0xffe6]        # 1f1a8 <desc_template.13816+0x628>
    f1c2:	mov    esi,0x1
    f1c7:	xor    eax,eax
    f1c9:	call   3400 <__fprintf_chk@plt>
    f1ce:	lea    rcx,[rip+0x1051b]        # 1f6f0 <__PRETTY_FUNCTION__.14583>
    f1d5:	lea    rsi,[rip+0xfbac]        # 1ed88 <desc_template.13816+0x208>
    f1dc:	lea    rdi,[rip+0x101a0]        # 1f383 <desc_template.13816+0x803>
    f1e3:	mov    edx,0xa46
    f1e8:	call   3000 <__assert_fail@plt>
    f1ed:	lea    rcx,[rip+0x104dc]        # 1f6d0 <__PRETTY_FUNCTION__.14504>
    f1f4:	lea    rsi,[rip+0xfb8d]        # 1ed88 <desc_template.13816+0x208>
    f1fb:	lea    rdi,[rip+0xff7e]        # 1f180 <desc_template.13816+0x600>
    f202:	mov    edx,0x95c
    f207:	call   3000 <__assert_fail@plt>
    f20c:	mov    ecx,0xfffffffb
    f211:	jmp    f177 <try_commit+0xee7>
    f216:	mov    ecx,0xfffffffa
    f21b:	jmp    f177 <try_commit+0xee7>
    f220:	lea    rcx,[rip+0x104a9]        # 1f6d0 <__PRETTY_FUNCTION__.14504>
    f227:	lea    rsi,[rip+0xfb5a]        # 1ed88 <desc_template.13816+0x208>
    f22e:	lea    rdi,[rip+0x10278]        # 1f4ad <desc_template.13816+0x92d>
    f235:	mov    edx,0x982
    f23a:	call   3000 <__assert_fail@plt>
    f23f:	lea    rcx,[rip+0x1051a]        # 1f760 <__PRETTY_FUNCTION__.14357>
    f246:	lea    rsi,[rip+0xfb3b]        # 1ed88 <desc_template.13816+0x208>
    f24d:	lea    rdi,[rip+0x10226]        # 1f47a <desc_template.13816+0x8fa>
    f254:	mov    edx,0x760
    f259:	call   3000 <__assert_fail@plt>
    f25e:	lea    rcx,[rip+0x1053b]        # 1f7a0 <__PRETTY_FUNCTION__.14134>
    f265:	lea    rsi,[rip+0xfb1c]        # 1ed88 <desc_template.13816+0x208>
    f26c:	lea    rdi,[rip+0xfbb5]        # 1ee28 <desc_template.13816+0x2a8>
    f273:	mov    edx,0x477
    f278:	call   3000 <__assert_fail@plt>
    f27d:	lea    rcx,[rip+0x1044c]        # 1f6d0 <__PRETTY_FUNCTION__.14504>
    f284:	lea    rsi,[rip+0xfafd]        # 1ed88 <desc_template.13816+0x208>
    f28b:	lea    rdi,[rip+0x1020e]        # 1f4a0 <desc_template.13816+0x920>
    f292:	mov    edx,0x943
    f297:	call   3000 <__assert_fail@plt>
    f29c:	lea    rcx,[rip+0x104ad]        # 1f750 <__PRETTY_FUNCTION__.14202>
    f2a3:	lea    rsi,[rip+0xfade]        # 1ed88 <desc_template.13816+0x208>
    f2aa:	lea    rdi,[rip+0x101da]        # 1f48b <desc_template.13816+0x90b>
    f2b1:	mov    edx,0x564
    f2b6:	call   3000 <__assert_fail@plt>
    f2bb:	lea    rcx,[rip+0x103ae]        # 1f670 <__PRETTY_FUNCTION__.14538>
    f2c2:	lea    rsi,[rip+0xfabf]        # 1ed88 <desc_template.13816+0x208>
    f2c9:	lea    rdi,[rip+0x101bb]        # 1f48b <desc_template.13816+0x90b>
    f2d0:	mov    edx,0x9b4
    f2d5:	call   3000 <__assert_fail@plt>
    f2da:	lea    rcx,[rip+0x1038f]        # 1f670 <__PRETTY_FUNCTION__.14538>
    f2e1:	lea    rsi,[rip+0xfaa0]        # 1ed88 <desc_template.13816+0x208>
    f2e8:	lea    rdi,[rip+0x101c0]        # 1f4af <desc_template.13816+0x92f>
    f2ef:	mov    edx,0x9b3
    f2f4:	call   3000 <__assert_fail@plt>
    f2f9:	lea    rcx,[rip+0x10370]        # 1f670 <__PRETTY_FUNCTION__.14538>
    f300:	lea    rsi,[rip+0xfa81]        # 1ed88 <desc_template.13816+0x208>
    f307:	lea    rdi,[rip+0x10085]        # 1f393 <desc_template.13816+0x813>
    f30e:	mov    edx,0x9b2
    f313:	call   3000 <__assert_fail@plt>
    f318:	lea    rcx,[rip+0x10351]        # 1f670 <__PRETTY_FUNCTION__.14538>
    f31f:	lea    rsi,[rip+0xfa62]        # 1ed88 <desc_template.13816+0x208>
    f326:	lea    rdi,[rip+0x10173]        # 1f4a0 <desc_template.13816+0x920>
    f32d:	mov    edx,0x9d7
    f332:	call   3000 <__assert_fail@plt>
    f337:	or     r14d,0xffffffff
    f33b:	mov    rdi,QWORD PTR [rip+0x2181be]        # 227500 <stderr@@GLIBC_2.2.5>
    f342:	lea    rdx,[rip+0x1017e]        # 1f4c7 <desc_template.13816+0x947>
    f349:	mov    ecx,r14d
    f34c:	mov    esi,0x1
    f351:	xor    eax,eax
    f353:	call   3400 <__fprintf_chk@plt>
    f358:	lea    rcx,[rip+0x10391]        # 1f6f0 <__PRETTY_FUNCTION__.14583>
    f35f:	lea    rsi,[rip+0xfa22]        # 1ed88 <desc_template.13816+0x208>
    f366:	lea    rdi,[rip+0x10016]        # 1f383 <desc_template.13816+0x803>
    f36d:	mov    edx,0xa4d
    f372:	call   3000 <__assert_fail@plt>
    f377:	mov    eax,DWORD PTR [rbp+0x80d8]
    f37d:	mov    r13,QWORD PTR [rbp+0x80c8]
    f384:	imul   r15d,eax
    f388:	imul   eax,DWORD PTR [rsp+0x10]
    f38d:	movsxd r15,r15d
    f390:	lea    rbx,[r13+r15*1+0x0]
    f395:	mov    QWORD PTR [rsp+0x18],rbx
    f39a:	movsxd rbx,eax
    f39d:	mov    rdi,rbx
    f3a0:	call   49d0 <qemu_malloc>
    f3a5:	mov    rdx,rbx
    f3a8:	mov    rsi,r13
    f3ab:	mov    rdi,rax
    f3ae:	mov    r12,rax
    f3b1:	call   3190 <memcpy@plt>
    f3b6:	lea    rsi,[r13+rbx*1+0x0]
    f3bb:	mov    rdx,r15
    f3be:	mov    rdi,r13
    f3c1:	call   3300 <memmove@plt>
    f3c6:	mov    rdi,QWORD PTR [rsp+0x18]
    f3cb:	mov    rsi,r12
    f3ce:	mov    rdx,rbx
    f3d1:	call   3190 <memcpy@plt>
    f3d6:	mov    rdi,r12
    f3d9:	call   2e40 <free@plt>
    f3de:	mov    r12d,DWORD PTR [rbp+0x80d4]
    f3e5:	jmp    ee2e <try_commit+0xb9e>
    f3ea:	lea    rcx,[rip+0x102bf]        # 1f6b0 <__PRETTY_FUNCTION__.13739>
    f3f1:	lea    rsi,[rip+0xf990]        # 1ed88 <desc_template.13816+0x208>
    f3f8:	lea    rdi,[rip+0xff02]        # 1f301 <desc_template.13816+0x781>
    f3ff:	mov    edx,0xb5
    f404:	call   3000 <__assert_fail@plt>
    f409:	cmp    eax,0x3
    f40c:	je     f42d <try_commit+0x119d>
    f40e:	lea    rcx,[rip+0x1025b]        # 1f670 <__PRETTY_FUNCTION__.14538>
    f415:	lea    rsi,[rip+0xf96c]        # 1ed88 <desc_template.13816+0x208>
    f41c:	lea    rdi,[rip+0xff60]        # 1f383 <desc_template.13816+0x803>
    f423:	mov    edx,0x9e3
    f428:	call   3000 <__assert_fail@plt>
    f42d:	lea    rcx,[rip+0x1023c]        # 1f670 <__PRETTY_FUNCTION__.14538>
    f434:	lea    rsi,[rip+0xf94d]        # 1ed88 <desc_template.13816+0x208>
    f43b:	lea    rdi,[rip+0xff41]        # 1f383 <desc_template.13816+0x803>
    f442:	mov    edx,0x9a9
    f447:	call   3000 <__assert_fail@plt>
    f44c:	test   r15d,r15d
    f44f:	je     ee44 <try_commit+0xbb4>
    f455:	xor    r14d,r14d
    f458:	jmp    ee10 <try_commit+0xb80>
    f45d:	nop    DWORD PTR [rax]

000000000000f460 <vvfat_write>:
    f460:	push   r15
    f462:	push   r14
    f464:	push   r13
    f466:	push   r12
    f468:	push   rbp
    f469:	push   rbx
    f46a:	sub    rsp,0x398
    f471:	mov    r13,QWORD PTR [rdi+0x40]
    f475:	mov    rax,QWORD PTR fs:0x28
    f47e:	mov    QWORD PTR [rsp+0x388],rax
    f486:	xor    eax,eax
    f488:	mov    QWORD PTR [rsp+0x8],rsi
    f48d:	mov    QWORD PTR [rsp+0x28],rdx
    f492:	cmp    QWORD PTR [r13+0x8080],0x0
    f49a:	mov    DWORD PTR [rsp+0x14],ecx
    f49e:	je     f4ba <vvfat_write+0x5a>
    f4a0:	mov    edi,DWORD PTR [r13+0x807c]
    f4a7:	mov    QWORD PTR [r13+0x8080],0x0
    f4b2:	test   edi,edi
    f4b4:	jne    f8a4 <vvfat_write+0x444>
    f4ba:	mov    eax,DWORD PTR [r13+0x8]
    f4be:	mov    rbx,QWORD PTR [rsp+0x8]
    f4c3:	mov    DWORD PTR [r13+0x8098],0xffffffff
    f4ce:	cmp    rax,rbx
    f4d1:	jg     f850 <vvfat_write+0x3f0>
    f4d7:	mov    r10d,DWORD PTR [r13+0x806c]
    f4de:	mov    r9d,DWORD PTR [r13+0x805c]
    f4e5:	mov    rax,rbx
    f4e8:	sub    rax,r10
    f4eb:	mov    DWORD PTR [rsp+0x24],r10d
    f4f0:	mov    DWORD PTR [rsp+0x18],r9d
    f4f5:	cqo    
    f4f7:	idiv   r9
    f4fa:	mov    r14d,eax
    f4fd:	movsxd rax,DWORD PTR [rsp+0x14]
    f502:	add    rax,rbx
    f505:	mov    QWORD PTR [rsp+0x30],rax
    f50a:	lea    rbx,[rax-0x1]
    f50e:	lea    rax,[rsp+0x40]
    f513:	mov    QWORD PTR [rsp+0x38],rax
    f518:	mov    rax,rbx
    f51b:	sub    rax,r10
    f51e:	cqo    
    f520:	idiv   r9
    f523:	cmp    r14d,eax
    f526:	ja     f5eb <vvfat_write+0x18b>
    f52c:	mov    r8d,DWORD PTR [r13+0x804c]
    f533:	xor    esi,esi
    f535:	mov    ecx,r8d
    f538:	jmp    f556 <vvfat_write+0xf6>
    f53a:	nop    WORD PTR [rax+rax*1+0x0]
    f540:	cmp    ecx,eax
    f542:	jne    f54c <vvfat_write+0xec>
    f544:	test   ecx,ecx
    f546:	jne    f919 <vvfat_write+0x4b9>
    f54c:	cmp    ecx,eax
    f54e:	je     f5c8 <vvfat_write+0x168>
    f550:	mov    ecx,eax
    f552:	cmp    esi,ecx
    f554:	jg     f5a4 <vvfat_write+0x144>
    f556:	lea    edx,[rcx+rsi*1]
    f559:	mov    eax,edx
    f55b:	shr    eax,0x1f
    f55e:	add    eax,edx
    f560:	sar    eax,1
    f562:	cmp    r8d,eax
    f565:	mov    ebp,eax
    f567:	jbe    f8fa <vvfat_write+0x49a>
    f56d:	mov    r12d,DWORD PTR [r13+0x8050]
    f574:	mov    edx,eax
    f576:	mov    r11,QWORD PTR [r13+0x8040]
    f57d:	imul   edx,r12d
    f581:	add    rdx,r11
    f584:	mov    edi,DWORD PTR [rdx]
    f586:	mov    edx,DWORD PTR [rdx+0x4]
    f589:	cmp    edi,edx
    f58b:	jae    f8db <vvfat_write+0x47b>
    f591:	cmp    r14d,edi
    f594:	jbe    f540 <vvfat_write+0xe0>
    f596:	cmp    esi,eax
    f598:	je     f6b0 <vvfat_write+0x250>
    f59e:	mov    esi,eax
    f5a0:	cmp    esi,ecx
    f5a2:	jle    f556 <vvfat_write+0xf6>
    f5a4:	lea    rcx,[rip+0x101d5]        # 1f780 <__PRETTY_FUNCTION__.14126>
    f5ab:	lea    rsi,[rip+0xf7d6]        # 1ed88 <desc_template.13816+0x208>
    f5b2:	lea    rdi,[rip+0xfdb3]        # 1f36c <desc_template.13816+0x7ec>
    f5b9:	mov    edx,0x465
    f5be:	call   3000 <__assert_fail@plt>
    f5c3:	nop    DWORD PTR [rax+rax*1+0x0]
    f5c8:	mov    ebp,esi
    f5ca:	cmp    r8d,ebp
    f5cd:	ja     f6c0 <vvfat_write+0x260>
    f5d3:	mov    rax,rbx
    f5d6:	add    r14d,0x1
    f5da:	sub    rax,r10
    f5dd:	cqo    
    f5df:	idiv   r9
    f5e2:	cmp    r14d,eax
    f5e5:	jbe    f52c <vvfat_write+0xcc>
    f5eb:	mov    rdi,QWORD PTR [r13+0x80b0]
    f5f2:	mov    ecx,DWORD PTR [rsp+0x14]
    f5f6:	mov    rdx,QWORD PTR [rsp+0x28]
    f5fb:	mov    rsi,QWORD PTR [rsp+0x8]
    f600:	mov    rax,QWORD PTR [rdi+0x38]
    f604:	call   QWORD PTR [rax+0x28]
    f607:	test   eax,eax
    f609:	mov    ebp,eax
    f60b:	js     f938 <vvfat_write+0x4d8>
    f611:	mov    r8d,DWORD PTR [r13+0x806c]
    f618:	mov    rcx,QWORD PTR [rsp+0x8]
    f61d:	mov    esi,DWORD PTR [r13+0x805c]
    f624:	sub    rcx,r8
    f627:	mov    rax,rcx
    f62a:	cqo    
    f62c:	idiv   rsi
    f62f:	mov    rcx,rax
    f632:	mov    edi,eax
    f634:	mov    rax,rbx
    f637:	sub    rax,r8
    f63a:	cqo    
    f63c:	idiv   rsi
    f63f:	cmp    eax,ecx
    f641:	jb     f67b <vvfat_write+0x21b>
    f643:	movsxd rcx,ecx
    f646:	test   edi,edi
    f648:	js     f665 <vvfat_write+0x205>
    f64a:	mov    rax,QWORD PTR [r13+0x80c0]
    f651:	add    rax,rcx
    f654:	or     BYTE PTR [rax],0x4
    f657:	mov    r8d,DWORD PTR [r13+0x806c]
    f65e:	mov    esi,DWORD PTR [r13+0x805c]
    f665:	mov    rax,rbx
    f668:	add    edi,0x1
    f66b:	add    rcx,0x1
    f66f:	sub    rax,r8
    f672:	cqo    
    f674:	idiv   rsi
    f677:	cmp    edi,eax
    f679:	jbe    f646 <vvfat_write+0x1e6>
    f67b:	mov    rdi,r13
    f67e:	xor    ebp,ebp
    f680:	call   e290 <try_commit>
    f685:	mov    rbx,QWORD PTR [rsp+0x388]
    f68d:	xor    rbx,QWORD PTR fs:0x28
    f696:	mov    eax,ebp
    f698:	jne    f983 <vvfat_write+0x523>
    f69e:	add    rsp,0x398
    f6a5:	pop    rbx
    f6a6:	pop    rbp
    f6a7:	pop    r12
    f6a9:	pop    r13
    f6ab:	pop    r14
    f6ad:	pop    r15
    f6af:	ret    
    f6b0:	cmp    r14d,edx
    f6b3:	jb     f6c0 <vvfat_write+0x260>
    f6b5:	mov    ebp,ecx
    f6b7:	cmp    r8d,ebp
    f6ba:	jbe    f5d3 <vvfat_write+0x173>
    f6c0:	imul   r12d,ebp
    f6c4:	add    r12,r11
    f6c7:	cmp    r14d,DWORD PTR [r12]
    f6cb:	jb     f5d3 <vvfat_write+0x173>
    f6d1:	mov    eax,DWORD PTR [r12+0x4]
    f6d6:	cmp    r14d,eax
    f6d9:	jae    f988 <vvfat_write+0x528>
    f6df:	mov    ebp,DWORD PTR [r12+0x24]
    f6e4:	test   ebp,ebp
    f6e6:	jne    f95a <vvfat_write+0x4fa>
    f6ec:	test   BYTE PTR [r12+0x20],0x4
    f6f2:	jne    f6fc <vvfat_write+0x29c>
    f6f4:	mov    r14d,eax
    f6f7:	jmp    f518 <vvfat_write+0xb8>
    f6fc:	mov    eax,DWORD PTR [rsp+0x18]
    f700:	mov    edi,DWORD PTR [rsp+0x24]
    f704:	mov    QWORD PTR [rsp+0x374],0x100
    f710:	mov    DWORD PTR [rsp+0x37c],0x0
    f71b:	imul   r14d,eax
    f71f:	lea    ecx,[r14+rdi*1]
    f723:	mov    rdi,QWORD PTR [rsp+0x8]
    f728:	lea    edx,[rcx+rax*1]
    f72b:	movsxd rax,ecx
    f72e:	cmp    rax,rdi
    f731:	jl     f89a <vvfat_write+0x43a>
    f737:	mov    r15,QWORD PTR [rsp+0x8]
    f73c:	mov    esi,DWORD PTR [rsp+0x14]
    f740:	movsxd rdi,edx
    f743:	mov    r14d,ecx
    f746:	add    esi,r15d
    f749:	cmp    rdi,QWORD PTR [rsp+0x30]
    f74e:	cmovg  edx,esi
    f751:	mov    esi,DWORD PTR [rsp+0x18]
    f755:	sub    rax,r15
    f758:	imul   esi,DWORD PTR [r12]
    f75d:	mov    r15,rax
    f760:	mov    eax,edx
    f762:	sub    eax,ecx
    f764:	shl    r15,0x9
    f768:	shl    eax,0x4
    f76b:	sub    r14d,esi
    f76e:	shl    r14d,0x4
    f772:	add    r14d,DWORD PTR [r12+0x8]
    f777:	test   eax,eax
    f779:	mov    DWORD PTR [rsp+0x20],r14d
    f77e:	mov    r14d,eax
    f781:	jle    f890 <vvfat_write+0x430>
    f787:	add    r15,QWORD PTR [rsp+0x28]
    f78c:	mov    QWORD PTR [rsp+0x18],r12
    f791:	mov    r12,r15
    f794:	mov    r15,rbx
    f797:	mov    rbx,QWORD PTR [rsp+0x38]
    f79c:	nop    DWORD PTR [rax+0x0]
    f7a0:	mov    rsi,r12
    f7a3:	mov    rdi,rbx
    f7a6:	call   ce50 <parse_long_name>
    f7ab:	test   eax,eax
    f7ad:	js     f8b9 <vvfat_write+0x459>
    f7b3:	movzx  eax,BYTE PTR [r12+0xb]
    f7b9:	cmp    al,0x28
    f7bb:	je     f860 <vvfat_write+0x400>
    f7c1:	cmp    al,0xf
    f7c3:	je     f860 <vvfat_write+0x400>
    f7c9:	movzx  esi,BYTE PTR [r12]
    f7ce:	cmp    sil,0xe5
    f7d2:	je     f860 <vvfat_write+0x400>
    f7d8:	test   sil,sil
    f7db:	je     f860 <vvfat_write+0x400>
    f7e1:	test   al,0x1
    f7e3:	je     f860 <vvfat_write+0x400>
    f7e5:	mov    eax,DWORD PTR [rsp+0x20]
    f7e9:	add    eax,ebp
    f7eb:	cmp    DWORD PTR [r13+0x8034],eax
    f7f2:	jbe    f8fa <vvfat_write+0x49a>
    f7f8:	imul   eax,DWORD PTR [r13+0x8038]
    f800:	mov    rsi,QWORD PTR [r12]
    f804:	mov    rdi,QWORD PTR [r12+0x8]
    f809:	add    rax,QWORD PTR [r13+0x8028]
    f810:	xor    rdi,QWORD PTR [rax+0x8]
    f814:	xor    rsi,QWORD PTR [rax]
    f817:	or     rdi,rsi
    f81a:	jne    f833 <vvfat_write+0x3d3>
    f81c:	mov    rsi,QWORD PTR [r12+0x10]
    f821:	mov    rdi,QWORD PTR [r12+0x18]
    f826:	xor    rsi,QWORD PTR [rax+0x10]
    f82a:	xor    rdi,QWORD PTR [rax+0x18]
    f82e:	or     rdi,rsi
    f831:	je     f860 <vvfat_write+0x400>
    f833:	mov    rcx,QWORD PTR [rip+0x217cc6]        # 227500 <stderr@@GLIBC_2.2.5>
    f83a:	lea    rdi,[rip+0xf9bf]        # 1f200 <desc_template.13816+0x680>
    f841:	mov    edx,0x30
    f846:	mov    esi,0x1
    f84b:	call   33e0 <fwrite@plt>
    f850:	mov    ebp,0xffffffff
    f855:	jmp    f685 <vvfat_write+0x225>
    f85a:	nop    WORD PTR [rax+rax*1+0x0]
    f860:	add    ebp,0x1
    f863:	add    r12,0x20
    f867:	cmp    ebp,r14d
    f86a:	jne    f7a0 <vvfat_write+0x340>
    f870:	mov    r10d,DWORD PTR [r13+0x806c]
    f877:	mov    r9d,DWORD PTR [r13+0x805c]
    f87e:	mov    rbx,r15
    f881:	mov    r12,QWORD PTR [rsp+0x18]
    f886:	mov    DWORD PTR [rsp+0x24],r10d
    f88b:	mov    DWORD PTR [rsp+0x18],r9d
    f890:	mov    eax,DWORD PTR [r12+0x4]
    f895:	jmp    f6f4 <vvfat_write+0x294>
    f89a:	mov    ecx,edi
    f89c:	movsxd rax,edi
    f89f:	jmp    f737 <vvfat_write+0x2d7>
    f8a4:	call   3040 <close@plt>
    f8a9:	mov    DWORD PTR [r13+0x807c],0x0
    f8b4:	jmp    f4ba <vvfat_write+0x5a>
    f8b9:	mov    rcx,QWORD PTR [rip+0x217c40]        # 227500 <stderr@@GLIBC_2.2.5>
    f8c0:	lea    rdi,[rip+0xfc5e]        # 1f525 <desc_template.13816+0x9a5>
    f8c7:	mov    edx,0x1c
    f8cc:	mov    esi,0x1
    f8d1:	call   33e0 <fwrite@plt>
    f8d6:	jmp    f850 <vvfat_write+0x3f0>
    f8db:	lea    rcx,[rip+0xfe9e]        # 1f780 <__PRETTY_FUNCTION__.14126>
    f8e2:	lea    rsi,[rip+0xf49f]        # 1ed88 <desc_template.13816+0x208>
    f8e9:	lea    rdi,[rip+0xfa42]        # 1f332 <desc_template.13816+0x7b2>
    f8f0:	mov    edx,0x45a
    f8f5:	call   3000 <__assert_fail@plt>
    f8fa:	lea    rcx,[rip+0xfe6f]        # 1f770 <__PRETTY_FUNCTION__.13707>
    f901:	lea    rsi,[rip+0xf480]        # 1ed88 <desc_template.13816+0x208>
    f908:	lea    rdi,[rip+0xfa0f]        # 1f31e <desc_template.13816+0x79e>
    f90f:	mov    edx,0x60
    f914:	call   3000 <__assert_fail@plt>
    f919:	lea    rcx,[rip+0xfe60]        # 1f780 <__PRETTY_FUNCTION__.14126>
    f920:	lea    rsi,[rip+0xf461]        # 1ed88 <desc_template.13816+0x208>
    f927:	lea    rdi,[rip+0xfa22]        # 1f350 <desc_template.13816+0x7d0>
    f92e:	mov    edx,0x45c
    f933:	call   3000 <__assert_fail@plt>
    f938:	mov    rcx,QWORD PTR [rip+0x217bc1]        # 227500 <stderr@@GLIBC_2.2.5>
    f93f:	lea    rdi,[rip+0xf8f2]        # 1f238 <desc_template.13816+0x6b8>
    f946:	mov    edx,0x1e
    f94b:	mov    esi,0x1
    f950:	call   33e0 <fwrite@plt>
    f955:	jmp    f685 <vvfat_write+0x225>
    f95a:	mov    rcx,QWORD PTR [r12+0x18]
    f95f:	mov    rdi,QWORD PTR [rip+0x217b9a]        # 227500 <stderr@@GLIBC_2.2.5>
    f966:	lea    rdx,[rip+0xf863]        # 1f1d0 <desc_template.13816+0x650>
    f96d:	mov    esi,0x1
    f972:	xor    eax,eax
    f974:	mov    ebp,0xffffffff
    f979:	call   3400 <__fprintf_chk@plt>
    f97e:	jmp    f685 <vvfat_write+0x225>
    f983:	call   2f70 <__stack_chk_fail@plt>
    f988:	lea    rcx,[rip+0xfe11]        # 1f7a0 <__PRETTY_FUNCTION__.14134>
    f98f:	lea    rsi,[rip+0xf3f2]        # 1ed88 <desc_template.13816+0x208>
    f996:	lea    rdi,[rip+0xf48b]        # 1ee28 <desc_template.13816+0x2a8>
    f99d:	mov    edx,0x477
    f9a2:	call   3000 <__assert_fail@plt>
    f9a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000000f9b0 <write_target_commit>:
    f9b0:	mov    rdi,QWORD PTR [rdi+0x40]
    f9b4:	jmp    e290 <try_commit>
    f9b9:	nop    DWORD PTR [rax+0x0]

000000000000f9c0 <fat_datetime.constprop.10>:
    f9c0:	sub    rsp,0x58
    f9c4:	mov    QWORD PTR [rsp+0x8],rdi
    f9c9:	lea    rsi,[rsp+0x10]
    f9ce:	lea    rdi,[rsp+0x8]
    f9d3:	mov    rax,QWORD PTR fs:0x28
    f9dc:	mov    QWORD PTR [rsp+0x48],rax
    f9e1:	xor    eax,eax
    f9e3:	call   2eb0 <localtime_r@plt>
    f9e8:	mov    ecx,DWORD PTR [rsp+0x24]
    f9ec:	mov    eax,DWORD PTR [rsp+0x20]
    f9f0:	lea    edx,[rcx-0x50]
    f9f3:	add    eax,0x1
    f9f6:	shl    eax,0x5
    f9f9:	shl    edx,0x9
    f9fc:	or     eax,edx
    f9fe:	or     ax,WORD PTR [rsp+0x1c]
    fa03:	mov    rcx,QWORD PTR [rsp+0x48]
    fa08:	xor    rcx,QWORD PTR fs:0x28
    fa11:	jne    fa18 <fat_datetime.constprop.10+0x58>
    fa13:	add    rsp,0x58
    fa17:	ret    
    fa18:	call   2f70 <__stack_chk_fail@plt>
    fa1d:	nop    DWORD PTR [rax]

000000000000fa20 <read_directory>:
    fa20:	push   r15
    fa22:	push   r14
    fa24:	mov    r14,rdi
    fa27:	push   r13
    fa29:	push   r12
    fa2b:	mov    eax,esi
    fa2d:	push   rbp
    fa2e:	push   rbx
    fa2f:	sub    rsp,0x258
    fa36:	mov    DWORD PTR [rsp+0x58],esi
    fa3a:	mov    esi,DWORD PTR [r14+0x804c]
    fa41:	mov    rdi,QWORD PTR fs:0x28
    fa4a:	mov    QWORD PTR [rsp+0x248],rdi
    fa52:	xor    edi,edi
    fa54:	cmp    eax,esi
    fa56:	jae    108cb <read_directory+0xeab>
    fa5c:	mov    ecx,DWORD PTR [r14+0x8050]
    fa63:	mov    ebx,DWORD PTR [rsp+0x58]
    fa67:	mov    rdx,QWORD PTR [r14+0x8040]
    fa6e:	imul   ebx,ecx
    fa71:	add    rbx,rdx
    fa74:	mov    rax,QWORD PTR [rbx+0x18]
    fa78:	mov    QWORD PTR [rsp+0x8],rax
    fa7d:	mov    eax,DWORD PTR [rbx]
    fa7f:	mov    DWORD PTR [rsp+0x24],eax
    fa83:	mov    eax,DWORD PTR [rbx+0x10]
    fa86:	test   eax,eax
    fa88:	js     1084f <read_directory+0xe2f>
    fa8e:	cmp    eax,esi
    fa90:	jae    108cb <read_directory+0xeab>
    fa96:	imul   eax,ecx
    fa99:	mov    DWORD PTR [rsp+0x48],0xffffffff
    faa1:	add    rax,rdx
    faa4:	je     faac <read_directory+0x8c>
    faa6:	mov    eax,DWORD PTR [rax]
    faa8:	mov    DWORD PTR [rsp+0x48],eax
    faac:	mov    rdi,QWORD PTR [rsp+0x8]
    fab1:	call   2f40 <opendir@plt>
    fab6:	test   BYTE PTR [rbx+0x20],0x4
    faba:	mov    QWORD PTR [rsp+0x28],rax
    fabf:	je     1086d <read_directory+0xe4d>
    fac5:	cmp    QWORD PTR [rsp+0x28],0x0
    facb:	je     108ea <read_directory+0xeca>
    fad1:	mov    edi,DWORD PTR [rsp+0x24]
    fad5:	xor    r13d,r13d
    fad8:	test   edi,edi
    fada:	je     fae3 <read_directory+0xc3>
    fadc:	mov    r13d,DWORD PTR [r14+0x8034]
    fae3:	mov    eax,DWORD PTR [rsp+0x24]
    fae7:	mov    DWORD PTR [rbx+0x14],r13d
    faeb:	shr    eax,0x10
    faee:	mov    DWORD PTR [rsp+0x5c],eax
    faf2:	mov    eax,DWORD PTR [rsp+0x48]
    faf6:	shr    eax,0x10
    faf9:	mov    DWORD PTR [rsp+0x4c],eax
    fafd:	nop    DWORD PTR [rax]
    fb00:	mov    rdi,QWORD PTR [rsp+0x28]
    fb05:	call   3310 <readdir64@plt>
    fb0a:	test   rax,rax
    fb0d:	mov    r12,rax
    fb10:	je     1064f <read_directory+0xc2f>
    fb16:	mov    rdi,QWORD PTR [rsp+0x8]
    fb1b:	lea    rbp,[r12+0x13]
    fb20:	call   2f60 <strlen@plt>
    fb25:	mov    rdi,rbp
    fb28:	mov    rbx,rax
    fb2b:	call   2f60 <strlen@plt>
    fb30:	lea    rdi,[rip+0xf8e1]        # 1f418 <desc_template.13816+0x898>
    fb37:	mov    ecx,0x2
    fb3c:	mov    rsi,rbp
    fb3f:	lea    eax,[rbx+rax*1+0x2]
    fb43:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    fb45:	mov    rsi,rbp
    fb48:	mov    ecx,0x3
    fb4d:	seta   dl
    fb50:	sbb    dl,0x0
    fb53:	movsx  edi,dl
    fb56:	test   edi,edi
    fb58:	mov    DWORD PTR [rsp+0x20],edi
    fb5c:	lea    rdi,[rip+0xf8b4]        # 1f417 <desc_template.13816+0x897>
    fb63:	sete   bl
    fb66:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    fb68:	seta   dl
    fb6b:	sbb    dl,0x0
    fb6e:	movsx  esi,dl
    fb71:	test   esi,esi
    fb73:	mov    DWORD PTR [rsp+0x18],esi
    fb77:	mov    esi,DWORD PTR [rsp+0x24]
    fb7b:	sete   r15b
    fb7f:	test   esi,esi
    fb81:	jne    fbfe <read_directory+0x1de>
    fb83:	test   bl,bl
    fb85:	jne    fb00 <read_directory+0xe0>
    fb8b:	test   r15b,r15b
    fb8e:	jne    fb00 <read_directory+0xe0>
    fb94:	mov    ebx,eax
    fb96:	mov    rdi,rbx
    fb99:	call   49d0 <qemu_malloc>
    fb9e:	sub    rsp,0x8
    fba2:	mov    QWORD PTR [rsp+0x18],rax
    fba7:	lea    r8,[rip+0xf994]        # 1f542 <desc_template.13816+0x9c2>
    fbae:	push   rbp
    fbaf:	mov    r9,QWORD PTR [rsp+0x18]
    fbb4:	mov    rcx,0xffffffffffffffff
    fbbb:	mov    rsi,rbx
    fbbe:	mov    rdi,rax
    fbc1:	mov    edx,0x1
    fbc6:	mov    rbx,rax
    fbc9:	xor    eax,eax
    fbcb:	call   2e30 <__snprintf_chk@plt>
    fbd0:	lea    rdx,[rsp+0xc0]
    fbd8:	mov    rsi,rbx
    fbdb:	mov    edi,0x1
    fbe0:	call   2f30 <__xstat64@plt>
    fbe5:	test   eax,eax
    fbe7:	pop    rdx
    fbe8:	pop    rcx
    fbe9:	jns    ff63 <read_directory+0x543>
    fbef:	mov    rdi,QWORD PTR [rsp+0x10]
    fbf4:	call   2e40 <free@plt>
    fbf9:	jmp    fb00 <read_directory+0xe0>
    fbfe:	mov    esi,eax
    fc00:	mov    rdi,rsi
    fc03:	mov    QWORD PTR [rsp+0x10],rsi
    fc08:	call   49d0 <qemu_malloc>
    fc0d:	sub    rsp,0x8
    fc11:	lea    r8,[rip+0xf92a]        # 1f542 <desc_template.13816+0x9c2>
    fc18:	mov    rcx,0xffffffffffffffff
    fc1f:	push   rbp
    fc20:	mov    rsi,QWORD PTR [rsp+0x20]
    fc25:	mov    rdi,rax
    fc28:	mov    r9,QWORD PTR [rsp+0x18]
    fc2d:	mov    edx,0x1
    fc32:	mov    QWORD PTR [rsp+0x20],rax
    fc37:	xor    eax,eax
    fc39:	call   2e30 <__snprintf_chk@plt>
    fc3e:	mov    rsi,QWORD PTR [rsp+0x20]
    fc43:	lea    rdx,[rsp+0xc0]
    fc4b:	mov    edi,0x1
    fc50:	call   2f30 <__xstat64@plt>
    fc55:	test   eax,eax
    fc57:	pop    rdx
    fc58:	pop    rcx
    fc59:	js     fbef <read_directory+0x1cf>
    fc5b:	mov    eax,DWORD PTR [r14+0x8034]
    fc62:	or     bl,r15b
    fc65:	mov    DWORD PTR [rsp+0x1c],eax
    fc69:	je     ff6e <read_directory+0x54e>
    fc6f:	lea    r12d,[rax+0x1]
    fc73:	mov    eax,DWORD PTR [r14+0x8038]
    fc7a:	mov    edx,r12d
    fc7d:	imul   edx,eax
    fc80:	cmp    edx,DWORD PTR [r14+0x8030]
    fc87:	ja     1050f <read_directory+0xaef>
    fc8d:	mov    eax,DWORD PTR [rsp+0x1c]
    fc91:	mov    DWORD PTR [r14+0x8034],r12d
    fc98:	cmp    eax,r12d
    fc9b:	jae    108cb <read_directory+0xeab>
    fca1:	mov    ecx,eax
    fca3:	imul   ecx,DWORD PTR [r14+0x8038]
    fcab:	add    rcx,QWORD PTR [r14+0x8028]
    fcb2:	mov    r15,rcx
    fcb5:	movabs rax,0x2020202020202020
    fcbf:	mov    rdi,rbp
    fcc2:	mov    BYTE PTR [r15+0xa],0x20
    fcc7:	mov    QWORD PTR [r15],rax
    fcca:	mov    eax,0x2020
    fccf:	mov    WORD PTR [r15+0x8],ax
    fcd4:	call   2f60 <strlen@plt>
    fcd9:	mov    rsi,rbp
    fcdc:	mov    rdx,rax
    fcdf:	mov    rdi,r15
    fce2:	call   3190 <memcpy@plt>
    fce7:	mov    eax,DWORD PTR [rsp+0xc8]
    fcee:	mov    edx,0x10
    fcf3:	lea    rbp,[rsp+0x70]
    fcf8:	lea    rdi,[rsp+0x68]
    fcfd:	mov    rsi,rbp
    fd00:	and    eax,0xf000
    fd05:	cmp    eax,0x4000
    fd0a:	mov    eax,0x20
    fd0f:	cmove  eax,edx
    fd12:	xor    r9d,r9d
    fd15:	mov    WORD PTR [r15+0xc],r9w
    fd1a:	mov    BYTE PTR [r15+0xb],al
    fd1e:	mov    rax,QWORD PTR [rsp+0x118]
    fd26:	mov    QWORD PTR [rsp+0x68],rax
    fd2b:	call   2eb0 <localtime_r@plt>
    fd30:	mov    edx,DWORD PTR [rsp+0x70]
    fd34:	mov    eax,edx
    fd36:	shr    eax,0x1f
    fd39:	add    eax,edx
    fd3b:	mov    edx,DWORD PTR [rsp+0x74]
    fd3f:	sar    eax,1
    fd41:	shl    edx,0x5
    fd44:	or     eax,edx
    fd46:	mov    edx,DWORD PTR [rsp+0x78]
    fd4a:	shl    edx,0xb
    fd4d:	or     eax,edx
    fd4f:	mov    WORD PTR [r15+0xe],ax
    fd54:	mov    rdi,QWORD PTR [rsp+0x118]
    fd5c:	call   f9c0 <fat_datetime.constprop.10>
    fd61:	mov    WORD PTR [r15+0x10],ax
    fd66:	mov    rdi,QWORD PTR [rsp+0xf8]
    fd6e:	call   f9c0 <fat_datetime.constprop.10>
    fd73:	xor    r10d,r10d
    fd76:	mov    WORD PTR [r15+0x12],ax
    fd7b:	lea    rdi,[rsp+0x60]
    fd80:	mov    WORD PTR [r15+0x14],r10w
    fd85:	mov    rax,QWORD PTR [rsp+0x108]
    fd8d:	mov    rsi,rbp
    fd90:	mov    QWORD PTR [rsp+0x60],rax
    fd95:	call   2eb0 <localtime_r@plt>
    fd9a:	mov    edx,DWORD PTR [rsp+0x70]
    fd9e:	mov    eax,edx
    fda0:	shr    eax,0x1f
    fda3:	add    eax,edx
    fda5:	mov    edx,DWORD PTR [rsp+0x74]
    fda9:	sar    eax,1
    fdab:	shl    edx,0x5
    fdae:	or     eax,edx
    fdb0:	mov    edx,DWORD PTR [rsp+0x78]
    fdb4:	shl    edx,0xb
    fdb7:	or     eax,edx
    fdb9:	mov    WORD PTR [r15+0x16],ax
    fdbe:	mov    rdi,QWORD PTR [rsp+0x108]
    fdc6:	call   f9c0 <fat_datetime.constprop.10>
    fdcb:	mov    r11d,DWORD PTR [rsp+0x18]
    fdd0:	mov    WORD PTR [r15+0x18],ax
    fdd5:	test   r11d,r11d
    fdd8:	jne    ff3c <read_directory+0x51c>
    fdde:	movzx  eax,WORD PTR [rsp+0x48]
    fde3:	mov    WORD PTR [r15+0x1a],ax
    fde8:	movzx  eax,WORD PTR [rsp+0x4c]
    fded:	mov    WORD PTR [r15+0x14],ax
    fdf2:	mov    rdx,QWORD PTR [rsp+0xe0]
    fdfa:	cmp    rdx,0x7fffffff
    fe01:	jg     107fa <read_directory+0xdda>
    fe07:	mov    eax,DWORD PTR [rsp+0xc8]
    fe0e:	and    eax,0xf000
    fe13:	cmp    eax,0x4000
    fe18:	je     ff1d <read_directory+0x4fd>
    fe1e:	test   bl,bl
    fe20:	mov    DWORD PTR [r15+0x1c],edx
    fe24:	jne    ff2d <read_directory+0x50d>
    fe2a:	cmp    QWORD PTR [rsp+0xe0],0x0
    fe33:	je     ff2d <read_directory+0x50d>
    fe39:	mov    ebx,DWORD PTR [r14+0x804c]
    fe40:	mov    eax,DWORD PTR [r14+0x8050]
    fe47:	lea    ebp,[rbx+0x1]
    fe4a:	mov    edx,ebp
    fe4c:	imul   edx,eax
    fe4f:	cmp    edx,DWORD PTR [r14+0x8048]
    fe56:	ja     105d6 <read_directory+0xbb6>
    fe5c:	cmp    ebx,ebp
    fe5e:	mov    DWORD PTR [r14+0x804c],ebp
    fe65:	jae    108cb <read_directory+0xeab>
    fe6b:	imul   ebx,DWORD PTR [r14+0x8050]
    fe73:	mov    rax,QWORD PTR [r14+0x8040]
    fe7a:	add    rax,rbx
    fe7d:	mov    QWORD PTR [r14+0x8080],rax
    fe84:	mov    DWORD PTR [rax],0x0
    fe8a:	mov    rax,QWORD PTR [r14+0x8080]
    fe91:	mov    rdx,QWORD PTR [rsp+0xe0]
    fe99:	mov    DWORD PTR [rax+0x4],edx
    fe9c:	mov    eax,DWORD PTR [r14+0x8034]
    fea3:	mov    rdx,QWORD PTR [r14+0x8080]
    feaa:	sub    eax,0x1
    fead:	mov    DWORD PTR [rdx+0x8],eax
    feb0:	mov    rax,QWORD PTR [r14+0x8080]
    feb7:	mov    DWORD PTR [rax+0xc],0xffffffff
    febe:	mov    eax,DWORD PTR [rsp+0xc8]
    fec5:	and    eax,0xf000
    feca:	cmp    eax,0x4000
    fecf:	mov    rax,QWORD PTR [r14+0x8080]
    fed6:	je     105bc <read_directory+0xb9c>
    fedc:	mov    DWORD PTR [rax+0x20],0x0
    fee3:	mov    rax,QWORD PTR [r14+0x8080]
    feea:	mov    DWORD PTR [rax+0x10],0x0
    fef1:	mov    rax,QWORD PTR [r14+0x8080]
    fef8:	mov    rsi,QWORD PTR [rsp+0x10]
    fefd:	xor    edx,edx
    feff:	mov    QWORD PTR [rax+0x18],rsi
    ff03:	test   BYTE PTR [rsp+0xc8],0x92
    ff0b:	mov    rax,QWORD PTR [r14+0x8080]
    ff12:	sete   dl
    ff15:	mov    DWORD PTR [rax+0x24],edx
    ff18:	jmp    fb00 <read_directory+0xe0>
    ff1d:	test   bl,bl
    ff1f:	mov    DWORD PTR [r15+0x1c],0x0
    ff27:	je     fe39 <read_directory+0x419>
    ff2d:	mov    rdi,QWORD PTR [rsp+0x10]
    ff32:	call   49c0 <qemu_free>
    ff37:	jmp    fb00 <read_directory+0xe0>
    ff3c:	mov    r8d,DWORD PTR [rsp+0x20]
    ff41:	test   r8d,r8d
    ff44:	jne    10503 <read_directory+0xae3>
    ff4a:	movzx  eax,WORD PTR [rsp+0x24]
    ff4f:	mov    WORD PTR [r15+0x1a],ax
    ff54:	movzx  eax,WORD PTR [rsp+0x5c]
    ff59:	mov    WORD PTR [r15+0x14],ax
    ff5e:	jmp    fdf2 <read_directory+0x3d2>
    ff63:	mov    eax,DWORD PTR [r14+0x8034]
    ff6a:	mov    DWORD PTR [rsp+0x1c],eax
    ff6e:	lea    r9,[rsp+0x140]
    ff76:	mov    rcx,rbp
    ff79:	xor    edx,edx
    ff7b:	lea    rax,[r9+0x1]
    ff7f:	jmp    ffa3 <read_directory+0x583>
    ff81:	nop    DWORD PTR [rax+0x0]
    ff88:	mov    BYTE PTR [rax-0x1],sil
    ff8c:	mov    BYTE PTR [rax],0x0
    ff8f:	add    rcx,0x1
    ff93:	add    rax,0x2
    ff97:	cmp    edx,0x81
    ff9d:	je     1063a <read_directory+0xc1a>
    ffa3:	movzx  esi,BYTE PTR [rcx]
    ffa6:	lea    edi,[rdx+rdx*1]
    ffa9:	add    edx,0x1
    ffac:	test   sil,sil
    ffaf:	jne    ff88 <read_directory+0x568>
    ffb1:	lea    ecx,[rdx+rdx*1]
    ffb4:	lea    edx,[rdi+0x19]
    ffb7:	mov    esi,0x4ec4ec4f
    ffbc:	mov    BYTE PTR [rax],0x0
    ffbf:	mov    BYTE PTR [rax-0x1],0x0
    ffc3:	mov    eax,edx
    ffc5:	mul    esi
    ffc7:	mov    eax,ecx
    ffc9:	shr    edx,0x3
    ffcc:	mov    r8d,edx
    ffcf:	mul    esi
    ffd1:	shr    edx,0x3
    ffd4:	imul   eax,edx,0x1a
    ffd7:	cmp    ecx,eax
    ffd9:	je     1000a <read_directory+0x5ea>
    ffdb:	add    ecx,0x1
    ffde:	lea    rdi,[rsp+0x13f]
    ffe6:	movsxd rcx,ecx
    ffe9:	nop    DWORD PTR [rax+0x0]
    fff0:	mov    eax,ecx
    fff2:	mov    BYTE PTR [rdi+rcx*1],0xff
    fff6:	mul    esi
    fff8:	mov    eax,ecx
    fffa:	add    rcx,0x1
    fffe:	shr    edx,0x3
   10001:	imul   edx,edx,0x1a
   10004:	sub    eax,edx
   10006:	test   eax,eax
   10008:	jne    fff0 <read_directory+0x5d0>
   1000a:	xor    r15d,r15d
   1000d:	test   r8d,r8d
   10010:	mov    ebx,DWORD PTR [rsp+0x1c]
   10014:	je     10192 <read_directory+0x772>
   1001a:	xor    r15d,r15d
   1001d:	mov    QWORD PTR [rsp+0x30],rbp
   10022:	mov    QWORD PTR [rsp+0x40],r12
   10027:	mov    ebp,r15d
   1002a:	mov    ebx,DWORD PTR [rsp+0x1c]
   1002e:	mov    DWORD PTR [rsp+0x38],r13d
   10033:	mov    r12d,r8d
   10036:	mov    r15,r14
   10039:	mov    QWORD PTR [rsp+0x50],r9
   1003e:	jmp    10093 <read_directory+0x673>
   10040:	cmp    r13d,ebx
   10043:	mov    DWORD PTR [r15+0x8034],r13d
   1004a:	jbe    108cb <read_directory+0xeab>
   10050:	imul   ebx,DWORD PTR [r15+0x8038]
   10058:	mov    rax,QWORD PTR [r15+0x8028]
   1005f:	mov    ecx,r12d
   10062:	xor    r14d,r14d
   10065:	mov    r13d,0xf
   1006b:	sub    ecx,ebp
   1006d:	add    rax,rbx
   10070:	test   ebp,ebp
   10072:	mov    WORD PTR [rax+0xb],r13w
   10077:	mov    WORD PTR [rax+0x1a],r14w
   1007c:	je     10622 <read_directory+0xc02>
   10082:	add    ebp,0x1
   10085:	mov    BYTE PTR [rax],cl
   10087:	cmp    ebp,r12d
   1008a:	je     100ec <read_directory+0x6cc>
   1008c:	mov    ebx,DWORD PTR [r15+0x8034]
   10093:	lea    r13d,[rbx+0x1]
   10097:	mov    eax,DWORD PTR [r15+0x8038]
   1009e:	mov    esi,r13d
   100a1:	imul   esi,eax
   100a4:	cmp    esi,DWORD PTR [r15+0x8030]
   100ab:	jbe    10040 <read_directory+0x620>
   100ad:	mov    r9d,eax
   100b0:	mov    rdi,QWORD PTR [r15+0x8028]
   100b7:	shl    r9d,0x5
   100bb:	sub    r9d,eax
   100be:	lea    r14d,[r9+rsi*1]
   100c2:	movsxd rsi,r14d
   100c5:	call   49f0 <qemu_realloc>
   100ca:	test   rax,rax
   100cd:	mov    QWORD PTR [r15+0x8028],rax
   100d4:	je     100e2 <read_directory+0x6c2>
   100d6:	mov    DWORD PTR [r15+0x8030],r14d
   100dd:	jmp    10040 <read_directory+0x620>
   100e2:	mov    BYTE PTR ds:0xb,0x0
   100ea:	ud2    
   100ec:	mov    r14,r15
   100ef:	mov    r15d,ebp
   100f2:	mov    r13d,DWORD PTR [rsp+0x38]
   100f7:	imul   eax,r15d,0x1a
   100fb:	mov    r12,QWORD PTR [rsp+0x40]
   10100:	mov    rbp,QWORD PTR [rsp+0x30]
   10105:	mov    r9,QWORD PTR [rsp+0x50]
   1010a:	mov    ebx,DWORD PTR [r14+0x8034]
   10111:	test   eax,eax
   10113:	je     10192 <read_directory+0x772>
   10115:	lea    r11d,[rax-0x1]
   10119:	xor    edi,edi
   1011b:	mov    r10d,0x4ec4ec4f
   10121:	add    r11,0x1
   10125:	nop    DWORD PTR [rax]
   10128:	mov    eax,edi
   1012a:	mov    ecx,edi
   1012c:	mul    r10d
   1012f:	mov    eax,edi
   10131:	shr    edx,0x3
   10134:	imul   edx,edx,0x1a
   10137:	sub    eax,edx
   10139:	cmp    eax,0x9
   1013c:	mov    edx,eax
   1013e:	lea    esi,[rax+0x1]
   10141:	jle    1014f <read_directory+0x72f>
   10143:	lea    eax,[rax+0x4]
   10146:	lea    esi,[rdx+0x6]
   10149:	cmp    edx,0x15
   1014c:	cmovle esi,eax
   1014f:	mov    eax,ecx
   10151:	lea    r8d,[rbx-0x1]
   10155:	mul    r10d
   10158:	mov    eax,r8d
   1015b:	shr    edx,0x3
   1015e:	sub    eax,edx
   10160:	cmp    eax,ebx
   10162:	jae    108cb <read_directory+0xeab>
   10168:	imul   eax,DWORD PTR [r14+0x8038]
   10170:	movzx  ecx,BYTE PTR [r9+rdi*1]
   10175:	add    rdi,0x1
   10179:	movsxd rdx,esi
   1017c:	add    rax,QWORD PTR [r14+0x8028]
   10183:	cmp    r11,rdi
   10186:	mov    BYTE PTR [rax+rdx*1],cl
   10189:	mov    ebx,DWORD PTR [r14+0x8034]
   10190:	jne    10128 <read_directory+0x708>
   10192:	mov    eax,ebx
   10194:	sub    eax,r15d
   10197:	cmp    eax,ebx
   10199:	mov    r15d,eax
   1019c:	jae    108cb <read_directory+0xeab>
   101a2:	mov    esi,DWORD PTR [r14+0x8038]
   101a9:	mov    r9,QWORD PTR [r14+0x8028]
   101b0:	mov    rdi,rbp
   101b3:	imul   r15d,esi
   101b7:	mov    DWORD PTR [rsp+0x40],esi
   101bb:	mov    QWORD PTR [rsp+0x38],r9
   101c0:	lea    rax,[r9+r15*1]
   101c4:	mov    QWORD PTR [rsp+0x30],rax
   101c9:	call   2f60 <strlen@plt>
   101ce:	lea    edx,[rax-0x1]
   101d1:	mov    r9,QWORD PTR [rsp+0x38]
   101d6:	mov    esi,DWORD PTR [rsp+0x40]
   101da:	test   edx,edx
   101dc:	jle    10217 <read_directory+0x7f7>
   101de:	movsxd rcx,edx
   101e1:	cmp    BYTE PTR [r12+rcx*1+0x13],0x2e
   101e7:	je     10547 <read_directory+0xb27>
   101ed:	lea    edx,[rax-0x2]
   101f0:	movsxd rcx,edx
   101f3:	mov    edx,edx
   101f5:	mov    rdi,rcx
   101f8:	sub    rdi,rdx
   101fb:	jmp    10210 <read_directory+0x7f0>
   101fd:	nop    DWORD PTR [rax]
   10200:	sub    rcx,0x1
   10204:	cmp    BYTE PTR [r12+rcx*1+0x14],0x2e
   1020a:	je     10547 <read_directory+0xb27>
   10210:	cmp    rdi,rcx
   10213:	mov    edx,ecx
   10215:	jne    10200 <read_directory+0x7e0>
   10217:	cmp    eax,0x8
   1021a:	mov    r10d,0x8
   10220:	cmovle r10d,eax
   10224:	lea    r15d,[rbx+0x1]
   10228:	mov    eax,esi
   1022a:	imul   eax,r15d
   1022e:	cmp    eax,DWORD PTR [r14+0x8030]
   10235:	jbe    10282 <read_directory+0x862>
   10237:	mov    r8d,esi
   1023a:	mov    rdi,r9
   1023d:	mov    DWORD PTR [rsp+0x40],r10d
   10242:	shl    r8d,0x5
   10246:	mov    DWORD PTR [rsp+0x38],edx
   1024a:	sub    r8d,esi
   1024d:	add    r8d,eax
   10250:	movsxd rsi,r8d
   10253:	mov    DWORD PTR [rsp+0x50],r8d
   10258:	call   49f0 <qemu_realloc>
   1025d:	test   rax,rax
   10260:	mov    QWORD PTR [r14+0x8028],rax
   10267:	mov    edx,DWORD PTR [rsp+0x38]
   1026b:	mov    r10d,DWORD PTR [rsp+0x40]
   10270:	je     10632 <read_directory+0xc12>
   10276:	mov    r8d,DWORD PTR [rsp+0x50]
   1027b:	mov    DWORD PTR [r14+0x8030],r8d
   10282:	cmp    r15d,ebx
   10285:	mov    DWORD PTR [r14+0x8034],r15d
   1028c:	jbe    108cb <read_directory+0xeab>
   10292:	imul   ebx,DWORD PTR [r14+0x8038]
   1029a:	add    rbx,QWORD PTR [r14+0x8028]
   102a1:	mov    r15,rbx
   102a4:	movsxd r10,r10d
   102a7:	movabs rax,0x2020202020202020
   102b1:	mov    ebx,0x2020
   102b6:	cmp    r10,0x8
   102ba:	mov    QWORD PTR [r15],rax
   102bd:	mov    WORD PTR [r15+0x8],bx
   102c2:	mov    BYTE PTR [r15+0xa],0x20
   102c7:	jae    10559 <read_directory+0xb39>
   102cd:	test   r10b,0x4
   102d1:	jne    10838 <read_directory+0xe18>
   102d7:	test   r10,r10
   102da:	je     102ef <read_directory+0x8cf>
   102dc:	movzx  eax,BYTE PTR [r12+0x13]
   102e2:	test   r10b,0x2
   102e6:	mov    BYTE PTR [r15],al
   102e9:	jne    1085c <read_directory+0xe3c>
   102ef:	test   edx,edx
   102f1:	jle    10316 <read_directory+0x8f6>
   102f3:	add    edx,0x1
   102f6:	xor    eax,eax
   102f8:	movsxd rdx,edx
   102fb:	add    rbp,rdx
   102fe:	movzx  edx,BYTE PTR [rbp+rax*1+0x0]
   10303:	test   dl,dl
   10305:	je     10316 <read_directory+0x8f6>
   10307:	mov    BYTE PTR [r15+rax*1+0x8],dl
   1030c:	add    rax,0x1
   10310:	cmp    rax,0x3
   10314:	jne    102fe <read_directory+0x8de>
   10316:	mov    ebx,0xa
   1031b:	nop    DWORD PTR [rax+rax*1+0x0]
   10320:	movsxd rax,ebx
   10323:	cmp    ebx,0xa
   10326:	movzx  ebp,BYTE PTR [r15+rax*1]
   1032b:	je     10440 <read_directory+0xa20>
   10331:	cmp    ebx,0x7
   10334:	je     10440 <read_directory+0xa20>
   1033a:	lea    eax,[rbp-0x21]
   1033d:	cmp    al,0x5e
   1033f:	ja     1035a <read_directory+0x93a>
   10341:	lea    rdi,[rip+0xf200]        # 1f548 <desc_template.13816+0x9c8>
   10348:	movzx  esi,bpl
   1034c:	call   2fb0 <strchr@plt>
   10351:	test   rax,rax
   10354:	je     104e9 <read_directory+0xac9>
   1035a:	movsxd rax,ebx
   1035d:	mov    BYTE PTR [r15+rax*1],0x5f
   10362:	sub    ebx,0x1
   10365:	jns    10320 <read_directory+0x900>
   10367:	nop    WORD PTR [rax+rax*1+0x0]
   10370:	mov    edi,DWORD PTR [r14+0x8034]
   10377:	cmp    edi,r13d
   1037a:	jbe    108cb <read_directory+0xeab>
   10380:	mov    esi,DWORD PTR [r14+0x8038]
   10387:	mov    rdx,QWORD PTR [r14+0x8028]
   1038e:	mov    eax,esi
   10390:	imul   eax,r13d
   10394:	add    rax,rdx
   10397:	cmp    r15,rax
   1039a:	ja     103a9 <read_directory+0x989>
   1039c:	jmp    103cc <read_directory+0x9ac>
   1039e:	xchg   ax,ax
   103a0:	add    rax,0x20
   103a4:	cmp    r15,rax
   103a7:	jbe    103cc <read_directory+0x9ac>
   103a9:	cmp    BYTE PTR [rax+0xb],0xf
   103ad:	je     103a0 <read_directory+0x980>
   103af:	mov    rbx,QWORD PTR [r15]
   103b2:	cmp    QWORD PTR [rax],rbx
   103b5:	jne    103a0 <read_directory+0x980>
   103b7:	movzx  ecx,WORD PTR [r15+0x8]
   103bc:	cmp    WORD PTR [rax+0x8],cx
   103c0:	jne    103a0 <read_directory+0x980>
   103c2:	movzx  ecx,BYTE PTR [r15+0xa]
   103c7:	cmp    BYTE PTR [rax+0xa],cl
   103ca:	jne    103a0 <read_directory+0x980>
   103cc:	cmp    r15,rax
   103cf:	je     1047e <read_directory+0xa5e>
   103d5:	movzx  edx,BYTE PTR [r15+0x7]
   103da:	cmp    dl,0x20
   103dd:	je     10420 <read_directory+0xa00>
   103df:	mov    eax,0x7
   103e4:	cmp    dl,0x39
   103e7:	movsxd rcx,eax
   103ea:	jne    10408 <read_directory+0x9e8>
   103ec:	mov    BYTE PTR [r15+rax*1],0x30
   103f1:	sub    rax,0x1
   103f5:	je     10370 <read_directory+0x950>
   103fb:	movzx  edx,BYTE PTR [r15+rax*1]
   10400:	movsxd rcx,eax
   10403:	cmp    dl,0x39
   10406:	je     103ec <read_directory+0x9cc>
   10408:	lea    eax,[rdx-0x30]
   1040b:	cmp    al,0x9
   1040d:	jbe    105b0 <read_directory+0xb90>
   10413:	mov    BYTE PTR [r15+rcx*1],0x30
   10418:	jmp    10370 <read_directory+0x950>
   1041d:	nop    DWORD PTR [rax]
   10420:	lea    rax,[r15+0x6]
   10424:	cmp    BYTE PTR [rax],0x20
   10427:	jne    10435 <read_directory+0xa15>
   10429:	mov    BYTE PTR [rax],0x7e
   1042c:	sub    rax,0x1
   10430:	cmp    r15,rax
   10433:	jne    10424 <read_directory+0xa04>
   10435:	movzx  edx,BYTE PTR [r15+0x7]
   1043a:	jmp    103df <read_directory+0x9bf>
   1043c:	nop    DWORD PTR [rax+0x0]
   10440:	test   ebx,ebx
   10442:	jle    1033a <read_directory+0x91a>
   10448:	cmp    bpl,0x20
   1044c:	jne    1033a <read_directory+0x91a>
   10452:	lea    eax,[rbx-0x1]
   10455:	cdqe   
   10457:	jmp    1046e <read_directory+0xa4e>
   10459:	nop    DWORD PTR [rax+0x0]
   10460:	sub    rax,0x1
   10464:	cmp    bpl,0x20
   10468:	jne    1033a <read_directory+0x91a>
   1046e:	test   eax,eax
   10470:	mov    ebx,eax
   10472:	movzx  ebp,BYTE PTR [r15+rax*1]
   10477:	jne    10460 <read_directory+0xa40>
   10479:	jmp    1033a <read_directory+0x91a>
   1047e:	cmp    QWORD PTR [rsp+0x30],0x0
   10484:	je     104e2 <read_directory+0xac2>
   10486:	lea    r9,[r15+0x8]
   1048a:	mov    r8,r15
   1048d:	xor    eax,eax
   1048f:	nop
   10490:	ror    al,1
   10492:	add    r8,0x1
   10496:	add    al,BYTE PTR [r8-0x1]
   1049a:	cmp    r9,r8
   1049d:	jne    10490 <read_directory+0xa70>
   1049f:	xor    r8d,r8d
   104a2:	ror    al,1
   104a4:	add    al,BYTE PTR [r9+r8*1]
   104a8:	add    r8,0x1
   104ac:	cmp    r8,0x3
   104b0:	jne    104a2 <read_directory+0xa82>
   104b2:	mov    ebx,DWORD PTR [rsp+0x1c]
   104b6:	cmp    edi,ebx
   104b8:	jbe    108cb <read_directory+0xeab>
   104be:	imul   esi,ebx
   104c1:	add    rdx,rsi
   104c4:	cmp    r15,rdx
   104c7:	ja     104dc <read_directory+0xabc>
   104c9:	jmp    104e2 <read_directory+0xac2>
   104cb:	nop    DWORD PTR [rax+rax*1+0x0]
   104d0:	mov    BYTE PTR [rdx+0xd],al
   104d3:	add    rdx,0x20
   104d7:	cmp    r15,rdx
   104da:	jbe    104e2 <read_directory+0xac2>
   104dc:	cmp    BYTE PTR [rdx+0xb],0xf
   104e0:	je     104d0 <read_directory+0xab0>
   104e2:	xor    ebx,ebx
   104e4:	jmp    fce7 <read_directory+0x2c7>
   104e9:	lea    eax,[rbp-0x61]
   104ec:	cmp    al,0x19
   104ee:	ja     10362 <read_directory+0x942>
   104f4:	movsxd rax,ebx
   104f7:	sub    ebp,0x20
   104fa:	mov    BYTE PTR [r15+rax*1],bpl
   104fe:	jmp    10362 <read_directory+0x942>
   10503:	xor    edi,edi
   10505:	mov    WORD PTR [r15+0x1a],di
   1050a:	jmp    fdf2 <read_directory+0x3d2>
   1050f:	mov    r15d,eax
   10512:	mov    rdi,QWORD PTR [r14+0x8028]
   10519:	shl    r15d,0x5
   1051d:	sub    r15d,eax
   10520:	add    r15d,edx
   10523:	movsxd rsi,r15d
   10526:	call   49f0 <qemu_realloc>
   1052b:	test   rax,rax
   1052e:	mov    QWORD PTR [r14+0x8028],rax
   10535:	je     1062a <read_directory+0xc0a>
   1053b:	mov    DWORD PTR [r14+0x8030],r15d
   10542:	jmp    fc8d <read_directory+0x26d>
   10547:	cmp    edx,0x8
   1054a:	mov    r10d,0x8
   10550:	cmovle r10d,edx
   10554:	jmp    10224 <read_directory+0x804>
   10559:	mov    rax,QWORD PTR [r12+0x13]
   1055e:	mov    rsi,r15
   10561:	mov    rdi,rbp
   10564:	mov    QWORD PTR [r15],rax
   10567:	mov    rax,QWORD PTR [rbp+r10*1-0x8]
   1056c:	mov    QWORD PTR [r15+r10*1-0x8],rax
   10571:	lea    rax,[r15+0x8]
   10575:	and    rax,0xfffffffffffffff8
   10579:	sub    rsi,rax
   1057c:	add    r10,rsi
   1057f:	sub    rdi,rsi
   10582:	and    r10,0xfffffffffffffff8
   10586:	cmp    r10,0x8
   1058a:	jb     102ef <read_directory+0x8cf>
   10590:	and    r10,0xfffffffffffffff8
   10594:	xor    esi,esi
   10596:	mov    rcx,QWORD PTR [rdi+rsi*1]
   1059a:	mov    QWORD PTR [rax+rsi*1],rcx
   1059e:	add    rsi,0x8
   105a2:	cmp    rsi,r10
   105a5:	jb     10596 <read_directory+0xb76>
   105a7:	jmp    102ef <read_directory+0x8cf>
   105ac:	nop    DWORD PTR [rax+0x0]
   105b0:	add    edx,0x1
   105b3:	mov    BYTE PTR [r15+rcx*1],dl
   105b7:	jmp    10370 <read_directory+0x950>
   105bc:	mov    DWORD PTR [rax+0x20],0x4
   105c3:	mov    edi,DWORD PTR [rsp+0x58]
   105c7:	mov    rax,QWORD PTR [r14+0x8080]
   105ce:	mov    DWORD PTR [rax+0x10],edi
   105d1:	jmp    fef1 <read_directory+0x4d1>
   105d6:	mov    r12d,eax
   105d9:	mov    rdi,QWORD PTR [r14+0x8040]
   105e0:	shl    r12d,0x5
   105e4:	sub    r12d,eax
   105e7:	add    r12d,edx
   105ea:	movsxd rsi,r12d
   105ed:	call   49f0 <qemu_realloc>
   105f2:	test   rax,rax
   105f5:	mov    QWORD PTR [r14+0x8040],rax
   105fc:	je     1060a <read_directory+0xbea>
   105fe:	mov    DWORD PTR [r14+0x8048],r12d
   10605:	jmp    fe5c <read_directory+0x43c>
   1060a:	mov    QWORD PTR [r14+0x8080],0x0
   10615:	mov    DWORD PTR ds:0x0,0x0
   10620:	ud2    
   10622:	or     ecx,0x40
   10625:	jmp    10082 <read_directory+0x662>
   1062a:	xor    r15d,r15d
   1062d:	jmp    fcb5 <read_directory+0x295>
   10632:	xor    r15d,r15d
   10635:	jmp    102a4 <read_directory+0x884>
   1063a:	xor    eax,eax
   1063c:	mov    r8d,0xa
   10642:	mov    WORD PTR [rsp+0x242],ax
   1064a:	jmp    1001a <read_directory+0x5fa>
   1064f:	mov    rdi,QWORD PTR [rsp+0x28]
   10654:	call   3070 <closedir@plt>
   10659:	jmp    1068c <read_directory+0xc6c>
   1065b:	nop    DWORD PTR [rax+rax*1+0x0]
   10660:	cmp    ebx,ebp
   10662:	mov    DWORD PTR [r14+0x8034],ebp
   10669:	jae    108cb <read_directory+0xeab>
   1066f:	imul   ebx,DWORD PTR [r14+0x8038]
   10677:	mov    rax,QWORD PTR [r14+0x8028]
   1067e:	add    rax,rbx
   10681:	pxor   xmm0,xmm0
   10685:	movups XMMWORD PTR [rax],xmm0
   10688:	movups XMMWORD PTR [rax+0x10],xmm0
   1068c:	xor    edx,edx
   1068e:	mov    ecx,DWORD PTR [r14+0x805c]
   10695:	mov    ebx,DWORD PTR [r14+0x8034]
   1069c:	mov    esi,ecx
   1069e:	mov    eax,ebx
   106a0:	shl    esi,0x4
   106a3:	div    esi
   106a5:	test   edx,edx
   106a7:	je     106f9 <read_directory+0xcd9>
   106a9:	lea    ebp,[rbx+0x1]
   106ac:	mov    eax,DWORD PTR [r14+0x8038]
   106b3:	mov    edx,ebp
   106b5:	imul   edx,eax
   106b8:	cmp    edx,DWORD PTR [r14+0x8030]
   106bf:	jbe    10660 <read_directory+0xc40>
   106c1:	mov    r12d,eax
   106c4:	mov    rdi,QWORD PTR [r14+0x8028]
   106cb:	shl    r12d,0x5
   106cf:	sub    r12d,eax
   106d2:	add    r12d,edx
   106d5:	movsxd rsi,r12d
   106d8:	call   49f0 <qemu_realloc>
   106dd:	test   rax,rax
   106e0:	mov    QWORD PTR [r14+0x8028],rax
   106e7:	je     106f5 <read_directory+0xcd5>
   106e9:	mov    DWORD PTR [r14+0x8030],r12d
   106f0:	jmp    10660 <read_directory+0xc40>
   106f5:	xor    eax,eax
   106f7:	jmp    10681 <read_directory+0xc61>
   106f9:	mov    esi,DWORD PTR [rsp+0x58]
   106fd:	test   esi,esi
   106ff:	je     1079b <read_directory+0xd7b>
   10705:	mov    eax,DWORD PTR [rsp+0x58]
   10709:	cmp    eax,DWORD PTR [r14+0x804c]
   10710:	jae    108cb <read_directory+0xeab>
   10716:	mov    ecx,eax
   10718:	mov    eax,DWORD PTR [r14+0x8034]
   1071f:	xor    edx,edx
   10721:	imul   ecx,DWORD PTR [r14+0x8050]
   10729:	add    rcx,QWORD PTR [r14+0x8040]
   10730:	sub    eax,DWORD PTR [rcx+0x14]
   10733:	shl    eax,0x5
   10736:	div    DWORD PTR [r14+0x8058]
   1073d:	add    eax,DWORD PTR [rsp+0x24]
   10741:	mov    DWORD PTR [rcx+0x4],eax
   10744:	mov    eax,DWORD PTR [rcx+0x8]
   10747:	cmp    eax,DWORD PTR [r14+0x8034]
   1074e:	jae    108cb <read_directory+0xeab>
   10754:	imul   eax,DWORD PTR [r14+0x8038]
   1075c:	mov    edx,DWORD PTR [rcx]
   1075e:	add    rax,QWORD PTR [r14+0x8028]
   10765:	mov    WORD PTR [rax+0x1a],dx
   10769:	shr    edx,0x10
   1076c:	mov    WORD PTR [rax+0x14],dx
   10770:	xor    eax,eax
   10772:	mov    rdi,QWORD PTR [rsp+0x248]
   1077a:	xor    rdi,QWORD PTR fs:0x28
   10783:	jne    108c6 <read_directory+0xea6>
   10789:	add    rsp,0x258
   10790:	pop    rbx
   10791:	pop    rbp
   10792:	pop    r12
   10794:	pop    r13
   10796:	pop    r14
   10798:	pop    r15
   1079a:	ret    
   1079b:	mov    r12d,ecx
   1079e:	shl    r12d,0x5
   107a2:	cmp    r12d,ebx
   107a5:	jbe    10705 <read_directory+0xce5>
   107ab:	mov    eax,DWORD PTR [r14+0x8038]
   107b2:	mov    ebp,r12d
   107b5:	imul   ebp,eax
   107b8:	cmp    ebp,DWORD PTR [r14+0x8030]
   107bf:	ja     1088c <read_directory+0xe6c>
   107c5:	shl    ecx,0x5
   107c8:	mov    edx,ecx
   107ca:	sub    edx,ebx
   107cc:	shl    rdx,0x5
   107d0:	cmp    DWORD PTR [r14+0x8034],ebx
   107d7:	jbe    108cb <read_directory+0xeab>
   107dd:	mov    edi,ebx
   107df:	xor    esi,esi
   107e1:	imul   edi,DWORD PTR [r14+0x8038]
   107e9:	add    rdi,QWORD PTR [r14+0x8028]
   107f0:	call   3020 <memset@plt>
   107f5:	jmp    10705 <read_directory+0xce5>
   107fa:	mov    rbx,QWORD PTR [rsp+0x10]
   107ff:	mov    rdi,QWORD PTR [rip+0x216cfa]        # 227500 <stderr@@GLIBC_2.2.5>
   10806:	lea    rdx,[rip+0xed4d]        # 1f55a <desc_template.13816+0x9da>
   1080d:	mov    esi,0x1
   10812:	xor    eax,eax
   10814:	mov    rcx,rbx
   10817:	call   3400 <__fprintf_chk@plt>
   1081c:	mov    rdi,rbx
   1081f:	call   2e40 <free@plt>
   10824:	mov    rdi,QWORD PTR [rsp+0x28]
   10829:	call   3070 <closedir@plt>
   1082e:	mov    eax,0xfffffffe
   10833:	jmp    10772 <read_directory+0xd52>
   10838:	mov    eax,DWORD PTR [r12+0x13]
   1083d:	mov    DWORD PTR [r15],eax
   10840:	mov    eax,DWORD PTR [rbp+r10*1-0x4]
   10845:	mov    DWORD PTR [r15+r10*1-0x4],eax
   1084a:	jmp    102ef <read_directory+0x8cf>
   1084f:	mov    DWORD PTR [rsp+0x48],0xffffffff
   10857:	jmp    faac <read_directory+0x8c>
   1085c:	movzx  eax,WORD PTR [rbp+r10*1-0x2]
   10862:	mov    WORD PTR [r15+r10*1-0x2],ax
   10868:	jmp    102ef <read_directory+0x8cf>
   1086d:	lea    rcx,[rip+0xed9c]        # 1f610 <__PRETTY_FUNCTION__.14056>
   10874:	lea    rsi,[rip+0xe50d]        # 1ed88 <desc_template.13816+0x208>
   1087b:	lea    rdi,[rip+0xe826]        # 1f0a8 <desc_template.13816+0x528>
   10882:	mov    edx,0x2c9
   10887:	call   3000 <__assert_fail@plt>
   1088c:	imul   eax,eax,0x1f
   1088f:	mov    rdi,QWORD PTR [r14+0x8028]
   10896:	add    ebp,eax
   10898:	movsxd rsi,ebp
   1089b:	call   49f0 <qemu_realloc>
   108a0:	test   rax,rax
   108a3:	mov    QWORD PTR [r14+0x8028],rax
   108aa:	je     108ba <read_directory+0xe9a>
   108ac:	mov    DWORD PTR [r14+0x8030],ebp
   108b3:	mov    DWORD PTR [r14+0x8034],r12d
   108ba:	mov    ecx,DWORD PTR [r14+0x805c]
   108c1:	jmp    107c5 <read_directory+0xda5>
   108c6:	call   2f70 <__stack_chk_fail@plt>
   108cb:	lea    rcx,[rip+0xee9e]        # 1f770 <__PRETTY_FUNCTION__.13707>
   108d2:	lea    rsi,[rip+0xe4af]        # 1ed88 <desc_template.13816+0x208>
   108d9:	lea    rdi,[rip+0xea3e]        # 1f31e <desc_template.13816+0x79e>
   108e0:	mov    edx,0x60
   108e5:	call   3000 <__assert_fail@plt>
   108ea:	mov    eax,DWORD PTR [rbx]
   108ec:	mov    DWORD PTR [rbx+0x4],eax
   108ef:	or     eax,0xffffffff
   108f2:	jmp    10772 <read_directory+0xd52>
   108f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000010900 <vvfat_open>:
   10900:	push   r15
   10902:	push   r14
   10904:	movabs rax,0x1000000400
   1090e:	push   r13
   10910:	push   r12
   10912:	mov    r12,rsi
   10915:	push   rbp
   10916:	push   rbx
   10917:	lea    rsi,[rip+0xb8c8]        # 1c1e6 <__PRETTY_FUNCTION__.13304+0x96>
   1091e:	xor    edx,edx
   10920:	mov    rbp,rdi
   10923:	sub    rsp,0x18
   10927:	mov    rbx,QWORD PTR [rdi+0x40]
   1092b:	mov    QWORD PTR [rbx],rdi
   1092e:	mov    DWORD PTR [rbx+0x800c],0x10
   10938:	mov    DWORD PTR [rbx+0x805c],0x10
   10942:	mov    QWORD PTR [rdi+0x884],rax
   10949:	mov    DWORD PTR [rdi+0x88c],0x3f
   10953:	mov    DWORD PTR [rbx+0x8098],0xffffffff
   1095d:	mov    DWORD PTR [rbx+0x8],0x40
   10964:	mov    DWORD PTR [rdi+0x8],0x1
   1096b:	mov    rdi,r12
   1096e:	mov    QWORD PTR [rbx+0x80a0],0x0
   10979:	mov    QWORD PTR [rbx+0x80b0],0x0
   10984:	mov    QWORD PTR [rbx+0x80a8],0x0
   1098f:	mov    QWORD PTR [rbx+0x80b8],0x0
   1099a:	mov    DWORD PTR [rbx+0x80e8],0x1
   109a4:	call   4660 <strstart>
   109a9:	test   eax,eax
   109ab:	je     1146f <vvfat_open+0xb6f>
   109b1:	lea    rsi,[rip+0xebef]        # 1f5a7 <desc_template.13816+0xa27>
   109b8:	mov    rdi,r12
   109bb:	call   3470 <strstr@plt>
   109c0:	test   rax,rax
   109c3:	je     11562 <vvfat_open+0xc62>
   109c9:	movabs rax,0x200000050
   109d3:	mov    DWORD PTR [rbx+0x800c],0xc
   109dd:	mov    DWORD PTR [rbx+0x8],0x1
   109e4:	mov    DWORD PTR [rbx+0x805c],0x2
   109ee:	mov    DWORD PTR [rsp+0x8],0x1
   109f6:	mov    QWORD PTR [rbp+0x884],rax
   109fd:	mov    DWORD PTR [rbp+0x88c],0x24
   10a07:	mov    eax,0x1680
   10a0c:	lea    rsi,[rip+0xeb9d]        # 1f5b0 <desc_template.13816+0xa30>
   10a13:	mov    DWORD PTR [rbx+0x8070],eax
   10a19:	mov    rdi,r12
   10a1c:	call   3470 <strstr@plt>
   10a21:	test   rax,rax
   10a24:	je     11400 <vvfat_open+0xb00>
   10a2a:	mov    rcx,QWORD PTR [rip+0x216acf]        # 227500 <stderr@@GLIBC_2.2.5>
   10a31:	lea    rdi,[rip+0xe820]        # 1f258 <desc_template.13816+0x6d8>
   10a38:	mov    edx,0x4c
   10a3d:	mov    esi,0x1
   10a42:	call   33e0 <fwrite@plt>
   10a47:	mov    DWORD PTR [rbx+0x800c],0x20
   10a51:	lea    rsi,[rip+0xeb67]        # 1f5bf <desc_template.13816+0xa3f>
   10a58:	mov    rdi,r12
   10a5b:	call   3470 <strstr@plt>
   10a60:	test   rax,rax
   10a63:	je     10b84 <vvfat_open+0x284>
   10a69:	mov    edx,DWORD PTR [rbx+0x806c]
   10a6f:	mov    eax,DWORD PTR [rbx+0x8070]
   10a75:	mov    esi,0x1
   10a7a:	mov    ecx,DWORD PTR [rbx+0x805c]
   10a80:	sub    rax,rdx
   10a83:	cqo    
   10a85:	idiv   rcx
   10a88:	movsxd rdi,eax
   10a8b:	call   30f0 <calloc@plt>
   10a90:	mov    edi,0x400
   10a95:	mov    QWORD PTR [rbx+0x80c0],rax
   10a9c:	mov    QWORD PTR [rbx+0x80c8],0x0
   10aa7:	mov    QWORD PTR [rbx+0x80d0],0x0
   10ab2:	mov    DWORD PTR [rbx+0x80d8],0x18
   10abc:	call   49d0 <qemu_malloc>
   10ac1:	mov    esi,0x400
   10ac6:	mov    rdi,rax
   10ac9:	mov    QWORD PTR [rbx+0x80a8],rax
   10ad0:	call   17090 <get_tmp_filename>
   10ad5:	mov    edx,DWORD PTR [rbx+0x8070]
   10adb:	mov    rsi,QWORD PTR [rbx+0x80a8]
   10ae2:	lea    rcx,[rip+0xb6fd]        # 1c1e6 <__PRETTY_FUNCTION__.13304+0x96>
   10ae9:	lea    rdi,[rip+0x215870]        # 226360 <bdrv_qcow>
   10af0:	xor    r8d,r8d
   10af3:	call   17070 <bdrv_create>
   10af8:	test   eax,eax
   10afa:	js     1146f <vvfat_open+0xb6f>
   10b00:	lea    rdi,[rip+0xe95e]        # 1f465 <desc_template.13816+0x8e5>
   10b07:	call   16fb0 <bdrv_new>
   10b0c:	test   rax,rax
   10b0f:	mov    QWORD PTR [rbx+0x80b0],rax
   10b16:	je     1146f <vvfat_open+0xb6f>
   10b1c:	mov    rsi,QWORD PTR [rbx+0x80a8]
   10b23:	xor    edx,edx
   10b25:	mov    rdi,rax
   10b28:	call   180e0 <bdrv_open>
   10b2d:	test   eax,eax
   10b2f:	js     1146f <vvfat_open+0xb6f>
   10b35:	mov    rdi,QWORD PTR [rbx+0x80a8]
   10b3c:	call   2e90 <unlink@plt>
   10b41:	mov    r13,QWORD PTR [rbx]
   10b44:	mov    edi,0x8c8
   10b49:	mov    esi,0x1
   10b4e:	call   30f0 <calloc@plt>
   10b53:	lea    rdi,[rip+0x2160c6]        # 226c20 <vvfat_write_target>
   10b5a:	mov    QWORD PTR [r13+0x850],rax
   10b61:	mov    rax,QWORD PTR [rbx]
   10b64:	mov    rax,QWORD PTR [rax+0x850]
   10b6b:	mov    QWORD PTR [rax+0x38],rdi
   10b6f:	mov    rax,QWORD PTR [rbx]
   10b72:	mov    rax,QWORD PTR [rax+0x850]
   10b79:	mov    QWORD PTR [rax+0x40],rbx
   10b7d:	mov    DWORD PTR [rbp+0x8],0x0
   10b84:	mov    esi,0x3a
   10b89:	mov    rdi,r12
   10b8c:	call   2fe0 <strrchr@plt>
   10b91:	sub    rax,r12
   10b94:	cmp    eax,0x2
   10b97:	jle    11813 <vvfat_open+0xf13>
   10b9d:	movsxd r13,eax
   10ba0:	cmp    BYTE PTR [r12+r13*1-0x2],0x3a
   10ba6:	je     11541 <vvfat_open+0xc41>
   10bac:	lea    r15,[r12+r13*1+0x1]
   10bb1:	mov    eax,DWORD PTR [rbp+0x884]
   10bb7:	xor    esi,esi
   10bb9:	mov    edx,0x8000
   10bbe:	imul   eax,DWORD PTR [rbp+0x888]
   10bc5:	imul   eax,DWORD PTR [rbp+0x88c]
   10bcc:	cdqe   
   10bce:	mov    QWORD PTR [rbp+0x0],rax
   10bd2:	lea    rax,[rbx+0xc]
   10bd6:	mov    rdi,rax
   10bd9:	mov    QWORD PTR [rsp],rax
   10bdd:	call   3020 <memset@plt>
   10be2:	mov    eax,DWORD PTR [rbx+0x805c]
   10be8:	shl    eax,0x9
   10beb:	mov    edi,eax
   10bed:	mov    DWORD PTR [rbx+0x8058],eax
   10bf3:	call   49d0 <qemu_malloc>
   10bf8:	mov    QWORD PTR [rbx+0x8090],rax
   10bff:	mov    eax,DWORD PTR [rbx+0x805c]
   10c05:	xor    edx,edx
   10c07:	xor    edi,edi
   10c09:	mov    QWORD PTR [rbx+0x8040],0x0
   10c14:	mov    QWORD PTR [rbx+0x8048],0x0
   10c1f:	mov    DWORD PTR [rbx+0x8050],0x28
   10c29:	mov    QWORD PTR [rbx+0x8028],0x0
   10c34:	mov    esi,0x400
   10c39:	shl    eax,0xc
   10c3c:	mov    QWORD PTR [rbx+0x8030],0x0
   10c47:	mov    DWORD PTR [rbx+0x8038],0x20
   10c51:	div    DWORD PTR [rbx+0x800c]
   10c57:	xor    edx,edx
   10c59:	lea    ecx,[rax+0x1]
   10c5c:	mov    eax,DWORD PTR [rbx+0x8070]
   10c62:	add    eax,ecx
   10c64:	div    ecx
   10c66:	mov    DWORD PTR [rbx+0x8060],eax
   10c6c:	call   49f0 <qemu_realloc>
   10c71:	test   rax,rax
   10c74:	mov    QWORD PTR [rbx+0x8028],rax
   10c7b:	je     10f46 <vvfat_open+0x646>
   10c81:	movabs rdi,0x100000400
   10c8b:	mov    edx,0x5441
   10c90:	mov    QWORD PTR [rbx+0x8030],rdi
   10c97:	movabs rdi,0x46565620554d4551
   10ca1:	mov    BYTE PTR [rax+0xb],0x28
   10ca5:	mov    QWORD PTR [rax],rdi
   10ca8:	mov    WORD PTR [rax+0x8],dx
   10cac:	mov    BYTE PTR [rax+0xa],0x0
   10cb0:	mov    eax,DWORD PTR [rbx+0x800c]
   10cb6:	cmp    eax,0xc
   10cb9:	je     114ce <vvfat_open+0xbce>
   10cbf:	xor    ecx,ecx
   10cc1:	cmp    eax,0x20
   10cc4:	mov    eax,DWORD PTR [rbx+0x8060]
   10cca:	sete   cl
   10ccd:	xor    edx,edx
   10ccf:	mov    QWORD PTR [rbx+0x8010],0x0
   10cda:	lea    ecx,[rcx+rcx*1+0x2]
   10cde:	mov    QWORD PTR [rbx+0x8018],0x0
   10ce9:	shl    eax,0x9
   10cec:	div    ecx
   10cee:	mov    r12d,ecx
   10cf1:	mov    DWORD PTR [rbx+0x8020],ecx
   10cf7:	imul   r12d,eax
   10cfb:	mov    r13d,eax
   10cfe:	test   r12d,r12d
   10d01:	jne    10f5f <vvfat_open+0x65f>
   10d07:	xor    edi,edi
   10d09:	xor    edx,edx
   10d0b:	xor    esi,esi
   10d0d:	call   3020 <memset@plt>
   10d12:	mov    eax,DWORD PTR [rbx+0x800c]
   10d18:	cmp    eax,0x10
   10d1b:	je     11583 <vvfat_open+0xc83>
   10d21:	cmp    eax,0x20
   10d24:	je     10f50 <vvfat_open+0x650>
   10d2a:	cmp    eax,0xc
   10d2d:	mov    edx,0x0
   10d32:	mov    eax,0xfff
   10d37:	cmovne eax,edx
   10d3a:	mov    DWORD PTR [rbx+0x8078],eax
   10d40:	mov    eax,DWORD PTR [rbx+0x8]
   10d43:	mov    edx,DWORD PTR [rbx+0x8060]
   10d49:	mov    ecx,DWORD PTR [rbx+0x805c]
   10d4f:	mov    r12d,DWORD PTR [rbx+0x804c]
   10d56:	lea    edx,[rax+rdx*2]
   10d59:	mov    eax,DWORD PTR [rbx+0x8070]
   10d5f:	lea    r13d,[r12+0x1]
   10d64:	mov    DWORD PTR [rbx+0x806c],edx
   10d6a:	mov    esi,r13d
   10d6d:	sub    rax,rdx
   10d70:	cqo    
   10d72:	idiv   rcx
   10d75:	mov    DWORD PTR [rbx+0x8074],eax
   10d7b:	mov    eax,DWORD PTR [rbx+0x8050]
   10d81:	imul   esi,eax
   10d84:	cmp    esi,DWORD PTR [rbx+0x8048]
   10d8a:	ja     1148a <vvfat_open+0xb8a>
   10d90:	cmp    r12d,r13d
   10d93:	mov    DWORD PTR [rbx+0x804c],r13d
   10d9a:	jae    117d5 <vvfat_open+0xed5>
   10da0:	imul   r12d,DWORD PTR [rbx+0x8050]
   10da8:	movabs rax,0xffffffff00000000
   10db2:	mov    rdi,r15
   10db5:	add    r12,QWORD PTR [rbx+0x8040]
   10dbc:	mov    DWORD PTR [r12],0x0
   10dc4:	mov    QWORD PTR [r12+0x8],rax
   10dc9:	mov    DWORD PTR [r12+0x10],0xffffffff
   10dd2:	call   3420 <strdup@plt>
   10dd7:	mov    QWORD PTR [r12+0x18],rax
   10ddc:	mov    rcx,rax
   10ddf:	mov    esi,DWORD PTR [rcx]
   10de1:	add    rcx,0x4
   10de5:	lea    edx,[rsi-0x1010101]
   10deb:	not    esi
   10ded:	and    edx,esi
   10def:	and    edx,0x80808080
   10df5:	je     10ddf <vvfat_open+0x4df>
   10df7:	mov    esi,edx
   10df9:	shr    esi,0x10
   10dfc:	test   edx,0x8080
   10e02:	cmove  edx,esi
   10e05:	lea    rsi,[rcx+0x2]
   10e09:	mov    edi,edx
   10e0b:	cmove  rcx,rsi
   10e0f:	add    dil,dl
   10e12:	sbb    rcx,0x3
   10e16:	sub    rcx,rax
   10e19:	test   ecx,ecx
   10e1b:	je     10e30 <vvfat_open+0x530>
   10e1d:	lea    edx,[rcx-0x1]
   10e20:	add    rdx,rax
   10e23:	cmp    BYTE PTR [rdx],0x2f
   10e26:	jne    10e30 <vvfat_open+0x530>
   10e28:	mov    BYTE PTR [rdx],0x0
   10e2b:	mov    rax,QWORD PTR [r12+0x18]
   10e30:	mov    DWORD PTR [r12+0x20],0x4
   10e39:	mov    DWORD PTR [r12+0x24],0x0
   10e42:	mov    r14d,DWORD PTR [rbx+0x804c]
   10e49:	mov    QWORD PTR [rbx+0x80e0],rax
   10e50:	test   r14d,r14d
   10e53:	je     117d5 <vvfat_open+0xed5>
   10e59:	xor    r9d,r9d
   10e5c:	xor    r13d,r13d
   10e5f:	mov    r12d,0xf
   10e65:	jmp    10ee9 <vvfat_open+0x5e9>
   10e6a:	nop    WORD PTR [rax+rax*1+0x0]
   10e70:	mov    esi,DWORD PTR [r15+0x8]
   10e74:	cmp    esi,DWORD PTR [rbx+0x8034]
   10e7a:	jae    117d5 <vvfat_open+0xed5>
   10e80:	sub    eax,0x1
   10e83:	xor    edx,edx
   10e85:	div    DWORD PTR [rbx+0x8058]
   10e8b:	imul   esi,DWORD PTR [rbx+0x8038]
   10e92:	add    rsi,QWORD PTR [rbx+0x8028]
   10e99:	lea    eax,[r9+rax*1+0x1]
   10e9e:	mov    DWORD PTR [r15+0x4],eax
   10ea2:	mov    WORD PTR [rsi+0x1a],r9w
   10ea7:	shr    r9d,0x10
   10eab:	mov    WORD PTR [rsi+0x14],r9w
   10eb0:	mov    eax,DWORD PTR [r15]
   10eb3:	mov    r9d,DWORD PTR [r15+0x4]
   10eb7:	cmp    r9d,eax
   10eba:	jbe    11832 <vvfat_open+0xf32>
   10ec0:	cmp    DWORD PTR [rbx+0x8074],r9d
   10ec7:	jb     11427 <vvfat_open+0xb27>
   10ecd:	test   r14d,r14d
   10ed0:	jne    10fa0 <vvfat_open+0x6a0>
   10ed6:	mov    eax,DWORD PTR [rbx+0x804c]
   10edc:	add    r13d,0x1
   10ee0:	cmp    r13d,eax
   10ee3:	jae    1112d <vvfat_open+0x82d>
   10ee9:	xor    r14d,r14d
   10eec:	test   r13d,r13d
   10eef:	mov    r15d,r13d
   10ef2:	setne  r14b
   10ef6:	imul   r15d,DWORD PTR [rbx+0x8050]
   10efe:	add    r15,QWORD PTR [rbx+0x8040]
   10f05:	mov    eax,DWORD PTR [r15+0x20]
   10f09:	test   al,0x4
   10f0b:	jne    11080 <vvfat_open+0x780>
   10f11:	test   eax,eax
   10f13:	jne    117f4 <vvfat_open+0xef4>
   10f19:	mov    eax,DWORD PTR [r15+0x4]
   10f1d:	mov    DWORD PTR [r15+0x20],0x1
   10f25:	mov    DWORD PTR [r15],r9d
   10f28:	test   eax,eax
   10f2a:	jne    10e70 <vvfat_open+0x570>
   10f30:	lea    edx,[r9+0x1]
   10f34:	mov    eax,r9d
   10f37:	xor    r14d,r14d
   10f3a:	mov    DWORD PTR [r15+0x4],edx
   10f3e:	mov    r9d,edx
   10f41:	jmp    10eb7 <vvfat_open+0x5b7>
   10f46:	mov    BYTE PTR ds:0xb,0x0
   10f4e:	ud2    
   10f50:	mov    DWORD PTR [rbx+0x8078],0xfffffff
   10f5a:	jmp    10d40 <vvfat_open+0x440>
   10f5f:	mov    edx,ecx
   10f61:	xor    edi,edi
   10f63:	shl    edx,0x5
   10f66:	sub    edx,ecx
   10f68:	add    r12d,edx
   10f6b:	movsxd rsi,r12d
   10f6e:	call   49f0 <qemu_realloc>
   10f73:	test   rax,rax
   10f76:	mov    rdi,rax
   10f79:	mov    QWORD PTR [rbx+0x8010],rax
   10f80:	je     115a9 <vvfat_open+0xca9>
   10f86:	mov    DWORD PTR [rbx+0x8018],r12d
   10f8d:	mov    DWORD PTR [rbx+0x801c],r13d
   10f94:	mov    edx,r12d
   10f97:	jmp    10d0b <vvfat_open+0x40b>
   10f9c:	nop    DWORD PTR [rax+0x0]
   10fa0:	lea    edi,[rax+rax*2]
   10fa3:	mov    edx,r9d
   10fa6:	lea    r11d,[r12+0x1]
   10fab:	jmp    11007 <vvfat_open+0x707>
   10fad:	nop    DWORD PTR [rax]
   10fb0:	cmp    esi,0x10
   10fb3:	je     11048 <vvfat_open+0x748>
   10fb9:	mov    edx,edi
   10fbb:	shr    edx,1
   10fbd:	cmp    edx,r10d
   10fc0:	jae    117d5 <vvfat_open+0xed5>
   10fc6:	imul   edx,DWORD PTR [rbx+0x8020]
   10fcd:	add    rdx,QWORD PTR [rbx+0x8010]
   10fd4:	and    ecx,0x1
   10fd7:	je     11068 <vvfat_open+0x768>
   10fdd:	movzx  esi,BYTE PTR [rdx]
   10fe0:	lea    ecx,[r11+rax*1]
   10fe4:	shl    ecx,0x4
   10fe7:	and    esi,0xf
   10fea:	or     ecx,esi
   10fec:	mov    BYTE PTR [rdx],cl
   10fee:	mov    ecx,eax
   10ff0:	shr    ecx,0x4
   10ff3:	mov    BYTE PTR [rdx+0x1],cl
   10ff6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11000:	mov    edx,DWORD PTR [r15+0x4]
   11004:	add    edi,0x3
   11007:	sub    edx,0x1
   1100a:	mov    ecx,eax
   1100c:	mov    esi,DWORD PTR [rbx+0x800c]
   11012:	cmp    eax,edx
   11014:	mov    r10d,DWORD PTR [rbx+0x801c]
   1101b:	jae    110c8 <vvfat_open+0x7c8>
   11021:	add    eax,0x1
   11024:	cmp    esi,0x20
   11027:	jne    10fb0 <vvfat_open+0x6b0>
   11029:	cmp    ecx,r10d
   1102c:	jae    117d5 <vvfat_open+0xed5>
   11032:	imul   ecx,DWORD PTR [rbx+0x8020]
   11039:	mov    rdx,QWORD PTR [rbx+0x8010]
   11040:	mov    DWORD PTR [rdx+rcx*1],eax
   11043:	jmp    11000 <vvfat_open+0x700>
   11045:	nop    DWORD PTR [rax]
   11048:	cmp    ecx,r10d
   1104b:	jae    117d5 <vvfat_open+0xed5>
   11051:	imul   ecx,DWORD PTR [rbx+0x8020]
   11058:	mov    rdx,QWORD PTR [rbx+0x8010]
   1105f:	mov    WORD PTR [rdx+rcx*1],ax
   11063:	jmp    11000 <vvfat_open+0x700>
   11065:	nop    DWORD PTR [rax]
   11068:	movzx  ecx,BYTE PTR [rdx+0x1]
   1106c:	mov    esi,eax
   1106e:	mov    BYTE PTR [rdx],al
   11070:	shr    esi,0x8
   11073:	and    esi,0xf
   11076:	and    ecx,0xfffffff0
   11079:	or     ecx,esi
   1107b:	mov    BYTE PTR [rdx+0x1],cl
   1107e:	jmp    11000 <vvfat_open+0x700>
   11080:	mov    DWORD PTR [r15],r9d
   11083:	mov    esi,r13d
   11086:	mov    rdi,rbx
   11089:	call   fa20 <read_directory>
   1108e:	test   eax,eax
   11090:	jne    11742 <vvfat_open+0xe42>
   11096:	cmp    r13d,DWORD PTR [rbx+0x804c]
   1109d:	jae    117d5 <vvfat_open+0xed5>
   110a3:	mov    r15d,r13d
   110a6:	imul   r15d,DWORD PTR [rbx+0x8050]
   110ae:	add    r15,QWORD PTR [rbx+0x8040]
   110b5:	mov    eax,DWORD PTR [r15]
   110b8:	mov    r9d,DWORD PTR [r15+0x4]
   110bc:	jmp    10eb7 <vvfat_open+0x5b7>
   110c1:	nop    DWORD PTR [rax+0x0]
   110c8:	cmp    esi,0x20
   110cb:	mov    ecx,DWORD PTR [rbx+0x8078]
   110d1:	je     113a8 <vvfat_open+0xaa8>
   110d7:	cmp    esi,0x10
   110da:	je     113c7 <vvfat_open+0xac7>
   110e0:	lea    eax,[rdx+rdx*2]
   110e3:	shr    eax,1
   110e5:	cmp    eax,r10d
   110e8:	jae    117d5 <vvfat_open+0xed5>
   110ee:	imul   eax,DWORD PTR [rbx+0x8020]
   110f5:	add    rax,QWORD PTR [rbx+0x8010]
   110fc:	and    edx,0x1
   110ff:	je     113e7 <vvfat_open+0xae7>
   11105:	movzx  edx,BYTE PTR [rax]
   11108:	mov    esi,ecx
   1110a:	shr    ecx,0x4
   1110d:	shl    esi,0x4
   11110:	mov    BYTE PTR [rax+0x1],cl
   11113:	add    r13d,0x1
   11117:	and    edx,0xf
   1111a:	or     edx,esi
   1111c:	mov    BYTE PTR [rax],dl
   1111e:	mov    eax,DWORD PTR [rbx+0x804c]
   11124:	cmp    r13d,eax
   11127:	jb     10ee9 <vvfat_open+0x5e9>
   1112d:	test   eax,eax
   1112f:	je     117d5 <vvfat_open+0xed5>
   11135:	mov    rdx,QWORD PTR [rbx+0x8040]
   1113c:	mov    ecx,DWORD PTR [rbx+0x800c]
   11142:	mov    eax,DWORD PTR [rdx+0x4]
   11145:	imul   eax,DWORD PTR [rbx+0x805c]
   1114c:	cmp    ecx,0x20
   1114f:	mov    DWORD PTR [rbx+0x8064],eax
   11155:	mov    eax,DWORD PTR [rdx+0x4]
   11158:	mov    edx,DWORD PTR [rbx+0x801c]
   1115e:	mov    DWORD PTR [rbx+0x8068],eax
   11164:	mov    eax,DWORD PTR [rbx+0x8078]
   1116a:	je     116df <vvfat_open+0xddf>
   11170:	cmp    ecx,0x10
   11173:	je     11592 <vvfat_open+0xc92>
   11179:	test   edx,edx
   1117b:	je     117d5 <vvfat_open+0xed5>
   11181:	mov    rcx,QWORD PTR [rbx+0x8010]
   11188:	movzx  edx,BYTE PTR [rcx+0x1]
   1118c:	mov    BYTE PTR [rcx],al
   1118e:	shr    eax,0x8
   11191:	and    eax,0xf
   11194:	and    edx,0xfffffff0
   11197:	or     eax,edx
   11199:	mov    BYTE PTR [rcx+0x1],al
   1119c:	mov    ecx,DWORD PTR [rbx+0x800c]
   111a2:	mov    eax,DWORD PTR [rbx+0x8078]
   111a8:	mov    edx,DWORD PTR [rbx+0x801c]
   111ae:	cmp    ecx,0x20
   111b1:	je     116c1 <vvfat_open+0xdc1>
   111b7:	cmp    ecx,0x10
   111ba:	je     1176d <vvfat_open+0xe6d>
   111c0:	cmp    edx,0x1
   111c3:	jbe    117d5 <vvfat_open+0xed5>
   111c9:	mov    edx,DWORD PTR [rbx+0x8020]
   111cf:	mov    esi,eax
   111d1:	shr    eax,0x4
   111d4:	add    rdx,QWORD PTR [rbx+0x8010]
   111db:	shl    esi,0x4
   111de:	movzx  ecx,BYTE PTR [rdx]
   111e1:	mov    BYTE PTR [rdx+0x1],al
   111e4:	and    ecx,0xf
   111e7:	or     ecx,esi
   111e9:	mov    BYTE PTR [rdx],cl
   111eb:	mov    eax,DWORD PTR [rbx+0x8]
   111ee:	mov    r11d,0x3eeb
   111f4:	movabs rdi,0x20202020554d4551
   111fe:	mov    r12d,0x200
   11204:	mov    QWORD PTR [rbx+0x8080],0x0
   1120f:	mov    r13d,0x1
   11215:	mov    ecx,0x0
   1121a:	add    eax,0x7fffff
   1121f:	shl    eax,0x9
   11222:	add    rax,QWORD PTR [rsp]
   11226:	mov    WORD PTR [rax],r11w
   1122a:	mov    BYTE PTR [rax+0x2],0x90
   1122e:	mov    QWORD PTR [rax+0x3],rdi
   11232:	mov    WORD PTR [rax+0xb],r12w
   11237:	mov    edx,DWORD PTR [rbx+0x805c]
   1123d:	mov    WORD PTR [rax+0xe],r13w
   11242:	mov    BYTE PTR [rax+0x10],0x2
   11246:	mov    BYTE PTR [rax+0xd],dl
   11249:	movzx  edx,WORD PTR [rbx+0x8064]
   11250:	shl    edx,0x4
   11253:	mov    WORD PTR [rax+0x11],dx
   11257:	mov    edx,DWORD PTR [rbx+0x8070]
   1125d:	cmp    edx,0x10000
   11263:	cmovae edx,ecx
   11266:	mov    WORD PTR [rax+0x13],dx
   1126a:	cmp    DWORD PTR [rbx+0x800c],0xc
   11271:	mov    edx,0xfffffff8
   11276:	mov    ecx,edx
   11278:	je     11726 <vvfat_open+0xe26>
   1127e:	mov    BYTE PTR [rax+0x15],cl
   11281:	mov    rcx,QWORD PTR [rbx+0x8010]
   11288:	mov    r9d,0xfffffabe
   1128e:	movabs rdi,0x46565620554d4551
   11298:	mov    r10d,0x5441
   1129e:	mov    BYTE PTR [rcx],dl
   112a0:	mov    edx,DWORD PTR [rbx+0x8060]
   112a6:	xor    ecx,ecx
   112a8:	mov    WORD PTR [rax+0x16],dx
   112ac:	mov    rdx,QWORD PTR [rbx]
   112af:	mov    edx,DWORD PTR [rdx+0x88c]
   112b5:	mov    WORD PTR [rax+0x18],dx
   112b9:	mov    rdx,QWORD PTR [rbx]
   112bc:	mov    edx,DWORD PTR [rdx+0x888]
   112c2:	mov    WORD PTR [rax+0x1a],dx
   112c6:	cmp    DWORD PTR [rbx+0x8],0x1
   112ca:	mov    edx,0x3f
   112cf:	cmove  edx,ecx
   112d2:	mov    DWORD PTR [rax+0x1c],edx
   112d5:	mov    edx,DWORD PTR [rbx+0x8070]
   112db:	cmp    edx,0xffff
   112e1:	cmovbe edx,ecx
   112e4:	mov    DWORD PTR [rax+0x20],edx
   112e7:	cmp    DWORD PTR [rbx+0x800c],0xc
   112ee:	mov    edx,0xffffff80
   112f3:	mov    DWORD PTR [rax+0x25],0x1afd2900
   112fa:	mov    WORD PTR [rax+0x29],r9w
   112ff:	mov    QWORD PTR [rax+0x2b],rdi
   11303:	mov    WORD PTR [rax+0x33],r10w
   11308:	mov    BYTE PTR [rax+0x35],0x20
   1130c:	cmove  edx,ecx
   1130f:	mov    BYTE PTR [rax+0x24],dl
   11312:	mov    ecx,DWORD PTR [rbx+0x800c]
   11318:	lea    rdx,[rip+0xe26d]        # 1f58c <desc_template.13816+0xa0c>
   1131f:	cmp    ecx,0xc
   11322:	je     11339 <vvfat_open+0xa39>
   11324:	cmp    ecx,0x10
   11327:	lea    rdx,[rip+0xe270]        # 1f59e <desc_template.13816+0xa1e>
   1132e:	lea    rcx,[rip+0xe260]        # 1f595 <desc_template.13816+0xa15>
   11335:	cmove  rdx,rcx
   11339:	mov    rdx,QWORD PTR [rdx]
   1133c:	mov    r8d,0xffffaa55
   11342:	mov    WORD PTR [rax+0x1fe],r8w
   1134a:	mov    QWORD PTR [rax+0x36],rdx
   1134e:	mov    eax,DWORD PTR [rbx+0x805c]
   11354:	imul   eax,DWORD PTR [rbx+0x8074]
   1135b:	add    eax,DWORD PTR [rbx+0x806c]
   11361:	cmp    DWORD PTR [rbx+0x8],0x40
   11365:	mov    esi,eax
   11367:	mov    DWORD PTR [rbx+0x8070],eax
   1136d:	je     115b4 <vvfat_open+0xcb4>
   11373:	mov    eax,DWORD PTR [rsp+0x8]
   11377:	test   eax,eax
   11379:	je     11477 <vvfat_open+0xb77>
   1137f:	mov    QWORD PTR [rbp+0x884],0x0
   1138a:	mov    DWORD PTR [rbp+0x88c],0x0
   11394:	mov    DWORD PTR [rsp+0x8],0x0
   1139c:	jmp    11477 <vvfat_open+0xb77>
   113a1:	nop    DWORD PTR [rax+0x0]
   113a8:	cmp    edx,r10d
   113ab:	jae    117d5 <vvfat_open+0xed5>
   113b1:	imul   edx,DWORD PTR [rbx+0x8020]
   113b8:	mov    rax,QWORD PTR [rbx+0x8010]
   113bf:	mov    DWORD PTR [rax+rdx*1],ecx
   113c2:	jmp    10ed6 <vvfat_open+0x5d6>
   113c7:	cmp    edx,r10d
   113ca:	jae    117d5 <vvfat_open+0xed5>
   113d0:	imul   edx,DWORD PTR [rbx+0x8020]
   113d7:	mov    rax,QWORD PTR [rbx+0x8010]
   113de:	mov    WORD PTR [rax+rdx*1],cx
   113e2:	jmp    10ed6 <vvfat_open+0x5d6>
   113e7:	movzx  edx,BYTE PTR [rax+0x1]
   113eb:	mov    BYTE PTR [rax],cl
   113ed:	shr    ecx,0x8
   113f0:	and    ecx,0xf
   113f3:	and    edx,0xfffffff0
   113f6:	or     ecx,edx
   113f8:	mov    BYTE PTR [rax+0x1],cl
   113fb:	jmp    10ed6 <vvfat_open+0x5d6>
   11400:	lea    rsi,[rip+0xe1ae]        # 1f5b5 <desc_template.13816+0xa35>
   11407:	mov    rdi,r12
   1140a:	call   3470 <strstr@plt>
   1140f:	test   rax,rax
   11412:	je     116f5 <vvfat_open+0xdf5>
   11418:	mov    DWORD PTR [rbx+0x800c],0x10
   11422:	jmp    10a51 <vvfat_open+0x151>
   11427:	mov    ecx,DWORD PTR [rbx+0x800c]
   1142d:	lea    r8,[rip+0xe142]        # 1f576 <desc_template.13816+0x9f6>
   11434:	cmp    ecx,0xc
   11437:	jne    11455 <vvfat_open+0xb55>
   11439:	cmp    DWORD PTR [rbx+0x8070],0xb40
   11443:	lea    r8,[rip+0xe13a]        # 1f584 <desc_template.13816+0xa04>
   1144a:	lea    rax,[rip+0xe12b]        # 1f57c <desc_template.13816+0x9fc>
   11451:	cmove  r8,rax
   11455:	mov    rdi,QWORD PTR [rip+0x2160a4]        # 227500 <stderr@@GLIBC_2.2.5>
   1145c:	lea    rdx,[rip+0xde65]        # 1f2c8 <desc_template.13816+0x748>
   11463:	mov    esi,0x1
   11468:	xor    eax,eax
   1146a:	call   3400 <__fprintf_chk@plt>
   1146f:	mov    DWORD PTR [rsp+0x8],0xffffffff
   11477:	mov    eax,DWORD PTR [rsp+0x8]
   1147b:	add    rsp,0x18
   1147f:	pop    rbx
   11480:	pop    rbp
   11481:	pop    r12
   11483:	pop    r13
   11485:	pop    r14
   11487:	pop    r15
   11489:	ret    
   1148a:	mov    ecx,eax
   1148c:	mov    rdi,QWORD PTR [rbx+0x8040]
   11493:	shl    ecx,0x5
   11496:	sub    ecx,eax
   11498:	add    ecx,esi
   1149a:	movsxd rsi,ecx
   1149d:	mov    DWORD PTR [rsp+0xc],ecx
   114a1:	call   49f0 <qemu_realloc>
   114a6:	test   rax,rax
   114a9:	mov    QWORD PTR [rbx+0x8040],rax
   114b0:	je     114c1 <vvfat_open+0xbc1>
   114b2:	mov    ecx,DWORD PTR [rsp+0xc]
   114b6:	mov    DWORD PTR [rbx+0x8048],ecx
   114bc:	jmp    10d90 <vvfat_open+0x490>
   114c1:	mov    DWORD PTR ds:0x0,0x0
   114cc:	ud2    
   114ce:	mov    eax,DWORD PTR [rbx+0x8060]
   114d4:	mov    QWORD PTR [rbx+0x8010],0x0
   114df:	mov    QWORD PTR [rbx+0x8018],0x0
   114ea:	mov    DWORD PTR [rbx+0x8020],0x1
   114f4:	lea    eax,[rax+rax*2]
   114f7:	shl    eax,0x9
   114fa:	shr    eax,1
   114fc:	mov    r13d,eax
   114ff:	je     10d07 <vvfat_open+0x407>
   11505:	lea    ecx,[rax+0x1f]
   11508:	xor    edi,edi
   1150a:	movsxd r12,ecx
   1150d:	mov    DWORD PTR [rsp+0xc],ecx
   11511:	mov    rsi,r12
   11514:	call   49f0 <qemu_realloc>
   11519:	test   rax,rax
   1151c:	mov    rdi,rax
   1151f:	mov    QWORD PTR [rbx+0x8010],rax
   11526:	mov    ecx,DWORD PTR [rsp+0xc]
   1152a:	je     115a9 <vvfat_open+0xca9>
   1152c:	mov    DWORD PTR [rbx+0x8018],ecx
   11532:	mov    DWORD PTR [rbx+0x801c],r13d
   11539:	mov    rdx,r12
   1153c:	jmp    10d0b <vvfat_open+0x40b>
   11541:	lea    r15,[r12+r13*1-0x1]
   11546:	call   34a0 <__ctype_b_loc@plt>
   1154b:	movzx  edx,BYTE PTR [r15]
   1154f:	mov    rax,QWORD PTR [rax]
   11552:	test   BYTE PTR [rax+rdx*2+0x1],0x4
   11557:	jne    10bb1 <vvfat_open+0x2b1>
   1155d:	jmp    10bac <vvfat_open+0x2ac>
   11562:	mov    eax,DWORD PTR [rbp+0x888]
   11568:	mov    DWORD PTR [rsp+0x8],0x0
   11570:	imul   eax,DWORD PTR [rbp+0x884]
   11577:	imul   eax,DWORD PTR [rbp+0x88c]
   1157e:	jmp    10a0c <vvfat_open+0x10c>
   11583:	mov    DWORD PTR [rbx+0x8078],0xffff
   1158d:	jmp    10d40 <vvfat_open+0x440>
   11592:	test   edx,edx
   11594:	je     117d5 <vvfat_open+0xed5>
   1159a:	mov    rdx,QWORD PTR [rbx+0x8010]
   115a1:	mov    WORD PTR [rdx],ax
   115a4:	jmp    1119c <vvfat_open+0x89c>
   115a9:	mov    edx,DWORD PTR [rbx+0x8018]
   115af:	jmp    10d0b <vvfat_open+0x40b>
   115b4:	mov    QWORD PTR [rbx+0xc],0x0
   115bc:	mov    rax,QWORD PTR [rsp]
   115c0:	lea    rdi,[rax+0x8]
   115c4:	mov    QWORD PTR [rax+0x1f8],0x0
   115cf:	and    rdi,0xfffffffffffffff8
   115d3:	sub    rax,rdi
   115d6:	mov    rcx,rax
   115d9:	xor    eax,eax
   115db:	add    ecx,0x200
   115e1:	shr    ecx,0x3
   115e4:	rep stos QWORD PTR es:[rdi],rax
   115e7:	mov    eax,0x3f
   115ec:	mov    DWORD PTR [rbx+0x1c4],0xbe1afdfa
   115f6:	mov    BYTE PTR [rbx+0x1ca],0x80
   115fd:	cdq    
   115fe:	mov    rcx,QWORD PTR [rbx]
   11601:	idiv   DWORD PTR [rcx+0x88c]
   11607:	mov    edi,edx
   11609:	cdq    
   1160a:	idiv   DWORD PTR [rcx+0x888]
   11610:	cmp    DWORD PTR [rcx+0x884],eax
   11616:	jg     117ae <vvfat_open+0xeae>
   1161c:	mov    edi,0xffffffff
   11621:	mov    BYTE PTR [rbx+0x1cd],0xff
   11628:	mov    r8d,0x1
   1162e:	mov    WORD PTR [rbx+0x1cb],di
   11635:	mov    eax,esi
   11637:	cdq    
   11638:	idiv   DWORD PTR [rcx+0x88c]
   1163e:	mov    edi,edx
   11640:	cdq    
   11641:	idiv   DWORD PTR [rcx+0x888]
   11647:	cmp    DWORD PTR [rcx+0x884],eax
   1164d:	jg     11788 <vvfat_open+0xe88>
   11653:	mov    ecx,0xffffffff
   11658:	mov    BYTE PTR [rbx+0x1d1],0xff
   1165f:	mov    r8d,0x1
   11665:	mov    WORD PTR [rbx+0x1cf],cx
   1166c:	mov    eax,DWORD PTR [rbx+0x8]
   1166f:	lea    edx,[rax-0x1]
   11672:	sub    esi,eax
   11674:	mov    eax,esi
   11676:	mov    DWORD PTR [rbx+0x1d2],edx
   1167c:	mov    edx,DWORD PTR [rbx+0x800c]
   11682:	add    eax,0x1
   11685:	mov    DWORD PTR [rbx+0x1d6],eax
   1168b:	mov    eax,0x1
   11690:	cmp    edx,0xc
   11693:	je     116aa <vvfat_open+0xdaa>
   11695:	cmp    edx,0x10
   11698:	lea    eax,[r8+0xb]
   1169c:	jne    116aa <vvfat_open+0xdaa>
   1169e:	cmp    r8d,0x1
   116a2:	sbb    eax,eax
   116a4:	and    eax,0xfffffff8
   116a7:	add    eax,0xe
   116aa:	mov    edx,0xffffaa55
   116af:	mov    BYTE PTR [rbx+0x1ce],al
   116b5:	mov    WORD PTR [rbx+0x20a],dx
   116bc:	jmp    11373 <vvfat_open+0xa73>
   116c1:	cmp    edx,0x1
   116c4:	jbe    117d5 <vvfat_open+0xed5>
   116ca:	mov    edx,DWORD PTR [rbx+0x8020]
   116d0:	mov    rcx,QWORD PTR [rbx+0x8010]
   116d7:	mov    DWORD PTR [rcx+rdx*1],eax
   116da:	jmp    111eb <vvfat_open+0x8eb>
   116df:	test   edx,edx
   116e1:	je     117d5 <vvfat_open+0xed5>
   116e7:	mov    rdx,QWORD PTR [rbx+0x8010]
   116ee:	mov    DWORD PTR [rdx],eax
   116f0:	jmp    1119c <vvfat_open+0x89c>
   116f5:	lea    rsi,[rip+0xdebe]        # 1f5ba <desc_template.13816+0xa3a>
   116fc:	mov    rdi,r12
   116ff:	call   3470 <strstr@plt>
   11704:	test   rax,rax
   11707:	je     10a51 <vvfat_open+0x151>
   1170d:	mov    DWORD PTR [rbx+0x800c],0xc
   11717:	mov    DWORD PTR [rbx+0x8070],0xb40
   11721:	jmp    10a51 <vvfat_open+0x151>
   11726:	cmp    DWORD PTR [rbx+0x8070],0x1680
   11730:	jne    1127e <vvfat_open+0x97e>
   11736:	mov    edx,0xfffffff9
   1173b:	mov    ecx,edx
   1173d:	jmp    1127e <vvfat_open+0x97e>
   11742:	mov    rcx,QWORD PTR [r15+0x18]
   11746:	mov    rdi,QWORD PTR [rip+0x215db3]        # 227500 <stderr@@GLIBC_2.2.5>
   1174d:	lea    rdx,[rip+0xde77]        # 1f5cb <desc_template.13816+0xa4b>
   11754:	mov    esi,0x1
   11759:	xor    eax,eax
   1175b:	call   3400 <__fprintf_chk@plt>
   11760:	mov    DWORD PTR [rsp+0x8],0xffffffff
   11768:	jmp    11477 <vvfat_open+0xb77>
   1176d:	cmp    edx,0x1
   11770:	jbe    117d5 <vvfat_open+0xed5>
   11772:	mov    edx,DWORD PTR [rbx+0x8020]
   11778:	mov    rcx,QWORD PTR [rbx+0x8010]
   1177f:	mov    WORD PTR [rcx+rdx*1],ax
   11783:	jmp    111eb <vvfat_open+0x8eb>
   11788:	mov    BYTE PTR [rbx+0x1cf],dl
   1178e:	mov    edx,eax
   11790:	mov    BYTE PTR [rbx+0x1d1],al
   11796:	sar    edx,0x8
   11799:	mov    ecx,edx
   1179b:	lea    edx,[rdi+0x1]
   1179e:	shl    ecx,0x6
   117a1:	or     edx,ecx
   117a3:	mov    BYTE PTR [rbx+0x1d0],dl
   117a9:	jmp    1166c <vvfat_open+0xd6c>
   117ae:	mov    BYTE PTR [rbx+0x1cb],dl
   117b4:	lea    edx,[rdi+0x1]
   117b7:	mov    edi,eax
   117b9:	sar    edi,0x8
   117bc:	mov    BYTE PTR [rbx+0x1cd],al
   117c2:	xor    r8d,r8d
   117c5:	shl    edi,0x6
   117c8:	or     edx,edi
   117ca:	mov    BYTE PTR [rbx+0x1cc],dl
   117d0:	jmp    11635 <vvfat_open+0xd35>
   117d5:	lea    rcx,[rip+0xdf94]        # 1f770 <__PRETTY_FUNCTION__.13707>
   117dc:	lea    rsi,[rip+0xd5a5]        # 1ed88 <desc_template.13816+0x208>
   117e3:	lea    rdi,[rip+0xdb34]        # 1f31e <desc_template.13816+0x79e>
   117ea:	mov    edx,0x60
   117ef:	call   3000 <__assert_fail@plt>
   117f4:	lea    rcx,[rip+0xde25]        # 1f620 <__PRETTY_FUNCTION__.14093>
   117fb:	lea    rsi,[rip+0xd586]        # 1ed88 <desc_template.13816+0x208>
   11802:	lea    rdi,[rip+0xda9f]        # 1f2a8 <desc_template.13816+0x728>
   11809:	mov    edx,0x395
   1180e:	call   3000 <__assert_fail@plt>
   11813:	lea    rcx,[rip+0xde1e]        # 1f638 <__PRETTY_FUNCTION__.14114>
   1181a:	lea    rsi,[rip+0xd567]        # 1ed88 <desc_template.13816+0x208>
   11821:	lea    rdi,[rip+0xdd9c]        # 1f5c4 <desc_template.13816+0xa44>
   11828:	mov    edx,0x42b
   1182d:	call   3000 <__assert_fail@plt>
   11832:	lea    rcx,[rip+0xdde7]        # 1f620 <__PRETTY_FUNCTION__.14093>
   11839:	lea    rsi,[rip+0xd548]        # 1ed88 <desc_template.13816+0x208>
   11840:	lea    rdi,[rip+0xdaeb]        # 1f332 <desc_template.13816+0x7b2>
   11847:	mov    edx,0x3a4
   1184c:	call   3000 <__assert_fail@plt>
   11851:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1185b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011860 <qcow_make_empty>:
   11860:	xor    eax,eax
   11862:	ret    
   11863:	nop    DWORD PTR [rax]
   11866:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011870 <qcow_get_info>:
   11870:	mov    rax,QWORD PTR [rdi+0x40]
   11874:	mov    edx,DWORD PTR [rax+0xc]
   11877:	mov    DWORD PTR [rsi],edx
   11879:	movsxd rdx,DWORD PTR [rax+0x20]
   1187d:	mov    ecx,DWORD PTR [rax+0x14]
   11880:	add    ecx,DWORD PTR [rax+0x8]
   11883:	xor    eax,eax
   11885:	shl    rdx,cl
   11888:	mov    QWORD PTR [rsi+0x8],rdx
   1188c:	ret    
   1188d:	nop    DWORD PTR [rax]

0000000000011890 <qcow_get_buffer>:
   11890:	push   rbp
   11891:	push   rbx
   11892:	mov    rax,rsi
   11895:	mov    rbx,rdi
   11898:	mov    rsi,rdx
   1189b:	mov    rdx,rax
   1189e:	sub    rsp,0x8
   118a2:	mov    ebp,DWORD PTR [rdi+0x880]
   118a8:	mov    DWORD PTR [rdi+0x880],0x1
   118b2:	call   17b00 <bdrv_pread>
   118b7:	mov    DWORD PTR [rbx+0x880],ebp
   118bd:	add    rsp,0x8
   118c1:	pop    rbx
   118c2:	pop    rbp
   118c3:	ret    
   118c4:	xchg   ax,ax
   118c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000118d0 <qcow_put_buffer>:
   118d0:	push   r12
   118d2:	mov    r12d,DWORD PTR [rdi+0x880]
   118d9:	mov    rax,rsi
   118dc:	push   rbp
   118dd:	push   rbx
   118de:	mov    ebp,ecx
   118e0:	mov    rbx,rdi
   118e3:	mov    rsi,rdx
   118e6:	mov    DWORD PTR [rdi+0x880],0x1
   118f0:	mov    rdx,rax
   118f3:	call   180f0 <bdrv_pwrite>
   118f8:	mov    DWORD PTR [rbx+0x880],r12d
   118ff:	mov    eax,ebp
   11901:	pop    rbx
   11902:	pop    rbp
   11903:	pop    r12
   11905:	ret    
   11906:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011910 <qcow_snapshot_list>:
   11910:	push   r15
   11912:	push   r14
   11914:	push   r13
   11916:	push   r12
   11918:	push   rbp
   11919:	push   rbx
   1191a:	sub    rsp,0x18
   1191e:	mov    r15,QWORD PTR [rdi+0x40]
   11922:	mov    QWORD PTR [rsp+0x8],rsi
   11927:	movsxd rdi,DWORD PTR [r15+0x35c]
   1192e:	imul   rdi,rdi,0x198
   11935:	call   4a20 <qemu_mallocz>
   1193a:	mov    r14,rax
   1193d:	mov    eax,DWORD PTR [r15+0x35c]
   11944:	test   eax,eax
   11946:	jle    119ba <qcow_snapshot_list+0xaa>
   11948:	mov    rbx,r14
   1194b:	xor    r13d,r13d
   1194e:	xor    r12d,r12d
   11951:	nop    DWORD PTR [rax+0x0]
   11958:	mov    rbp,QWORD PTR [r15+0x360]
   1195f:	mov    rdi,rbx
   11962:	mov    esi,0x80
   11967:	add    r12d,0x1
   1196b:	add    rbp,r13
   1196e:	add    r13,0x38
   11972:	mov    rdx,QWORD PTR [rbp+0x10]
   11976:	call   45a0 <pstrcpy>
   1197b:	mov    rdx,QWORD PTR [rbp+0x18]
   1197f:	lea    rdi,[rbx+0x80]
   11986:	mov    esi,0x100
   1198b:	add    rbx,0x198
   11992:	call   45a0 <pstrcpy>
   11997:	mov    eax,DWORD PTR [rbp+0x20]
   1199a:	mov    DWORD PTR [rbx-0x18],eax
   1199d:	mov    eax,DWORD PTR [rbp+0x24]
   119a0:	mov    DWORD PTR [rbx-0x14],eax
   119a3:	mov    eax,DWORD PTR [rbp+0x28]
   119a6:	mov    DWORD PTR [rbx-0x10],eax
   119a9:	mov    rax,QWORD PTR [rbp+0x30]
   119ad:	mov    QWORD PTR [rbx-0x8],rax
   119b1:	cmp    DWORD PTR [r15+0x35c],r12d
   119b8:	jg     11958 <qcow_snapshot_list+0x48>
   119ba:	mov    rax,QWORD PTR [rsp+0x8]
   119bf:	mov    QWORD PTR [rax],r14
   119c2:	mov    eax,DWORD PTR [r15+0x35c]
   119c9:	add    rsp,0x18
   119cd:	pop    rbx
   119ce:	pop    rbp
   119cf:	pop    r12
   119d1:	pop    r13
   119d3:	pop    r14
   119d5:	pop    r15
   119d7:	ret    
   119d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000119e0 <create_refcount_update>:
   119e0:	mov    eax,DWORD PTR [rdi]
   119e2:	neg    eax
   119e4:	cdqe   
   119e6:	mov    r8,rax
   119e9:	and    r8,rsi
   119ec:	lea    rsi,[rsi+rdx*1-0x1]
   119f1:	and    rsi,rax
   119f4:	cmp    r8,rsi
   119f7:	jg     11a2d <create_refcount_update+0x4d>
   119f9:	nop    DWORD PTR [rax+0x0]
   11a00:	mov    ecx,DWORD PTR [rdi+0x4]
   11a03:	mov    rax,QWORD PTR [rdi+0x8]
   11a07:	mov    rdx,r8
   11a0a:	sar    rdx,cl
   11a0d:	lea    rdx,[rax+rdx*2]
   11a11:	movzx  eax,WORD PTR [rdx]
   11a14:	ror    ax,0x8
   11a18:	add    eax,0x1
   11a1b:	ror    ax,0x8
   11a1f:	mov    WORD PTR [rdx],ax
   11a22:	movsxd rax,DWORD PTR [rdi]
   11a25:	add    r8,rax
   11a28:	cmp    rsi,r8
   11a2b:	jge    11a00 <create_refcount_update+0x20>
   11a2d:	repz ret 
   11a2f:	nop

0000000000011a30 <qcow_aio_flush>:
   11a30:	mov    rax,QWORD PTR [rdi+0x40]
   11a34:	mov    rdi,QWORD PTR [rax]
   11a37:	jmp    19530 <bdrv_aio_flush>
   11a3c:	nop    DWORD PTR [rax+0x0]

0000000000011a40 <qcow_aio_cancel>:
   11a40:	push   rbx
   11a41:	mov    rbx,rdi
   11a44:	mov    rdi,QWORD PTR [rdi+0x50]
   11a48:	test   rdi,rdi
   11a4b:	je     11a52 <qcow_aio_cancel+0x12>
   11a4d:	call   19520 <bdrv_aio_cancel>
   11a52:	mov    rdi,rbx
   11a55:	pop    rbx
   11a56:	jmp    19850 <qemu_aio_release>
   11a5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011a60 <qcow_flush>:
   11a60:	mov    rax,QWORD PTR [rdi+0x40]
   11a64:	mov    rdi,QWORD PTR [rax]
   11a67:	jmp    18700 <bdrv_flush>
   11a6c:	nop    DWORD PTR [rax+0x0]

0000000000011a70 <qcow_close>:
   11a70:	push   rbp
   11a71:	push   rbx
   11a72:	mov    rbp,rdi
   11a75:	sub    rsp,0x8
   11a79:	mov    rbx,QWORD PTR [rdi+0x40]
   11a7d:	mov    rdi,QWORD PTR [rbx+0x40]
   11a81:	call   49c0 <qemu_free>
   11a86:	mov    rdi,QWORD PTR [rbx+0x48]
   11a8a:	call   49c0 <qemu_free>
   11a8f:	mov    rdi,QWORD PTR [rbx+0x110]
   11a96:	call   49c0 <qemu_free>
   11a9b:	mov    rdi,QWORD PTR [rbx+0x118]
   11aa2:	call   49c0 <qemu_free>
   11aa7:	mov    rbp,QWORD PTR [rbp+0x40]
   11aab:	mov    rdi,QWORD PTR [rbp+0x148]
   11ab2:	call   49c0 <qemu_free>
   11ab7:	mov    rdi,QWORD PTR [rbp+0x128]
   11abe:	call   49c0 <qemu_free>
   11ac3:	mov    rdi,QWORD PTR [rbx]
   11ac6:	add    rsp,0x8
   11aca:	pop    rbx
   11acb:	pop    rbp
   11acc:	jmp    170f0 <bdrv_delete>
   11ad1:	nop    DWORD PTR [rax+rax*1+0x0]
   11ad6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011ae0 <get_refcount.isra.5>:
   11ae0:	mov    eax,DWORD PTR [rdi+0x8]
   11ae3:	mov    rdx,rsi
   11ae6:	lea    ecx,[rax-0x1]
   11ae9:	xor    eax,eax
   11aeb:	sar    rdx,cl
   11aee:	cmp    DWORD PTR [rdi+0x138],edx
   11af4:	jbe    11b48 <get_refcount.isra.5+0x68>
   11af6:	push   r12
   11af8:	push   rbp
   11af9:	movsxd rdx,edx
   11afc:	push   rbx
   11afd:	mov    r8,QWORD PTR [rdi+0x128]
   11b04:	mov    r12,QWORD PTR [r8+rdx*8]
   11b08:	test   r12,r12
   11b0b:	je     11b3d <get_refcount.isra.5+0x5d>
   11b0d:	cmp    r12,QWORD PTR [rdi+0x140]
   11b14:	mov    rbp,rsi
   11b17:	mov    rbx,rdi
   11b1a:	mov    rdx,QWORD PTR [rdi+0x148]
   11b21:	jne    11b50 <get_refcount.isra.5+0x70>
   11b23:	mov    esi,0x1
   11b28:	shl    esi,cl
   11b2a:	sub    esi,0x1
   11b2d:	and    esi,ebp
   11b2f:	movsxd rsi,esi
   11b32:	movzx  eax,WORD PTR [rdx+rsi*2]
   11b36:	ror    ax,0x8
   11b3a:	movzx  eax,ax
   11b3d:	pop    rbx
   11b3e:	pop    rbp
   11b3f:	pop    r12
   11b41:	ret    
   11b42:	nop    WORD PTR [rax+rax*1+0x0]
   11b48:	repz ret 
   11b4a:	nop    WORD PTR [rax+rax*1+0x0]
   11b50:	mov    ecx,DWORD PTR [rdi+0xc]
   11b53:	mov    rdi,QWORD PTR [rdi]
   11b56:	mov    rsi,r12
   11b59:	call   17b00 <bdrv_pread>
   11b5e:	mov    edx,eax
   11b60:	cmp    edx,DWORD PTR [rbx+0xc]
   11b63:	mov    eax,0x1
   11b68:	jne    11b3d <get_refcount.isra.5+0x5d>
   11b6a:	mov    eax,DWORD PTR [rbx+0x8]
   11b6d:	mov    QWORD PTR [rbx+0x140],r12
   11b74:	mov    rdx,QWORD PTR [rbx+0x148]
   11b7b:	lea    ecx,[rax-0x1]
   11b7e:	jmp    11b23 <get_refcount.isra.5+0x43>

0000000000011b80 <alloc_clusters_noref>:
   11b80:	push   r14
   11b82:	push   r13
   11b84:	mov    r14,rdi
   11b87:	push   r12
   11b89:	push   rbp
   11b8a:	push   rbx
   11b8b:	mov    rbp,QWORD PTR [rdi+0x40]
   11b8f:	mov    eax,DWORD PTR [rbp+0xc]
   11b92:	mov    ecx,DWORD PTR [rbp+0x8]
   11b95:	lea    r13d,[rax-0x1]
   11b99:	movsxd r13,r13d
   11b9c:	add    r13,rsi
   11b9f:	sar    r13,cl
   11ba2:	mov    r12d,r13d
   11ba5:	test   r12d,r12d
   11ba8:	jle    11bd7 <alloc_clusters_noref+0x57>
   11baa:	xor    ebx,ebx
   11bac:	nop    DWORD PTR [rax+0x0]
   11bb0:	mov    rsi,QWORD PTR [rbp+0x150]
   11bb7:	lea    rax,[rsi+0x1]
   11bbb:	mov    QWORD PTR [rbp+0x150],rax
   11bc2:	mov    rdi,QWORD PTR [r14+0x40]
   11bc6:	call   11ae0 <get_refcount.isra.5>
   11bcb:	test   eax,eax
   11bcd:	jne    11ba5 <alloc_clusters_noref+0x25>
   11bcf:	add    ebx,0x1
   11bd2:	cmp    ebx,r12d
   11bd5:	jne    11bb0 <alloc_clusters_noref+0x30>
   11bd7:	mov    rax,QWORD PTR [rbp+0x150]
   11bde:	mov    ecx,DWORD PTR [rbp+0x8]
   11be1:	movsxd r13,r13d
   11be4:	pop    rbx
   11be5:	pop    rbp
   11be6:	sub    rax,r13
   11be9:	pop    r12
   11beb:	shl    rax,cl
   11bee:	pop    r13
   11bf0:	pop    r14
   11bf2:	ret    
   11bf3:	nop    DWORD PTR [rax]
   11bf6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011c00 <l2_load.isra.6>:
   11c00:	push   r13
   11c02:	push   r12
   11c04:	xor    eax,eax
   11c06:	push   rbp
   11c07:	push   rbx
   11c08:	sub    rsp,0x8
   11c0c:	mov    rbx,QWORD PTR [rdi]
   11c0f:	jmp    11c22 <l2_load.isra.6+0x22>
   11c11:	nop    DWORD PTR [rax+0x0]
   11c18:	add    rax,0x1
   11c1c:	cmp    rax,0x10
   11c20:	je     11c90 <l2_load.isra.6+0x90>
   11c22:	cmp    rsi,QWORD PTR [rbx+rax*8+0x50]
   11c27:	mov    edx,eax
   11c29:	jne    11c18 <l2_load.isra.6+0x18>
   11c2b:	cdqe   
   11c2d:	lea    rcx,[rbx+rax*4]
   11c31:	mov    eax,DWORD PTR [rcx+0xd0]
   11c37:	add    eax,0x1
   11c3a:	cmp    eax,0xffffffff
   11c3d:	mov    DWORD PTR [rcx+0xd0],eax
   11c43:	je     11c70 <l2_load.isra.6+0x70>
   11c45:	mov    ecx,DWORD PTR [rbx+0x14]
   11c48:	mov    r9,QWORD PTR [rbx+0x48]
   11c4c:	shl    edx,cl
   11c4e:	movsxd rdx,edx
   11c51:	lea    r12,[r9+rdx*8]
   11c55:	test   r12,r12
   11c58:	je     11d1a <l2_load.isra.6+0x11a>
   11c5e:	add    rsp,0x8
   11c62:	mov    rax,r12
   11c65:	pop    rbx
   11c66:	pop    rbp
   11c67:	pop    r12
   11c69:	pop    r13
   11c6b:	ret    
   11c6c:	nop    DWORD PTR [rax+0x0]
   11c70:	lea    rax,[rbx+0xd0]
   11c77:	lea    rcx,[rbx+0x110]
   11c7e:	xchg   ax,ax
   11c80:	shr    DWORD PTR [rax],1
   11c82:	add    rax,0x4
   11c86:	cmp    rcx,rax
   11c89:	jne    11c80 <l2_load.isra.6+0x80>
   11c8b:	jmp    11c45 <l2_load.isra.6+0x45>
   11c8d:	nop    DWORD PTR [rax]
   11c90:	mov    ecx,DWORD PTR [rbx+0x14]
   11c93:	mov    r9,QWORD PTR [rbx+0x48]
   11c97:	mov    r8,rbx
   11c9a:	xor    eax,eax
   11c9c:	xor    ebp,ebp
   11c9e:	mov    edi,0xffffffff
   11ca3:	nop    DWORD PTR [rax+rax*1+0x0]
   11ca8:	mov    edx,DWORD PTR [r8+rax*4+0xd0]
   11cb0:	cmp    edx,edi
   11cb2:	jae    11cb9 <l2_load.isra.6+0xb9>
   11cb4:	movsxd rbp,eax
   11cb7:	mov    edi,edx
   11cb9:	add    rax,0x1
   11cbd:	cmp    rax,0x10
   11cc1:	jne    11ca8 <l2_load.isra.6+0xa8>
   11cc3:	mov    eax,ebp
   11cc5:	mov    rdi,QWORD PTR [rbx]
   11cc8:	mov    r13,rsi
   11ccb:	shl    eax,cl
   11ccd:	cdqe   
   11ccf:	lea    r12,[r9+rax*8]
   11cd3:	mov    eax,DWORD PTR [rbx+0x18]
   11cd6:	mov    rdx,r12
   11cd9:	lea    ecx,[rax*8+0x0]
   11ce0:	call   17b00 <bdrv_pread>
   11ce5:	movsxd rdx,DWORD PTR [rbx+0x18]
   11ce9:	cdqe   
   11ceb:	shl    rdx,0x3
   11cef:	cmp    rax,rdx
   11cf2:	jne    11d12 <l2_load.isra.6+0x112>
   11cf4:	mov    QWORD PTR [rbx+rbp*8+0x50],r13
   11cf9:	mov    DWORD PTR [rbx+rbp*4+0xd0],0x1
   11d04:	add    rsp,0x8
   11d08:	pop    rbx
   11d09:	mov    rax,r12
   11d0c:	pop    rbp
   11d0d:	pop    r12
   11d0f:	pop    r13
   11d11:	ret    
   11d12:	xor    r12d,r12d
   11d15:	jmp    11c5e <l2_load.isra.6+0x5e>
   11d1a:	mov    r8,QWORD PTR [rdi]
   11d1d:	jmp    11c9a <l2_load.isra.6+0x9a>
   11d22:	nop    DWORD PTR [rax+0x0]
   11d26:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011d30 <qcow_free_snapshots.isra.8>:
   11d30:	push   r12
   11d32:	push   rbp
   11d33:	mov    rbp,rdi
   11d36:	push   rbx
   11d37:	mov    eax,DWORD PTR [rdi+0x35c]
   11d3d:	test   eax,eax
   11d3f:	jle    11d83 <qcow_free_snapshots.isra.8+0x53>
   11d41:	xor    ebx,ebx
   11d43:	xor    r12d,r12d
   11d46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11d50:	mov    rax,QWORD PTR [rbp+0x360]
   11d57:	add    r12d,0x1
   11d5b:	mov    rdi,QWORD PTR [rax+rbx*1+0x18]
   11d60:	call   49c0 <qemu_free>
   11d65:	mov    rax,QWORD PTR [rbp+0x360]
   11d6c:	mov    rdi,QWORD PTR [rax+rbx*1+0x10]
   11d71:	add    rbx,0x38
   11d75:	call   49c0 <qemu_free>
   11d7a:	cmp    r12d,DWORD PTR [rbp+0x35c]
   11d81:	jl     11d50 <qcow_free_snapshots.isra.8+0x20>
   11d83:	mov    rdi,QWORD PTR [rbp+0x360]
   11d8a:	call   49c0 <qemu_free>
   11d8f:	mov    QWORD PTR [rbp+0x360],0x0
   11d9a:	mov    DWORD PTR [rbp+0x35c],0x0
   11da4:	pop    rbx
   11da5:	pop    rbp
   11da6:	pop    r12
   11da8:	ret    
   11da9:	nop    DWORD PTR [rax+0x0]

0000000000011db0 <find_snapshot_by_id.isra.9>:
   11db0:	push   r13
   11db2:	push   r12
   11db4:	push   rbp
   11db5:	push   rbx
   11db6:	mov    ebx,0xffffffff
   11dbb:	sub    rsp,0x8
   11dbf:	mov    r13d,DWORD PTR [rdi+0x35c]
   11dc6:	test   r13d,r13d
   11dc9:	jle    11dfc <find_snapshot_by_id.isra.9+0x4c>
   11dcb:	mov    rbp,QWORD PTR [rdi+0x360]
   11dd2:	mov    r12,rsi
   11dd5:	xor    ebx,ebx
   11dd7:	add    rbp,0x10
   11ddb:	jmp    11dec <find_snapshot_by_id.isra.9+0x3c>
   11ddd:	nop    DWORD PTR [rax]
   11de0:	add    ebx,0x1
   11de3:	add    rbp,0x38
   11de7:	cmp    ebx,r13d
   11dea:	je     11e10 <find_snapshot_by_id.isra.9+0x60>
   11dec:	mov    rdi,QWORD PTR [rbp+0x0]
   11df0:	mov    rsi,r12
   11df3:	call   3110 <strcmp@plt>
   11df8:	test   eax,eax
   11dfa:	jne    11de0 <find_snapshot_by_id.isra.9+0x30>
   11dfc:	add    rsp,0x8
   11e00:	mov    eax,ebx
   11e02:	pop    rbx
   11e03:	pop    rbp
   11e04:	pop    r12
   11e06:	pop    r13
   11e08:	ret    
   11e09:	nop    DWORD PTR [rax+0x0]
   11e10:	add    rsp,0x8
   11e14:	mov    ebx,0xffffffff
   11e19:	mov    eax,ebx
   11e1b:	pop    rbx
   11e1c:	pop    rbp
   11e1d:	pop    r12
   11e1f:	pop    r13
   11e21:	ret    
   11e22:	nop    DWORD PTR [rax+0x0]
   11e26:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000011e30 <find_snapshot_by_id_or_name.isra.10>:
   11e30:	push   r13
   11e32:	push   r12
   11e34:	mov    r12,rsi
   11e37:	push   rbp
   11e38:	push   rbx
   11e39:	mov    rbp,rdi
   11e3c:	sub    rsp,0x8
   11e40:	call   11db0 <find_snapshot_by_id.isra.9>
   11e45:	test   eax,eax
   11e47:	mov    ebx,eax
   11e49:	js     11e60 <find_snapshot_by_id_or_name.isra.10+0x30>
   11e4b:	add    rsp,0x8
   11e4f:	mov    eax,ebx
   11e51:	pop    rbx
   11e52:	pop    rbp
   11e53:	pop    r12
   11e55:	pop    r13
   11e57:	ret    
   11e58:	nop    DWORD PTR [rax+rax*1+0x0]
   11e60:	mov    r13d,DWORD PTR [rbp+0x35c]
   11e67:	mov    ebx,0xffffffff
   11e6c:	test   r13d,r13d
   11e6f:	jle    11e4b <find_snapshot_by_id_or_name.isra.10+0x1b>
   11e71:	mov    rbp,QWORD PTR [rbp+0x360]
   11e78:	xor    ebx,ebx
   11e7a:	add    rbp,0x18
   11e7e:	xchg   ax,ax
   11e80:	mov    rdi,QWORD PTR [rbp+0x0]
   11e84:	mov    rsi,r12
   11e87:	call   3110 <strcmp@plt>
   11e8c:	test   eax,eax
   11e8e:	je     11e4b <find_snapshot_by_id_or_name.isra.10+0x1b>
   11e90:	add    ebx,0x1
   11e93:	add    rbp,0x38
   11e97:	cmp    ebx,r13d
   11e9a:	jne    11e80 <find_snapshot_by_id_or_name.isra.10+0x50>
   11e9c:	add    rsp,0x8
   11ea0:	mov    ebx,0xffffffff
   11ea5:	mov    eax,ebx
   11ea7:	pop    rbx
   11ea8:	pop    rbp
   11ea9:	pop    r12
   11eab:	pop    r13
   11ead:	ret    
   11eae:	xchg   ax,ax

0000000000011eb0 <decompress_cluster>:
   11eb0:	push   r15
   11eb2:	push   r14
   11eb4:	push   r13
   11eb6:	push   r12
   11eb8:	xor    r12d,r12d
   11ebb:	push   rbp
   11ebc:	push   rbx
   11ebd:	sub    rsp,0x98
   11ec4:	mov    rbp,QWORD PTR [rdi+0x30]
   11ec8:	mov    rax,QWORD PTR fs:0x28
   11ed1:	mov    QWORD PTR [rsp+0x88],rax
   11ed9:	xor    eax,eax
   11edb:	and    rbp,rsi
   11ede:	cmp    QWORD PTR [rdi+0x120],rbp
   11ee5:	je     11fda <decompress_cluster+0x12a>
   11eeb:	mov    ecx,DWORD PTR [rdi+0x24]
   11eee:	mov    rdx,QWORD PTR [rdi+0x118]
   11ef5:	mov    rbx,rdi
   11ef8:	mov    r12d,ebp
   11efb:	and    r12d,0x1ff
   11f02:	shr    rsi,cl
   11f05:	and    esi,DWORD PTR [rdi+0x28]
   11f08:	mov    rdi,QWORD PTR [rdi]
   11f0b:	lea    ecx,[rsi+0x1]
   11f0e:	mov    rsi,rbp
   11f11:	shr    rsi,0x9
   11f15:	mov    r13d,ecx
   11f18:	shl    r13d,0x9
   11f1c:	sub    r13d,r12d
   11f1f:	mov    DWORD PTR [rsp+0xc],r13d
   11f24:	call   171e0 <bdrv_read>
   11f29:	test   eax,eax
   11f2b:	js     12008 <decompress_cluster+0x158>
   11f31:	lea    r13,[rsp+0x10]
   11f36:	xor    eax,eax
   11f38:	mov    ecx,0xc
   11f3d:	mov    r14d,DWORD PTR [rbx+0xc]
   11f41:	mov    r15,QWORD PTR [rbx+0x110]
   11f48:	movsxd r12,r12d
   11f4b:	lea    rdi,[r13+0x10]
   11f4f:	add    r12,QWORD PTR [rbx+0x118]
   11f56:	mov    QWORD PTR [rsp+0x1c],0x0
   11f5f:	mov    QWORD PTR [r13+0x68],0x0
   11f67:	lea    rdx,[rip+0xa271]        # 1c1df <__PRETTY_FUNCTION__.13304+0x8f>
   11f6e:	mov    esi,0xfffffff4
   11f73:	rep stos QWORD PTR es:[rdi],rax
   11f76:	mov    ecx,0x70
   11f7b:	mov    rdi,r13
   11f7e:	mov    QWORD PTR [rsp+0x28],r15
   11f83:	mov    QWORD PTR [rsp+0x10],r12
   11f88:	mov    DWORD PTR [rsp+0x30],r14d
   11f8d:	mov    eax,DWORD PTR [rsp+0xc]
   11f91:	mov    DWORD PTR [rsp+0x18],eax
   11f95:	call   3350 <inflateInit2_@plt>
   11f9a:	test   eax,eax
   11f9c:	mov    r12d,eax
   11f9f:	jne    12008 <decompress_cluster+0x158>
   11fa1:	mov    rdi,r13
   11fa4:	mov    esi,0x4
   11fa9:	call   2ec0 <inflate@plt>
   11fae:	mov    rdx,QWORD PTR [rsp+0x28]
   11fb3:	mov    rdi,r13
   11fb6:	sub    rdx,r15
   11fb9:	cmp    r14d,edx
   11fbc:	jne    12010 <decompress_cluster+0x160>
   11fbe:	cmp    eax,0x1
   11fc1:	setne  dl
   11fc4:	cmp    eax,0xfffffffb
   11fc7:	setne  al
   11fca:	test   dl,al
   11fcc:	jne    12010 <decompress_cluster+0x160>
   11fce:	call   31a0 <inflateEnd@plt>
   11fd3:	mov    QWORD PTR [rbx+0x120],rbp
   11fda:	mov    rdi,QWORD PTR [rsp+0x88]
   11fe2:	xor    rdi,QWORD PTR fs:0x28
   11feb:	mov    eax,r12d
   11fee:	jne    1201d <decompress_cluster+0x16d>
   11ff0:	add    rsp,0x98
   11ff7:	pop    rbx
   11ff8:	pop    rbp
   11ff9:	pop    r12
   11ffb:	pop    r13
   11ffd:	pop    r14
   11fff:	pop    r15
   12001:	ret    
   12002:	nop    WORD PTR [rax+rax*1+0x0]
   12008:	mov    r12d,0xffffffff
   1200e:	jmp    11fda <decompress_cluster+0x12a>
   12010:	call   31a0 <inflateEnd@plt>
   12015:	mov    r12d,0xffffffff
   1201b:	jmp    11fda <decompress_cluster+0x12a>
   1201d:	call   2f70 <__stack_chk_fail@plt>
   12022:	nop    DWORD PTR [rax+0x0]
   12026:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000012030 <qcow_set_key>:
   12030:	push   r12
   12032:	pxor   xmm0,xmm0
   12036:	push   rbp
   12037:	push   rbx
   12038:	mov    rbp,rsi
   1203b:	sub    rsp,0x20
   1203f:	mov    r12,QWORD PTR [rdi+0x40]
   12043:	mov    rdi,rsi
   12046:	mov    rax,QWORD PTR fs:0x28
   1204f:	mov    QWORD PTR [rsp+0x18],rax
   12054:	xor    eax,eax
   12056:	movaps XMMWORD PTR [rsp],xmm0
   1205a:	call   2f60 <strlen@plt>
   1205f:	mov    edi,0x10
   12064:	cmp    eax,0x10
   12067:	mov    rbx,rsp
   1206a:	cmovle edi,eax
   1206d:	test   eax,eax
   1206f:	jle    12090 <qcow_set_key+0x60>
   12071:	xor    eax,eax
   12073:	mov    rbx,rsp
   12076:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12080:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   12085:	mov    BYTE PTR [rbx+rax*1],cl
   12088:	add    rax,0x1
   1208c:	cmp    edi,eax
   1208e:	jg     12080 <qcow_set_key+0x50>
   12090:	mov    eax,DWORD PTR [r12+0x164]
   12098:	lea    rdx,[r12+0x168]
   120a0:	mov    esi,0x80
   120a5:	mov    rdi,rbx
   120a8:	mov    DWORD PTR [r12+0x160],eax
   120b0:	call   6940 <AES_set_encrypt_key>
   120b5:	test   eax,eax
   120b7:	jne    120f1 <qcow_set_key+0xc1>
   120b9:	lea    rdx,[r12+0x25c]
   120c1:	mov    esi,0x80
   120c6:	mov    rdi,rbx
   120c9:	call   6d70 <AES_set_decrypt_key>
   120ce:	test   eax,eax
   120d0:	setne  al
   120d3:	movzx  eax,al
   120d6:	neg    eax
   120d8:	mov    rsi,QWORD PTR [rsp+0x18]
   120dd:	xor    rsi,QWORD PTR fs:0x28
   120e6:	jne    120f8 <qcow_set_key+0xc8>
   120e8:	add    rsp,0x20
   120ec:	pop    rbx
   120ed:	pop    rbp
   120ee:	pop    r12
   120f0:	ret    
   120f1:	mov    eax,0xffffffff
   120f6:	jmp    120d8 <qcow_set_key+0xa8>
   120f8:	call   2f70 <__stack_chk_fail@plt>
   120fd:	nop    DWORD PTR [rax]

0000000000012100 <qcow_create>:
   12100:	push   r15
   12102:	push   r14
   12104:	mov    r14,rdx
   12107:	push   r13
   12109:	push   r12
   1210b:	mov    edx,0x1a4
   12110:	push   rbp
   12111:	push   rbx
   12112:	mov    rbp,rsi
   12115:	pxor   xmm0,xmm0
   12119:	mov    esi,0x241
   1211e:	sub    rsp,0xb8
   12125:	mov    r13d,ecx
   12128:	mov    rax,QWORD PTR fs:0x28
   12131:	mov    QWORD PTR [rsp+0xa8],rax
   12139:	xor    eax,eax
   1213b:	movaps XMMWORD PTR [rsp+0x30],xmm0
   12140:	movaps XMMWORD PTR [rsp+0x40],xmm0
   12145:	movaps XMMWORD PTR [rsp+0x50],xmm0
   1214a:	movaps XMMWORD PTR [rsp],xmm0
   1214e:	call   32e0 <open64@plt>
   12153:	test   eax,eax
   12155:	js     1245b <qcow_create+0x35b>
   1215b:	shl    rbp,0x9
   1215f:	mov    ebx,eax
   12161:	movabs rax,0x2000000fb494651
   1216b:	movdqa xmm0,XMMWORD PTR [rsp]
   12170:	lea    r15,[rsp+0x60]
   12175:	mov    QWORD PTR [rsp+0x60],rax
   1217a:	mov    rax,rbp
   1217d:	test   r14,r14
   12180:	bswap  rax
   12183:	movups XMMWORD PTR [rsp+0x68],xmm0
   12188:	movups XMMWORD PTR [r15+0x18],xmm0
   1218d:	movups XMMWORD PTR [r15+0x28],xmm0
   12192:	movups XMMWORD PTR [r15+0x38],xmm0
   12197:	mov    QWORD PTR [rsp+0x78],rax
   1219c:	je     12430 <qcow_create+0x330>
   121a2:	movabs rax,0x4800000000000000
   121ac:	mov    rdi,r14
   121af:	mov    QWORD PTR [rsp+0x68],rax
   121b4:	call   2f60 <strlen@plt>
   121b9:	mov    edx,eax
   121bb:	mov    DWORD PTR [rsp+0x1c],eax
   121bf:	add    eax,0x4f
   121c2:	and    eax,0xfffffff8
   121c5:	bswap  edx
   121c7:	cdqe   
   121c9:	mov    DWORD PTR [rsp+0x70],edx
   121cd:	mov    QWORD PTR [rsp+0x10],rax
   121d2:	add    rax,0xfff
   121d8:	and    rax,0xfffffffffffff000
   121de:	mov    rdx,rax
   121e1:	mov    r12,rax
   121e4:	bswap  rdx
   121e7:	movabs rcx,0xc00001000
   121f1:	and    r13d,0x1
   121f5:	mov    DWORD PTR [rsp+0x74],0xc000000
   121fd:	mov    QWORD PTR [rsp+0x30],rcx
   12202:	jne    12420 <qcow_create+0x320>
   12208:	add    rbp,0x1fffff
   1220f:	mov    QWORD PTR [rsp+0x48],rax
   12214:	mov    edi,0x1000
   12219:	sar    rbp,0x15
   1221d:	mov    QWORD PTR [rsp+0x88],rdx
   12225:	mov    eax,ebp
   12227:	mov    r13d,ebp
   1222a:	bswap  eax
   1222c:	mov    DWORD PTR [rsp+0x84],eax
   12233:	movsxd rax,ebp
   12236:	shl    rax,0x3
   1223a:	lea    rsi,[rax+0xfff]
   12241:	mov    QWORD PTR [rsp],rax
   12245:	and    rsi,0xfffffffffffff000
   1224c:	add    r12,rsi
   1224f:	call   4a20 <qemu_mallocz>
   12254:	movsxd rsi,DWORD PTR [rsp+0x30]
   12259:	mov    rdx,r12
   1225c:	mov    ecx,DWORD PTR [rsp+0x34]
   12260:	bswap  rdx
   12263:	mov    QWORD PTR [rsp+0x50],r12
   12268:	mov    QWORD PTR [rsp+0x40],rax
   1226d:	mov    QWORD PTR [rsp+0x90],rdx
   12275:	mov    DWORD PTR [rsp+0x98],0x1000000
   12280:	mov    rdi,rsi
   12283:	add    rsi,r12
   12286:	mov    rdx,rsi
   12289:	mov    QWORD PTR [rsp+0x58],rsi
   1228e:	shr    rdx,cl
   12291:	sub    ecx,0x1
   12294:	mov    QWORD PTR [rsp+0x28],rdx
   12299:	shr    rdx,cl
   1229c:	lea    r12d,[rdx+0x1]
   122a0:	test   r12d,r12d
   122a3:	jle    122db <qcow_create+0x1db>
   122a5:	mov    edx,edx
   122a7:	lea    r8,[rdx*8+0x8]
   122af:	xor    edx,edx
   122b1:	jmp    122bd <qcow_create+0x1bd>
   122b3:	nop    DWORD PTR [rax+rax*1+0x0]
   122b8:	mov    rax,QWORD PTR [rsp+0x40]
   122bd:	mov    rcx,rsi
   122c0:	bswap  rcx
   122c3:	mov    QWORD PTR [rax+rdx*1],rcx
   122c7:	movsxd rax,DWORD PTR [rsp+0x30]
   122cc:	add    rdx,0x8
   122d0:	add    rsi,rax
   122d3:	cmp    r8,rdx
   122d6:	mov    rdi,rax
   122d9:	jne    122b8 <qcow_create+0x1b8>
   122db:	imul   edi,r12d
   122df:	movsxd rdi,edi
   122e2:	call   4a20 <qemu_mallocz>
   122e7:	lea    r9,[rsp+0x30]
   122ec:	mov    rdx,QWORD PTR [rsp+0x10]
   122f1:	xor    esi,esi
   122f3:	mov    QWORD PTR [rsp+0x38],rax
   122f8:	mov    rdi,r9
   122fb:	call   119e0 <create_refcount_update>
   12300:	mov    rdx,QWORD PTR [rsp]
   12304:	mov    rsi,QWORD PTR [rsp+0x48]
   12309:	call   119e0 <create_refcount_update>
   1230e:	movsxd rdx,DWORD PTR [rsp+0x30]
   12313:	mov    rsi,QWORD PTR [rsp+0x50]
   12318:	call   119e0 <create_refcount_update>
   1231d:	mov    edx,DWORD PTR [rsp+0x30]
   12321:	mov    rsi,QWORD PTR [rsp+0x58]
   12326:	imul   edx,r12d
   1232a:	movsxd rdx,edx
   1232d:	call   119e0 <create_refcount_update>
   12332:	mov    edx,0x48
   12337:	mov    rsi,r15
   1233a:	mov    edi,ebx
   1233c:	call   2f10 <write@plt>
   12341:	test   r14,r14
   12344:	je     12355 <qcow_create+0x255>
   12346:	movsxd rdx,DWORD PTR [rsp+0x1c]
   1234b:	mov    rsi,r14
   1234e:	mov    edi,ebx
   12350:	call   2f10 <write@plt>
   12355:	mov    rsi,QWORD PTR [rsp+0x48]
   1235a:	xor    edx,edx
   1235c:	mov    edi,ebx
   1235e:	call   33f0 <lseek64@plt>
   12363:	test   ebp,ebp
   12365:	mov    QWORD PTR [rsp+0x28],0x0
   1236e:	jle    12397 <qcow_create+0x297>
   12370:	lea    r14,[rsp+0x28]
   12375:	xor    ebp,ebp
   12377:	nop    WORD PTR [rax+rax*1+0x0]
   12380:	mov    edx,0x8
   12385:	mov    rsi,r14
   12388:	mov    edi,ebx
   1238a:	add    ebp,0x1
   1238d:	call   2f10 <write@plt>
   12392:	cmp    r13d,ebp
   12395:	jne    12380 <qcow_create+0x280>
   12397:	mov    rsi,QWORD PTR [rsp+0x50]
   1239c:	xor    edx,edx
   1239e:	mov    edi,ebx
   123a0:	call   33f0 <lseek64@plt>
   123a5:	movsxd rdx,DWORD PTR [rsp+0x30]
   123aa:	mov    rsi,QWORD PTR [rsp+0x40]
   123af:	mov    edi,ebx
   123b1:	call   2f10 <write@plt>
   123b6:	mov    rsi,QWORD PTR [rsp+0x58]
   123bb:	xor    edx,edx
   123bd:	mov    edi,ebx
   123bf:	call   33f0 <lseek64@plt>
   123c4:	imul   r12d,DWORD PTR [rsp+0x30]
   123ca:	mov    rsi,QWORD PTR [rsp+0x38]
   123cf:	mov    edi,ebx
   123d1:	movsxd rdx,r12d
   123d4:	call   2f10 <write@plt>
   123d9:	mov    rdi,QWORD PTR [rsp+0x40]
   123de:	call   49c0 <qemu_free>
   123e3:	mov    rdi,QWORD PTR [rsp+0x38]
   123e8:	call   49c0 <qemu_free>
   123ed:	mov    edi,ebx
   123ef:	call   3040 <close@plt>
   123f4:	xor    eax,eax
   123f6:	mov    rbx,QWORD PTR [rsp+0xa8]
   123fe:	xor    rbx,QWORD PTR fs:0x28
   12407:	jne    12462 <qcow_create+0x362>
   12409:	add    rsp,0xb8
   12410:	pop    rbx
   12411:	pop    rbp
   12412:	pop    r12
   12414:	pop    r13
   12416:	pop    r14
   12418:	pop    r15
   1241a:	ret    
   1241b:	nop    DWORD PTR [rax+rax*1+0x0]
   12420:	mov    DWORD PTR [rsp+0x80],0x1000000
   1242b:	jmp    12208 <qcow_create+0x108>
   12430:	movabs rdx,0x10000000000000
   1243a:	mov    eax,0x1000
   1243f:	mov    r12d,0x1000
   12445:	mov    QWORD PTR [rsp+0x10],0x48
   1244e:	mov    DWORD PTR [rsp+0x1c],0x0
   12456:	jmp    121e7 <qcow_create+0xe7>
   1245b:	mov    eax,0xffffffff
   12460:	jmp    123f6 <qcow_create+0x2f6>
   12462:	call   2f70 <__stack_chk_fail@plt>
   12467:	nop    WORD PTR [rax+rax*1+0x0]

0000000000012470 <encrypt_sectors.isra.13>:
   12470:	push   r15
   12472:	push   r14
   12474:	push   r13
   12476:	push   r12
   12478:	push   rbp
   12479:	push   rbx
   1247a:	sub    rsp,0x38
   1247e:	mov    rax,QWORD PTR fs:0x28
   12487:	mov    QWORD PTR [rsp+0x28],rax
   1248c:	xor    eax,eax
   1248e:	test   ecx,ecx
   12490:	jle    124fb <encrypt_sectors.isra.13+0x8b>
   12492:	lea    r12d,[rcx-0x1]
   12496:	lea    rbx,[rdi+0x1]
   1249a:	lea    rax,[rsp+0x10]
   1249f:	mov    rbp,rsi
   124a2:	mov    r15,rdx
   124a5:	mov    r13d,r8d
   124a8:	mov    r14,r9
   124ab:	add    r12,rbx
   124ae:	mov    QWORD PTR [rsp+0x8],rax
   124b3:	jmp    124bc <encrypt_sectors.isra.13+0x4c>
   124b5:	nop    DWORD PTR [rax]
   124b8:	add    rbx,0x1
   124bc:	mov    r8,QWORD PTR [rsp+0x8]
   124c1:	mov    QWORD PTR [rsp+0x10],rdi
   124c6:	mov    rsi,rbp
   124c9:	mov    rdi,r15
   124cc:	mov    r9d,r13d
   124cf:	mov    rcx,r14
   124d2:	mov    edx,0x200
   124d7:	mov    QWORD PTR [rsp+0x18],0x0
   124e0:	add    r15,0x200
   124e7:	call   77a0 <AES_cbc_encrypt>
   124ec:	add    rbp,0x200
   124f3:	cmp    rbx,r12
   124f6:	mov    rdi,rbx
   124f9:	jne    124b8 <encrypt_sectors.isra.13+0x48>
   124fb:	mov    rax,QWORD PTR [rsp+0x28]
   12500:	xor    rax,QWORD PTR fs:0x28
   12509:	jne    1251a <encrypt_sectors.isra.13+0xaa>
   1250b:	add    rsp,0x38
   1250f:	pop    rbx
   12510:	pop    rbp
   12511:	pop    r12
   12513:	pop    r13
   12515:	pop    r14
   12517:	pop    r15
   12519:	ret    
   1251a:	call   2f70 <__stack_chk_fail@plt>
   1251f:	nop

0000000000012520 <qcow_schedule_bh.constprop.14>:
   12520:	cmp    QWORD PTR [rdi+0x58],0x0
   12525:	jne    12560 <qcow_schedule_bh.constprop.14+0x40>
   12527:	push   rbx
   12528:	mov    rsi,rdi
   1252b:	mov    rbx,rdi
   1252e:	lea    rdi,[rip+0x54b]        # 12a80 <qcow_aio_read_bh>
   12535:	call   4160 <qemu_bh_new>
   1253a:	test   rax,rax
   1253d:	mov    QWORD PTR [rbx+0x58],rax
   12541:	je     12550 <qcow_schedule_bh.constprop.14+0x30>
   12543:	mov    rdi,rax
   12546:	call   41a0 <qemu_bh_schedule>
   1254b:	xor    eax,eax
   1254d:	pop    rbx
   1254e:	ret    
   1254f:	nop
   12550:	mov    eax,0xfffffffb
   12555:	pop    rbx
   12556:	ret    
   12557:	nop    WORD PTR [rax+rax*1+0x0]
   12560:	mov    eax,0xfffffffb
   12565:	ret    
   12566:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000012570 <qcow_probe>:
   12570:	xor    eax,eax
   12572:	cmp    esi,0x47
   12575:	ja     12580 <qcow_probe+0x10>
   12577:	repz ret 
   12579:	nop    DWORD PTR [rax+0x0]
   12580:	cmp    DWORD PTR [rdi],0xfb494651
   12586:	jne    12577 <qcow_probe+0x7>
   12588:	cmp    DWORD PTR [rdi+0x4],0x2000000
   1258f:	mov    edx,0x64
   12594:	cmove  eax,edx
   12597:	ret    
   12598:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000125a0 <count_contiguous_clusters>:
   125a0:	mov    r9,QWORD PTR [rdx]
   125a3:	not    r8
   125a6:	xor    eax,eax
   125a8:	bswap  r9
   125ab:	and    r9,r8
   125ae:	je     12648 <count_contiguous_clusters+0xa8>
   125b4:	push   r12
   125b6:	add    rdi,rcx
   125b9:	movsxd r12,ecx
   125bc:	cmp    rdi,r12
   125bf:	push   rbp
   125c0:	push   rbx
   125c1:	jbe    1263d <count_contiguous_clusters+0x9d>
   125c3:	mov    r10d,esi
   125c6:	mov    r11,QWORD PTR [rdx+r12*8]
   125ca:	lea    rbp,[r12*8+0x0]
   125d2:	imul   r10d,ecx
   125d6:	bswap  r11
   125d9:	movsxd r10,r10d
   125dc:	and    r11,r8
   125df:	add    r10,r9
   125e2:	cmp    r10,r11
   125e5:	jne    1263d <count_contiguous_clusters+0x9d>
   125e7:	lea    r10d,[rcx+0x1]
   125eb:	movsxd rbx,esi
   125ee:	movsxd rax,r10d
   125f1:	imul   r10d,esi
   125f5:	lea    r11,[rdi+rax*1-0x1]
   125fa:	sub    r11,r12
   125fd:	movsxd rsi,r10d
   12600:	add    r9,rsi
   12603:	mov    rsi,rax
   12606:	neg    rsi
   12609:	lea    rsi,[rbp+rsi*8+0x0]
   1260e:	add    rdx,rsi
   12611:	jmp    12636 <count_contiguous_clusters+0x96>
   12613:	nop    DWORD PTR [rax+rax*1+0x0]
   12618:	mov    rsi,QWORD PTR [rdx+rax*8+0x8]
   1261d:	lea    rdi,[rax+0x1]
   12621:	lea    r10,[r9+rbx*1]
   12625:	bswap  rsi
   12628:	and    rsi,r8
   1262b:	cmp    rsi,r9
   1262e:	jne    1263b <count_contiguous_clusters+0x9b>
   12630:	mov    r9,r10
   12633:	mov    rax,rdi
   12636:	cmp    rax,r11
   12639:	jne    12618 <count_contiguous_clusters+0x78>
   1263b:	sub    eax,ecx
   1263d:	pop    rbx
   1263e:	pop    rbp
   1263f:	pop    r12
   12641:	ret    
   12642:	nop    WORD PTR [rax+rax*1+0x0]
   12648:	repz ret 
   1264a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000012650 <get_cluster_offset>:
   12650:	push   r14
   12652:	push   r13
   12654:	mov    r13,rdx
   12657:	push   r12
   12659:	push   rbp
   1265a:	mov    r14,rsi
   1265d:	push   rbx
   1265e:	mov    rbp,QWORD PTR [rdi+0x40]
   12662:	mov    r12d,DWORD PTR [rdx]
   12665:	mov    edx,0x1
   1266a:	mov    eax,DWORD PTR [rbp+0x10]
   1266d:	mov    ecx,DWORD PTR [rbp+0x8]
   12670:	add    ecx,DWORD PTR [rbp+0x14]
   12673:	lea    ebx,[rax-0x1]
   12676:	mov    rax,rsi
   12679:	shr    rax,0x9
   1267d:	shl    edx,cl
   1267f:	and    ebx,eax
   12681:	lea    eax,[rdx-0x1]
   12684:	add    r12d,ebx
   12687:	and    eax,esi
   12689:	mov    esi,DWORD PTR [rbp+0x1c]
   1268c:	sub    edx,eax
   1268e:	mov    rax,r14
   12691:	sar    edx,0x9
   12694:	shr    rax,cl
   12697:	add    edx,ebx
   12699:	cmp    r12d,edx
   1269c:	jg     126c0 <get_cluster_offset+0x70>
   1269e:	cmp    eax,esi
   126a0:	jl     126cb <get_cluster_offset+0x7b>
   126a2:	xor    eax,eax
   126a4:	cmp    edx,r12d
   126a7:	cmovg  edx,r12d
   126ab:	sub    edx,ebx
   126ad:	mov    DWORD PTR [r13+0x0],edx
   126b1:	pop    rbx
   126b2:	pop    rbp
   126b3:	pop    r12
   126b5:	pop    r13
   126b7:	pop    r14
   126b9:	ret    
   126ba:	nop    WORD PTR [rax+rax*1+0x0]
   126c0:	cmp    eax,esi
   126c2:	mov    r12d,edx
   126c5:	jge    12780 <get_cluster_offset+0x130>
   126cb:	mov    rcx,QWORD PTR [rbp+0x40]
   126cf:	cdqe   
   126d1:	mov    rax,QWORD PTR [rcx+rax*8]
   126d5:	test   rax,rax
   126d8:	je     126a4 <get_cluster_offset+0x54>
   126da:	movabs rsi,0x7fffffffffffffff
   126e4:	add    rdi,0x40
   126e8:	and    rsi,rax
   126eb:	call   11c00 <l2_load.isra.6>
   126f0:	mov    rsi,rax
   126f3:	xor    eax,eax
   126f5:	test   rsi,rsi
   126f8:	je     126b1 <get_cluster_offset+0x61>
   126fa:	mov    eax,DWORD PTR [rbp+0x18]
   126fd:	mov    ecx,DWORD PTR [rbp+0x8]
   12700:	mov    edi,r12d
   12703:	shl    edi,0x9
   12706:	movsxd rdi,edi
   12709:	lea    edx,[rax-0x1]
   1270c:	shr    r14,cl
   1270f:	and    edx,r14d
   12712:	movsxd rdx,edx
   12715:	lea    rdx,[rsi+rdx*8]
   12719:	mov    esi,DWORD PTR [rbp+0xc]
   1271c:	mov    rax,QWORD PTR [rdx]
   1271f:	lea    r8d,[rsi-0x1]
   12723:	mov    r14,rax
   12726:	movsxd r8,r8d
   12729:	add    rdi,r8
   1272c:	bswap  r14
   1272f:	sar    rdi,cl
   12732:	test   r14,r14
   12735:	movsxd rdi,edi
   12738:	jne    12790 <get_cluster_offset+0x140>
   1273a:	test   rdi,rdi
   1273d:	je     127a3 <get_cluster_offset+0x153>
   1273f:	test   rax,rax
   12742:	jne    127a3 <get_cluster_offset+0x153>
   12744:	mov    ecx,0x1
   12749:	jmp    1275c <get_cluster_offset+0x10c>
   1274b:	nop    DWORD PTR [rax+rax*1+0x0]
   12750:	add    rcx,0x1
   12754:	cmp    QWORD PTR [rdx+rcx*8-0x8],0x0
   1275a:	jne    12763 <get_cluster_offset+0x113>
   1275c:	cmp    rdi,rcx
   1275f:	mov    eax,ecx
   12761:	jne    12750 <get_cluster_offset+0x100>
   12763:	imul   eax,DWORD PTR [rbp+0x10]
   12767:	mov    edx,eax
   12769:	movabs rax,0x7fffffffffffffff
   12773:	and    rax,r14
   12776:	jmp    126a4 <get_cluster_offset+0x54>
   1277b:	nop    DWORD PTR [rax+rax*1+0x0]
   12780:	xor    eax,eax
   12782:	jmp    126ab <get_cluster_offset+0x5b>
   12787:	nop    WORD PTR [rax+rax*1+0x0]
   12790:	movabs r8,0x8000000000000000
   1279a:	xor    ecx,ecx
   1279c:	call   125a0 <count_contiguous_clusters>
   127a1:	jmp    12763 <get_cluster_offset+0x113>
   127a3:	xor    eax,eax
   127a5:	jmp    12763 <get_cluster_offset+0x113>
   127a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000127b0 <qcow_is_allocated>:
   127b0:	sub    rsp,0x8
   127b4:	shl    rsi,0x9
   127b8:	mov    DWORD PTR [rcx],edx
   127ba:	mov    rdx,rcx
   127bd:	call   12650 <get_cluster_offset>
   127c2:	test   rax,rax
   127c5:	setne  al
   127c8:	add    rsp,0x8
   127cc:	movzx  eax,al
   127cf:	ret    

00000000000127d0 <qcow_aio_read_cb>:
   127d0:	push   r13
   127d2:	push   r12
   127d4:	push   rbp
   127d5:	push   rbx
   127d6:	mov    ebp,esi
   127d8:	mov    rbx,rdi
   127db:	sub    rsp,0x8
   127df:	mov    r12,QWORD PTR [rdi+0x8]
   127e3:	test   esi,esi
   127e5:	mov    r13,QWORD PTR [r12+0x40]
   127ea:	mov    QWORD PTR [rdi+0x50],0x0
   127f2:	jns    12810 <qcow_aio_read_cb+0x40>
   127f4:	mov    rdi,QWORD PTR [rbx+0x18]
   127f8:	mov    esi,ebp
   127fa:	call   QWORD PTR [rbx+0x10]
   127fd:	add    rsp,0x8
   12801:	mov    rdi,rbx
   12804:	pop    rbx
   12805:	pop    rbp
   12806:	pop    r12
   12808:	pop    r13
   1280a:	jmp    19850 <qemu_aio_release>
   1280f:	nop
   12810:	mov    rax,QWORD PTR [rdi+0x40]
   12814:	mov    ecx,DWORD PTR [rdi+0x3c]
   12817:	mov    rsi,QWORD PTR [rdi+0x30]
   1281b:	mov    rdi,QWORD PTR [rdi+0x28]
   1281f:	test   rax,rax
   12822:	jne    12850 <qcow_aio_read_cb+0x80>
   12824:	mov    eax,DWORD PTR [rbx+0x38]
   12827:	movsxd rdx,ecx
   1282a:	add    rdi,rdx
   1282d:	mov    QWORD PTR [rbx+0x28],rdi
   12831:	sub    eax,ecx
   12833:	shl    ecx,0x9
   12836:	movsxd rcx,ecx
   12839:	mov    DWORD PTR [rbx+0x38],eax
   1283c:	add    rcx,rsi
   1283f:	test   eax,eax
   12841:	mov    QWORD PTR [rbx+0x30],rcx
   12845:	jne    12888 <qcow_aio_read_cb+0xb8>
   12847:	mov    rdi,QWORD PTR [rbx+0x18]
   1284b:	xor    esi,esi
   1284d:	jmp    127fa <qcow_aio_read_cb+0x2a>
   1284f:	nop
   12850:	bt     rax,0x3e
   12855:	jb     12824 <qcow_aio_read_cb+0x54>
   12857:	mov    eax,DWORD PTR [r13+0x160]
   1285e:	test   eax,eax
   12860:	je     12824 <qcow_aio_read_cb+0x54>
   12862:	lea    r9,[r13+0x25c]
   12869:	mov    rdx,rsi
   1286c:	xor    r8d,r8d
   1286f:	call   12470 <encrypt_sectors.isra.13>
   12874:	mov    ecx,DWORD PTR [rbx+0x3c]
   12877:	mov    rdi,QWORD PTR [rbx+0x28]
   1287b:	mov    rsi,QWORD PTR [rbx+0x30]
   1287f:	jmp    12824 <qcow_aio_read_cb+0x54>
   12881:	nop    DWORD PTR [rax+0x0]
   12888:	mov    rsi,rdi
   1288b:	lea    rdx,[rbx+0x3c]
   1288f:	mov    DWORD PTR [rbx+0x3c],eax
   12892:	shl    rsi,0x9
   12896:	mov    rdi,r12
   12899:	call   12650 <get_cluster_offset>
   1289e:	test   rax,rax
   128a1:	mov    QWORD PTR [rbx+0x40],rax
   128a5:	mov    rcx,QWORD PTR [rbx+0x28]
   128a9:	jne    12950 <qcow_aio_read_cb+0x180>
   128af:	mov    rdx,QWORD PTR [r12+0x850]
   128b7:	mov    eax,DWORD PTR [rbx+0x3c]
   128ba:	mov    rdi,QWORD PTR [rbx+0x30]
   128be:	test   rdx,rdx
   128c1:	je     129bc <qcow_aio_read_cb+0x1ec>
   128c7:	mov    rsi,QWORD PTR [rdx]
   128ca:	movsxd rdx,eax
   128cd:	add    rdx,rcx
   128d0:	cmp    rsi,rdx
   128d3:	jge    12904 <qcow_aio_read_cb+0x134>
   128d5:	cmp    rcx,rsi
   128d8:	jge    129bc <qcow_aio_read_cb+0x1ec>
   128de:	mov    r13d,esi
   128e1:	xor    esi,esi
   128e3:	sub    r13d,ecx
   128e6:	sub    eax,r13d
   128e9:	mov    edx,eax
   128eb:	mov    eax,r13d
   128ee:	shl    eax,0x9
   128f1:	shl    edx,0x9
   128f4:	cdqe   
   128f6:	movsxd rdx,edx
   128f9:	add    rdi,rax
   128fc:	call   3020 <memset@plt>
   12901:	mov    eax,r13d
   12904:	test   eax,eax
   12906:	jle    129a9 <qcow_aio_read_cb+0x1d9>
   1290c:	mov    ecx,DWORD PTR [rbx+0x3c]
   1290f:	mov    rdx,QWORD PTR [rbx+0x30]
   12913:	lea    r8,[rip+0xfffffffffffffeb6]        # 127d0 <qcow_aio_read_cb>
   1291a:	mov    rsi,QWORD PTR [rbx+0x28]
   1291e:	mov    rdi,QWORD PTR [r12+0x850]
   12926:	mov    r9,rbx
   12929:	call   19060 <bdrv_aio_read>
   1292e:	test   rax,rax
   12931:	mov    QWORD PTR [rbx+0x50],rax
   12935:	je     127f4 <qcow_aio_read_cb+0x24>
   1293b:	add    rsp,0x8
   1293f:	pop    rbx
   12940:	pop    rbp
   12941:	pop    r12
   12943:	pop    r13
   12945:	ret    
   12946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12950:	mov    edx,DWORD PTR [r13+0x10]
   12954:	sub    edx,0x1
   12957:	and    edx,ecx
   12959:	bt     rax,0x3e
   1295e:	mov    r12d,edx
   12961:	jb     12974 <qcow_aio_read_cb+0x1a4>
   12963:	test   eax,0x1ff
   12968:	je     129cb <qcow_aio_read_cb+0x1fb>
   1296a:	mov    ebp,0xfffffffb
   1296f:	jmp    127f4 <qcow_aio_read_cb+0x24>
   12974:	mov    rsi,rax
   12977:	mov    rdi,r13
   1297a:	call   11eb0 <decompress_cluster>
   1297f:	test   eax,eax
   12981:	js     127f4 <qcow_aio_read_cb+0x24>
   12987:	mov    esi,r12d
   1298a:	mov    edx,DWORD PTR [rbx+0x3c]
   1298d:	mov    rdi,QWORD PTR [rbx+0x30]
   12991:	shl    esi,0x9
   12994:	movsxd rsi,esi
   12997:	add    rsi,QWORD PTR [r13+0x110]
   1299e:	shl    edx,0x9
   129a1:	movsxd rdx,edx
   129a4:	call   3190 <memcpy@plt>
   129a9:	mov    rdi,rbx
   129ac:	call   12520 <qcow_schedule_bh.constprop.14>
   129b1:	test   eax,eax
   129b3:	mov    ebp,eax
   129b5:	jns    1293b <qcow_aio_read_cb+0x16b>
   129b7:	jmp    127f4 <qcow_aio_read_cb+0x24>
   129bc:	shl    eax,0x9
   129bf:	xor    esi,esi
   129c1:	movsxd rdx,eax
   129c4:	call   3020 <memset@plt>
   129c9:	jmp    129a9 <qcow_aio_read_cb+0x1d9>
   129cb:	mov    ecx,DWORD PTR [rbx+0x3c]
   129ce:	mov    rdx,QWORD PTR [rbx+0x30]
   129d2:	shr    rax,0x9
   129d6:	mov    rdi,QWORD PTR [r13+0x0]
   129da:	movsxd rsi,r12d
   129dd:	lea    r8,[rip+0xfffffffffffffdec]        # 127d0 <qcow_aio_read_cb>
   129e4:	add    rsi,rax
   129e7:	mov    r9,rbx
   129ea:	call   19060 <bdrv_aio_read>
   129ef:	test   rax,rax
   129f2:	mov    QWORD PTR [rbx+0x50],rax
   129f6:	jne    1293b <qcow_aio_read_cb+0x16b>
   129fc:	jmp    127f4 <qcow_aio_read_cb+0x24>
   12a01:	nop    DWORD PTR [rax+rax*1+0x0]
   12a06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000012a10 <qcow_aio_read>:
   12a10:	push   r13
   12a12:	push   r12
   12a14:	mov    r12,rsi
   12a17:	push   rbp
   12a18:	push   rbx
   12a19:	mov    rbp,rdx
   12a1c:	mov    rsi,r8
   12a1f:	mov    rdx,r9
   12a22:	mov    r13d,ecx
   12a25:	sub    rsp,0x8
   12a29:	call   19670 <qemu_aio_get>
   12a2e:	test   rax,rax
   12a31:	mov    rbx,rax
   12a34:	je     12a6a <qcow_aio_read+0x5a>
   12a36:	mov    QWORD PTR [rax+0x50],0x0
   12a3e:	mov    QWORD PTR [rax+0x28],r12
   12a42:	xor    esi,esi
   12a44:	mov    QWORD PTR [rax+0x30],rbp
   12a48:	mov    DWORD PTR [rax+0x38],r13d
   12a4c:	mov    rdi,rax
   12a4f:	mov    DWORD PTR [rax+0x3c],0x0
   12a56:	mov    QWORD PTR [rax+0x40],0x0
   12a5e:	mov    DWORD PTR [rax+0x70],0x0
   12a65:	call   127d0 <qcow_aio_read_cb>
   12a6a:	add    rsp,0x8
   12a6e:	mov    rax,rbx
   12a71:	pop    rbx
   12a72:	pop    rbp
   12a73:	pop    r12
   12a75:	pop    r13
   12a77:	ret    
   12a78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000012a80 <qcow_aio_read_bh>:
   12a80:	push   rbx
   12a81:	mov    rbx,rdi
   12a84:	mov    rdi,QWORD PTR [rdi+0x58]
   12a88:	call   41c0 <qemu_bh_delete>
   12a8d:	mov    QWORD PTR [rbx+0x58],0x0
   12a95:	mov    rdi,rbx
   12a98:	xor    esi,esi
   12a9a:	pop    rbx
   12a9b:	jmp    127d0 <qcow_aio_read_cb>

0000000000012aa0 <qcow_open>:
   12aa0:	push   r15
   12aa2:	push   r14
   12aa4:	push   r13
   12aa6:	push   r12
   12aa8:	mov    r12,rdi
   12aab:	push   rbp
   12aac:	push   rbx
   12aad:	sub    rsp,0xb8
   12ab4:	mov    r15,QWORD PTR [rdi+0x40]
   12ab8:	mov    rax,QWORD PTR fs:0x28
   12ac1:	mov    QWORD PTR [rsp+0xa8],rax
   12ac9:	xor    eax,eax
   12acb:	test   dl,0x80
   12ace:	je     12ad6 <qcow_open+0x36>
   12ad0:	and    dl,0x7f
   12ad3:	or     edx,0x40
   12ad6:	mov    rdi,r15
   12ad9:	call   18060 <bdrv_file_open>
   12ade:	test   eax,eax
   12ae0:	js     12e45 <qcow_open+0x3a5>
   12ae6:	mov    rdi,QWORD PTR [r15]
   12ae9:	lea    rdx,[rsp+0x60]
   12aee:	xor    esi,esi
   12af0:	mov    ecx,0x48
   12af5:	call   17b00 <bdrv_pread>
   12afa:	cmp    eax,0x48
   12afd:	jne    13017 <qcow_open+0x577>
   12b03:	mov    rcx,QWORD PTR [rsp+0x88]
   12b0b:	mov    eax,DWORD PTR [rsp+0x60]
   12b0f:	mov    rsi,QWORD PTR [rsp+0x78]
   12b14:	mov    edx,DWORD PTR [rsp+0x80]
   12b1b:	bswap  rcx
   12b1e:	bswap  eax
   12b20:	mov    QWORD PTR [rsp+0x88],rcx
   12b28:	mov    ecx,DWORD PTR [rsp+0x84]
   12b2f:	bswap  rsi
   12b32:	mov    DWORD PTR [rsp+0x60],eax
   12b36:	mov    eax,DWORD PTR [rsp+0x64]
   12b3a:	cmp    rsi,0x1
   12b3e:	bswap  edx
   12b40:	mov    QWORD PTR [rsp+0x78],rsi
   12b45:	bswap  ecx
   12b47:	mov    DWORD PTR [rsp+0x80],edx
   12b4e:	mov    DWORD PTR [rsp+0x84],ecx
   12b55:	mov    rcx,QWORD PTR [rsp+0x90]
   12b5d:	bswap  eax
   12b5f:	mov    DWORD PTR [rsp+0x64],eax
   12b63:	mov    rax,QWORD PTR [rsp+0x68]
   12b68:	bswap  rcx
   12b6b:	mov    QWORD PTR [rsp+0x90],rcx
   12b73:	mov    ecx,DWORD PTR [rsp+0x98]
   12b7a:	bswap  rax
   12b7d:	mov    QWORD PTR [rsp+0x68],rax
   12b82:	mov    eax,DWORD PTR [rsp+0x70]
   12b86:	bswap  ecx
   12b88:	mov    DWORD PTR [rsp+0x98],ecx
   12b8f:	mov    rcx,QWORD PTR [rsp+0xa0]
   12b97:	bswap  eax
   12b99:	mov    DWORD PTR [rsp+0x70],eax
   12b9d:	mov    eax,DWORD PTR [rsp+0x74]
   12ba1:	bswap  rcx
   12ba4:	mov    QWORD PTR [rsp+0xa0],rcx
   12bac:	mov    ecx,DWORD PTR [rsp+0x9c]
   12bb3:	bswap  eax
   12bb5:	mov    DWORD PTR [rsp+0x74],eax
   12bb9:	bswap  ecx
   12bbb:	mov    DWORD PTR [rsp+0x9c],ecx
   12bc2:	setbe  cl
   12bc5:	cmp    edx,0x1
   12bc8:	seta   sil
   12bcc:	or     ecx,esi
   12bce:	movabs rsi,0x2514649fb
   12bd8:	cmp    QWORD PTR [rsp+0x60],rsi
   12bdd:	setne  sil
   12be1:	or     cl,sil
   12be4:	jne    13017 <qcow_open+0x577>
   12bea:	lea    esi,[rax-0x9]
   12bed:	cmp    esi,0x7
   12bf0:	ja     13017 <qcow_open+0x577>
   12bf6:	test   edx,edx
   12bf8:	mov    DWORD PTR [r15+0x164],edx
   12bff:	je     12c0a <qcow_open+0x16a>
   12c01:	mov    DWORD PTR [r12+0x14],0x1
   12c0a:	mov    edx,0x1
   12c0f:	mov    ecx,eax
   12c11:	mov    DWORD PTR [r15+0x8],eax
   12c15:	mov    ebx,edx
   12c17:	shl    ebx,cl
   12c19:	mov    ecx,esi
   12c1b:	mov    esi,0x46
   12c20:	mov    DWORD PTR [r15+0xc],ebx
   12c24:	mov    ebx,edx
   12c26:	shl    ebx,cl
   12c28:	lea    ecx,[rax-0x3]
   12c2b:	mov    eax,edx
   12c2d:	mov    DWORD PTR [r15+0x10],ebx
   12c31:	shl    eax,cl
   12c33:	mov    DWORD PTR [r15+0x14],ecx
   12c37:	mov    DWORD PTR [r15+0x18],eax
   12c3b:	mov    rax,QWORD PTR [rsp+0x78]
   12c40:	shr    rax,0x9
   12c44:	mov    QWORD PTR [r12],rax
   12c48:	mov    r9d,DWORD PTR [r15+0x8]
   12c4c:	mov    eax,0x1
   12c51:	lea    ecx,[r9-0x8]
   12c55:	sub    esi,r9d
   12c58:	mov    DWORD PTR [r15+0x24],esi
   12c5c:	movsxd rdi,DWORD PTR [rsp+0x84]
   12c64:	shl    edx,cl
   12c66:	mov    ecx,esi
   12c68:	sub    edx,0x1
   12c6b:	mov    DWORD PTR [r15+0x28],edx
   12c6f:	mov    rdx,rax
   12c72:	shl    rdx,cl
   12c75:	lea    ecx,[r9-0x3]
   12c79:	sub    rdx,0x1
   12c7d:	mov    QWORD PTR [r15+0x30],rdx
   12c81:	mov    rdx,QWORD PTR [rsp+0x90]
   12c89:	mov    QWORD PTR [r15+0x130],rdx
   12c90:	mov    edx,DWORD PTR [rsp+0x98]
   12c97:	shl    edx,cl
   12c99:	mov    ecx,DWORD PTR [r15+0x14]
   12c9d:	mov    DWORD PTR [r15+0x138],edx
   12ca4:	mov    rdx,QWORD PTR [rsp+0xa0]
   12cac:	add    ecx,r9d
   12caf:	mov    QWORD PTR [r15+0x350],rdx
   12cb6:	mov    edx,DWORD PTR [rsp+0x9c]
   12cbd:	shl    rax,cl
   12cc0:	mov    DWORD PTR [r15+0x1c],edi
   12cc4:	mov    DWORD PTR [r15+0x35c],edx
   12ccb:	mov    rdx,QWORD PTR [rsp+0x78]
   12cd0:	lea    rax,[rdx+rax*1-0x1]
   12cd5:	shr    rax,cl
   12cd8:	cmp    edi,eax
   12cda:	mov    DWORD PTR [r15+0x20],eax
   12cde:	jl     13017 <qcow_open+0x577>
   12ce4:	mov    rax,QWORD PTR [rsp+0x88]
   12cec:	shl    rdi,0x3
   12cf0:	mov    QWORD PTR [r15+0x38],rax
   12cf4:	call   49d0 <qemu_malloc>
   12cf9:	mov    ebx,DWORD PTR [r15+0x1c]
   12cfd:	mov    rsi,QWORD PTR [r15+0x38]
   12d01:	mov    rdx,rax
   12d04:	mov    rdi,QWORD PTR [r15]
   12d07:	mov    QWORD PTR [r15+0x40],rax
   12d0b:	lea    ecx,[rbx*8+0x0]
   12d12:	call   17b00 <bdrv_pread>
   12d17:	movsxd rdx,DWORD PTR [r15+0x1c]
   12d1b:	cdqe   
   12d1d:	mov    rcx,rdx
   12d20:	shl    rdx,0x3
   12d24:	cmp    rax,rdx
   12d27:	jne    13017 <qcow_open+0x577>
   12d2d:	test   ecx,ecx
   12d2f:	jle    12d55 <qcow_open+0x2b5>
   12d31:	xor    ecx,ecx
   12d33:	xor    edx,edx
   12d35:	nop    DWORD PTR [rax]
   12d38:	mov    rsi,QWORD PTR [r15+0x40]
   12d3c:	add    edx,0x1
   12d3f:	add    rsi,rcx
   12d42:	add    rcx,0x8
   12d46:	mov    rax,QWORD PTR [rsi]
   12d49:	bswap  rax
   12d4c:	mov    QWORD PTR [rsi],rax
   12d4f:	cmp    DWORD PTR [r15+0x1c],edx
   12d53:	jg     12d38 <qcow_open+0x298>
   12d55:	mov    edi,DWORD PTR [r15+0x18]
   12d59:	shl    edi,0x4
   12d5c:	movsxd rdi,edi
   12d5f:	shl    rdi,0x3
   12d63:	call   49d0 <qemu_malloc>
   12d68:	movsxd rdi,DWORD PTR [r15+0xc]
   12d6c:	mov    QWORD PTR [r15+0x48],rax
   12d70:	call   49d0 <qemu_malloc>
   12d75:	mov    QWORD PTR [r15+0x110],rax
   12d7c:	mov    eax,DWORD PTR [r15+0xc]
   12d80:	lea    edi,[rax+0x10]
   12d83:	shl    edi,0x5
   12d86:	movsxd rdi,edi
   12d89:	call   49d0 <qemu_malloc>
   12d8e:	mov    QWORD PTR [r15+0x120],0xffffffffffffffff
   12d99:	mov    QWORD PTR [r15+0x118],rax
   12da0:	mov    rbx,QWORD PTR [r12+0x40]
   12da5:	movsxd rdi,DWORD PTR [rbx+0xc]
   12da9:	call   49d0 <qemu_malloc>
   12dae:	mov    QWORD PTR [rbx+0x148],rax
   12db5:	mov    eax,DWORD PTR [rbx+0x138]
   12dbb:	lea    ebp,[rax*8+0x0]
   12dc2:	movsxd rdi,ebp
   12dc5:	call   49d0 <qemu_malloc>
   12dca:	mov    ecx,DWORD PTR [rbx+0x138]
   12dd0:	mov    QWORD PTR [rbx+0x128],rax
   12dd7:	test   ecx,ecx
   12dd9:	jne    13080 <qcow_open+0x5e0>
   12ddf:	mov    rsi,QWORD PTR [rsp+0x68]
   12de4:	test   rsi,rsi
   12de7:	je     12e20 <qcow_open+0x380>
   12de9:	mov    ebx,DWORD PTR [rsp+0x70]
   12ded:	mov    eax,0x3ff
   12df2:	mov    rdi,QWORD PTR [r15]
   12df5:	lea    rdx,[r12+0x448]
   12dfd:	cmp    ebx,0x3ff
   12e03:	cmovg  ebx,eax
   12e06:	mov    ecx,ebx
   12e08:	call   17b00 <bdrv_pread>
   12e0d:	cmp    eax,ebx
   12e0f:	jne    13017 <qcow_open+0x577>
   12e15:	cdqe   
   12e17:	mov    BYTE PTR [r12+rax*1+0x448],0x0
   12e20:	mov    rbp,QWORD PTR [r12+0x40]
   12e25:	movsxd rax,DWORD PTR [rbp+0x35c]
   12e2c:	test   eax,eax
   12e2e:	jne    12e70 <qcow_open+0x3d0>
   12e30:	mov    QWORD PTR [rbp+0x360],0x0
   12e3b:	mov    DWORD PTR [rbp+0x358],0x0
   12e45:	mov    rbx,QWORD PTR [rsp+0xa8]
   12e4d:	xor    rbx,QWORD PTR fs:0x28
   12e56:	jne    130f3 <qcow_open+0x653>
   12e5c:	add    rsp,0xb8
   12e63:	pop    rbx
   12e64:	pop    rbp
   12e65:	pop    r12
   12e67:	pop    r13
   12e69:	pop    r14
   12e6b:	pop    r15
   12e6d:	ret    
   12e6e:	xchg   ax,ax
   12e70:	lea    rdi,[rax*8+0x0]
   12e78:	mov    rbx,QWORD PTR [rbp+0x350]
   12e7f:	sub    rdi,rax
   12e82:	shl    rdi,0x3
   12e86:	call   4a20 <qemu_mallocz>
   12e8b:	mov    QWORD PTR [rbp+0x360],rax
   12e92:	mov    eax,DWORD PTR [rbp+0x35c]
   12e98:	test   eax,eax
   12e9a:	jle    130e0 <qcow_open+0x640>
   12ea0:	lea    rax,[rsp+0x30]
   12ea5:	mov    QWORD PTR [rsp+0x8],0x0
   12eae:	mov    DWORD PTR [rsp+0x10],0x0
   12eb6:	mov    QWORD PTR [rsp+0x20],r15
   12ebb:	mov    QWORD PTR [rsp+0x28],r12
   12ec0:	mov    QWORD PTR [rsp+0x18],rax
   12ec5:	jmp    12fdc <qcow_open+0x53c>
   12eca:	nop    WORD PTR [rax+rax*1+0x0]
   12ed0:	mov    rax,QWORD PTR [rsp+0x30]
   12ed5:	mov    r15,QWORD PTR [rsp+0x8]
   12eda:	add    r15,QWORD PTR [rbp+0x360]
   12ee1:	bswap  rax
   12ee4:	mov    QWORD PTR [r15],rax
   12ee7:	mov    eax,DWORD PTR [rsp+0x38]
   12eeb:	bswap  eax
   12eed:	mov    DWORD PTR [r15+0x8],eax
   12ef1:	mov    eax,DWORD PTR [rsp+0x50]
   12ef5:	movzx  r10d,WORD PTR [rsp+0x3c]
   12efb:	movzx  r14d,WORD PTR [rsp+0x3e]
   12f01:	ror    r10w,0x8
   12f06:	bswap  eax
   12f08:	movzx  r12d,r10w
   12f0c:	mov    DWORD PTR [rsp+0x14],r10d
   12f11:	mov    DWORD PTR [r15+0x20],eax
   12f15:	mov    eax,DWORD PTR [rsp+0x40]
   12f19:	lea    edi,[r12+0x1]
   12f1e:	ror    r14w,0x8
   12f23:	movsxd rdi,edi
   12f26:	movzx  r13d,r14w
   12f2a:	bswap  eax
   12f2c:	mov    DWORD PTR [r15+0x24],eax
   12f30:	mov    eax,DWORD PTR [rsp+0x44]
   12f34:	bswap  eax
   12f36:	mov    DWORD PTR [r15+0x28],eax
   12f3a:	mov    rax,QWORD PTR [rsp+0x48]
   12f3f:	bswap  rax
   12f42:	mov    QWORD PTR [r15+0x30],rax
   12f46:	mov    eax,DWORD PTR [rsp+0x54]
   12f4a:	bswap  eax
   12f4c:	mov    eax,eax
   12f4e:	lea    rbx,[rbx+rax*1+0x28]
   12f53:	call   49d0 <qemu_malloc>
   12f58:	mov    QWORD PTR [r15+0x10],rax
   12f5c:	mov    rdi,QWORD PTR [rbp+0x0]
   12f60:	mov    ecx,r12d
   12f63:	mov    rdx,rax
   12f66:	mov    rsi,rbx
   12f69:	call   17b00 <bdrv_pread>
   12f6e:	cmp    r12d,eax
   12f71:	jne    13003 <qcow_open+0x563>
   12f77:	mov    r10d,DWORD PTR [rsp+0x14]
   12f7c:	mov    rdx,QWORD PTR [r15+0x10]
   12f80:	lea    edi,[r13+0x1]
   12f84:	movsxd rdi,edi
   12f87:	movzx  eax,r10w
   12f8b:	mov    BYTE PTR [rdx+rax*1],0x0
   12f8f:	add    rbx,rax
   12f92:	call   49d0 <qemu_malloc>
   12f97:	mov    QWORD PTR [r15+0x18],rax
   12f9b:	mov    rdi,QWORD PTR [rbp+0x0]
   12f9f:	mov    ecx,r13d
   12fa2:	mov    rdx,rax
   12fa5:	mov    rsi,rbx
   12fa8:	call   17b00 <bdrv_pread>
   12fad:	cmp    r13d,eax
   12fb0:	jne    13003 <qcow_open+0x563>
   12fb2:	mov    rdx,QWORD PTR [r15+0x18]
   12fb6:	movzx  eax,r14w
   12fba:	add    DWORD PTR [rsp+0x10],0x1
   12fbf:	add    rbx,rax
   12fc2:	add    QWORD PTR [rsp+0x8],0x38
   12fc8:	mov    BYTE PTR [rdx+rax*1],0x0
   12fcc:	mov    eax,DWORD PTR [rsp+0x10]
   12fd0:	cmp    eax,DWORD PTR [rbp+0x35c]
   12fd6:	jge    130e0 <qcow_open+0x640>
   12fdc:	add    rbx,0x7
   12fe0:	mov    rdx,QWORD PTR [rsp+0x18]
   12fe5:	mov    rdi,QWORD PTR [rbp+0x0]
   12fe9:	and    rbx,0xfffffffffffffff8
   12fed:	mov    ecx,0x28
   12ff2:	mov    rsi,rbx
   12ff5:	call   17b00 <bdrv_pread>
   12ffa:	cmp    eax,0x28
   12ffd:	je     12ed0 <qcow_open+0x430>
   13003:	mov    r12,QWORD PTR [rsp+0x28]
   13008:	mov    r15,QWORD PTR [rsp+0x20]
   1300d:	mov    rdi,QWORD PTR [r12+0x40]
   13012:	call   11d30 <qcow_free_snapshots.isra.8>
   13017:	mov    rdi,QWORD PTR [r12+0x40]
   1301c:	call   11d30 <qcow_free_snapshots.isra.8>
   13021:	mov    rbx,QWORD PTR [r12+0x40]
   13026:	mov    rdi,QWORD PTR [rbx+0x148]
   1302d:	call   49c0 <qemu_free>
   13032:	mov    rdi,QWORD PTR [rbx+0x128]
   13039:	call   49c0 <qemu_free>
   1303e:	mov    rdi,QWORD PTR [r15+0x40]
   13042:	call   49c0 <qemu_free>
   13047:	mov    rdi,QWORD PTR [r15+0x48]
   1304b:	call   49c0 <qemu_free>
   13050:	mov    rdi,QWORD PTR [r15+0x110]
   13057:	call   49c0 <qemu_free>
   1305c:	mov    rdi,QWORD PTR [r15+0x118]
   13063:	call   49c0 <qemu_free>
   13068:	mov    rdi,QWORD PTR [r15]
   1306b:	call   170f0 <bdrv_delete>
   13070:	mov    eax,0xffffffff
   13075:	jmp    12e45 <qcow_open+0x3a5>
   1307a:	nop    WORD PTR [rax+rax*1+0x0]
   13080:	mov    rsi,QWORD PTR [rbx+0x130]
   13087:	mov    rdi,QWORD PTR [rbx]
   1308a:	mov    ecx,ebp
   1308c:	mov    rdx,rax
   1308f:	call   17b00 <bdrv_pread>
   13094:	cmp    ebp,eax
   13096:	jne    13017 <qcow_open+0x577>
   1309c:	mov    edx,DWORD PTR [rbx+0x138]
   130a2:	test   edx,edx
   130a4:	je     12ddf <qcow_open+0x33f>
   130aa:	xor    ecx,ecx
   130ac:	xor    edx,edx
   130ae:	xchg   ax,ax
   130b0:	mov    rsi,QWORD PTR [rbx+0x128]
   130b7:	add    edx,0x1
   130ba:	add    rsi,rcx
   130bd:	add    rcx,0x8
   130c1:	mov    rax,QWORD PTR [rsi]
   130c4:	bswap  rax
   130c7:	mov    QWORD PTR [rsi],rax
   130ca:	cmp    DWORD PTR [rbx+0x138],edx
   130d0:	ja     130b0 <qcow_open+0x610>
   130d2:	jmp    12ddf <qcow_open+0x33f>
   130d7:	nop    WORD PTR [rax+rax*1+0x0]
   130e0:	sub    ebx,DWORD PTR [rbp+0x350]
   130e6:	xor    eax,eax
   130e8:	mov    DWORD PTR [rbp+0x358],ebx
   130ee:	jmp    12e45 <qcow_open+0x3a5>
   130f3:	call   2f70 <__stack_chk_fail@plt>
   130f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000013100 <copy_sectors>:
   13100:	push   r15
   13102:	push   r14
   13104:	sub    r8d,ecx
   13107:	push   r13
   13109:	push   r12
   1310b:	push   rbp
   1310c:	push   rbx
   1310d:	sub    rsp,0x38
   13111:	mov    rax,QWORD PTR fs:0x28
   1311a:	mov    QWORD PTR [rsp+0x28],rax
   1311f:	xor    eax,eax
   13121:	test   r8d,r8d
   13124:	mov    QWORD PTR [rsp+0x8],rdx
   13129:	mov    DWORD PTR [rsp+0x4],r8d
   1312e:	jle    13288 <copy_sectors+0x188>
   13134:	mov    r14,QWORD PTR [rdi+0x40]
   13138:	movsxd rax,ecx
   1313b:	mov    r13,rdi
   1313e:	add    rsi,rax
   13141:	mov    ebp,r8d
   13144:	mov    QWORD PTR [rsp+0x10],rax
   13149:	mov    rbx,rsi
   1314c:	mov    QWORD PTR [rsp+0x18],rsi
   13151:	lea    r15,[rsp+0x24]
   13156:	mov    r12,QWORD PTR [r14+0x118]
   1315d:	jmp    131bb <copy_sectors+0xbb>
   1315f:	nop
   13160:	mov    rax,QWORD PTR [r13+0x850]
   13167:	mov    ecx,DWORD PTR [rsp+0x24]
   1316b:	test   rax,rax
   1316e:	je     13370 <copy_sectors+0x270>
   13174:	mov    rdx,QWORD PTR [rax]
   13177:	movsxd rax,ecx
   1317a:	add    rax,rbx
   1317d:	cmp    rdx,rax
   13180:	jge    132dd <copy_sectors+0x1dd>
   13186:	cmp    rdx,rbx
   13189:	jg     132b0 <copy_sectors+0x1b0>
   1318f:	shl    ecx,0x9
   13192:	xor    esi,esi
   13194:	mov    rdi,r12
   13197:	movsxd rdx,ecx
   1319a:	call   3020 <memset@plt>
   1319f:	movsxd rcx,DWORD PTR [rsp+0x24]
   131a4:	mov    eax,ecx
   131a6:	shl    eax,0x9
   131a9:	sub    ebp,ecx
   131ab:	cdqe   
   131ad:	add    rbx,rcx
   131b0:	add    r12,rax
   131b3:	test   ebp,ebp
   131b5:	jle    13248 <copy_sectors+0x148>
   131bb:	mov    rsi,rbx
   131be:	mov    rdx,r15
   131c1:	mov    rdi,r13
   131c4:	shl    rsi,0x9
   131c8:	mov    DWORD PTR [rsp+0x24],ebp
   131cc:	call   12650 <get_cluster_offset>
   131d1:	test   rax,rax
   131d4:	je     13160 <copy_sectors+0x60>
   131d6:	mov    edi,DWORD PTR [r14+0x10]
   131da:	lea    edx,[rdi-0x1]
   131dd:	movabs rdi,0x4000000000000000
   131e7:	and    edx,ebx
   131e9:	test   rax,rdi
   131ec:	je     13310 <copy_sectors+0x210>
   131f2:	mov    rsi,rax
   131f5:	mov    rdi,r14
   131f8:	mov    DWORD PTR [rsp],edx
   131fb:	call   11eb0 <decompress_cluster>
   13200:	test   eax,eax
   13202:	js     132ff <copy_sectors+0x1ff>
   13208:	mov    r8d,DWORD PTR [rsp]
   1320c:	mov    edx,DWORD PTR [rsp+0x24]
   13210:	mov    rdi,r12
   13213:	shl    r8d,0x9
   13217:	shl    edx,0x9
   1321a:	movsxd rsi,r8d
   1321d:	add    rsi,QWORD PTR [r14+0x110]
   13224:	movsxd rdx,edx
   13227:	call   3190 <memcpy@plt>
   1322c:	movsxd rcx,DWORD PTR [rsp+0x24]
   13231:	mov    eax,ecx
   13233:	sub    ebp,ecx
   13235:	add    rbx,rcx
   13238:	shl    eax,0x9
   1323b:	cdqe   
   1323d:	add    r12,rax
   13240:	test   ebp,ebp
   13242:	jg     131bb <copy_sectors+0xbb>
   13248:	mov    eax,DWORD PTR [r14+0x160]
   1324f:	mov    rdi,QWORD PTR [r14+0x118]
   13256:	test   eax,eax
   13258:	jne    13390 <copy_sectors+0x290>
   1325e:	mov    rax,QWORD PTR [rsp+0x8]
   13263:	mov    rsi,QWORD PTR [rsp+0x10]
   13268:	mov    rdx,rdi
   1326b:	mov    ecx,DWORD PTR [rsp+0x4]
   1326f:	mov    rdi,QWORD PTR [r14]
   13272:	shr    rax,0x9
   13276:	add    rsi,rax
   13279:	call   17620 <bdrv_write>
   1327e:	mov    edx,0x0
   13283:	test   eax,eax
   13285:	cmovg  eax,edx
   13288:	mov    rbx,QWORD PTR [rsp+0x28]
   1328d:	xor    rbx,QWORD PTR fs:0x28
   13296:	jne    133bd <copy_sectors+0x2bd>
   1329c:	add    rsp,0x38
   132a0:	pop    rbx
   132a1:	pop    rbp
   132a2:	pop    r12
   132a4:	pop    r13
   132a6:	pop    r14
   132a8:	pop    r15
   132aa:	ret    
   132ab:	nop    DWORD PTR [rax+rax*1+0x0]
   132b0:	mov    r8d,edx
   132b3:	xor    esi,esi
   132b5:	sub    r8d,ebx
   132b8:	mov    edi,r8d
   132bb:	sub    ecx,r8d
   132be:	mov    DWORD PTR [rsp],r8d
   132c2:	shl    edi,0x9
   132c5:	shl    ecx,0x9
   132c8:	movsxd rdi,edi
   132cb:	movsxd rdx,ecx
   132ce:	add    rdi,r12
   132d1:	call   3020 <memset@plt>
   132d6:	mov    r8d,DWORD PTR [rsp]
   132da:	mov    ecx,r8d
   132dd:	test   ecx,ecx
   132df:	jle    1319f <copy_sectors+0x9f>
   132e5:	mov    rdi,QWORD PTR [r13+0x850]
   132ec:	mov    rdx,r12
   132ef:	mov    rsi,rbx
   132f2:	call   171e0 <bdrv_read>
   132f7:	test   eax,eax
   132f9:	jns    1319f <copy_sectors+0x9f>
   132ff:	mov    eax,0xffffffff
   13304:	jmp    13288 <copy_sectors+0x188>
   13306:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13310:	mov    ecx,DWORD PTR [rsp+0x24]
   13314:	shl    edx,0x9
   13317:	mov    rdi,QWORD PTR [r14]
   1331a:	movsxd rdx,edx
   1331d:	lea    rsi,[rdx+rax*1]
   13321:	mov    rdx,r12
   13324:	shl    ecx,0x9
   13327:	call   17b00 <bdrv_pread>
   1332c:	movsxd rcx,DWORD PTR [rsp+0x24]
   13331:	mov    edx,ecx
   13333:	shl    edx,0x9
   13336:	cmp    eax,edx
   13338:	jne    132ff <copy_sectors+0x1ff>
   1333a:	mov    edx,DWORD PTR [r14+0x160]
   13341:	test   edx,edx
   13343:	je     131a9 <copy_sectors+0xa9>
   13349:	lea    r9,[r14+0x25c]
   13350:	xor    r8d,r8d
   13353:	mov    rdx,r12
   13356:	mov    rsi,r12
   13359:	mov    rdi,rbx
   1335c:	call   12470 <encrypt_sectors.isra.13>
   13361:	jmp    1319f <copy_sectors+0x9f>
   13366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13370:	shl    ecx,0x9
   13373:	xor    esi,esi
   13375:	mov    rdi,r12
   13378:	movsxd rdx,ecx
   1337b:	call   3020 <memset@plt>
   13380:	movsxd rcx,DWORD PTR [rsp+0x24]
   13385:	mov    eax,ecx
   13387:	shl    eax,0x9
   1338a:	jmp    131a9 <copy_sectors+0xa9>
   1338f:	nop
   13390:	mov    rdx,rdi
   13393:	mov    rsi,rdi
   13396:	mov    ecx,DWORD PTR [rsp+0x4]
   1339a:	mov    rdi,QWORD PTR [rsp+0x18]
   1339f:	lea    r9,[r14+0x168]
   133a6:	mov    r8d,0x1
   133ac:	call   12470 <encrypt_sectors.isra.13>
   133b1:	mov    rdi,QWORD PTR [r14+0x118]
   133b8:	jmp    1325e <copy_sectors+0x15e>
   133bd:	call   2f70 <__stack_chk_fail@plt>
   133c2:	nop    DWORD PTR [rax+0x0]
   133c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000133d0 <update_cluster_refcount>:
   133d0:	push   r15
   133d2:	push   r14
   133d4:	mov    r14,rsi
   133d7:	push   r13
   133d9:	push   r12
   133db:	mov    r12d,edx
   133de:	push   rbp
   133df:	push   rbx
   133e0:	mov    rbp,rsi
   133e3:	mov    rbx,rdi
   133e6:	sub    rsp,0x58
   133ea:	mov    r15,QWORD PTR [rdi+0x40]
   133ee:	mov    rax,QWORD PTR fs:0x28
   133f7:	mov    QWORD PTR [rsp+0x48],rax
   133fc:	xor    eax,eax
   133fe:	mov    eax,DWORD PTR [r15+0x8]
   13402:	mov    r10d,DWORD PTR [r15+0x138]
   13409:	lea    ecx,[rax-0x1]
   1340c:	sar    r14,cl
   1340f:	cmp    r10d,r14d
   13412:	jbe    13518 <update_cluster_refcount+0x148>
   13418:	mov    rax,QWORD PTR [r15+0x128]
   1341f:	movsxd r11,r14d
   13422:	lea    r8,[r11*8+0x0]
   1342a:	mov    r14,QWORD PTR [rax+r11*8]
   1342e:	test   r14,r14
   13431:	mov    r13,r14
   13434:	je     137e0 <update_cluster_refcount+0x410>
   1343a:	cmp    QWORD PTR [r15+0x140],r14
   13441:	je     1346c <update_cluster_refcount+0x9c>
   13443:	mov    rbx,QWORD PTR [rbx+0x40]
   13447:	mov    rsi,r14
   1344a:	mov    ecx,DWORD PTR [rbx+0xc]
   1344d:	mov    rdx,QWORD PTR [rbx+0x148]
   13454:	mov    rdi,QWORD PTR [rbx]
   13457:	call   17b00 <bdrv_pread>
   1345c:	cmp    eax,DWORD PTR [rbx+0xc]
   1345f:	jne    13810 <update_cluster_refcount+0x440>
   13465:	mov    QWORD PTR [rbx+0x140],r14
   1346c:	mov    eax,DWORD PTR [r15+0x8]
   13470:	mov    rsi,QWORD PTR [r15+0x148]
   13477:	lea    ecx,[rax-0x1]
   1347a:	mov    eax,0x1
   1347f:	shl    eax,cl
   13481:	lea    ecx,[rax-0x1]
   13484:	and    ecx,ebp
   13486:	movsxd rdx,ecx
   13489:	add    rdx,rdx
   1348c:	add    rsi,rdx
   1348f:	movzx  eax,WORD PTR [rsi]
   13492:	ror    ax,0x8
   13496:	movzx  eax,ax
   13499:	add    r12d,eax
   1349c:	cmp    r12d,0xffff
   134a3:	ja     137f0 <update_cluster_refcount+0x420>
   134a9:	test   r12d,r12d
   134ac:	jne    134bb <update_cluster_refcount+0xeb>
   134ae:	cmp    QWORD PTR [r15+0x150],rbp
   134b5:	jg     137d0 <update_cluster_refcount+0x400>
   134bb:	mov    eax,r12d
   134be:	ror    ax,0x8
   134c2:	mov    WORD PTR [rsi],ax
   134c5:	lea    esi,[rcx+rcx*1]
   134c8:	add    rdx,QWORD PTR [r15+0x148]
   134cf:	mov    rdi,QWORD PTR [r15]
   134d2:	mov    ecx,0x2
   134d7:	movsxd rsi,esi
   134da:	add    rsi,r13
   134dd:	call   180f0 <bdrv_pwrite>
   134e2:	cmp    eax,0x2
   134e5:	jne    13810 <update_cluster_refcount+0x440>
   134eb:	mov    rbx,QWORD PTR [rsp+0x48]
   134f0:	xor    rbx,QWORD PTR fs:0x28
   134f9:	mov    eax,r12d
   134fc:	jne    1384a <update_cluster_refcount+0x47a>
   13502:	add    rsp,0x58
   13506:	pop    rbx
   13507:	pop    rbp
   13508:	pop    r12
   1350a:	pop    r13
   1350c:	pop    r14
   1350e:	pop    r15
   13510:	ret    
   13511:	nop    DWORD PTR [rax+0x0]
   13518:	cmp    edx,0xffffffff
   1351b:	je     137f0 <update_cluster_refcount+0x420>
   13521:	lea    edx,[r14+0x1]
   13525:	cmp    r10d,edx
   13528:	jae    1370a <update_cluster_refcount+0x33a>
   1352e:	lea    ecx,[rax-0x3]
   13531:	mov    r13d,0x1
   13537:	mov    eax,0x2
   1353c:	shl    r13d,cl
   1353f:	shr    r10d,cl
   13542:	shl    eax,cl
   13544:	mov    DWORD PTR [rsp+0x8],r13d
   13549:	test   r10d,r10d
   1354c:	jne    13562 <update_cluster_refcount+0x192>
   1354e:	cmp    edx,DWORD PTR [rsp+0x8]
   13552:	jle    13588 <update_cluster_refcount+0x1b8>
   13554:	cmp    edx,eax
   13556:	jle    13800 <update_cluster_refcount+0x430>
   1355c:	mov    r10d,0x2
   13562:	lea    esi,[r10+r10*2+0x1]
   13567:	mov    r10d,esi
   1356a:	shr    r10d,0x1f
   1356e:	add    r10d,esi
   13571:	sar    r10d,1
   13574:	mov    esi,r10d
   13577:	shl    esi,cl
   13579:	cmp    edx,esi
   1357b:	jg     13549 <update_cluster_refcount+0x179>
   1357d:	mov    DWORD PTR [rsp+0x8],esi
   13581:	jmp    1358e <update_cluster_refcount+0x1be>
   13583:	nop    DWORD PTR [rax+rax*1+0x0]
   13588:	mov    r10d,0x1
   1358e:	mov    eax,DWORD PTR [rsp+0x8]
   13592:	mov    DWORD PTR [rsp+0x20],r10d
   13597:	shl    eax,0x3
   1359a:	mov    DWORD PTR [rsp+0x10],eax
   1359e:	cdqe   
   135a0:	mov    rdi,rax
   135a3:	mov    QWORD PTR [rsp+0x18],rax
   135a8:	call   4a20 <qemu_mallocz>
   135ad:	mov    edx,DWORD PTR [r15+0x138]
   135b4:	mov    rsi,QWORD PTR [r15+0x128]
   135bb:	mov    rdi,rax
   135be:	mov    r13,rax
   135c1:	shl    rdx,0x3
   135c5:	call   3190 <memcpy@plt>
   135ca:	mov    edx,DWORD PTR [r15+0x138]
   135d1:	mov    r10d,DWORD PTR [rsp+0x20]
   135d6:	test   edx,edx
   135d8:	je     135fc <update_cluster_refcount+0x22c>
   135da:	mov    eax,0x1
   135df:	nop
   135e0:	mov    rdx,QWORD PTR [r13+rax*8-0x8]
   135e5:	bswap  rdx
   135e8:	mov    QWORD PTR [r13+rax*8-0x8],rdx
   135ed:	mov    edx,eax
   135ef:	add    rax,0x1
   135f3:	cmp    DWORD PTR [r15+0x138],edx
   135fa:	ja     135e0 <update_cluster_refcount+0x210>
   135fc:	mov    rsi,QWORD PTR [rsp+0x18]
   13601:	mov    rdi,rbx
   13604:	mov    DWORD PTR [rsp+0x2c],r10d
   13609:	call   11b80 <alloc_clusters_noref>
   1360e:	mov    ecx,DWORD PTR [rsp+0x10]
   13612:	mov    rdi,QWORD PTR [r15]
   13615:	mov    rdx,r13
   13618:	mov    rsi,rax
   1361b:	mov    QWORD PTR [rsp+0x20],rax
   13620:	call   180f0 <bdrv_pwrite>
   13625:	cmp    DWORD PTR [rsp+0x10],eax
   13629:	jne    13820 <update_cluster_refcount+0x450>
   1362f:	mov    eax,DWORD PTR [r15+0x138]
   13636:	mov    r10d,DWORD PTR [rsp+0x2c]
   1363b:	test   eax,eax
   1363d:	je     13664 <update_cluster_refcount+0x294>
   1363f:	mov    eax,0x1
   13644:	nop    DWORD PTR [rax+0x0]
   13648:	mov    rdx,QWORD PTR [r13+rax*8-0x8]
   1364d:	bswap  rdx
   13650:	mov    QWORD PTR [r13+rax*8-0x8],rdx
   13655:	mov    edx,eax
   13657:	add    rax,0x1
   1365b:	cmp    DWORD PTR [r15+0x138],edx
   13662:	ja     13648 <update_cluster_refcount+0x278>
   13664:	mov    rax,QWORD PTR [rsp+0x20]
   13669:	bswap  r10d
   1366c:	lea    rdx,[rsp+0x3c]
   13671:	mov    DWORD PTR [rsp+0x44],r10d
   13676:	mov    ecx,0xc
   1367b:	mov    esi,0x30
   13680:	bswap  rax
   13683:	mov    QWORD PTR [rsp+0x3c],rax
   13688:	mov    rdi,QWORD PTR [r15]
   1368b:	call   180f0 <bdrv_pwrite>
   13690:	cmp    eax,0xc
   13693:	jne    13820 <update_cluster_refcount+0x450>
   13699:	mov    rdi,QWORD PTR [r15+0x128]
   136a0:	call   49c0 <qemu_free>
   136a5:	mov    edx,DWORD PTR [rsp+0x8]
   136a9:	mov    rdi,QWORD PTR [r15+0x130]
   136b0:	mov    ecx,DWORD PTR [r15+0x138]
   136b7:	mov    rax,QWORD PTR [rsp+0x20]
   136bc:	mov    QWORD PTR [r15+0x128],r13
   136c3:	mov    DWORD PTR [r15+0x138],edx
   136ca:	mov    rdx,QWORD PTR [rsp+0x18]
   136cf:	mov    QWORD PTR [rsp+0x10],rdi
   136d4:	mov    DWORD PTR [rsp+0x2c],ecx
   136d8:	mov    rsi,rax
   136db:	mov    ecx,0x1
   136e0:	mov    rdi,rbx
   136e3:	mov    QWORD PTR [r15+0x130],rax
   136ea:	call   13850 <update_refcount>
   136ef:	movsxd rdx,DWORD PTR [rsp+0x2c]
   136f4:	mov    rsi,QWORD PTR [rsp+0x10]
   136f9:	mov    ecx,0xffffffff
   136fe:	mov    rdi,rbx
   13701:	shl    rdx,0x3
   13705:	call   13850 <update_refcount>
   1370a:	mov    rax,QWORD PTR [r15+0x128]
   13711:	movsxd r11,r14d
   13714:	lea    r8,[r11*8+0x0]
   1371c:	mov    r14,QWORD PTR [rax+r11*8]
   13720:	test   r14,r14
   13723:	mov    r13,r14
   13726:	jne    1343a <update_cluster_refcount+0x6a>
   1372c:	movsxd rsi,DWORD PTR [r15+0xc]
   13730:	mov    rdi,rbx
   13733:	mov    QWORD PTR [rsp+0x8],r8
   13738:	call   11b80 <alloc_clusters_noref>
   1373d:	movsxd rdx,DWORD PTR [r15+0xc]
   13741:	mov    rdi,QWORD PTR [r15+0x148]
   13748:	xor    esi,esi
   1374a:	mov    r13,rax
   1374d:	call   3020 <memset@plt>
   13752:	mov    ecx,DWORD PTR [r15+0xc]
   13756:	mov    rdx,QWORD PTR [r15+0x148]
   1375d:	mov    rsi,r13
   13760:	mov    rdi,QWORD PTR [r15]
   13763:	call   180f0 <bdrv_pwrite>
   13768:	cmp    DWORD PTR [r15+0xc],eax
   1376c:	jne    137f0 <update_cluster_refcount+0x420>
   13772:	mov    rax,QWORD PTR [r15+0x128]
   13779:	mov    r8,QWORD PTR [rsp+0x8]
   1377e:	lea    rdx,[rsp+0x30]
   13783:	mov    ecx,0x8
   13788:	mov    QWORD PTR [rax+r8*1],r13
   1378c:	mov    rax,r13
   1378f:	mov    rsi,QWORD PTR [r15+0x130]
   13796:	bswap  rax
   13799:	mov    QWORD PTR [rsp+0x30],rax
   1379e:	mov    rdi,QWORD PTR [r15]
   137a1:	add    rsi,r8
   137a4:	call   180f0 <bdrv_pwrite>
   137a9:	cmp    eax,0x8
   137ac:	jne    137f0 <update_cluster_refcount+0x420>
   137ae:	movsxd rdx,DWORD PTR [r15+0xc]
   137b2:	mov    QWORD PTR [r15+0x140],r13
   137b9:	mov    ecx,0x1
   137be:	mov    rsi,r13
   137c1:	mov    rdi,rbx
   137c4:	call   13850 <update_refcount>
   137c9:	jmp    1346c <update_cluster_refcount+0x9c>
   137ce:	xchg   ax,ax
   137d0:	mov    QWORD PTR [r15+0x150],rbp
   137d7:	jmp    134bb <update_cluster_refcount+0xeb>
   137dc:	nop    DWORD PTR [rax+0x0]
   137e0:	cmp    edx,0xffffffff
   137e3:	jne    1372c <update_cluster_refcount+0x35c>
   137e9:	nop    DWORD PTR [rax+0x0]
   137f0:	mov    r12d,0xffffffea
   137f6:	jmp    134eb <update_cluster_refcount+0x11b>
   137fb:	nop    DWORD PTR [rax+rax*1+0x0]
   13800:	mov    DWORD PTR [rsp+0x8],eax
   13804:	mov    r10d,0x2
   1380a:	jmp    1358e <update_cluster_refcount+0x1be>
   1380f:	nop
   13810:	mov    r12d,0xfffffffb
   13816:	jmp    134eb <update_cluster_refcount+0x11b>
   1381b:	nop    DWORD PTR [rax+rax*1+0x0]
   13820:	mov    rdx,QWORD PTR [rsp+0x18]
   13825:	mov    rsi,QWORD PTR [rsp+0x20]
   1382a:	mov    ecx,0xffffffff
   1382f:	mov    rdi,rbx
   13832:	mov    r12d,0xfffffffb
   13838:	call   13850 <update_refcount>
   1383d:	mov    rdi,r13
   13840:	call   49c0 <qemu_free>
   13845:	jmp    134eb <update_cluster_refcount+0x11b>
   1384a:	call   2f70 <__stack_chk_fail@plt>
   1384f:	nop

0000000000013850 <update_refcount>:
   13850:	test   rdx,rdx
   13853:	jle    138b8 <update_refcount+0x68>
   13855:	push   r14
   13857:	push   r13
   13859:	mov    r14d,ecx
   1385c:	push   r12
   1385e:	push   rbp
   1385f:	mov    r12,rdi
   13862:	push   rbx
   13863:	mov    rbp,QWORD PTR [rdi+0x40]
   13867:	mov    r13d,DWORD PTR [rbp+0xc]
   1386b:	neg    r13d
   1386e:	movsxd rax,r13d
   13871:	lea    r13,[rsi+rdx*1-0x1]
   13876:	mov    rbx,rax
   13879:	and    rbx,rsi
   1387c:	and    r13,rax
   1387f:	cmp    rbx,r13
   13882:	jg     138a8 <update_refcount+0x58>
   13884:	nop    DWORD PTR [rax+0x0]
   13888:	mov    ecx,DWORD PTR [rbp+0x8]
   1388b:	mov    rsi,rbx
   1388e:	mov    edx,r14d
   13891:	mov    rdi,r12
   13894:	sar    rsi,cl
   13897:	call   133d0 <update_cluster_refcount>
   1389c:	movsxd rax,DWORD PTR [rbp+0xc]
   138a0:	add    rbx,rax
   138a3:	cmp    r13,rbx
   138a6:	jge    13888 <update_refcount+0x38>
   138a8:	pop    rbx
   138a9:	pop    rbp
   138aa:	pop    r12
   138ac:	pop    r13
   138ae:	pop    r14
   138b0:	ret    
   138b1:	nop    DWORD PTR [rax+0x0]
   138b8:	repz ret 
   138ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000000138c0 <free_any_clusters>:
   138c0:	bt     rsi,0x3e
   138c5:	mov    rax,QWORD PTR [rdi+0x40]
   138c9:	jb     138e0 <free_any_clusters+0x20>
   138cb:	mov    ecx,DWORD PTR [rax+0x8]
   138ce:	shl    edx,cl
   138d0:	mov    ecx,0xffffffff
   138d5:	movsxd rdx,edx
   138d8:	jmp    13850 <update_refcount>
   138dd:	nop    DWORD PTR [rax]
   138e0:	mov    ecx,DWORD PTR [rax+0x24]
   138e3:	mov    rdx,rsi
   138e6:	and    rsi,QWORD PTR [rax+0x30]
   138ea:	shr    rdx,cl
   138ed:	and    edx,DWORD PTR [rax+0x28]
   138f0:	mov    ecx,0xffffffff
   138f5:	and    rsi,0xfffffffffffffe00
   138fc:	add    edx,0x1
   138ff:	shl    edx,0x9
   13902:	movsxd rdx,edx
   13905:	jmp    13850 <update_refcount>
   1390a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000013910 <alloc_clusters>:
   13910:	push   r12
   13912:	push   rbp
   13913:	mov    r12,rsi
   13916:	push   rbx
   13917:	mov    rbp,rdi
   1391a:	call   11b80 <alloc_clusters_noref>
   1391f:	mov    rdx,r12
   13922:	mov    rbx,rax
   13925:	mov    rsi,rax
   13928:	mov    rdi,rbp
   1392b:	mov    ecx,0x1
   13930:	call   13850 <update_refcount>
   13935:	mov    rax,rbx
   13938:	pop    rbx
   13939:	pop    rbp
   1393a:	pop    r12
   1393c:	ret    
   1393d:	nop    DWORD PTR [rax]

0000000000013940 <grow_l1_table>:
   13940:	push   r15
   13942:	push   r14
   13944:	push   r13
   13946:	push   r12
   13948:	push   rbp
   13949:	push   rbx
   1394a:	sub    rsp,0x28
   1394e:	mov    r14,QWORD PTR [rdi+0x40]
   13952:	mov    rax,QWORD PTR fs:0x28
   1395b:	mov    QWORD PTR [rsp+0x18],rax
   13960:	xor    eax,eax
   13962:	mov    ecx,DWORD PTR [r14+0x1c]
   13966:	cmp    ecx,esi
   13968:	jge    13a88 <grow_l1_table+0x148>
   1396e:	mov    r12,rdi
   13971:	nop    DWORD PTR [rax+0x0]
   13978:	lea    eax,[rcx+rcx*2+0x1]
   1397c:	mov    ebx,eax
   1397e:	shr    ebx,0x1f
   13981:	add    ebx,eax
   13983:	sar    ebx,1
   13985:	cmp    esi,ebx
   13987:	mov    ecx,ebx
   13989:	jg     13978 <grow_l1_table+0x38>
   1398b:	lea    ebp,[rbx*8+0x0]
   13992:	movsxd r13,ebp
   13995:	mov    rdi,r13
   13998:	call   4a20 <qemu_mallocz>
   1399d:	movsxd rdx,DWORD PTR [r14+0x1c]
   139a1:	mov    rsi,QWORD PTR [r14+0x40]
   139a5:	mov    rdi,rax
   139a8:	mov    r15,rax
   139ab:	shl    rdx,0x3
   139af:	call   3190 <memcpy@plt>
   139b4:	mov    rsi,r13
   139b7:	mov    rdi,r12
   139ba:	call   13910 <alloc_clusters>
   139bf:	mov    edx,DWORD PTR [r14+0x1c]
   139c3:	mov    r13,rax
   139c6:	test   edx,edx
   139c8:	jle    139e9 <grow_l1_table+0xa9>
   139ca:	mov    eax,0x1
   139cf:	nop
   139d0:	mov    rdx,QWORD PTR [r15+rax*8-0x8]
   139d5:	bswap  rdx
   139d8:	mov    QWORD PTR [r15+rax*8-0x8],rdx
   139dd:	mov    edx,eax
   139df:	add    rax,0x1
   139e3:	cmp    DWORD PTR [r14+0x1c],edx
   139e7:	jg     139d0 <grow_l1_table+0x90>
   139e9:	mov    rdi,QWORD PTR [r14]
   139ec:	mov    ecx,ebp
   139ee:	mov    rdx,r15
   139f1:	mov    rsi,r13
   139f4:	call   180f0 <bdrv_pwrite>
   139f9:	cmp    ebp,eax
   139fb:	jne    13ab0 <grow_l1_table+0x170>
   13a01:	mov    eax,DWORD PTR [r14+0x1c]
   13a05:	test   eax,eax
   13a07:	jle    13a29 <grow_l1_table+0xe9>
   13a09:	mov    eax,0x1
   13a0e:	xchg   ax,ax
   13a10:	mov    rdx,QWORD PTR [r15+rax*8-0x8]
   13a15:	bswap  rdx
   13a18:	mov    QWORD PTR [r15+rax*8-0x8],rdx
   13a1d:	mov    edx,eax
   13a1f:	add    rax,0x1
   13a23:	cmp    DWORD PTR [r14+0x1c],edx
   13a27:	jg     13a10 <grow_l1_table+0xd0>
   13a29:	mov    eax,ebx
   13a2b:	lea    rdx,[rsp+0xc]
   13a30:	mov    ecx,0xc
   13a35:	bswap  eax
   13a37:	mov    esi,0x24
   13a3c:	mov    DWORD PTR [rsp+0xc],eax
   13a40:	mov    rax,r13
   13a43:	bswap  rax
   13a46:	mov    QWORD PTR [rsp+0x10],rax
   13a4b:	mov    rdi,QWORD PTR [r14]
   13a4e:	call   180f0 <bdrv_pwrite>
   13a53:	cmp    eax,0xc
   13a56:	jne    13ab0 <grow_l1_table+0x170>
   13a58:	mov    rdi,QWORD PTR [r14+0x40]
   13a5c:	call   49c0 <qemu_free>
   13a61:	movsxd rdx,DWORD PTR [r14+0x1c]
   13a65:	mov    rsi,QWORD PTR [r14+0x38]
   13a69:	mov    ecx,0xffffffff
   13a6e:	mov    rdi,r12
   13a71:	shl    rdx,0x3
   13a75:	call   13850 <update_refcount>
   13a7a:	mov    QWORD PTR [r14+0x38],r13
   13a7e:	mov    QWORD PTR [r14+0x40],r15
   13a82:	xor    eax,eax
   13a84:	mov    DWORD PTR [r14+0x1c],ebx
   13a88:	mov    rdi,QWORD PTR [rsp+0x18]
   13a8d:	xor    rdi,QWORD PTR fs:0x28
   13a96:	jne    13ac0 <grow_l1_table+0x180>
   13a98:	add    rsp,0x28
   13a9c:	pop    rbx
   13a9d:	pop    rbp
   13a9e:	pop    r12
   13aa0:	pop    r13
   13aa2:	pop    r14
   13aa4:	pop    r15
   13aa6:	ret    
   13aa7:	nop    WORD PTR [rax+rax*1+0x0]
   13ab0:	mov    rdi,QWORD PTR [r14+0x40]
   13ab4:	call   49c0 <qemu_free>
   13ab9:	mov    eax,0xfffffffb
   13abe:	jmp    13a88 <grow_l1_table+0x148>
   13ac0:	call   2f70 <__stack_chk_fail@plt>
   13ac5:	nop
   13ac6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000013ad0 <get_cluster_table>:
   13ad0:	push   r15
   13ad2:	push   r14
   13ad4:	push   r13
   13ad6:	push   r12
   13ad8:	mov    r12,rdi
   13adb:	push   rbp
   13adc:	push   rbx
   13add:	mov    rbx,rsi
   13ae0:	mov    rbp,rsi
   13ae3:	sub    rsp,0x48
   13ae7:	mov    r14,QWORD PTR [rdi+0x40]
   13aeb:	mov    QWORD PTR [rsp+0x18],rcx
   13af0:	mov    QWORD PTR [rsp+0x10],rdx
   13af5:	mov    rax,QWORD PTR fs:0x28
   13afe:	mov    QWORD PTR [rsp+0x38],rax
   13b03:	xor    eax,eax
   13b05:	mov    ecx,DWORD PTR [r14+0x8]
   13b09:	add    ecx,DWORD PTR [r14+0x14]
   13b0d:	mov    QWORD PTR [rsp+0x20],r8
   13b12:	shr    rbx,cl
   13b15:	cmp    DWORD PTR [r14+0x1c],ebx
   13b19:	jle    13d10 <get_cluster_table+0x240>
   13b1f:	mov    rax,QWORD PTR [r14+0x40]
   13b23:	movsxd rbx,ebx
   13b26:	lea    r13,[rbx*8+0x0]
   13b2e:	mov    rsi,QWORD PTR [rax+rbx*8]
   13b32:	test   rsi,rsi
   13b35:	js     13d28 <get_cluster_table+0x258>
   13b3b:	jne    13cf0 <get_cluster_table+0x220>
   13b41:	mov    r15,QWORD PTR [r12+0x40]
   13b46:	mov    rdi,r12
   13b49:	mov    rax,QWORD PTR [r15+0x40]
   13b4d:	movsxd rsi,DWORD PTR [r15+0x18]
   13b51:	mov    r8,QWORD PTR [rax+rbx*8]
   13b55:	shl    rsi,0x3
   13b59:	mov    QWORD PTR [rsp+0x28],r8
   13b5e:	call   13910 <alloc_clusters>
   13b63:	mov    rdx,QWORD PTR [r15+0x40]
   13b67:	mov    rdi,rax
   13b6a:	mov    QWORD PTR [rsp+0x8],rax
   13b6f:	movabs rax,0x8000000000000000
   13b79:	mov    ecx,0x8
   13b7e:	or     rax,rdi
   13b81:	mov    QWORD PTR [rdx+rbx*8],rax
   13b85:	bswap  rax
   13b88:	mov    rsi,QWORD PTR [r15+0x38]
   13b8c:	mov    QWORD PTR [rsp+0x30],rax
   13b91:	mov    rdi,QWORD PTR [r15]
   13b94:	lea    rdx,[rsp+0x30]
   13b99:	add    rsi,r13
   13b9c:	call   180f0 <bdrv_pwrite>
   13ba1:	cmp    eax,0x8
   13ba4:	mov    r8,QWORD PTR [rsp+0x28]
   13ba9:	jne    13d20 <get_cluster_table+0x250>
   13baf:	mov    rsi,QWORD PTR [r12+0x40]
   13bb4:	xor    eax,eax
   13bb6:	xor    r12d,r12d
   13bb9:	mov    ecx,0xffffffff
   13bbe:	xchg   ax,ax
   13bc0:	mov    edx,DWORD PTR [rsi+rax*4+0xd0]
   13bc7:	cmp    edx,ecx
   13bc9:	jae    13bd0 <get_cluster_table+0x100>
   13bcb:	mov    r12d,eax
   13bce:	mov    ecx,edx
   13bd0:	add    rax,0x1
   13bd4:	cmp    rax,0x10
   13bd8:	jne    13bc0 <get_cluster_table+0xf0>
   13bda:	mov    ecx,DWORD PTR [r15+0x14]
   13bde:	mov    rdx,QWORD PTR [r15+0x48]
   13be2:	mov    eax,r12d
   13be5:	shl    eax,cl
   13be7:	test   r8,r8
   13bea:	cdqe   
   13bec:	lea    r13,[rdx+rax*8]
   13bf0:	movsxd rdx,DWORD PTR [r15+0x18]
   13bf4:	mov    rcx,rdx
   13bf7:	je     13cd8 <get_cluster_table+0x208>
   13bfd:	mov    rdi,QWORD PTR [r15]
   13c00:	shl    ecx,0x3
   13c03:	mov    rdx,r13
   13c06:	mov    rsi,r8
   13c09:	call   17b00 <bdrv_pread>
   13c0e:	movsxd rcx,DWORD PTR [r15+0x18]
   13c12:	cdqe   
   13c14:	lea    rdx,[rcx*8+0x0]
   13c1c:	cmp    rax,rdx
   13c1f:	jne    13d20 <get_cluster_table+0x250>
   13c25:	mov    rsi,QWORD PTR [rsp+0x8]
   13c2a:	mov    rdi,QWORD PTR [r15]
   13c2d:	shl    ecx,0x3
   13c30:	mov    rdx,r13
   13c33:	call   180f0 <bdrv_pwrite>
   13c38:	movsxd rdx,DWORD PTR [r15+0x18]
   13c3c:	cdqe   
   13c3e:	shl    rdx,0x3
   13c42:	cmp    rax,rdx
   13c45:	jne    13d20 <get_cluster_table+0x250>
   13c4b:	mov    rax,QWORD PTR [rsp+0x8]
   13c50:	movsxd r9,r12d
   13c53:	test   r13,r13
   13c56:	mov    QWORD PTR [r15+r9*8+0x50],rax
   13c5b:	mov    DWORD PTR [r15+r9*4+0xd0],0x1
   13c67:	je     13d20 <get_cluster_table+0x250>
   13c6d:	mov    rax,QWORD PTR [r14+0x40]
   13c71:	movabs rsi,0x7fffffffffffffff
   13c7b:	and    rsi,QWORD PTR [rax+rbx*8]
   13c7f:	mov    rbx,rsi
   13c82:	mov    ecx,DWORD PTR [r14+0x8]
   13c86:	mov    eax,DWORD PTR [r14+0x18]
   13c8a:	shr    rbp,cl
   13c8d:	sub    eax,0x1
   13c90:	and    ebp,eax
   13c92:	mov    rax,QWORD PTR [rsp+0x10]
   13c97:	mov    QWORD PTR [rax],r13
   13c9a:	mov    rax,QWORD PTR [rsp+0x18]
   13c9f:	mov    QWORD PTR [rax],rbx
   13ca2:	mov    rax,QWORD PTR [rsp+0x20]
   13ca7:	mov    DWORD PTR [rax],ebp
   13ca9:	mov    eax,0x1
   13cae:	mov    rdi,QWORD PTR [rsp+0x38]
   13cb3:	xor    rdi,QWORD PTR fs:0x28
   13cbc:	jne    13d55 <get_cluster_table+0x285>
   13cc2:	add    rsp,0x48
   13cc6:	pop    rbx
   13cc7:	pop    rbp
   13cc8:	pop    r12
   13cca:	pop    r13
   13ccc:	pop    r14
   13cce:	pop    r15
   13cd0:	ret    
   13cd1:	nop    DWORD PTR [rax+0x0]
   13cd8:	shl    rdx,0x3
   13cdc:	xor    esi,esi
   13cde:	mov    rdi,r13
   13ce1:	call   3020 <memset@plt>
   13ce6:	movsxd rcx,DWORD PTR [r15+0x18]
   13cea:	jmp    13c25 <get_cluster_table+0x155>
   13cef:	nop
   13cf0:	movsxd rdx,DWORD PTR [r14+0x18]
   13cf4:	mov    ecx,0xffffffff
   13cf9:	mov    rdi,r12
   13cfc:	shl    rdx,0x3
   13d00:	call   13850 <update_refcount>
   13d05:	jmp    13b41 <get_cluster_table+0x71>
   13d0a:	nop    WORD PTR [rax+rax*1+0x0]
   13d10:	lea    esi,[rbx+0x1]
   13d13:	call   13940 <grow_l1_table>
   13d18:	test   eax,eax
   13d1a:	jns    13b1f <get_cluster_table+0x4f>
   13d20:	xor    eax,eax
   13d22:	jmp    13cae <get_cluster_table+0x1de>
   13d24:	nop    DWORD PTR [rax+0x0]
   13d28:	movabs rbx,0x7fffffffffffffff
   13d32:	lea    rdi,[r12+0x40]
   13d37:	and    rbx,rsi
   13d3a:	mov    rsi,rbx
   13d3d:	call   11c00 <l2_load.isra.6>
   13d42:	test   rax,rax
   13d45:	mov    r13,rax
   13d48:	jne    13c82 <get_cluster_table+0x1b2>
   13d4e:	xor    eax,eax
   13d50:	jmp    13cae <get_cluster_table+0x1de>
   13d55:	call   2f70 <__stack_chk_fail@plt>
   13d5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000013d60 <alloc_cluster_offset>:
   13d60:	push   r15
   13d62:	push   r14
   13d64:	push   r13
   13d66:	push   r12
   13d68:	mov    r13,rdi
   13d6b:	push   rbp
   13d6c:	push   rbx
   13d6d:	sub    rsp,0x68
   13d71:	mov    r15,QWORD PTR [rdi+0x40]
   13d75:	mov    DWORD PTR [rsp+0x28],edx
   13d79:	mov    DWORD PTR [rsp+0xc],ecx
   13d7d:	lea    rdx,[rsp+0x50]
   13d82:	mov    QWORD PTR [rsp+0x18],r8
   13d87:	lea    rcx,[rsp+0x48]
   13d8c:	lea    r8,[rsp+0x44]
   13d91:	mov    rax,QWORD PTR fs:0x28
   13d9a:	mov    QWORD PTR [rsp+0x58],rax
   13d9f:	xor    eax,eax
   13da1:	mov    QWORD PTR [rsp+0x20],rsi
   13da6:	mov    QWORD PTR [rsp+0x10],r9
   13dab:	call   13ad0 <get_cluster_table>
   13db0:	xor    r11d,r11d
   13db3:	test   eax,eax
   13db5:	jne    13de0 <alloc_cluster_offset+0x80>
   13db7:	mov    rbx,QWORD PTR [rsp+0x58]
   13dbc:	xor    rbx,QWORD PTR fs:0x28
   13dc5:	mov    rax,r11
   13dc8:	jne    13f9a <alloc_cluster_offset+0x23a>
   13dce:	add    rsp,0x68
   13dd2:	pop    rbx
   13dd3:	pop    rbp
   13dd4:	pop    r12
   13dd6:	pop    r13
   13dd8:	pop    r14
   13dda:	pop    r15
   13ddc:	ret    
   13ddd:	nop    DWORD PTR [rax]
   13de0:	mov    eax,DWORD PTR [r15+0xc]
   13de4:	mov    ebp,DWORD PTR [rsp+0xc]
   13de8:	mov    r14d,DWORD PTR [rsp+0x44]
   13ded:	mov    ecx,DWORD PTR [r15+0x8]
   13df1:	mov    r12,QWORD PTR [rsp+0x50]
   13df6:	shl    ebp,0x9
   13df9:	mov    DWORD PTR [rsp+0x2c],eax
   13dfd:	sub    eax,0x1
   13e00:	cdqe   
   13e02:	movsxd rbp,ebp
   13e05:	add    rbp,rax
   13e08:	mov    eax,DWORD PTR [r15+0x18]
   13e0c:	sar    rbp,cl
   13e0f:	sub    eax,r14d
   13e12:	cmp    eax,ebp
   13e14:	cmovl  ebp,eax
   13e17:	movsxd rax,r14d
   13e1a:	lea    rax,[r12+rax*8]
   13e1e:	mov    r11,QWORD PTR [rax]
   13e21:	mov    rdx,rax
   13e24:	bswap  r11
   13e27:	test   r11,r11
   13e2a:	js     13f62 <alloc_cluster_offset+0x202>
   13e30:	bt     r11,0x3e
   13e35:	jb     13f58 <alloc_cluster_offset+0x1f8>
   13e3b:	xor    esi,esi
   13e3d:	xor    ebx,ebx
   13e3f:	test   ebp,ebp
   13e41:	jle    13f09 <alloc_cluster_offset+0x1a9>
   13e47:	xor    ebx,ebx
   13e49:	mov    QWORD PTR [rsp+0x30],r15
   13e4e:	mov    QWORD PTR [rsp+0x38],r13
   13e53:	mov    r15d,ebx
   13e56:	mov    ebx,DWORD PTR [rsp+0x2c]
   13e5a:	mov    r13d,ebp
   13e5d:	mov    rbp,rdx
   13e60:	mov    edi,r13d
   13e63:	movsxd rcx,r15d
   13e66:	xor    r8d,r8d
   13e69:	sub    edi,r15d
   13e6c:	mov    rdx,rbp
   13e6f:	mov    esi,ebx
   13e71:	movsxd rdi,edi
   13e74:	call   125a0 <count_contiguous_clusters>
   13e79:	add    r15d,eax
   13e7c:	lea    eax,[r14+r15*1]
   13e80:	cdqe   
   13e82:	lea    rcx,[r12+rax*8]
   13e86:	mov    rax,QWORD PTR [rcx]
   13e89:	test   rax,rax
   13e8c:	jne    13ef0 <alloc_cluster_offset+0x190>
   13e8e:	mov    edx,r13d
   13e91:	sub    edx,r15d
   13e94:	movsxd rdx,edx
   13e97:	test   rdx,rdx
   13e9a:	je     13ee7 <alloc_cluster_offset+0x187>
   13e9c:	test   rax,rax
   13e9f:	jne    13ee7 <alloc_cluster_offset+0x187>
   13ea1:	mov    eax,0x1
   13ea6:	jmp    13ebc <alloc_cluster_offset+0x15c>
   13ea8:	nop    DWORD PTR [rax+rax*1+0x0]
   13eb0:	add    rax,0x1
   13eb4:	cmp    QWORD PTR [rcx+rax*8-0x8],0x0
   13eba:	jne    13ec3 <alloc_cluster_offset+0x163>
   13ebc:	cmp    rdx,rax
   13ebf:	mov    esi,eax
   13ec1:	jne    13eb0 <alloc_cluster_offset+0x150>
   13ec3:	add    r15d,esi
   13ec6:	lea    eax,[r14+r15*1]
   13eca:	cdqe   
   13ecc:	mov    rax,QWORD PTR [r12+rax*8]
   13ed0:	bswap  rax
   13ed3:	test   rax,rax
   13ed6:	js     13ef0 <alloc_cluster_offset+0x190>
   13ed8:	movabs rdi,0x4000000000000000
   13ee2:	test   rax,rdi
   13ee5:	jne    13ef0 <alloc_cluster_offset+0x190>
   13ee7:	cmp    r13d,r15d
   13eea:	jg     13e60 <alloc_cluster_offset+0x100>
   13ef0:	mov    r12d,DWORD PTR [rsp+0x2c]
   13ef5:	mov    ebx,r15d
   13ef8:	mov    r13,QWORD PTR [rsp+0x38]
   13efd:	mov    r15,QWORD PTR [rsp+0x30]
   13f02:	imul   r12d,ebx
   13f06:	movsxd rsi,r12d
   13f09:	mov    rdi,r13
   13f0c:	call   13910 <alloc_clusters>
   13f11:	mov    rdi,QWORD PTR [rsp+0x20]
   13f16:	mov    r11,rax
   13f19:	mov    rax,QWORD PTR [rsp+0x10]
   13f1e:	mov    QWORD PTR [rax],rdi
   13f21:	mov    edi,DWORD PTR [rsp+0x28]
   13f25:	mov    DWORD PTR [rax+0x10],ebx
   13f28:	mov    DWORD PTR [rax+0x8],edi
   13f2b:	mov    ecx,DWORD PTR [r15+0x8]
   13f2f:	mov    eax,DWORD PTR [rsp+0xc]
   13f33:	sub    ecx,0x9
   13f36:	shl    ebx,cl
   13f38:	cmp    ebx,eax
   13f3a:	cmovg  ebx,eax
   13f3d:	mov    rax,QWORD PTR [rsp+0x10]
   13f42:	mov    DWORD PTR [rax+0xc],ebx
   13f45:	sub    ebx,DWORD PTR [rsp+0x28]
   13f49:	mov    rax,QWORD PTR [rsp+0x18]
   13f4e:	mov    DWORD PTR [rax],ebx
   13f50:	jmp    13db7 <alloc_cluster_offset+0x57>
   13f55:	nop    DWORD PTR [rax]
   13f58:	mov    ebp,0x1
   13f5d:	jmp    13e47 <alloc_cluster_offset+0xe7>
   13f62:	mov    esi,DWORD PTR [rsp+0x2c]
   13f66:	movsxd rdi,ebp
   13f69:	xor    r8d,r8d
   13f6c:	xor    ecx,ecx
   13f6e:	mov    QWORD PTR [rsp+0x20],r11
   13f73:	call   125a0 <count_contiguous_clusters>
   13f78:	mov    r11,QWORD PTR [rsp+0x20]
   13f7d:	mov    ebx,eax
   13f7f:	movabs rax,0x7fffffffffffffff
   13f89:	and    r11,rax
   13f8c:	mov    rax,QWORD PTR [rsp+0x10]
   13f91:	mov    DWORD PTR [rax+0x10],0x0
   13f98:	jmp    13f2b <alloc_cluster_offset+0x1cb>
   13f9a:	call   2f70 <__stack_chk_fail@plt>
   13f9f:	nop

0000000000013fa0 <alloc_cluster_link_l2>:
   13fa0:	push   r15
   13fa2:	push   r14
   13fa4:	push   r13
   13fa6:	push   r12
   13fa8:	push   rbp
   13fa9:	push   rbx
   13faa:	sub    rsp,0x38
   13fae:	mov    rax,QWORD PTR fs:0x28
   13fb7:	mov    QWORD PTR [rsp+0x28],rax
   13fbc:	xor    eax,eax
   13fbe:	movsxd rax,DWORD PTR [rdx+0x10]
   13fc2:	test   eax,eax
   13fc4:	jne    13ff0 <alloc_cluster_link_l2+0x50>
   13fc6:	mov    rbx,QWORD PTR [rsp+0x28]
   13fcb:	xor    rbx,QWORD PTR fs:0x28
   13fd4:	jne    141a6 <alloc_cluster_link_l2+0x206>
   13fda:	add    rsp,0x38
   13fde:	pop    rbx
   13fdf:	pop    rbp
   13fe0:	pop    r12
   13fe2:	pop    r13
   13fe4:	pop    r14
   13fe6:	pop    r15
   13fe8:	ret    
   13fe9:	nop    DWORD PTR [rax+0x0]
   13ff0:	mov    r14,QWORD PTR [rdi+0x40]
   13ff4:	mov    rbx,rdi
   13ff7:	lea    rdi,[rax*8+0x0]
   13fff:	mov    r13,rdx
   14002:	mov    rbp,rsi
   14005:	call   49d0 <qemu_malloc>
   1400a:	mov    esi,DWORD PTR [r14+0xc]
   1400e:	mov    r8d,DWORD PTR [r13+0x8]
   14012:	mov    r12,rax
   14015:	neg    esi
   14017:	movsxd rsi,esi
   1401a:	and    rsi,QWORD PTR [r13+0x0]
   1401e:	shr    rsi,0x9
   14022:	test   r8d,r8d
   14025:	mov    r15,rsi
   14028:	jne    14150 <alloc_cluster_link_l2+0x1b0>
   1402e:	mov    r8d,DWORD PTR [r14+0x10]
   14032:	mov    ecx,DWORD PTR [r13+0xc]
   14036:	lea    eax,[r8-0x1]
   1403a:	test   eax,ecx
   1403c:	je     14067 <alloc_cluster_link_l2+0xc7>
   1403e:	mov    eax,r8d
   14041:	mov    rdi,rbx
   14044:	neg    eax
   14046:	and    eax,ecx
   14048:	movsxd rsi,eax
   1404b:	sub    ecx,eax
   1404d:	mov    rdx,rsi
   14050:	add    rsi,r15
   14053:	shl    rdx,0x9
   14057:	add    rdx,rbp
   1405a:	call   13100 <copy_sectors>
   1405f:	test   eax,eax
   14061:	js     14133 <alloc_cluster_link_l2+0x193>
   14067:	mov    rsi,QWORD PTR [r13+0x0]
   1406b:	lea    rcx,[rsp+0x18]
   14070:	lea    rdx,[rsp+0x20]
   14075:	lea    r8,[rsp+0x14]
   1407a:	mov    rdi,rbx
   1407d:	call   13ad0 <get_cluster_table>
   14082:	test   eax,eax
   14084:	je     1412e <alloc_cluster_link_l2+0x18e>
   1408a:	mov    ecx,DWORD PTR [r13+0x10]
   1408e:	xor    r15d,r15d
   14091:	test   ecx,ecx
   14093:	jle    140fe <alloc_cluster_link_l2+0x15e>
   14095:	xor    edx,edx
   14097:	movabs rsi,0x8000000000000000
   140a1:	nop    DWORD PTR [rax+0x0]
   140a8:	mov    eax,DWORD PTR [rsp+0x14]
   140ac:	mov    rcx,QWORD PTR [rsp+0x20]
   140b1:	add    eax,edx
   140b3:	cdqe   
   140b5:	lea    rdi,[rcx+rax*8]
   140b9:	mov    rax,QWORD PTR [rdi]
   140bc:	test   rax,rax
   140bf:	je     140dd <alloc_cluster_link_l2+0x13d>
   140c1:	movsxd rcx,r15d
   140c4:	add    r15d,0x1
   140c8:	mov    QWORD PTR [r12+rcx*8],rax
   140cc:	mov    eax,DWORD PTR [rsp+0x14]
   140d0:	mov    rcx,QWORD PTR [rsp+0x20]
   140d5:	add    eax,edx
   140d7:	cdqe   
   140d9:	lea    rdi,[rcx+rax*8]
   140dd:	mov    ecx,DWORD PTR [r14+0x8]
   140e1:	mov    eax,edx
   140e3:	add    edx,0x1
   140e6:	shl    eax,cl
   140e8:	cdqe   
   140ea:	add    rax,rbp
   140ed:	or     rax,rsi
   140f0:	bswap  rax
   140f3:	mov    QWORD PTR [rdi],rax
   140f6:	mov    ecx,DWORD PTR [r13+0x10]
   140fa:	cmp    ecx,edx
   140fc:	jg     140a8 <alloc_cluster_link_l2+0x108>
   140fe:	movsxd rsi,DWORD PTR [rsp+0x14]
   14103:	mov    rdx,QWORD PTR [rsp+0x20]
   14108:	shl    ecx,0x3
   1410b:	mov    rdi,QWORD PTR [r14]
   1410e:	shl    rsi,0x3
   14112:	add    rdx,rsi
   14115:	add    rsi,QWORD PTR [rsp+0x18]
   1411a:	call   180f0 <bdrv_pwrite>
   1411f:	movsxd rdx,DWORD PTR [r13+0x10]
   14123:	cdqe   
   14125:	shl    rdx,0x3
   14129:	cmp    rax,rdx
   1412c:	je     14170 <alloc_cluster_link_l2+0x1d0>
   1412e:	mov    eax,0xfffffffb
   14133:	mov    rdi,r12
   14136:	mov    DWORD PTR [rsp+0xc],eax
   1413a:	call   49c0 <qemu_free>
   1413f:	mov    eax,DWORD PTR [rsp+0xc]
   14143:	jmp    13fc6 <alloc_cluster_link_l2+0x26>
   14148:	nop    DWORD PTR [rax+rax*1+0x0]
   14150:	xor    ecx,ecx
   14152:	mov    rdx,rbp
   14155:	mov    rdi,rbx
   14158:	call   13100 <copy_sectors>
   1415d:	test   eax,eax
   1415f:	jns    1402e <alloc_cluster_link_l2+0x8e>
   14165:	jmp    14133 <alloc_cluster_link_l2+0x193>
   14167:	nop    WORD PTR [rax+rax*1+0x0]
   14170:	test   r15d,r15d
   14173:	je     141a2 <alloc_cluster_link_l2+0x202>
   14175:	lea    eax,[r15-0x1]
   14179:	mov    rbp,r12
   1417c:	lea    r13,[r12+rax*8+0x8]
   14181:	nop    DWORD PTR [rax+0x0]
   14188:	mov    rsi,QWORD PTR [rbp+0x0]
   1418c:	mov    edx,0x1
   14191:	mov    rdi,rbx
   14194:	add    rbp,0x8
   14198:	call   138c0 <free_any_clusters>
   1419d:	cmp    r13,rbp
   141a0:	jne    14188 <alloc_cluster_link_l2+0x1e8>
   141a2:	xor    eax,eax
   141a4:	jmp    14133 <alloc_cluster_link_l2+0x193>
   141a6:	call   2f70 <__stack_chk_fail@plt>
   141ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000141b0 <qcow_aio_write_cb>:
   141b0:	push   r15
   141b2:	push   r14
   141b4:	push   r13
   141b6:	push   r12
   141b8:	push   rbp
   141b9:	push   rbx
   141ba:	mov    ebp,esi
   141bc:	mov    rbx,rdi
   141bf:	sub    rsp,0x8
   141c3:	mov    r12,QWORD PTR [rdi+0x8]
   141c7:	test   esi,esi
   141c9:	mov    r13,QWORD PTR [r12+0x40]
   141ce:	mov    QWORD PTR [rdi+0x50],0x0
   141d6:	jns    14200 <qcow_aio_write_cb+0x50>
   141d8:	mov    rdi,QWORD PTR [rbx+0x18]
   141dc:	mov    esi,ebp
   141de:	call   QWORD PTR [rbx+0x10]
   141e1:	add    rsp,0x8
   141e5:	mov    rdi,rbx
   141e8:	pop    rbx
   141e9:	pop    rbp
   141ea:	pop    r12
   141ec:	pop    r13
   141ee:	pop    r14
   141f0:	pop    r15
   141f2:	jmp    19850 <qemu_aio_release>
   141f7:	nop    WORD PTR [rax+rax*1+0x0]
   14200:	lea    r14,[rdi+0x60]
   14204:	mov    rsi,QWORD PTR [rdi+0x40]
   14208:	mov    rdi,r12
   1420b:	mov    rdx,r14
   1420e:	call   13fa0 <alloc_cluster_link_l2>
   14213:	test   eax,eax
   14215:	js     14248 <qcow_aio_write_cb+0x98>
   14217:	movsxd rsi,DWORD PTR [rbx+0x3c]
   1421b:	mov    ecx,DWORD PTR [rbx+0x38]
   1421e:	mov    rax,rsi
   14221:	sub    ecx,esi
   14223:	add    rsi,QWORD PTR [rbx+0x28]
   14227:	shl    eax,0x9
   1422a:	mov    DWORD PTR [rbx+0x38],ecx
   1422d:	cdqe   
   1422f:	add    QWORD PTR [rbx+0x30],rax
   14233:	test   ecx,ecx
   14235:	mov    QWORD PTR [rbx+0x28],rsi
   14239:	jne    14260 <qcow_aio_write_cb+0xb0>
   1423b:	mov    rdi,QWORD PTR [rbx+0x18]
   1423f:	xor    esi,esi
   14241:	jmp    141de <qcow_aio_write_cb+0x2e>
   14243:	nop    DWORD PTR [rax+rax*1+0x0]
   14248:	mov    edx,DWORD PTR [rbx+0x70]
   1424b:	mov    rsi,QWORD PTR [rbx+0x40]
   1424f:	mov    rdi,r12
   14252:	call   138c0 <free_any_clusters>
   14257:	jmp    141d8 <qcow_aio_write_cb+0x28>
   1425c:	nop    DWORD PTR [rax+0x0]
   14260:	mov    eax,DWORD PTR [r13+0x10]
   14264:	mov    edi,DWORD PTR [r13+0x160]
   1426b:	lea    r15d,[rax-0x1]
   1426f:	and    r15d,esi
   14272:	add    ecx,r15d
   14275:	test   edi,edi
   14277:	je     14281 <qcow_aio_write_cb+0xd1>
   14279:	shl    eax,0x5
   1427c:	cmp    ecx,eax
   1427e:	cmovg  ecx,eax
   14281:	lea    r8,[rbx+0x3c]
   14285:	shl    rsi,0x9
   14289:	mov    r9,r14
   1428c:	mov    edx,r15d
   1428f:	mov    rdi,r12
   14292:	call   13d60 <alloc_cluster_offset>
   14297:	test   rax,rax
   1429a:	mov    QWORD PTR [rbx+0x40],rax
   1429e:	je     14320 <qcow_aio_write_cb+0x170>
   142a4:	test   eax,0x1ff
   142a9:	jne    14320 <qcow_aio_write_cb+0x170>
   142ab:	mov    edx,DWORD PTR [r13+0x160]
   142b2:	test   edx,edx
   142b4:	je     1432a <qcow_aio_write_cb+0x17a>
   142b6:	mov    rsi,QWORD PTR [rbx+0x48]
   142ba:	test   rsi,rsi
   142bd:	je     14330 <qcow_aio_write_cb+0x180>
   142bf:	mov    rdx,QWORD PTR [rbx+0x30]
   142c3:	mov    ecx,DWORD PTR [rbx+0x3c]
   142c6:	lea    r9,[r13+0x168]
   142cd:	mov    rdi,QWORD PTR [rbx+0x28]
   142d1:	mov    r8d,0x1
   142d7:	call   12470 <encrypt_sectors.isra.13>
   142dc:	mov    rdx,QWORD PTR [rbx+0x48]
   142e0:	mov    rax,QWORD PTR [rbx+0x40]
   142e4:	mov    ecx,DWORD PTR [rbx+0x3c]
   142e7:	mov    rdi,QWORD PTR [r13+0x0]
   142eb:	shr    rax,0x9
   142ef:	movsxd rsi,r15d
   142f2:	lea    r8,[rip+0xfffffffffffffeb7]        # 141b0 <qcow_aio_write_cb>
   142f9:	mov    r9,rbx
   142fc:	add    rsi,rax
   142ff:	call   19180 <bdrv_aio_write>
   14304:	test   rax,rax
   14307:	mov    QWORD PTR [rbx+0x50],rax
   1430b:	je     141d8 <qcow_aio_write_cb+0x28>
   14311:	add    rsp,0x8
   14315:	pop    rbx
   14316:	pop    rbp
   14317:	pop    r12
   14319:	pop    r13
   1431b:	pop    r14
   1431d:	pop    r15
   1431f:	ret    
   14320:	mov    ebp,0xfffffffb
   14325:	jmp    141d8 <qcow_aio_write_cb+0x28>
   1432a:	mov    rdx,QWORD PTR [rbx+0x30]
   1432e:	jmp    142e4 <qcow_aio_write_cb+0x134>
   14330:	mov    edi,DWORD PTR [r13+0xc]
   14334:	shl    edi,0x5
   14337:	movsxd rdi,edi
   1433a:	call   4a20 <qemu_mallocz>
   1433f:	mov    rsi,rax
   14342:	mov    QWORD PTR [rbx+0x48],rax
   14346:	jmp    142bf <qcow_aio_write_cb+0x10f>
   1434b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000014350 <qcow_aio_write>:
   14350:	push   r13
   14352:	push   r12
   14354:	mov    r12,rsi
   14357:	push   rbp
   14358:	push   rbx
   14359:	mov    rbp,rdx
   1435c:	mov    rsi,r8
   1435f:	mov    rdx,r9
   14362:	mov    r13d,ecx
   14365:	sub    rsp,0x8
   14369:	mov    rax,QWORD PTR [rdi+0x40]
   1436d:	mov    QWORD PTR [rax+0x120],0xffffffffffffffff
   14378:	call   19670 <qemu_aio_get>
   1437d:	test   rax,rax
   14380:	mov    rbx,rax
   14383:	je     143b9 <qcow_aio_write+0x69>
   14385:	mov    QWORD PTR [rax+0x50],0x0
   1438d:	mov    QWORD PTR [rax+0x28],r12
   14391:	xor    esi,esi
   14393:	mov    QWORD PTR [rax+0x30],rbp
   14397:	mov    DWORD PTR [rax+0x38],r13d
   1439b:	mov    rdi,rax
   1439e:	mov    DWORD PTR [rax+0x3c],0x0
   143a5:	mov    QWORD PTR [rax+0x40],0x0
   143ad:	mov    DWORD PTR [rax+0x70],0x0
   143b4:	call   141b0 <qcow_aio_write_cb>
   143b9:	add    rsp,0x8
   143bd:	mov    rax,rbx
   143c0:	pop    rbx
   143c1:	pop    rbp
   143c2:	pop    r12
   143c4:	pop    r13
   143c6:	ret    
   143c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000143d0 <qcow_write_snapshots>:
   143d0:	push   r15
   143d2:	push   r14
   143d4:	push   r13
   143d6:	push   r12
   143d8:	push   rbp
   143d9:	push   rbx
   143da:	sub    rsp,0x68
   143de:	mov    rbx,QWORD PTR [rdi+0x40]
   143e2:	mov    rcx,QWORD PTR fs:0x28
   143eb:	mov    QWORD PTR [rsp+0x58],rcx
   143f0:	xor    ecx,ecx
   143f2:	mov    QWORD PTR [rsp+0x8],rdi
   143f7:	mov    eax,DWORD PTR [rbx+0x35c]
   143fd:	test   eax,eax
   143ff:	jle    14680 <qcow_write_snapshots+0x2b0>
   14405:	lea    ecx,[rax-0x1]
   14408:	mov    rdx,QWORD PTR [rbx+0x360]
   1440f:	xor    ebp,ebp
   14411:	lea    rax,[rcx*8+0x0]
   14419:	lea    r12,[rdx+0x10]
   1441d:	sub    rax,rcx
   14420:	lea    r13,[rdx+rax*8+0x48]
   14425:	nop    DWORD PTR [rax]
   14428:	mov    rdi,QWORD PTR [r12]
   1442c:	add    rbp,0x7
   14430:	add    r12,0x38
   14434:	and    rbp,0xfffffffffffffff8
   14438:	call   2f60 <strlen@plt>
   1443d:	mov    rdi,QWORD PTR [r12-0x30]
   14442:	mov    r14,rax
   14445:	lea    rbp,[r14+rbp*1+0x28]
   1444a:	call   2f60 <strlen@plt>
   1444f:	add    rbp,rax
   14452:	cmp    r13,r12
   14455:	jne    14428 <qcow_write_snapshots+0x58>
   14457:	mov    DWORD PTR [rsp+0x1c],ebp
   1445b:	movsxd rsi,ebp
   1445e:	mov    rdi,QWORD PTR [rsp+0x8]
   14463:	call   13910 <alloc_clusters>
   14468:	mov    edx,DWORD PTR [rbx+0x35c]
   1446e:	mov    QWORD PTR [rsp+0x10],rax
   14473:	test   edx,edx
   14475:	jle    145f0 <qcow_write_snapshots+0x220>
   1447b:	mov    QWORD PTR [rsp],rax
   1447f:	xor    r14d,r14d
   14482:	mov    DWORD PTR [rsp+0x18],0x0
   1448a:	lea    rbp,[rsp+0x30]
   1448f:	jmp    14502 <qcow_write_snapshots+0x132>
   14491:	nop    DWORD PTR [rax+0x0]
   14498:	mov    rdx,QWORD PTR [r15+0x10]
   1449c:	mov    rdi,QWORD PTR [rbx]
   1449f:	add    r9,0x28
   144a3:	mov    ecx,r12d
   144a6:	mov    rsi,r9
   144a9:	mov    QWORD PTR [rsp],r9
   144ad:	call   180f0 <bdrv_pwrite>
   144b2:	cmp    eax,r12d
   144b5:	jne    145bf <qcow_write_snapshots+0x1ef>
   144bb:	mov    r9,QWORD PTR [rsp]
   144bf:	cdqe   
   144c1:	mov    rdx,QWORD PTR [r15+0x18]
   144c5:	mov    rdi,QWORD PTR [rbx]
   144c8:	mov    ecx,r13d
   144cb:	lea    r12,[rax+r9*1]
   144cf:	mov    rsi,r12
   144d2:	call   180f0 <bdrv_pwrite>
   144d7:	cmp    eax,r13d
   144da:	jne    145bf <qcow_write_snapshots+0x1ef>
   144e0:	cdqe   
   144e2:	add    DWORD PTR [rsp+0x18],0x1
   144e7:	add    r14,0x38
   144eb:	add    rax,r12
   144ee:	mov    QWORD PTR [rsp],rax
   144f2:	mov    eax,DWORD PTR [rsp+0x18]
   144f6:	cmp    DWORD PTR [rbx+0x35c],eax
   144fc:	jle    145f0 <qcow_write_snapshots+0x220>
   14502:	mov    r15,QWORD PTR [rbx+0x360]
   14509:	pxor   xmm0,xmm0
   1450d:	mov    QWORD PTR [rbp+0x20],0x0
   14515:	add    r15,r14
   14518:	movaps XMMWORD PTR [rbp+0x0],xmm0
   1451c:	movaps XMMWORD PTR [rbp+0x10],xmm0
   14520:	mov    rax,QWORD PTR [r15]
   14523:	bswap  rax
   14526:	mov    QWORD PTR [rsp+0x30],rax
   1452b:	mov    eax,DWORD PTR [r15+0x8]
   1452f:	bswap  eax
   14531:	mov    DWORD PTR [rsp+0x38],eax
   14535:	mov    eax,DWORD PTR [r15+0x20]
   14539:	bswap  eax
   1453b:	mov    DWORD PTR [rsp+0x50],eax
   1453f:	mov    eax,DWORD PTR [r15+0x24]
   14543:	bswap  eax
   14545:	mov    DWORD PTR [rsp+0x40],eax
   14549:	mov    eax,DWORD PTR [r15+0x28]
   1454d:	bswap  eax
   1454f:	mov    DWORD PTR [rsp+0x44],eax
   14553:	mov    rax,QWORD PTR [r15+0x30]
   14557:	bswap  rax
   1455a:	mov    QWORD PTR [rsp+0x48],rax
   1455f:	mov    rdi,QWORD PTR [r15+0x10]
   14563:	call   2f60 <strlen@plt>
   14568:	mov    rdi,QWORD PTR [r15+0x18]
   1456c:	mov    r12,rax
   1456f:	call   2f60 <strlen@plt>
   14574:	mov    r9,QWORD PTR [rsp]
   14578:	mov    r13,rax
   1457b:	mov    eax,r12d
   1457e:	ror    ax,0x8
   14582:	mov    WORD PTR [rsp+0x3c],ax
   14587:	mov    eax,r13d
   1458a:	mov    ecx,0x28
   1458f:	ror    ax,0x8
   14593:	add    r9,0x7
   14597:	mov    WORD PTR [rsp+0x3e],ax
   1459c:	mov    rdi,QWORD PTR [rbx]
   1459f:	and    r9,0xfffffffffffffff8
   145a3:	mov    rdx,rbp
   145a6:	mov    rsi,r9
   145a9:	mov    QWORD PTR [rsp],r9
   145ad:	call   180f0 <bdrv_pwrite>
   145b2:	cmp    eax,0x28
   145b5:	mov    r9,QWORD PTR [rsp]
   145b9:	je     14498 <qcow_write_snapshots+0xc8>
   145bf:	mov    eax,0xffffffff
   145c4:	mov    rsi,QWORD PTR [rsp+0x58]
   145c9:	xor    rsi,QWORD PTR fs:0x28
   145d2:	jne    1468f <qcow_write_snapshots+0x2bf>
   145d8:	add    rsp,0x68
   145dc:	pop    rbx
   145dd:	pop    rbp
   145de:	pop    r12
   145e0:	pop    r13
   145e2:	pop    r14
   145e4:	pop    r15
   145e6:	ret    
   145e7:	nop    WORD PTR [rax+rax*1+0x0]
   145f0:	mov    r14,QWORD PTR [rsp+0x10]
   145f5:	lea    rdx,[rsp+0x28]
   145fa:	mov    ecx,0x8
   145ff:	mov    esi,0x40
   14604:	mov    rax,r14
   14607:	bswap  rax
   1460a:	mov    QWORD PTR [rsp+0x28],rax
   1460f:	mov    rdi,QWORD PTR [rbx]
   14612:	call   180f0 <bdrv_pwrite>
   14617:	cmp    eax,0x8
   1461a:	jne    145bf <qcow_write_snapshots+0x1ef>
   1461c:	mov    eax,DWORD PTR [rbx+0x35c]
   14622:	lea    rdx,[rsp+0x24]
   14627:	mov    ecx,0x4
   1462c:	mov    esi,0x3c
   14631:	bswap  eax
   14633:	mov    DWORD PTR [rsp+0x24],eax
   14637:	mov    rdi,QWORD PTR [rbx]
   1463a:	call   180f0 <bdrv_pwrite>
   1463f:	cmp    eax,0x4
   14642:	jne    145bf <qcow_write_snapshots+0x1ef>
   14648:	movsxd rdx,DWORD PTR [rbx+0x358]
   1464f:	mov    rsi,QWORD PTR [rbx+0x350]
   14656:	mov    ecx,0xffffffff
   1465b:	mov    rdi,QWORD PTR [rsp+0x8]
   14660:	call   13850 <update_refcount>
   14665:	mov    eax,DWORD PTR [rsp+0x1c]
   14669:	mov    QWORD PTR [rbx+0x350],r14
   14670:	mov    DWORD PTR [rbx+0x358],eax
   14676:	xor    eax,eax
   14678:	jmp    145c4 <qcow_write_snapshots+0x1f4>
   1467d:	nop    DWORD PTR [rax]
   14680:	mov    DWORD PTR [rsp+0x1c],0x0
   14688:	xor    esi,esi
   1468a:	jmp    1445e <qcow_write_snapshots+0x8e>
   1468f:	call   2f70 <__stack_chk_fail@plt>
   14694:	xchg   ax,ax
   14696:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000146a0 <update_snapshot_refcount>:
   146a0:	push   r15
   146a2:	push   r14
   146a4:	mov    r15,rsi
   146a7:	push   r13
   146a9:	push   r12
   146ab:	push   rbp
   146ac:	push   rbx
   146ad:	mov    ebx,edx
   146af:	sub    rsp,0x68
   146b3:	mov    r14,QWORD PTR [rdi+0x40]
   146b7:	mov    DWORD PTR [rsp+0x20],edx
   146bb:	mov    QWORD PTR [rsp+0x18],rdi
   146c0:	mov    QWORD PTR [rsp+0x58],rsi
   146c5:	xor    esi,esi
   146c7:	mov    DWORD PTR [rsp+0x24],ecx
   146cb:	mov    edx,DWORD PTR [r14+0x18]
   146cf:	mov    rdi,QWORD PTR [r14+0x48]
   146d3:	shl    edx,0x4
   146d6:	movsxd rdx,edx
   146d9:	shl    rdx,0x3
   146dd:	call   3020 <memset@plt>
   146e2:	lea    rdi,[r14+0x58]
   146e6:	mov    eax,r14d
   146e9:	mov    QWORD PTR [r14+0x50],0x0
   146f1:	mov    QWORD PTR [r14+0xc8],0x0
   146fc:	pxor   xmm0,xmm0
   14700:	and    rdi,0xfffffffffffffff8
   14704:	sub    eax,edi
   14706:	lea    ecx,[rax+0xd0]
   1470c:	xor    eax,eax
   1470e:	shr    ecx,0x3
   14711:	rep stos QWORD PTR es:[rdi],rax
   14714:	movsxd rax,ebx
   14717:	lea    rbp,[rax*8+0x0]
   1471f:	cmp    QWORD PTR [r14+0x38],r15
   14723:	movups XMMWORD PTR [r14+0xd0],xmm0
   1472b:	mov    QWORD PTR [rsp+0x50],rbp
   14730:	movups XMMWORD PTR [r14+0xe0],xmm0
   14738:	movups XMMWORD PTR [r14+0xf0],xmm0
   14740:	movups XMMWORD PTR [r14+0x100],xmm0
   14748:	jne    14b00 <update_snapshot_refcount+0x460>
   1474e:	mov    eax,DWORD PTR [rsp+0x20]
   14752:	cmp    DWORD PTR [r14+0x1c],eax
   14756:	jne    14b91 <update_snapshot_refcount+0x4f1>
   1475c:	mov    eax,DWORD PTR [r14+0x18]
   14760:	mov    r10,QWORD PTR [r14+0x40]
   14764:	shl    eax,0x3
   14767:	mov    QWORD PTR [rsp+0x8],r10
   1476c:	movsxd rdi,eax
   1476f:	mov    DWORD PTR [rsp+0x40],eax
   14773:	call   49d0 <qemu_malloc>
   14778:	mov    edi,DWORD PTR [rsp+0x20]
   1477c:	mov    r15,rax
   1477f:	test   edi,edi
   14781:	jle    14a17 <update_snapshot_refcount+0x377>
   14787:	mov    r10,QWORD PTR [rsp+0x8]
   1478c:	mov    QWORD PTR [rsp+0x48],0x0
   14795:	mov    rax,r15
   14798:	xor    r12d,r12d
   1479b:	mov    r15,r14
   1479e:	mov    DWORD PTR [rsp+0x44],0x0
   147a6:	mov    QWORD PTR [rsp+0x8],r10
   147ab:	mov    r14,rax
   147ae:	jmp    147bf <update_snapshot_refcount+0x11f>
   147b0:	add    r12,0x1
   147b4:	cmp    DWORD PTR [rsp+0x20],r12d
   147b9:	jle    14990 <update_snapshot_refcount+0x2f0>
   147bf:	mov    rax,QWORD PTR [rsp+0x8]
   147c4:	mov    r9,QWORD PTR [rax+r12*8]
   147c8:	test   r9,r9
   147cb:	je     147b0 <update_snapshot_refcount+0x110>
   147cd:	mov    ebx,DWORD PTR [rsp+0x40]
   147d1:	movabs r13,0x7fffffffffffffff
   147db:	mov    rdi,QWORD PTR [r15]
   147de:	and    r13,r9
   147e1:	mov    rdx,r14
   147e4:	mov    QWORD PTR [rsp+0x28],r9
   147e9:	mov    rsi,r13
   147ec:	mov    ecx,ebx
   147ee:	call   17b00 <bdrv_pread>
   147f3:	cmp    eax,ebx
   147f5:	jne    14ad0 <update_snapshot_refcount+0x430>
   147fb:	mov    esi,DWORD PTR [r15+0x18]
   147ff:	mov    ebp,0x1
   14804:	mov    DWORD PTR [rsp+0x10],0x0
   1480c:	mov    r9,QWORD PTR [rsp+0x28]
   14811:	test   esi,esi
   14813:	jle    1491b <update_snapshot_refcount+0x27b>
   14819:	mov    QWORD PTR [rsp+0x28],r13
   1481e:	mov    QWORD PTR [rsp+0x38],r12
   14823:	mov    r13,r14
   14826:	mov    r12,r15
   14829:	mov    QWORD PTR [rsp+0x30],r9
   1482e:	mov    r15,rbp
   14831:	mov    ebp,DWORD PTR [rsp+0x24]
   14835:	jmp    1486e <update_snapshot_refcount+0x1ce>
   14837:	nop    WORD PTR [rax+rax*1+0x0]
   14840:	test   ebp,ebp
   14842:	jne    14a68 <update_snapshot_refcount+0x3c8>
   14848:	cmp    r14,rbx
   1484b:	je     14860 <update_snapshot_refcount+0x1c0>
   1484d:	mov    rax,r14
   14850:	mov    DWORD PTR [rsp+0x10],0x1
   14858:	bswap  rax
   1485b:	mov    QWORD PTR [r13+r15*8-0x8],rax
   14860:	mov    eax,r15d
   14863:	add    r15,0x1
   14867:	cmp    DWORD PTR [r12+0x18],eax
   1486c:	jle    148d8 <update_snapshot_refcount+0x238>
   1486e:	mov    rbx,QWORD PTR [r13+r15*8-0x8]
   14873:	bswap  rbx
   14876:	test   rbx,rbx
   14879:	je     14860 <update_snapshot_refcount+0x1c0>
   1487b:	movabs r14,0x7fffffffffffffff
   14885:	movabs rax,0x4000000000000000
   1488f:	and    r14,rbx
   14892:	test   rbx,rax
   14895:	jne    14840 <update_snapshot_refcount+0x1a0>
   14897:	mov    ecx,DWORD PTR [r12+0x8]
   1489c:	mov    rsi,r14
   1489f:	shr    rsi,cl
   148a2:	test   ebp,ebp
   148a4:	je     14a30 <update_snapshot_refcount+0x390>
   148aa:	mov    rdi,QWORD PTR [rsp+0x18]
   148af:	mov    edx,ebp
   148b1:	call   133d0 <update_cluster_refcount>
   148b6:	movabs r10,0x8000000000000000
   148c0:	mov    rdx,r14
   148c3:	or     r10,r14
   148c6:	cmp    eax,0x1
   148c9:	cmove  rdx,r10
   148cd:	mov    r14,rdx
   148d0:	jmp    14848 <update_snapshot_refcount+0x1a8>
   148d5:	nop    DWORD PTR [rax]
   148d8:	mov    edx,DWORD PTR [rsp+0x10]
   148dc:	mov    r15,r12
   148df:	mov    r14,r13
   148e2:	mov    r9,QWORD PTR [rsp+0x30]
   148e7:	mov    r13,QWORD PTR [rsp+0x28]
   148ec:	mov    r12,QWORD PTR [rsp+0x38]
   148f1:	test   edx,edx
   148f3:	je     1491b <update_snapshot_refcount+0x27b>
   148f5:	mov    ebx,DWORD PTR [rsp+0x40]
   148f9:	mov    rdi,QWORD PTR [r15]
   148fc:	mov    rdx,r14
   148ff:	mov    rsi,r13
   14902:	mov    QWORD PTR [rsp+0x10],r9
   14907:	mov    ecx,ebx
   14909:	call   180f0 <bdrv_pwrite>
   1490e:	cmp    eax,ebx
   14910:	mov    r9,QWORD PTR [rsp+0x10]
   14915:	jne    14ad0 <update_snapshot_refcount+0x430>
   1491b:	mov    ecx,DWORD PTR [r15+0x8]
   1491f:	mov    rsi,r13
   14922:	shr    rsi,cl
   14925:	mov    ecx,DWORD PTR [rsp+0x24]
   14929:	test   ecx,ecx
   1492b:	je     14a48 <update_snapshot_refcount+0x3a8>
   14931:	mov    edx,DWORD PTR [rsp+0x24]
   14935:	mov    rdi,QWORD PTR [rsp+0x18]
   1493a:	mov    QWORD PTR [rsp+0x10],r9
   1493f:	call   133d0 <update_cluster_refcount>
   14944:	mov    r9,QWORD PTR [rsp+0x10]
   14949:	movabs rcx,0x8000000000000000
   14953:	mov    rdx,r13
   14956:	or     r13,rcx
   14959:	cmp    eax,0x1
   1495c:	cmovne r13,rdx
   14960:	cmp    r13,r9
   14963:	je     147b0 <update_snapshot_refcount+0x110>
   14969:	mov    rax,QWORD PTR [rsp+0x8]
   1496e:	mov    DWORD PTR [rsp+0x44],0x1
   14976:	mov    QWORD PTR [rax+r12*8],r13
   1497a:	add    r12,0x1
   1497e:	cmp    DWORD PTR [rsp+0x20],r12d
   14983:	jg     147bf <update_snapshot_refcount+0x11f>
   14989:	nop    DWORD PTR [rax+0x0]
   14990:	mov    rax,r14
   14993:	mov    r14,r15
   14996:	mov    r10,QWORD PTR [rsp+0x8]
   1499b:	mov    r15,rax
   1499e:	mov    eax,DWORD PTR [rsp+0x44]
   149a2:	test   eax,eax
   149a4:	je     14a0b <update_snapshot_refcount+0x36b>
   149a6:	mov    ecx,DWORD PTR [rsp+0x20]
   149aa:	xor    eax,eax
   149ac:	nop    DWORD PTR [rax+0x0]
   149b0:	mov    rdx,QWORD PTR [r10+rax*8]
   149b4:	bswap  rdx
   149b7:	mov    QWORD PTR [r10+rax*8],rdx
   149bb:	add    rax,0x1
   149bf:	cmp    ecx,eax
   149c1:	jg     149b0 <update_snapshot_refcount+0x310>
   149c3:	mov    rbx,QWORD PTR [rsp+0x50]
   149c8:	mov    rsi,QWORD PTR [rsp+0x58]
   149cd:	mov    rdx,r10
   149d0:	mov    rdi,QWORD PTR [r14]
   149d3:	mov    QWORD PTR [rsp+0x8],r10
   149d8:	mov    ecx,ebx
   149da:	call   180f0 <bdrv_pwrite>
   149df:	cdqe   
   149e1:	mov    r10,QWORD PTR [rsp+0x8]
   149e6:	cmp    rax,rbx
   149e9:	jne    14ad8 <update_snapshot_refcount+0x438>
   149ef:	mov    ecx,DWORD PTR [rsp+0x20]
   149f3:	xor    eax,eax
   149f5:	nop    DWORD PTR [rax]
   149f8:	mov    rdx,QWORD PTR [r10+rax*8]
   149fc:	bswap  rdx
   149ff:	mov    QWORD PTR [r10+rax*8],rdx
   14a03:	add    rax,0x1
   14a07:	cmp    ecx,eax
   14a09:	jg     149f8 <update_snapshot_refcount+0x358>
   14a0b:	cmp    QWORD PTR [rsp+0x48],0x0
   14a11:	jne    14abd <update_snapshot_refcount+0x41d>
   14a17:	mov    rdi,r15
   14a1a:	call   49c0 <qemu_free>
   14a1f:	add    rsp,0x68
   14a23:	xor    eax,eax
   14a25:	pop    rbx
   14a26:	pop    rbp
   14a27:	pop    r12
   14a29:	pop    r13
   14a2b:	pop    r14
   14a2d:	pop    r15
   14a2f:	ret    
   14a30:	mov    rax,QWORD PTR [rsp+0x18]
   14a35:	mov    rdi,QWORD PTR [rax+0x40]
   14a39:	call   11ae0 <get_refcount.isra.5>
   14a3e:	jmp    148b6 <update_snapshot_refcount+0x216>
   14a43:	nop    DWORD PTR [rax+rax*1+0x0]
   14a48:	mov    rax,QWORD PTR [rsp+0x18]
   14a4d:	mov    QWORD PTR [rsp+0x10],r9
   14a52:	mov    rdi,QWORD PTR [rax+0x40]
   14a56:	call   11ae0 <get_refcount.isra.5>
   14a5b:	mov    r9,QWORD PTR [rsp+0x10]
   14a60:	jmp    14949 <update_snapshot_refcount+0x2a9>
   14a65:	nop    DWORD PTR [rax]
   14a68:	mov    ecx,DWORD PTR [r12+0x24]
   14a6d:	mov    rdx,r14
   14a70:	mov    rsi,QWORD PTR [r12+0x30]
   14a75:	mov    rdi,QWORD PTR [rsp+0x18]
   14a7a:	shr    rdx,cl
   14a7d:	and    edx,DWORD PTR [r12+0x28]
   14a82:	and    rsi,r14
   14a85:	and    rsi,0xfffffffffffffe00
   14a8c:	mov    ecx,ebp
   14a8e:	add    edx,0x1
   14a91:	shl    edx,0x9
   14a94:	movsxd rdx,edx
   14a97:	call   13850 <update_refcount>
   14a9c:	jmp    14848 <update_snapshot_refcount+0x1a8>
   14aa1:	mov    edi,DWORD PTR [r14+0x18]
   14aa5:	mov    QWORD PTR [rsp+0x8],r10
   14aaa:	shl    edi,0x3
   14aad:	movsxd rdi,edi
   14ab0:	call   49d0 <qemu_malloc>
   14ab5:	mov    r10,QWORD PTR [rsp+0x8]
   14aba:	mov    r15,rax
   14abd:	mov    rdi,r10
   14ac0:	call   49c0 <qemu_free>
   14ac5:	jmp    14a17 <update_snapshot_refcount+0x377>
   14aca:	nop    WORD PTR [rax+rax*1+0x0]
   14ad0:	mov    r10,QWORD PTR [rsp+0x8]
   14ad5:	mov    r15,r14
   14ad8:	cmp    QWORD PTR [rsp+0x48],0x0
   14ade:	jne    14b84 <update_snapshot_refcount+0x4e4>
   14ae4:	mov    rdi,r15
   14ae7:	call   49c0 <qemu_free>
   14aec:	add    rsp,0x68
   14af0:	mov    eax,0xfffffffb
   14af5:	pop    rbx
   14af6:	pop    rbp
   14af7:	pop    r12
   14af9:	pop    r13
   14afb:	pop    r14
   14afd:	pop    r15
   14aff:	ret    
   14b00:	mov    rdi,rbp
   14b03:	call   49d0 <qemu_malloc>
   14b08:	mov    rdi,QWORD PTR [r14]
   14b0b:	mov    ecx,ebp
   14b0d:	mov    rdx,rax
   14b10:	mov    rsi,r15
   14b13:	mov    QWORD PTR [rsp+0x8],rax
   14b18:	call   17b00 <bdrv_pread>
   14b1d:	cdqe   
   14b1f:	mov    r10,QWORD PTR [rsp+0x8]
   14b24:	cmp    rax,rbp
   14b27:	jne    14b81 <update_snapshot_refcount+0x4e1>
   14b29:	test   ebx,ebx
   14b2b:	jle    14aa1 <update_snapshot_refcount+0x401>
   14b31:	lea    edx,[rbx-0x1]
   14b34:	mov    rax,r10
   14b37:	lea    rcx,[r10+rdx*8+0x8]
   14b3c:	nop    DWORD PTR [rax+0x0]
   14b40:	mov    rdx,QWORD PTR [rax]
   14b43:	add    rax,0x8
   14b47:	bswap  rdx
   14b4a:	mov    QWORD PTR [rax-0x8],rdx
   14b4e:	cmp    rcx,rax
   14b51:	jne    14b40 <update_snapshot_refcount+0x4a0>
   14b53:	mov    eax,DWORD PTR [r14+0x18]
   14b57:	mov    QWORD PTR [rsp+0x8],r10
   14b5c:	shl    eax,0x3
   14b5f:	movsxd rdi,eax
   14b62:	mov    DWORD PTR [rsp+0x40],eax
   14b66:	call   49d0 <qemu_malloc>
   14b6b:	mov    QWORD PTR [rsp+0x48],0x1
   14b74:	mov    r15,rax
   14b77:	mov    r10,QWORD PTR [rsp+0x8]
   14b7c:	jmp    14795 <update_snapshot_refcount+0xf5>
   14b81:	xor    r15d,r15d
   14b84:	mov    rdi,r10
   14b87:	call   49c0 <qemu_free>
   14b8c:	jmp    14ae4 <update_snapshot_refcount+0x444>
   14b91:	lea    rcx,[rip+0xacc8]        # 1f860 <__PRETTY_FUNCTION__.14546>
   14b98:	lea    rsi,[rip+0xac39]        # 1f7d8 <__PRETTY_FUNCTION__.14134+0x38>
   14b9f:	lea    rdi,[rip+0xac13]        # 1f7b9 <__PRETTY_FUNCTION__.14134+0x19>
   14ba6:	mov    edx,0x69b
   14bab:	call   3000 <__assert_fail@plt>

0000000000014bb0 <qcow_snapshot_goto>:
   14bb0:	push   r13
   14bb2:	push   r12
   14bb4:	push   rbp
   14bb5:	push   rbx
   14bb6:	mov    rbp,rdi
   14bb9:	sub    rsp,0x8
   14bbd:	mov    rbx,QWORD PTR [rdi+0x40]
   14bc1:	mov    rdi,rbx
   14bc4:	call   11e30 <find_snapshot_by_id_or_name.isra.10>
   14bc9:	test   eax,eax
   14bcb:	js     14cc0 <qcow_snapshot_goto+0x110>
   14bd1:	cdqe   
   14bd3:	mov    rsi,QWORD PTR [rbx+0x38]
   14bd7:	mov    ecx,0xffffffff
   14bdc:	lea    rdx,[rax*8+0x0]
   14be4:	mov    rdi,rbp
   14be7:	sub    rdx,rax
   14bea:	mov    rax,rdx
   14bed:	mov    rdx,QWORD PTR [rbx+0x360]
   14bf4:	lea    r13,[rdx+rax*8]
   14bf8:	mov    edx,DWORD PTR [rbx+0x1c]
   14bfb:	call   146a0 <update_snapshot_refcount>
   14c00:	test   eax,eax
   14c02:	js     14cb0 <qcow_snapshot_goto+0x100>
   14c08:	mov    esi,DWORD PTR [r13+0x8]
   14c0c:	mov    rdi,rbp
   14c0f:	call   13940 <grow_l1_table>
   14c14:	test   eax,eax
   14c16:	js     14cb0 <qcow_snapshot_goto+0x100>
   14c1c:	mov    r12d,DWORD PTR [r13+0x8]
   14c20:	mov    rdx,QWORD PTR [rbx+0x40]
   14c24:	mov    rdi,QWORD PTR [rbx]
   14c27:	mov    DWORD PTR [rbx+0x1c],r12d
   14c2b:	mov    rsi,QWORD PTR [r13+0x0]
   14c2f:	shl    r12d,0x3
   14c33:	mov    ecx,r12d
   14c36:	call   17b00 <bdrv_pread>
   14c3b:	cmp    eax,r12d
   14c3e:	mov    r13d,eax
   14c41:	jne    14cb0 <qcow_snapshot_goto+0x100>
   14c43:	mov    rdx,QWORD PTR [rbx+0x40]
   14c47:	mov    rsi,QWORD PTR [rbx+0x38]
   14c4b:	mov    ecx,eax
   14c4d:	mov    rdi,QWORD PTR [rbx]
   14c50:	call   180f0 <bdrv_pwrite>
   14c55:	cmp    eax,r13d
   14c58:	jne    14cb0 <qcow_snapshot_goto+0x100>
   14c5a:	mov    edx,DWORD PTR [rbx+0x1c]
   14c5d:	test   edx,edx
   14c5f:	jle    14c86 <qcow_snapshot_goto+0xd6>
   14c61:	xor    esi,esi
   14c63:	xor    ecx,ecx
   14c65:	nop    DWORD PTR [rax]
   14c68:	mov    rdx,QWORD PTR [rbx+0x40]
   14c6c:	add    ecx,0x1
   14c6f:	add    rdx,rsi
   14c72:	add    rsi,0x8
   14c76:	mov    rax,QWORD PTR [rdx]
   14c79:	bswap  rax
   14c7c:	mov    QWORD PTR [rdx],rax
   14c7f:	mov    edx,DWORD PTR [rbx+0x1c]
   14c82:	cmp    edx,ecx
   14c84:	jg     14c68 <qcow_snapshot_goto+0xb8>
   14c86:	mov    rsi,QWORD PTR [rbx+0x38]
   14c8a:	mov    ecx,0x1
   14c8f:	mov    rdi,rbp
   14c92:	call   146a0 <update_snapshot_refcount>
   14c97:	test   eax,eax
   14c99:	js     14cb0 <qcow_snapshot_goto+0x100>
   14c9b:	xor    eax,eax
   14c9d:	add    rsp,0x8
   14ca1:	pop    rbx
   14ca2:	pop    rbp
   14ca3:	pop    r12
   14ca5:	pop    r13
   14ca7:	ret    
   14ca8:	nop    DWORD PTR [rax+rax*1+0x0]
   14cb0:	add    rsp,0x8
   14cb4:	mov    eax,0xfffffffb
   14cb9:	pop    rbx
   14cba:	pop    rbp
   14cbb:	pop    r12
   14cbd:	pop    r13
   14cbf:	ret    
   14cc0:	mov    eax,0xfffffffe
   14cc5:	jmp    14c9d <qcow_snapshot_goto+0xed>
   14cc7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000014cd0 <qcow_snapshot_delete>:
   14cd0:	push   r13
   14cd2:	push   r12
   14cd4:	push   rbp
   14cd5:	push   rbx
   14cd6:	mov    rbp,rdi
   14cd9:	sub    rsp,0x8
   14cdd:	mov    r12,QWORD PTR [rdi+0x40]
   14ce1:	mov    rdi,r12
   14ce4:	call   11e30 <find_snapshot_by_id_or_name.isra.10>
   14ce9:	test   eax,eax
   14ceb:	js     14dc0 <qcow_snapshot_delete+0xf0>
   14cf1:	movsxd rdx,eax
   14cf4:	mov    ebx,eax
   14cf6:	mov    ecx,0xffffffff
   14cfb:	lea    rax,[rdx*8+0x0]
   14d03:	mov    rdi,rbp
   14d06:	sub    rax,rdx
   14d09:	mov    rdx,QWORD PTR [r12+0x360]
   14d11:	lea    r13,[rdx+rax*8]
   14d15:	mov    edx,DWORD PTR [r13+0x8]
   14d19:	mov    rsi,QWORD PTR [r13+0x0]
   14d1d:	call   146a0 <update_snapshot_refcount>
   14d22:	test   eax,eax
   14d24:	js     14db0 <qcow_snapshot_delete+0xe0>
   14d2a:	mov    edx,DWORD PTR [r12+0x1c]
   14d2f:	mov    rsi,QWORD PTR [r12+0x38]
   14d34:	xor    ecx,ecx
   14d36:	mov    rdi,rbp
   14d39:	call   146a0 <update_snapshot_refcount>
   14d3e:	test   eax,eax
   14d40:	js     14db0 <qcow_snapshot_delete+0xe0>
   14d42:	mov    edx,DWORD PTR [r13+0x8]
   14d46:	mov    rsi,QWORD PTR [r13+0x0]
   14d4a:	mov    ecx,0xffffffff
   14d4f:	mov    rdi,rbp
   14d52:	not    ebx
   14d54:	shl    rdx,0x3
   14d58:	call   13850 <update_refcount>
   14d5d:	mov    rdi,QWORD PTR [r13+0x10]
   14d61:	call   49c0 <qemu_free>
   14d66:	mov    rdi,QWORD PTR [r13+0x18]
   14d6a:	call   49c0 <qemu_free>
   14d6f:	add    ebx,DWORD PTR [r12+0x35c]
   14d77:	lea    rsi,[r13+0x38]
   14d7b:	mov    rdi,r13
   14d7e:	movsxd rbx,ebx
   14d81:	lea    rdx,[rbx*8+0x0]
   14d89:	sub    rdx,rbx
   14d8c:	shl    rdx,0x3
   14d90:	call   3300 <memmove@plt>
   14d95:	sub    DWORD PTR [r12+0x35c],0x1
   14d9e:	mov    rdi,rbp
   14da1:	call   143d0 <qcow_write_snapshots>
   14da6:	mov    edx,0x0
   14dab:	test   eax,eax
   14dad:	cmovg  eax,edx
   14db0:	add    rsp,0x8
   14db4:	pop    rbx
   14db5:	pop    rbp
   14db6:	pop    r12
   14db8:	pop    r13
   14dba:	ret    
   14dbb:	nop    DWORD PTR [rax+rax*1+0x0]
   14dc0:	mov    eax,0xfffffffe
   14dc5:	jmp    14db0 <qcow_snapshot_delete+0xe0>
   14dc7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000014dd0 <qcow_snapshot_create>:
   14dd0:	push   r15
   14dd2:	push   r14
   14dd4:	push   r13
   14dd6:	push   r12
   14dd8:	mov    r13,rsi
   14ddb:	push   rbp
   14ddc:	push   rbx
   14ddd:	mov    r12,rdi
   14de0:	pxor   xmm0,xmm0
   14de4:	sub    rsp,0x48
   14de8:	mov    rbx,QWORD PTR [rdi+0x40]
   14dec:	mov    rax,QWORD PTR fs:0x28
   14df5:	mov    QWORD PTR [rsp+0x38],rax
   14dfa:	xor    eax,eax
   14dfc:	cmp    BYTE PTR [rsi],0x0
   14dff:	mov    QWORD PTR [rsp+0x30],0x0
   14e08:	movaps XMMWORD PTR [rsp],xmm0
   14e0c:	mov    rdi,rbx
   14e0f:	movaps XMMWORD PTR [rsp+0x10],xmm0
   14e14:	movaps XMMWORD PTR [rsp+0x20],xmm0
   14e19:	je     15018 <qcow_snapshot_create+0x248>
   14e1f:	mov    rsi,r13
   14e22:	call   11db0 <find_snapshot_by_id.isra.9>
   14e27:	test   eax,eax
   14e29:	mov    edx,0xfffffffe
   14e2e:	jns    14ff0 <qcow_snapshot_create+0x220>
   14e34:	mov    rdi,r13
   14e37:	call   4a40 <qemu_strdup>
   14e3c:	test   rax,rax
   14e3f:	mov    rbp,rax
   14e42:	mov    QWORD PTR [rsp+0x10],rax
   14e47:	je     15090 <qcow_snapshot_create+0x2c0>
   14e4d:	lea    rdi,[r13+0x80]
   14e54:	call   4a40 <qemu_strdup>
   14e59:	test   rax,rax
   14e5c:	mov    rbp,rax
   14e5f:	mov    QWORD PTR [rsp+0x18],rax
   14e64:	je     15090 <qcow_snapshot_create+0x2c0>
   14e6a:	mov    eax,DWORD PTR [r13+0x180]
   14e71:	mov    edx,DWORD PTR [rbx+0x1c]
   14e74:	mov    ecx,0x1
   14e79:	mov    rsi,QWORD PTR [rbx+0x38]
   14e7d:	mov    rdi,r12
   14e80:	mov    DWORD PTR [rsp+0x20],eax
   14e84:	mov    eax,DWORD PTR [r13+0x184]
   14e8b:	mov    DWORD PTR [rsp+0x24],eax
   14e8f:	mov    eax,DWORD PTR [r13+0x188]
   14e96:	mov    DWORD PTR [rsp+0x28],eax
   14e9a:	mov    rax,QWORD PTR [r13+0x190]
   14ea1:	mov    QWORD PTR [rsp+0x30],rax
   14ea6:	call   146a0 <update_snapshot_refcount>
   14eab:	test   eax,eax
   14ead:	js     15090 <qcow_snapshot_create+0x2c0>
   14eb3:	movsxd rsi,DWORD PTR [rbx+0x1c]
   14eb7:	mov    rdi,r12
   14eba:	shl    rsi,0x3
   14ebe:	call   13910 <alloc_clusters>
   14ec3:	movsxd rdi,DWORD PTR [rbx+0x1c]
   14ec7:	mov    r14,rax
   14eca:	mov    QWORD PTR [rsp],rax
   14ece:	mov    DWORD PTR [rsp+0x8],edi
   14ed2:	shl    rdi,0x3
   14ed6:	call   49d0 <qemu_malloc>
   14edb:	mov    ecx,DWORD PTR [rbx+0x1c]
   14ede:	mov    r13,rax
   14ee1:	test   ecx,ecx
   14ee3:	jle    14f0e <qcow_snapshot_create+0x13e>
   14ee5:	xor    eax,eax
   14ee7:	xor    edi,edi
   14ee9:	nop    DWORD PTR [rax+0x0]
   14ef0:	mov    rdx,QWORD PTR [rbx+0x40]
   14ef4:	add    edi,0x1
   14ef7:	mov    rdx,QWORD PTR [rdx+rax*1]
   14efb:	bswap  rdx
   14efe:	mov    QWORD PTR [r13+rax*1+0x0],rdx
   14f03:	mov    ecx,DWORD PTR [rbx+0x1c]
   14f06:	add    rax,0x8
   14f0a:	cmp    ecx,edi
   14f0c:	jg     14ef0 <qcow_snapshot_create+0x120>
   14f0e:	mov    rdi,QWORD PTR [rbx]
   14f11:	shl    ecx,0x3
   14f14:	mov    rdx,r13
   14f17:	mov    rsi,r14
   14f1a:	call   180f0 <bdrv_pwrite>
   14f1f:	movsxd rdx,DWORD PTR [rbx+0x1c]
   14f23:	cdqe   
   14f25:	shl    rdx,0x3
   14f29:	cmp    rax,rdx
   14f2c:	jne    15093 <qcow_snapshot_create+0x2c3>
   14f32:	mov    rdi,r13
   14f35:	call   49c0 <qemu_free>
   14f3a:	mov    eax,DWORD PTR [rbx+0x35c]
   14f40:	add    eax,0x1
   14f43:	cdqe   
   14f45:	lea    rdi,[rax*8+0x0]
   14f4d:	sub    rdi,rax
   14f50:	shl    rdi,0x3
   14f54:	call   49d0 <qemu_malloc>
   14f59:	mov    rsi,QWORD PTR [rbx+0x360]
   14f60:	mov    r13,rax
   14f63:	test   rsi,rsi
   14f66:	je     14f92 <qcow_snapshot_create+0x1c2>
   14f68:	movsxd rax,DWORD PTR [rbx+0x35c]
   14f6f:	mov    rdi,r13
   14f72:	lea    rdx,[rax*8+0x0]
   14f7a:	sub    rdx,rax
   14f7d:	shl    rdx,0x3
   14f81:	call   3190 <memcpy@plt>
   14f86:	mov    rdi,QWORD PTR [rbx+0x360]
   14f8d:	call   49c0 <qemu_free>
   14f92:	movsxd rax,DWORD PTR [rbx+0x35c]
   14f99:	mov    QWORD PTR [rbx+0x360],r13
   14fa0:	mov    rdi,r12
   14fa3:	movdqa xmm0,XMMWORD PTR [rsp]
   14fa8:	lea    edx,[rax+0x1]
   14fab:	mov    DWORD PTR [rbx+0x35c],edx
   14fb1:	lea    rdx,[rax*8+0x0]
   14fb9:	sub    rdx,rax
   14fbc:	lea    rax,[r13+rdx*8+0x0]
   14fc1:	mov    rdx,QWORD PTR [rsp+0x30]
   14fc6:	movups XMMWORD PTR [rax],xmm0
   14fc9:	mov    QWORD PTR [rax+0x30],rdx
   14fcd:	movdqa xmm0,XMMWORD PTR [rsp+0x10]
   14fd3:	movups XMMWORD PTR [rax+0x10],xmm0
   14fd7:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   14fdd:	movups XMMWORD PTR [rax+0x20],xmm0
   14fe1:	call   143d0 <qcow_write_snapshots>
   14fe6:	test   eax,eax
   14fe8:	js     15090 <qcow_snapshot_create+0x2c0>
   14fee:	xor    edx,edx
   14ff0:	mov    rsi,QWORD PTR [rsp+0x38]
   14ff5:	xor    rsi,QWORD PTR fs:0x28
   14ffe:	mov    eax,edx
   15000:	jne    150b5 <qcow_snapshot_create+0x2e5>
   15006:	add    rsp,0x48
   1500a:	pop    rbx
   1500b:	pop    rbp
   1500c:	pop    r12
   1500e:	pop    r13
   15010:	pop    r14
   15012:	pop    r15
   15014:	ret    
   15015:	nop    DWORD PTR [rax]
   15018:	mov    eax,DWORD PTR [rbx+0x35c]
   1501e:	test   eax,eax
   15020:	jle    150ad <qcow_snapshot_create+0x2dd>
   15026:	xor    r15d,r15d
   15029:	xor    ebp,ebp
   1502b:	xor    r14d,r14d
   1502e:	xchg   ax,ax
   15030:	mov    rax,QWORD PTR [rbx+0x360]
   15037:	xor    esi,esi
   15039:	mov    edx,0xa
   1503e:	mov    rdi,QWORD PTR [rax+r15*1+0x10]
   15043:	call   3390 <strtoul@plt>
   15048:	cmp    ebp,eax
   1504a:	cmovl  ebp,eax
   1504d:	add    r14d,0x1
   15051:	add    r15,0x38
   15055:	cmp    r14d,DWORD PTR [rbx+0x35c]
   1505c:	jl     15030 <qcow_snapshot_create+0x260>
   1505e:	lea    r9d,[rbp+0x1]
   15062:	lea    r8,[rip+0x68a6]        # 1b90f <_IO_stdin_used+0x8f>
   15069:	mov    rdi,r13
   1506c:	mov    ecx,0x80
   15071:	mov    edx,0x1
   15076:	mov    esi,0x80
   1507b:	xor    eax,eax
   1507d:	call   2e30 <__snprintf_chk@plt>
   15082:	mov    rdi,QWORD PTR [r12+0x40]
   15087:	jmp    14e1f <qcow_snapshot_create+0x4f>
   1508c:	nop    DWORD PTR [rax+0x0]
   15090:	xor    r13d,r13d
   15093:	mov    rdi,rbp
   15096:	call   49c0 <qemu_free>
   1509b:	mov    rdi,r13
   1509e:	call   49c0 <qemu_free>
   150a3:	mov    edx,0xffffffff
   150a8:	jmp    14ff0 <qcow_snapshot_create+0x220>
   150ad:	mov    r9d,0x1
   150b3:	jmp    15062 <qcow_snapshot_create+0x292>
   150b5:	call   2f70 <__stack_chk_fail@plt>
   150ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000000150c0 <qcow_write_compressed>:
   150c0:	push   r15
   150c2:	push   r14
   150c4:	push   r13
   150c6:	push   r12
   150c8:	push   rbp
   150c9:	push   rbx
   150ca:	sub    rsp,0xe8
   150d1:	mov    r13,QWORD PTR [rdi+0x40]
   150d5:	mov    rax,QWORD PTR fs:0x28
   150de:	mov    QWORD PTR [rsp+0xd8],rax
   150e6:	xor    eax,eax
   150e8:	test   ecx,ecx
   150ea:	je     15388 <qcow_write_compressed+0x2c8>
   150f0:	cmp    DWORD PTR [r13+0x10],ecx
   150f4:	jne    15400 <qcow_write_compressed+0x340>
   150fa:	mov    ecx,DWORD PTR [r13+0xc]
   150fe:	mov    r14,rdx
   15101:	mov    edx,0x10624dd3
   15106:	mov    r15,rdi
   15109:	lea    rbx,[rsp+0x60]
   1510e:	mov    rbp,rsi
   15111:	mov    eax,ecx
   15113:	imul   edx
   15115:	mov    eax,ecx
   15117:	sar    eax,0x1f
   1511a:	sar    edx,0x6
   1511d:	sub    edx,eax
   1511f:	lea    edi,[rcx+rdx*1+0x80]
   15126:	movsxd rdi,edi
   15129:	call   49d0 <qemu_malloc>
   1512e:	mov    ecx,0xe
   15133:	mov    QWORD PTR [rsp+0x18],rax
   15138:	mov    rdi,rbx
   1513b:	xor    eax,eax
   1513d:	xor    r9d,r9d
   15140:	mov    esi,0xffffffff
   15145:	rep stos QWORD PTR es:[rdi],rax
   15148:	lea    rax,[rip+0x7090]        # 1c1df <__PRETTY_FUNCTION__.13304+0x8f>
   1514f:	push   0x70
   15151:	mov    ecx,0xfffffff4
   15156:	mov    r8d,0x9
   1515c:	mov    edx,0x8
   15161:	mov    rdi,rbx
   15164:	push   rax
   15165:	call   3080 <deflateInit2_@plt>
   1516a:	test   eax,eax
   1516c:	mov    DWORD PTR [rsp+0x3c],eax
   15170:	pop    rcx
   15171:	pop    rsi
   15172:	jne    1557b <qcow_write_compressed+0x4bb>
   15178:	mov    eax,DWORD PTR [r13+0xc]
   1517c:	mov    esi,0x4
   15181:	mov    rdi,rbx
   15184:	mov    QWORD PTR [rsp+0x60],r14
   15189:	mov    DWORD PTR [rsp+0x68],eax
   1518d:	mov    DWORD PTR [rsp+0x80],eax
   15194:	mov    rax,QWORD PTR [rsp+0x18]
   15199:	mov    QWORD PTR [rsp+0x78],rax
   1519e:	call   3010 <deflate@plt>
   151a3:	cmp    eax,0x1
   151a6:	mov    r12d,eax
   151a9:	ja     15592 <qcow_write_compressed+0x4d2>
   151af:	mov    rax,QWORD PTR [rsp+0x78]
   151b4:	mov    rdi,rbx
   151b7:	mov    QWORD PTR [rsp],rax
   151bb:	call   3270 <deflateEnd@plt>
   151c0:	cmp    r12d,0x1
   151c4:	jne    15378 <qcow_write_compressed+0x2b8>
   151ca:	mov    r12,QWORD PTR [rsp]
   151ce:	sub    r12,QWORD PTR [rsp+0x18]
   151d3:	cmp    DWORD PTR [r13+0xc],r12d
   151d7:	mov    rbx,QWORD PTR [r15+0x40]
   151db:	mov    DWORD PTR [rsp],r12d
   151df:	jg     153d0 <qcow_write_compressed+0x310>
   151e5:	mov    r12d,DWORD PTR [r13+0x10]
   151e9:	test   r12d,r12d
   151ec:	jle    153b8 <qcow_write_compressed+0x2f8>
   151f2:	lea    rax,[rsp+0x40]
   151f7:	mov    QWORD PTR [rsp],rax
   151fb:	lea    rax,[rsp+0x38]
   15200:	mov    QWORD PTR [rsp+0x10],rax
   15205:	lea    rax,[rbx+0x168]
   1520c:	mov    QWORD PTR [rsp+0x20],rax
   15211:	jmp    152a5 <qcow_write_compressed+0x1e5>
   15216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15220:	mov    rsi,QWORD PTR [rbx+0x118]
   15227:	mov    r9,QWORD PTR [rsp+0x20]
   1522c:	mov    r8d,0x1
   15232:	mov    rdx,r14
   15235:	mov    rdi,rbp
   15238:	mov    QWORD PTR [rsp+0x8],r10
   1523d:	call   12470 <encrypt_sectors.isra.13>
   15242:	mov    ecx,DWORD PTR [rsp+0x38]
   15246:	mov    r10,QWORD PTR [rsp+0x8]
   1524b:	mov    rdx,QWORD PTR [rbx+0x118]
   15252:	mov    rdi,QWORD PTR [rbx]
   15255:	shl    ecx,0x9
   15258:	mov    rsi,r10
   1525b:	call   180f0 <bdrv_pwrite>
   15260:	mov    edx,DWORD PTR [rsp+0x38]
   15264:	shl    edx,0x9
   15267:	cmp    edx,eax
   15269:	jne    1532e <qcow_write_compressed+0x26e>
   1526f:	mov    rdx,QWORD PTR [rsp]
   15273:	mov    rsi,r13
   15276:	mov    rdi,r15
   15279:	call   13fa0 <alloc_cluster_link_l2>
   1527e:	test   eax,eax
   15280:	js     1532e <qcow_write_compressed+0x26e>
   15286:	movsxd rdx,DWORD PTR [rsp+0x38]
   1528b:	mov    rax,rdx
   1528e:	sub    r12d,edx
   15291:	add    rbp,rdx
   15294:	shl    eax,0x9
   15297:	cdqe   
   15299:	add    r14,rax
   1529c:	test   r12d,r12d
   1529f:	jle    153b8 <qcow_write_compressed+0x2f8>
   152a5:	mov    eax,DWORD PTR [rbx+0x10]
   152a8:	mov    edx,DWORD PTR [rbx+0x160]
   152ae:	lea    r10d,[rax-0x1]
   152b2:	and    r10d,ebp
   152b5:	test   edx,edx
   152b7:	lea    ecx,[r10+r12*1]
   152bb:	je     152c5 <qcow_write_compressed+0x205>
   152bd:	shl    eax,0x5
   152c0:	cmp    ecx,eax
   152c2:	cmovg  ecx,eax
   152c5:	mov    r9,QWORD PTR [rsp]
   152c9:	mov    r8,QWORD PTR [rsp+0x10]
   152ce:	mov    rsi,rbp
   152d1:	shl    rsi,0x9
   152d5:	mov    edx,r10d
   152d8:	mov    rdi,r15
   152db:	mov    DWORD PTR [rsp+0x8],r10d
   152e0:	call   13d60 <alloc_cluster_offset>
   152e5:	test   rax,rax
   152e8:	mov    r13,rax
   152eb:	je     1533d <qcow_write_compressed+0x27d>
   152ed:	mov    r10d,DWORD PTR [rsp+0x8]
   152f2:	mov    ecx,DWORD PTR [rsp+0x38]
   152f6:	shl    r10d,0x9
   152fa:	movsxd r10,r10d
   152fd:	add    r10,rax
   15300:	mov    eax,DWORD PTR [rbx+0x160]
   15306:	test   eax,eax
   15308:	jne    15220 <qcow_write_compressed+0x160>
   1530e:	mov    rdi,QWORD PTR [rbx]
   15311:	shl    ecx,0x9
   15314:	mov    rdx,r14
   15317:	mov    rsi,r10
   1531a:	call   180f0 <bdrv_pwrite>
   1531f:	mov    edx,DWORD PTR [rsp+0x38]
   15323:	shl    edx,0x9
   15326:	cmp    edx,eax
   15328:	je     1526f <qcow_write_compressed+0x1af>
   1532e:	mov    edx,DWORD PTR [rsp+0x50]
   15332:	mov    rsi,r13
   15335:	mov    rdi,r15
   15338:	call   138c0 <free_any_clusters>
   1533d:	mov    rdi,QWORD PTR [rsp+0x18]
   15342:	call   49c0 <qemu_free>
   15347:	mov    rdi,QWORD PTR [rsp+0xd8]
   1534f:	xor    rdi,QWORD PTR fs:0x28
   15358:	mov    eax,DWORD PTR [rsp+0x2c]
   1535c:	jne    1563b <qcow_write_compressed+0x57b>
   15362:	add    rsp,0xe8
   15369:	pop    rbx
   1536a:	pop    rbp
   1536b:	pop    r12
   1536d:	pop    r13
   1536f:	pop    r14
   15371:	pop    r15
   15373:	ret    
   15374:	nop    DWORD PTR [rax+0x0]
   15378:	mov    rbx,QWORD PTR [r15+0x40]
   1537c:	jmp    151e5 <qcow_write_compressed+0x125>
   15381:	nop    DWORD PTR [rax+0x0]
   15388:	mov    rdi,QWORD PTR [r13+0x0]
   1538c:	call   181a0 <bdrv_getlength>
   15391:	mov    rdi,QWORD PTR [r13+0x0]
   15395:	lea    rsi,[rax+0x1ff]
   1539c:	and    rsi,0xfffffffffffffe00
   153a3:	call   18170 <bdrv_truncate>
   153a8:	mov    DWORD PTR [rsp+0x2c],0x0
   153b0:	jmp    15347 <qcow_write_compressed+0x287>
   153b2:	nop    WORD PTR [rax+rax*1+0x0]
   153b8:	mov    QWORD PTR [rbx+0x120],0xffffffffffffffff
   153c3:	jmp    1533d <qcow_write_compressed+0x27d>
   153c8:	nop    DWORD PTR [rax+rax*1+0x0]
   153d0:	lea    rcx,[rsp+0x38]
   153d5:	lea    rdx,[rsp+0x40]
   153da:	mov    rsi,rbp
   153dd:	lea    r8,[rsp+0x34]
   153e2:	shl    rsi,0x9
   153e6:	mov    rdi,r15
   153e9:	call   13ad0 <get_cluster_table>
   153ee:	test   eax,eax
   153f0:	jne    15410 <qcow_write_compressed+0x350>
   153f2:	mov    DWORD PTR [rsp+0x2c],0xffffffff
   153fa:	jmp    15347 <qcow_write_compressed+0x287>
   153ff:	nop
   15400:	mov    DWORD PTR [rsp+0x2c],0xffffffea
   15408:	jmp    15347 <qcow_write_compressed+0x287>
   1540d:	nop    DWORD PTR [rax]
   15410:	movsxd rdx,DWORD PTR [rsp+0x34]
   15415:	mov    rax,QWORD PTR [rsp+0x40]
   1541a:	mov    rsi,QWORD PTR [rax+rdx*8]
   1541e:	bswap  rsi
   15421:	test   rsi,rsi
   15424:	js     155f7 <qcow_write_compressed+0x537>
   1542a:	je     15439 <qcow_write_compressed+0x379>
   1542c:	mov    edx,0x1
   15431:	mov    rdi,r15
   15434:	call   138c0 <free_any_clusters>
   15439:	test   r12d,r12d
   1543c:	mov    r14,QWORD PTR [r15+0x40]
   15440:	jle    15640 <qcow_write_compressed+0x580>
   15446:	movsxd rsi,DWORD PTR [r14+0xc]
   1544a:	cmp    r12d,esi
   1544d:	jg     15640 <qcow_write_compressed+0x580>
   15453:	mov    rbp,QWORD PTR [r14+0x158]
   1545a:	test   rbp,rbp
   1545d:	je     15610 <qcow_write_compressed+0x550>
   15463:	lea    ecx,[rsi-0x1]
   15466:	mov    edx,esi
   15468:	mov    eax,ecx
   1546a:	and    eax,ebp
   1546c:	sub    edx,eax
   1546e:	cmp    r12d,edx
   15471:	jle    155b4 <qcow_write_compressed+0x4f4>
   15477:	mov    ebp,r12d
   1547a:	jmp    15498 <qcow_write_compressed+0x3d8>
   1547c:	nop    DWORD PTR [rax+0x0]
   15480:	lea    ecx,[rsi-0x1]
   15483:	mov    QWORD PTR [r14+0x158],rax
   1548a:	mov    edi,ecx
   1548c:	and    edi,eax
   1548e:	sub    edx,edi
   15490:	cmp    ebp,edx
   15492:	jle    155b1 <qcow_write_compressed+0x4f1>
   15498:	mov    rdi,r15
   1549b:	call   13910 <alloc_clusters>
   154a0:	movsxd rsi,DWORD PTR [r14+0xc]
   154a4:	mov    r8,QWORD PTR [r14+0x158]
   154ab:	mov    ecx,esi
   154ad:	mov    rdx,rsi
   154b0:	neg    ecx
   154b2:	movsxd rcx,ecx
   154b5:	and    rcx,r8
   154b8:	add    rcx,rsi
   154bb:	cmp    rax,rcx
   154be:	jne    15480 <qcow_write_compressed+0x3c0>
   154c0:	mov    ecx,DWORD PTR [r14+0x8]
   154c4:	mov    rsi,r8
   154c7:	mov    edx,0x1
   154cc:	mov    rdi,r15
   154cf:	mov    QWORD PTR [rsp],r8
   154d3:	sar    rsi,cl
   154d6:	call   133d0 <update_cluster_refcount>
   154db:	movsxd r9,r12d
   154de:	mov    r8,QWORD PTR [rsp]
   154e2:	add    QWORD PTR [r14+0x158],r9
   154e9:	mov    rbp,r8
   154ec:	lea    rsi,[rbp+r9*1-0x1]
   154f1:	mov    rax,rbp
   154f4:	mov    ecx,DWORD PTR [rbx+0x24]
   154f7:	shr    rax,0x9
   154fb:	movsxd rdx,DWORD PTR [rsp+0x34]
   15500:	shr    rsi,0x9
   15504:	sub    esi,eax
   15506:	movabs rax,0x4000000000000000
   15510:	movsxd rsi,esi
   15513:	or     rbp,rax
   15516:	mov    rax,QWORD PTR [rsp+0x40]
   1551b:	shl    rsi,cl
   1551e:	or     rbp,rsi
   15521:	mov    rcx,rbp
   15524:	bswap  rcx
   15527:	mov    QWORD PTR [rax+rdx*8],rcx
   1552b:	movsxd rax,DWORD PTR [rsp+0x34]
   15530:	mov    ecx,0x8
   15535:	mov    rdx,QWORD PTR [rsp+0x40]
   1553a:	mov    rdi,QWORD PTR [rbx]
   1553d:	shl    rax,0x3
   15541:	add    rdx,rax
   15544:	add    rax,QWORD PTR [rsp+0x38]
   15549:	mov    rsi,rax
   1554c:	call   180f0 <bdrv_pwrite>
   15551:	cmp    eax,0x8
   15554:	jne    153f2 <qcow_write_compressed+0x332>
   1555a:	mov    rsi,QWORD PTR [r13+0x30]
   1555e:	mov    rdx,QWORD PTR [rsp+0x18]
   15563:	mov    ecx,r12d
   15566:	mov    rdi,QWORD PTR [r13+0x0]
   1556a:	and    rsi,rbp
   1556d:	call   180f0 <bdrv_pwrite>
   15572:	cmp    eax,r12d
   15575:	je     1533d <qcow_write_compressed+0x27d>
   1557b:	mov    rdi,QWORD PTR [rsp+0x18]
   15580:	call   49c0 <qemu_free>
   15585:	mov    DWORD PTR [rsp+0x2c],0xffffffff
   1558d:	jmp    15347 <qcow_write_compressed+0x287>
   15592:	mov    rdi,QWORD PTR [rsp+0x18]
   15597:	call   49c0 <qemu_free>
   1559c:	mov    rdi,rbx
   1559f:	call   3270 <deflateEnd@plt>
   155a4:	mov    DWORD PTR [rsp+0x2c],0xffffffff
   155ac:	jmp    15347 <qcow_write_compressed+0x287>
   155b1:	mov    rbp,rax
   155b4:	cmp    r12d,edx
   155b7:	je     1562b <qcow_write_compressed+0x56b>
   155b9:	movsxd r9,r12d
   155bc:	lea    rax,[r9+rbp*1]
   155c0:	mov    QWORD PTR [r14+0x158],rax
   155c7:	movsxd rcx,ecx
   155ca:	test   rcx,rbp
   155cd:	je     154ec <qcow_write_compressed+0x42c>
   155d3:	mov    ecx,DWORD PTR [r14+0x8]
   155d7:	mov    rsi,rbp
   155da:	mov    edx,0x1
   155df:	mov    rdi,r15
   155e2:	mov    QWORD PTR [rsp],r9
   155e6:	sar    rsi,cl
   155e9:	call   133d0 <update_cluster_refcount>
   155ee:	mov    r9,QWORD PTR [rsp]
   155f2:	jmp    154ec <qcow_write_compressed+0x42c>
   155f7:	movabs rbp,0x7fffffffffffffff
   15601:	and    rbp,rsi
   15604:	jne    1555a <qcow_write_compressed+0x49a>
   1560a:	jmp    153f2 <qcow_write_compressed+0x332>
   1560f:	nop
   15610:	mov    rdi,r15
   15613:	call   13910 <alloc_clusters>
   15618:	movsxd rsi,DWORD PTR [r14+0xc]
   1561c:	mov    rbp,rax
   1561f:	mov    QWORD PTR [r14+0x158],rax
   15626:	jmp    15463 <qcow_write_compressed+0x3a3>
   1562b:	mov    QWORD PTR [r14+0x158],0x0
   15636:	movsxd r9,r12d
   15639:	jmp    155c7 <qcow_write_compressed+0x507>
   1563b:	call   2f70 <__stack_chk_fail@plt>
   15640:	lea    rcx,[rip+0xa209]        # 1f850 <__PRETTY_FUNCTION__.14737>
   15647:	lea    rsi,[rip+0xa18a]        # 1f7d8 <__PRETTY_FUNCTION__.14134+0x38>
   1564e:	lea    rdi,[rip+0xa1cb]        # 1f820 <__PRETTY_FUNCTION__.14134+0x80>
   15655:	mov    edx,0x8bd
   1565a:	call   3000 <__assert_fail@plt>
   1565f:	nop

0000000000015660 <parallels_close>:
   15660:	push   rbx
   15661:	mov    rbx,QWORD PTR [rdi+0x40]
   15665:	mov    rdi,QWORD PTR [rbx+0x8]
   15669:	call   49c0 <qemu_free>
   1566e:	mov    edi,DWORD PTR [rbx]
   15670:	pop    rbx
   15671:	jmp    3040 <close@plt>
   15676:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000015680 <parallels_read>:
   15680:	push   r15
   15682:	push   r14
   15684:	push   r13
   15686:	push   r12
   15688:	push   rbp
   15689:	push   rbx
   1568a:	mov    rbx,rdx
   1568d:	sub    rsp,0x18
   15691:	mov    rdx,QWORD PTR [rdi+0x40]
   15695:	test   ecx,ecx
   15697:	mov    QWORD PTR [rsp+0x8],rdx
   1569c:	jle    15760 <parallels_read+0xe0>
   156a2:	lea    eax,[rcx-0x1]
   156a5:	mov    r13,rdi
   156a8:	mov    r12,rsi
   156ab:	mov    rcx,rdx
   156ae:	xor    r15d,r15d
   156b1:	lea    r14,[rsi+rax*1+0x1]
   156b6:	jmp    15703 <parallels_read+0x83>
   156b8:	nop    DWORD PTR [rax+rax*1+0x0]
   156c0:	lea    rdi,[rbx+0x8]
   156c4:	mov    rcx,rbx
   156c7:	mov    rax,r15
   156ca:	mov    QWORD PTR [rbx],0x0
   156d1:	mov    QWORD PTR [rbx+0x1f8],0x0
   156dc:	and    rdi,0xfffffffffffffff8
   156e0:	sub    rcx,rdi
   156e3:	add    ecx,0x200
   156e9:	shr    ecx,0x3
   156ec:	rep stos QWORD PTR es:[rdi],rax
   156ef:	add    r12,0x1
   156f3:	add    rbx,0x200
   156fa:	cmp    r12,r14
   156fd:	je     15760 <parallels_read+0xe0>
   156ff:	mov    rcx,QWORD PTR [r13+0x40]
   15703:	movsxd rsi,DWORD PTR [rcx+0x14]
   15707:	mov    rax,r12
   1570a:	cqo    
   1570c:	idiv   rsi
   1570f:	cmp    DWORD PTR [rcx+0x10],eax
   15712:	jb     156c0 <parallels_read+0x40>
   15714:	mov    rsi,QWORD PTR [rcx+0x8]
   15718:	mov    eax,eax
   1571a:	mov    eax,DWORD PTR [rsi+rax*4]
   1571d:	test   eax,eax
   1571f:	je     156c0 <parallels_read+0x40>
   15721:	add    eax,edx
   15723:	mov    edi,DWORD PTR [rcx]
   15725:	xor    edx,edx
   15727:	shl    eax,0x9
   1572a:	mov    ebp,eax
   1572c:	mov    rsi,rbp
   1572f:	call   33f0 <lseek64@plt>
   15734:	cmp    rbp,rax
   15737:	jne    156c0 <parallels_read+0x40>
   15739:	mov    rax,QWORD PTR [rsp+0x8]
   1573e:	mov    edx,0x200
   15743:	mov    rsi,rbx
   15746:	mov    edi,DWORD PTR [rax]
   15748:	call   4300 <qemu_read_ok>
   1574d:	test   eax,eax
   1574f:	jns    156ef <parallels_read+0x6f>
   15751:	mov    eax,0xffffffff
   15756:	jmp    15762 <parallels_read+0xe2>
   15758:	nop    DWORD PTR [rax+rax*1+0x0]
   15760:	xor    eax,eax
   15762:	add    rsp,0x18
   15766:	pop    rbx
   15767:	pop    rbp
   15768:	pop    r12
   1576a:	pop    r13
   1576c:	pop    r14
   1576e:	pop    r15
   15770:	ret    
   15771:	nop    DWORD PTR [rax+rax*1+0x0]
   15776:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000015780 <parallels_open>:
   15780:	push   r13
   15782:	push   r12
   15784:	mov    r12,rsi
   15787:	push   rbp
   15788:	push   rbx
   15789:	mov    r13,rdi
   1578c:	mov    esi,0x2
   15791:	sub    rsp,0x58
   15795:	mov    rbx,QWORD PTR [rdi+0x40]
   15799:	mov    rdi,r12
   1579c:	mov    rax,QWORD PTR fs:0x28
   157a5:	mov    QWORD PTR [rsp+0x48],rax
   157aa:	xor    eax,eax
   157ac:	call   32e0 <open64@plt>
   157b1:	test   eax,eax
   157b3:	mov    ebp,eax
   157b5:	js     158b8 <parallels_open+0x138>
   157bb:	mov    DWORD PTR [r13+0x8],0x1
   157c3:	mov    rsi,rsp
   157c6:	mov    DWORD PTR [rbx],ebp
   157c8:	mov    edx,0x40
   157cd:	mov    edi,ebp
   157cf:	call   4300 <qemu_read_ok>
   157d4:	test   eax,eax
   157d6:	js     15898 <parallels_open+0x118>
   157dc:	movabs rdx,0x6563617053656572
   157e6:	movabs rax,0x4674756f68746957
   157f0:	xor    rdx,QWORD PTR [rsp+0x8]
   157f5:	xor    rax,QWORD PTR [rsp]
   157f9:	or     rdx,rax
   157fc:	jne    15898 <parallels_open+0x118>
   15802:	xor    r12d,r12d
   15805:	cmp    DWORD PTR [rsp+0x10],0x2
   1580a:	jne    15898 <parallels_open+0x118>
   15810:	mov    eax,DWORD PTR [rsp+0x24]
   15814:	xor    edx,edx
   15816:	mov    esi,0x40
   1581b:	mov    QWORD PTR [r13+0x0],rax
   1581f:	mov    edi,DWORD PTR [rbx]
   15821:	call   33f0 <lseek64@plt>
   15826:	cmp    rax,0x40
   1582a:	jne    15898 <parallels_open+0x118>
   1582c:	mov    eax,DWORD PTR [rsp+0x1c]
   15830:	mov    DWORD PTR [rbx+0x14],eax
   15833:	mov    edi,DWORD PTR [rsp+0x20]
   15837:	mov    DWORD PTR [rbx+0x10],edi
   1583a:	shl    edi,0x2
   1583d:	movsxd rdi,edi
   15840:	call   49d0 <qemu_malloc>
   15845:	test   rax,rax
   15848:	mov    QWORD PTR [rbx+0x8],rax
   1584c:	je     158a6 <parallels_open+0x126>
   1584e:	mov    ecx,DWORD PTR [rbx+0x10]
   15851:	mov    edi,DWORD PTR [rbx]
   15853:	mov    rsi,rax
   15856:	lea    edx,[rcx*4+0x0]
   1585d:	movsxd rdx,edx
   15860:	call   30a0 <read@plt>
   15865:	mov    ecx,DWORD PTR [rbx+0x10]
   15868:	lea    edx,[rcx*4+0x0]
   1586f:	movsxd rdx,edx
   15872:	cmp    rdx,rax
   15875:	jne    15898 <parallels_open+0x118>
   15877:	mov    rcx,QWORD PTR [rsp+0x48]
   1587c:	xor    rcx,QWORD PTR fs:0x28
   15885:	mov    eax,r12d
   15888:	jne    158d6 <parallels_open+0x156>
   1588a:	add    rsp,0x58
   1588e:	pop    rbx
   1588f:	pop    rbp
   15890:	pop    r12
   15892:	pop    r13
   15894:	ret    
   15895:	nop    DWORD PTR [rax]
   15898:	mov    rdi,QWORD PTR [rbx+0x8]
   1589c:	test   rdi,rdi
   1589f:	je     158a6 <parallels_open+0x126>
   158a1:	call   49c0 <qemu_free>
   158a6:	mov    edi,ebp
   158a8:	mov    r12d,0xffffffff
   158ae:	call   3040 <close@plt>
   158b3:	jmp    15877 <parallels_open+0xf7>
   158b5:	nop    DWORD PTR [rax]
   158b8:	xor    esi,esi
   158ba:	xor    eax,eax
   158bc:	mov    rdi,r12
   158bf:	call   32e0 <open64@plt>
   158c4:	test   eax,eax
   158c6:	mov    ebp,eax
   158c8:	jns    157bb <parallels_open+0x3b>
   158ce:	mov    r12d,0xffffffff
   158d4:	jmp    15877 <parallels_open+0xf7>
   158d6:	call   2f70 <__stack_chk_fail@plt>
   158db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000158e0 <parallels_probe>:
   158e0:	xor    eax,eax
   158e2:	cmp    esi,0x3f
   158e5:	jle    15909 <parallels_probe+0x29>
   158e7:	movabs rcx,0x6563617053656572
   158f1:	movabs rdx,0x4674756f68746957
   158fb:	xor    rcx,QWORD PTR [rdi+0x8]
   158ff:	xor    rdx,QWORD PTR [rdi]
   15902:	or     rcx,rdx
   15905:	je     15910 <parallels_probe+0x30>
   15907:	xor    eax,eax
   15909:	repz ret 
   1590b:	nop    DWORD PTR [rax+rax*1+0x0]
   15910:	cmp    DWORD PTR [rdi+0x10],0x2
   15914:	mov    edx,0x64
   15919:	cmove  eax,edx
   1591c:	ret    
   1591d:	nop    DWORD PTR [rax]

0000000000015920 <nbd_getlength>:
   15920:	mov    rax,QWORD PTR [rdi+0x40]
   15924:	mov    rax,QWORD PTR [rax+0x8]
   15928:	ret    
   15929:	nop    DWORD PTR [rax+0x0]

0000000000015930 <nbd_close>:
   15930:	push   rbx
   15931:	sub    rsp,0x30
   15935:	mov    rbx,QWORD PTR [rdi+0x40]
   15939:	mov    DWORD PTR [rsp],0x2
   15940:	mov    QWORD PTR [rsp+0x8],rdi
   15945:	mov    rsi,rsp
   15948:	mov    QWORD PTR [rsp+0x10],0x0
   15951:	mov    DWORD PTR [rsp+0x18],0x0
   15959:	mov    edi,DWORD PTR [rbx]
   1595b:	mov    rax,QWORD PTR fs:0x28
   15964:	mov    QWORD PTR [rsp+0x28],rax
   15969:	xor    eax,eax
   1596b:	call   16560 <nbd_send_request>
   15970:	mov    edi,DWORD PTR [rbx]
   15972:	call   3040 <close@plt>
   15977:	mov    rax,QWORD PTR [rsp+0x28]
   1597c:	xor    rax,QWORD PTR fs:0x28
   15985:	jne    1598d <nbd_close+0x5d>
   15987:	add    rsp,0x30
   1598b:	pop    rbx
   1598c:	ret    
   1598d:	call   2f70 <__stack_chk_fail@plt>
   15992:	nop    DWORD PTR [rax+0x0]
   15996:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000159a0 <nbd_write>:
   159a0:	push   rbp
   159a1:	push   rbx
   159a2:	shl    rsi,0x9
   159a6:	shl    ecx,0x9
   159a9:	mov    rbp,rdx
   159ac:	sub    rsp,0x48
   159b0:	mov    rbx,QWORD PTR [rdi+0x40]
   159b4:	mov    QWORD PTR [rsp+0x20],rsi
   159b9:	mov    DWORD PTR [rsp+0x10],0x1
   159c1:	lea    rsi,[rsp+0x10]
   159c6:	mov    QWORD PTR [rsp+0x18],rdi
   159cb:	mov    DWORD PTR [rsp+0x28],ecx
   159cf:	mov    edi,DWORD PTR [rbx]
   159d1:	mov    rax,QWORD PTR fs:0x28
   159da:	mov    QWORD PTR [rsp+0x38],rax
   159df:	xor    eax,eax
   159e1:	call   16560 <nbd_send_request>
   159e6:	cmp    eax,0xffffffff
   159e9:	je     15a30 <nbd_write+0x90>
   159eb:	mov    edx,DWORD PTR [rsp+0x28]
   159ef:	mov    edi,DWORD PTR [rbx]
   159f1:	xor    ecx,ecx
   159f3:	mov    rsi,rbp
   159f6:	call   15cb0 <nbd_wr_sync>
   159fb:	mov    edx,DWORD PTR [rsp+0x28]
   159ff:	cmp    rax,rdx
   15a02:	jne    15a58 <nbd_write+0xb8>
   15a04:	mov    edi,DWORD PTR [rbx]
   15a06:	mov    rsi,rsp
   15a09:	call   16620 <nbd_receive_reply>
   15a0e:	cmp    eax,0xffffffff
   15a11:	je     15a30 <nbd_write+0x90>
   15a13:	mov    eax,DWORD PTR [rsp]
   15a16:	test   eax,eax
   15a18:	jne    15a50 <nbd_write+0xb0>
   15a1a:	mov    rax,QWORD PTR [rsp+0x18]
   15a1f:	cmp    QWORD PTR [rsp+0x8],rax
   15a24:	jne    15a58 <nbd_write+0xb8>
   15a26:	xor    eax,eax
   15a28:	jmp    15a39 <nbd_write+0x99>
   15a2a:	nop    WORD PTR [rax+rax*1+0x0]
   15a30:	call   2e80 <__errno_location@plt>
   15a35:	mov    eax,DWORD PTR [rax]
   15a37:	neg    eax
   15a39:	mov    rbx,QWORD PTR [rsp+0x38]
   15a3e:	xor    rbx,QWORD PTR fs:0x28
   15a47:	jne    15a5f <nbd_write+0xbf>
   15a49:	add    rsp,0x48
   15a4d:	pop    rbx
   15a4e:	pop    rbp
   15a4f:	ret    
   15a50:	neg    eax
   15a52:	jmp    15a39 <nbd_write+0x99>
   15a54:	nop    DWORD PTR [rax+0x0]
   15a58:	mov    eax,0xfffffffb
   15a5d:	jmp    15a39 <nbd_write+0x99>
   15a5f:	call   2f70 <__stack_chk_fail@plt>
   15a64:	xchg   ax,ax
   15a66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000015a70 <nbd_read>:
   15a70:	push   rbp
   15a71:	push   rbx
   15a72:	shl    rsi,0x9
   15a76:	shl    ecx,0x9
   15a79:	mov    rbp,rdx
   15a7c:	sub    rsp,0x48
   15a80:	mov    rbx,QWORD PTR [rdi+0x40]
   15a84:	mov    QWORD PTR [rsp+0x20],rsi
   15a89:	mov    DWORD PTR [rsp+0x10],0x0
   15a91:	lea    rsi,[rsp+0x10]
   15a96:	mov    QWORD PTR [rsp+0x18],rdi
   15a9b:	mov    DWORD PTR [rsp+0x28],ecx
   15a9f:	mov    edi,DWORD PTR [rbx]
   15aa1:	mov    rax,QWORD PTR fs:0x28
   15aaa:	mov    QWORD PTR [rsp+0x38],rax
   15aaf:	xor    eax,eax
   15ab1:	call   16560 <nbd_send_request>
   15ab6:	cmp    eax,0xffffffff
   15ab9:	je     15b00 <nbd_read+0x90>
   15abb:	mov    edi,DWORD PTR [rbx]
   15abd:	mov    rsi,rsp
   15ac0:	call   16620 <nbd_receive_reply>
   15ac5:	cmp    eax,0xffffffff
   15ac8:	je     15b00 <nbd_read+0x90>
   15aca:	mov    eax,DWORD PTR [rsp]
   15acd:	test   eax,eax
   15acf:	jne    15b20 <nbd_read+0xb0>
   15ad1:	mov    rax,QWORD PTR [rsp+0x18]
   15ad6:	cmp    QWORD PTR [rsp+0x8],rax
   15adb:	jne    15b28 <nbd_read+0xb8>
   15add:	mov    edx,DWORD PTR [rsp+0x28]
   15ae1:	mov    edi,DWORD PTR [rbx]
   15ae3:	mov    ecx,0x1
   15ae8:	mov    rsi,rbp
   15aeb:	call   15cb0 <nbd_wr_sync>
   15af0:	mov    edx,DWORD PTR [rsp+0x28]
   15af4:	cmp    rax,rdx
   15af7:	jne    15b28 <nbd_read+0xb8>
   15af9:	xor    eax,eax
   15afb:	jmp    15b09 <nbd_read+0x99>
   15afd:	nop    DWORD PTR [rax]
   15b00:	call   2e80 <__errno_location@plt>
   15b05:	mov    eax,DWORD PTR [rax]
   15b07:	neg    eax
   15b09:	mov    rdx,QWORD PTR [rsp+0x38]
   15b0e:	xor    rdx,QWORD PTR fs:0x28
   15b17:	jne    15b2f <nbd_read+0xbf>
   15b19:	add    rsp,0x48
   15b1d:	pop    rbx
   15b1e:	pop    rbp
   15b1f:	ret    
   15b20:	neg    eax
   15b22:	jmp    15b09 <nbd_read+0x99>
   15b24:	nop    DWORD PTR [rax+0x0]
   15b28:	mov    eax,0xfffffffb
   15b2d:	jmp    15b09 <nbd_read+0x99>
   15b2f:	call   2f70 <__stack_chk_fail@plt>
   15b34:	xchg   ax,ax
   15b36:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000015b40 <nbd_open>:
   15b40:	push   r13
   15b42:	push   r12
   15b44:	push   rbp
   15b45:	push   rbx
   15b46:	mov    ebx,edx
   15b48:	sub    rsp,0xb8
   15b4f:	mov    r12,QWORD PTR [rdi+0x40]
   15b53:	mov    rax,QWORD PTR fs:0x28
   15b5c:	mov    QWORD PTR [rsp+0xa8],rax
   15b64:	xor    eax,eax
   15b66:	and    ebx,0x4
   15b69:	jne    15ca0 <nbd_open+0x160>
   15b6f:	mov    rcx,rsi
   15b72:	lea    rsi,[rip+0x9d1b]        # 1f894 <__PRETTY_FUNCTION__.14546+0x34>
   15b79:	mov    rdx,rsp
   15b7c:	mov    rdi,rcx
   15b7f:	call   4660 <strstart>
   15b84:	test   eax,eax
   15b86:	je     15ca0 <nbd_open+0x160>
   15b8c:	mov    rdi,QWORD PTR [rsp]
   15b90:	lea    rdx,[rsp+0x8]
   15b95:	lea    rsi,[rip+0x9cfd]        # 1f899 <__PRETTY_FUNCTION__.14546+0x39>
   15b9c:	call   4660 <strstart>
   15ba1:	test   eax,eax
   15ba3:	je     15c40 <nbd_open+0x100>
   15ba9:	mov    rdi,QWORD PTR [rsp+0x8]
   15bae:	cmp    BYTE PTR [rdi],0x2f
   15bb1:	jne    15ca0 <nbd_open+0x160>
   15bb7:	call   160a0 <unix_socket_outgoing>
   15bbc:	mov    ebp,eax
   15bbe:	cmp    ebp,0xffffffff
   15bc1:	je     15c30 <nbd_open+0xf0>
   15bc3:	lea    rdx,[rsp+0x18]
   15bc8:	lea    rsi,[rsp+0x10]
   15bcd:	mov    edi,ebp
   15bcf:	call   16240 <nbd_receive_negotiate>
   15bd4:	cmp    eax,0xffffffff
   15bd7:	je     15c20 <nbd_open+0xe0>
   15bd9:	mov    DWORD PTR [r12],ebp
   15bdd:	mov    rax,QWORD PTR [rsp+0x10]
   15be2:	mov    QWORD PTR [r12+0x8],rax
   15be7:	mov    rax,QWORD PTR [rsp+0x18]
   15bec:	mov    QWORD PTR [r12+0x10],rax
   15bf1:	mov    rcx,QWORD PTR [rsp+0xa8]
   15bf9:	xor    rcx,QWORD PTR fs:0x28
   15c02:	mov    eax,ebx
   15c04:	jne    15caa <nbd_open+0x16a>
   15c0a:	add    rsp,0xb8
   15c11:	pop    rbx
   15c12:	pop    rbp
   15c13:	pop    r12
   15c15:	pop    r13
   15c17:	ret    
   15c18:	nop    DWORD PTR [rax+rax*1+0x0]
   15c20:	mov    edi,ebp
   15c22:	call   3040 <close@plt>
   15c27:	nop    WORD PTR [rax+rax*1+0x0]
   15c30:	call   2e80 <__errno_location@plt>
   15c35:	mov    eax,DWORD PTR [rax]
   15c37:	neg    eax
   15c39:	mov    ebx,eax
   15c3b:	jmp    15bf1 <nbd_open+0xb1>
   15c3d:	nop    DWORD PTR [rax]
   15c40:	lea    r13,[rsp+0x20]
   15c45:	mov    rdx,QWORD PTR [rsp]
   15c49:	mov    esi,0x80
   15c4e:	mov    rdi,r13
   15c51:	call   45a0 <pstrcpy>
   15c56:	mov    esi,0x3a
   15c5b:	mov    rdi,r13
   15c5e:	call   2fb0 <strchr@plt>
   15c63:	test   rax,rax
   15c66:	je     15ca0 <nbd_open+0x160>
   15c68:	lea    rbp,[rax+0x1]
   15c6c:	lea    rsi,[rsp+0x18]
   15c71:	xor    edx,edx
   15c73:	mov    BYTE PTR [rax],0x0
   15c76:	mov    rdi,rbp
   15c79:	call   3170 <strtol@plt>
   15c7e:	cmp    QWORD PTR [rsp+0x18],rbp
   15c83:	je     15ca0 <nbd_open+0x160>
   15c85:	movzx  esi,ax
   15c88:	mov    rdi,r13
   15c8b:	call   15dd0 <tcp_socket_outgoing>
   15c90:	mov    ebp,eax
   15c92:	jmp    15bbe <nbd_open+0x7e>
   15c97:	nop    WORD PTR [rax+rax*1+0x0]
   15ca0:	mov    ebx,0xffffffea
   15ca5:	jmp    15bf1 <nbd_open+0xb1>
   15caa:	call   2f70 <__stack_chk_fail@plt>
   15caf:	nop

0000000000015cb0 <nbd_wr_sync>:
   15cb0:	test   rdx,rdx
   15cb3:	push   r14
   15cb5:	push   r13
   15cb7:	push   r12
   15cb9:	push   rbp
   15cba:	push   rbx
   15cbb:	je     15d0e <nbd_wr_sync+0x5e>
   15cbd:	mov    r12d,ecx
   15cc0:	mov    rbp,rdx
   15cc3:	mov    r13,rsi
   15cc6:	mov    r14d,edi
   15cc9:	xor    ebx,ebx
   15ccb:	jmp    15cdd <nbd_wr_sync+0x2d>
   15ccd:	nop    DWORD PTR [rax]
   15cd0:	test   rax,rax
   15cd3:	je     15d10 <nbd_wr_sync+0x60>
   15cd5:	add    rbx,rax
   15cd8:	cmp    rbp,rbx
   15cdb:	jbe    15d10 <nbd_wr_sync+0x60>
   15cdd:	mov    rdx,rbp
   15ce0:	xor    ecx,ecx
   15ce2:	lea    rsi,[r13+rbx*1+0x0]
   15ce7:	sub    rdx,rbx
   15cea:	test   r12b,r12b
   15ced:	mov    edi,r14d
   15cf0:	je     15d20 <nbd_wr_sync+0x70>
   15cf2:	call   2e50 <recv@plt>
   15cf7:	cmp    rax,0xffffffffffffffff
   15cfb:	jne    15cd0 <nbd_wr_sync+0x20>
   15cfd:	call   2e80 <__errno_location@plt>
   15d02:	mov    eax,DWORD PTR [rax]
   15d04:	cmp    eax,0xb
   15d07:	je     15cd8 <nbd_wr_sync+0x28>
   15d09:	cmp    eax,0x4
   15d0c:	je     15cd8 <nbd_wr_sync+0x28>
   15d0e:	xor    ebx,ebx
   15d10:	mov    rax,rbx
   15d13:	pop    rbx
   15d14:	pop    rbp
   15d15:	pop    r12
   15d17:	pop    r13
   15d19:	pop    r14
   15d1b:	ret    
   15d1c:	nop    DWORD PTR [rax+0x0]
   15d20:	call   2fa0 <send@plt>
   15d25:	jmp    15cf7 <nbd_wr_sync+0x47>
   15d27:	nop    WORD PTR [rax+rax*1+0x0]

0000000000015d30 <nbd_send_reply.isra.0>:
   15d30:	sub    rsp,0x28
   15d34:	bswap  esi
   15d36:	bswap  rdx
   15d39:	mov    DWORD PTR [rsp+0x4],esi
   15d3d:	mov    QWORD PTR [rsp+0x8],rdx
   15d42:	xor    ecx,ecx
   15d44:	mov    rsi,rsp
   15d47:	mov    edx,0x10
   15d4c:	mov    DWORD PTR [rsp],0x98664467
   15d53:	mov    rax,QWORD PTR fs:0x28
   15d5c:	mov    QWORD PTR [rsp+0x18],rax
   15d61:	xor    eax,eax
   15d63:	call   15cb0 <nbd_wr_sync>
   15d68:	cmp    rax,0x10
   15d6c:	jne    15d88 <nbd_send_reply.isra.0+0x58>
   15d6e:	xor    eax,eax
   15d70:	mov    rcx,QWORD PTR [rsp+0x18]
   15d75:	xor    rcx,QWORD PTR fs:0x28
   15d7e:	jne    15dc8 <nbd_send_reply.isra.0+0x98>
   15d80:	add    rsp,0x28
   15d84:	ret    
   15d85:	nop    DWORD PTR [rax]
   15d88:	mov    rdi,QWORD PTR [rip+0x211771]        # 227500 <stderr@@GLIBC_2.2.5>
   15d8f:	lea    r8,[rip+0x9e8a]        # 1fc20 <__FUNCTION__.13750>
   15d96:	lea    rcx,[rip+0x9b0b]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   15d9d:	lea    rdx,[rip+0x9b44]        # 1f8e8 <__PRETTY_FUNCTION__.14546+0x88>
   15da4:	mov    r9d,0x225
   15daa:	mov    esi,0x1
   15daf:	xor    eax,eax
   15db1:	call   3400 <__fprintf_chk@plt>
   15db6:	call   2e80 <__errno_location@plt>
   15dbb:	mov    DWORD PTR [rax],0x16
   15dc1:	mov    eax,0xffffffff
   15dc6:	jmp    15d70 <nbd_send_reply.isra.0+0x40>
   15dc8:	call   2f70 <__stack_chk_fail@plt>
   15dcd:	nop    DWORD PTR [rax]

0000000000015dd0 <tcp_socket_outgoing>:
   15dd0:	push   r12
   15dd2:	push   rbp
   15dd3:	xor    edx,edx
   15dd5:	push   rbx
   15dd6:	mov    r12,rdi
   15dd9:	mov    ebx,esi
   15ddb:	mov    edi,0x2
   15de0:	mov    esi,0x1
   15de5:	sub    rsp,0x30
   15de9:	mov    rax,QWORD PTR fs:0x28
   15df2:	mov    QWORD PTR [rsp+0x28],rax
   15df7:	xor    eax,eax
   15df9:	call   34c0 <socket@plt>
   15dfe:	cmp    eax,0xffffffff
   15e01:	mov    ebp,eax
   15e03:	je     15e49 <tcp_socket_outgoing+0x79>
   15e05:	lea    rsi,[rsp+0xc]
   15e0a:	mov    rdi,r12
   15e0d:	call   31e0 <inet_aton@plt>
   15e12:	test   eax,eax
   15e14:	je     15e68 <tcp_socket_outgoing+0x98>
   15e16:	mov    eax,DWORD PTR [rsp+0xc]
   15e1a:	mov    edx,0x2
   15e1f:	mov    esi,ebx
   15e21:	mov    edi,ebp
   15e23:	ror    si,0x8
   15e27:	mov    WORD PTR [rsp+0x12],si
   15e2c:	lea    rsi,[rsp+0x10]
   15e31:	mov    WORD PTR [rsp+0x10],dx
   15e36:	mov    edx,0x10
   15e3b:	mov    DWORD PTR [rsp+0x14],eax
   15e3f:	call   33d0 <connect@plt>
   15e44:	cmp    eax,0xffffffff
   15e47:	je     15e88 <tcp_socket_outgoing+0xb8>
   15e49:	mov    rcx,QWORD PTR [rsp+0x28]
   15e4e:	xor    rcx,QWORD PTR fs:0x28
   15e57:	mov    eax,ebp
   15e59:	jne    15e96 <tcp_socket_outgoing+0xc6>
   15e5b:	add    rsp,0x30
   15e5f:	pop    rbx
   15e60:	pop    rbp
   15e61:	pop    r12
   15e63:	ret    
   15e64:	nop    DWORD PTR [rax+0x0]
   15e68:	mov    rdi,r12
   15e6b:	call   3130 <gethostbyname@plt>
   15e70:	test   rax,rax
   15e73:	je     15e88 <tcp_socket_outgoing+0xb8>
   15e75:	mov    rax,QWORD PTR [rax+0x18]
   15e79:	mov    rax,QWORD PTR [rax]
   15e7c:	mov    eax,DWORD PTR [rax]
   15e7e:	mov    DWORD PTR [rsp+0xc],eax
   15e82:	jmp    15e1a <tcp_socket_outgoing+0x4a>
   15e84:	nop    DWORD PTR [rax+0x0]
   15e88:	mov    edi,ebp
   15e8a:	mov    ebp,0xffffffff
   15e8f:	call   3040 <close@plt>
   15e94:	jmp    15e49 <tcp_socket_outgoing+0x79>
   15e96:	call   2f70 <__stack_chk_fail@plt>
   15e9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000015ea0 <tcp_socket_incoming>:
   15ea0:	push   r12
   15ea2:	push   rbp
   15ea3:	xor    edx,edx
   15ea5:	push   rbx
   15ea6:	mov    r12,rdi
   15ea9:	mov    ebp,esi
   15eab:	mov    edi,0x2
   15eb0:	mov    esi,0x1
   15eb5:	sub    rsp,0x30
   15eb9:	mov    rax,QWORD PTR fs:0x28
   15ec2:	mov    QWORD PTR [rsp+0x28],rax
   15ec7:	xor    eax,eax
   15ec9:	call   34c0 <socket@plt>
   15ece:	cmp    eax,0xffffffff
   15ed1:	mov    ebx,eax
   15ed3:	je     15f5b <tcp_socket_incoming+0xbb>
   15ed9:	lea    rsi,[rsp+0x8]
   15ede:	mov    rdi,r12
   15ee1:	call   31e0 <inet_aton@plt>
   15ee6:	test   eax,eax
   15ee8:	je     15f80 <tcp_socket_incoming+0xe0>
   15eee:	mov    eax,DWORD PTR [rsp+0x8]
   15ef2:	mov    edx,0x2
   15ef7:	lea    rcx,[rsp+0xc]
   15efc:	mov    esi,ebp
   15efe:	mov    WORD PTR [rsp+0x10],dx
   15f03:	mov    r8d,0x4
   15f09:	mov    edx,0x2
   15f0e:	ror    si,0x8
   15f12:	mov    edi,ebx
   15f14:	mov    WORD PTR [rsp+0x12],si
   15f19:	mov    esi,0x1
   15f1e:	mov    DWORD PTR [rsp+0x14],eax
   15f22:	mov    DWORD PTR [rsp+0xc],0x1
   15f2a:	call   2ef0 <setsockopt@plt>
   15f2f:	cmp    eax,0xffffffff
   15f32:	je     15fa0 <tcp_socket_incoming+0x100>
   15f34:	lea    rsi,[rsp+0x10]
   15f39:	mov    edx,0x10
   15f3e:	mov    edi,ebx
   15f40:	call   32d0 <bind@plt>
   15f45:	cmp    eax,0xffffffff
   15f48:	je     15fa0 <tcp_socket_incoming+0x100>
   15f4a:	mov    esi,0x80
   15f4f:	mov    edi,ebx
   15f51:	call   3240 <listen@plt>
   15f56:	cmp    eax,0xffffffff
   15f59:	je     15fa0 <tcp_socket_incoming+0x100>
   15f5b:	mov    rcx,QWORD PTR [rsp+0x28]
   15f60:	xor    rcx,QWORD PTR fs:0x28
   15f69:	mov    eax,ebx
   15f6b:	jne    15fae <tcp_socket_incoming+0x10e>
   15f6d:	add    rsp,0x30
   15f71:	pop    rbx
   15f72:	pop    rbp
   15f73:	pop    r12
   15f75:	ret    
   15f76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15f80:	mov    rdi,r12
   15f83:	call   3130 <gethostbyname@plt>
   15f88:	test   rax,rax
   15f8b:	je     15fa0 <tcp_socket_incoming+0x100>
   15f8d:	mov    rax,QWORD PTR [rax+0x18]
   15f91:	mov    rax,QWORD PTR [rax]
   15f94:	mov    eax,DWORD PTR [rax]
   15f96:	mov    DWORD PTR [rsp+0x8],eax
   15f9a:	jmp    15ef2 <tcp_socket_incoming+0x52>
   15f9f:	nop
   15fa0:	mov    edi,ebx
   15fa2:	mov    ebx,0xffffffff
   15fa7:	call   3040 <close@plt>
   15fac:	jmp    15f5b <tcp_socket_incoming+0xbb>
   15fae:	call   2f70 <__stack_chk_fail@plt>
   15fb3:	nop    DWORD PTR [rax]
   15fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000015fc0 <unix_socket_incoming>:
   15fc0:	push   r12
   15fc2:	push   rbp
   15fc3:	xor    edx,edx
   15fc5:	push   rbx
   15fc6:	mov    rbp,rdi
   15fc9:	mov    esi,0x1
   15fce:	mov    edi,0x1
   15fd3:	add    rsp,0xffffffffffffff80
   15fd7:	mov    rax,QWORD PTR fs:0x28
   15fe0:	mov    QWORD PTR [rsp+0x78],rax
   15fe5:	xor    eax,eax
   15fe7:	call   34c0 <socket@plt>
   15fec:	cmp    eax,0xffffffff
   15fef:	mov    ebx,eax
   15ff1:	je     16061 <unix_socket_incoming+0xa1>
   15ff3:	mov    r12,rsp
   15ff6:	xor    eax,eax
   15ff8:	mov    QWORD PTR [rsp+0x2],0x0
   16001:	lea    r8,[r12+0x2]
   16006:	lea    rdi,[r12+0x8]
   1600b:	mov    QWORD PTR [r12+0x66],0x0
   16014:	mov    rdx,rbp
   16017:	mov    esi,0x6c
   1601c:	mov    rcx,r8
   1601f:	sub    rcx,rdi
   16022:	add    ecx,0x6c
   16025:	shr    ecx,0x3
   16028:	rep stos QWORD PTR es:[rdi],rax
   1602b:	mov    eax,0x1
   16030:	mov    rdi,r8
   16033:	mov    WORD PTR [rsp],ax
   16037:	call   45a0 <pstrcpy>
   1603c:	mov    edx,0x6e
   16041:	mov    rsi,r12
   16044:	mov    edi,ebx
   16046:	call   32d0 <bind@plt>
   1604b:	cmp    eax,0xffffffff
   1604e:	je     16080 <unix_socket_incoming+0xc0>
   16050:	mov    esi,0x80
   16055:	mov    edi,ebx
   16057:	call   3240 <listen@plt>
   1605c:	cmp    eax,0xffffffff
   1605f:	je     16080 <unix_socket_incoming+0xc0>
   16061:	mov    rdx,QWORD PTR [rsp+0x78]
   16066:	xor    rdx,QWORD PTR fs:0x28
   1606f:	mov    eax,ebx
   16071:	jne    1608e <unix_socket_incoming+0xce>
   16073:	sub    rsp,0xffffffffffffff80
   16077:	pop    rbx
   16078:	pop    rbp
   16079:	pop    r12
   1607b:	ret    
   1607c:	nop    DWORD PTR [rax+0x0]
   16080:	mov    edi,ebx
   16082:	mov    ebx,0xffffffff
   16087:	call   3040 <close@plt>
   1608c:	jmp    16061 <unix_socket_incoming+0xa1>
   1608e:	call   2f70 <__stack_chk_fail@plt>
   16093:	nop    DWORD PTR [rax]
   16096:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000160a0 <unix_socket_outgoing>:
   160a0:	push   r12
   160a2:	push   rbp
   160a3:	xor    edx,edx
   160a5:	push   rbx
   160a6:	mov    rbp,rdi
   160a9:	mov    esi,0x1
   160ae:	mov    edi,0x1
   160b3:	add    rsp,0xffffffffffffff80
   160b7:	mov    rax,QWORD PTR fs:0x28
   160c0:	mov    QWORD PTR [rsp+0x78],rax
   160c5:	xor    eax,eax
   160c7:	call   34c0 <socket@plt>
   160cc:	cmp    eax,0xffffffff
   160cf:	mov    ebx,eax
   160d1:	je     16132 <unix_socket_outgoing+0x92>
   160d3:	mov    r12,rsp
   160d6:	xor    eax,eax
   160d8:	mov    QWORD PTR [rsp+0x2],0x0
   160e1:	lea    r8,[r12+0x2]
   160e6:	lea    rdi,[r12+0x8]
   160eb:	mov    QWORD PTR [r12+0x66],0x0
   160f4:	mov    rdx,rbp
   160f7:	mov    esi,0x6c
   160fc:	mov    rcx,r8
   160ff:	sub    rcx,rdi
   16102:	add    ecx,0x6c
   16105:	shr    ecx,0x3
   16108:	rep stos QWORD PTR es:[rdi],rax
   1610b:	mov    eax,0x1
   16110:	mov    rdi,r8
   16113:	mov    WORD PTR [rsp],ax
   16117:	call   45a0 <pstrcpy>
   1611c:	mov    edx,0x6e
   16121:	mov    rsi,r12
   16124:	mov    edi,ebx
   16126:	call   33d0 <connect@plt>
   1612b:	cmp    eax,0xffffffff
   1612e:	mov    ebp,eax
   16130:	je     1614d <unix_socket_outgoing+0xad>
   16132:	mov    rdx,QWORD PTR [rsp+0x78]
   16137:	xor    rdx,QWORD PTR fs:0x28
   16140:	mov    eax,ebx
   16142:	jne    16158 <unix_socket_outgoing+0xb8>
   16144:	sub    rsp,0xffffffffffffff80
   16148:	pop    rbx
   16149:	pop    rbp
   1614a:	pop    r12
   1614c:	ret    
   1614d:	mov    edi,ebx
   1614f:	mov    ebx,ebp
   16151:	call   3040 <close@plt>
   16156:	jmp    16132 <unix_socket_outgoing+0x92>
   16158:	call   2f70 <__stack_chk_fail@plt>
   1615d:	nop    DWORD PTR [rax]

0000000000016160 <nbd_negotiate>:
   16160:	sub    rsp,0xa8
   16167:	mov    rax,rsi
   1616a:	movabs rdx,0x434947414d44424e
   16174:	mov    rsi,rsp
   16177:	mov    QWORD PTR [rsp],rdx
   1617b:	movabs rcx,0x5312868102420000
   16185:	lea    rdx,[rsi+0x18]
   16189:	bswap  rax
   1618c:	mov    r8d,edi
   1618f:	mov    QWORD PTR [rsp+0x8],rcx
   16194:	mov    QWORD PTR [rsp+0x10],rax
   16199:	mov    ecx,0x10
   1619e:	mov    rdi,QWORD PTR fs:0x28
   161a7:	mov    QWORD PTR [rsp+0x98],rdi
   161af:	xor    edi,edi
   161b1:	xor    eax,eax
   161b3:	mov    rdi,rdx
   161b6:	mov    edx,0x98
   161bb:	rep stos QWORD PTR es:[rdi],rax
   161be:	mov    edi,r8d
   161c1:	call   15cb0 <nbd_wr_sync>
   161c6:	cmp    rax,0x98
   161cc:	jne    161f0 <nbd_negotiate+0x90>
   161ce:	xor    eax,eax
   161d0:	mov    rdx,QWORD PTR [rsp+0x98]
   161d8:	xor    rdx,QWORD PTR fs:0x28
   161e1:	jne    16230 <nbd_negotiate+0xd0>
   161e3:	add    rsp,0xa8
   161ea:	ret    
   161eb:	nop    DWORD PTR [rax+rax*1+0x0]
   161f0:	mov    rdi,QWORD PTR [rip+0x211309]        # 227500 <stderr@@GLIBC_2.2.5>
   161f7:	lea    r8,[rip+0x9aca]        # 1fcc8 <__FUNCTION__.13696>
   161fe:	lea    rcx,[rip+0x96a3]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16205:	lea    rdx,[rip+0x99dd]        # 1fbe9 <__PRETTY_FUNCTION__.14546+0x389>
   1620c:	mov    r9d,0x123
   16212:	mov    esi,0x1
   16217:	xor    eax,eax
   16219:	call   3400 <__fprintf_chk@plt>
   1621e:	call   2e80 <__errno_location@plt>
   16223:	mov    DWORD PTR [rax],0x16
   16229:	mov    eax,0xffffffff
   1622e:	jmp    161d0 <nbd_negotiate+0x70>
   16230:	call   2f70 <__stack_chk_fail@plt>
   16235:	nop
   16236:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016240 <nbd_receive_negotiate>:
   16240:	push   rbp
   16241:	push   rbx
   16242:	mov    rbp,rsi
   16245:	mov    rbx,rdx
   16248:	mov    ecx,0x1
   1624d:	mov    edx,0x98
   16252:	sub    rsp,0xa8
   16259:	mov    rsi,rsp
   1625c:	mov    rax,QWORD PTR fs:0x28
   16265:	mov    QWORD PTR [rsp+0x98],rax
   1626d:	xor    eax,eax
   1626f:	call   15cb0 <nbd_wr_sync>
   16274:	cmp    rax,0x98
   1627a:	jne    162e0 <nbd_receive_negotiate+0xa0>
   1627c:	mov    rax,QWORD PTR [rsp+0x8]
   16281:	bswap  rax
   16284:	mov    rdx,rax
   16287:	mov    rax,QWORD PTR [rsp+0x10]
   1628c:	bswap  rax
   1628f:	mov    QWORD PTR [rbp+0x0],rax
   16293:	movabs rax,0x434947414d44424e
   1629d:	cmp    QWORD PTR [rsp],rax
   162a1:	mov    QWORD PTR [rbx],0x400
   162a8:	jne    1633d <nbd_receive_negotiate+0xfd>
   162ae:	movabs rax,0x420281861253
   162b8:	cmp    rdx,rax
   162bb:	jne    16320 <nbd_receive_negotiate+0xe0>
   162bd:	xor    eax,eax
   162bf:	mov    rcx,QWORD PTR [rsp+0x98]
   162c7:	xor    rcx,QWORD PTR fs:0x28
   162d0:	jne    1635a <nbd_receive_negotiate+0x11a>
   162d6:	add    rsp,0xa8
   162dd:	pop    rbx
   162de:	pop    rbp
   162df:	ret    
   162e0:	lea    r8,[rip+0x99c9]        # 1fcb0 <__FUNCTION__.13704>
   162e7:	lea    rcx,[rip+0x95ba]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   162ee:	lea    rdx,[rip+0x990f]        # 1fc04 <__PRETTY_FUNCTION__.14546+0x3a4>
   162f5:	mov    r9d,0x135
   162fb:	mov    rdi,QWORD PTR [rip+0x2111fe]        # 227500 <stderr@@GLIBC_2.2.5>
   16302:	mov    esi,0x1
   16307:	xor    eax,eax
   16309:	call   3400 <__fprintf_chk@plt>
   1630e:	call   2e80 <__errno_location@plt>
   16313:	mov    DWORD PTR [rax],0x16
   16319:	mov    eax,0xffffffff
   1631e:	jmp    162bf <nbd_receive_negotiate+0x7f>
   16320:	mov    r9d,0x153
   16326:	lea    r8,[rip+0x9983]        # 1fcb0 <__FUNCTION__.13704>
   1632d:	lea    rcx,[rip+0x9574]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16334:	lea    rdx,[rip+0x95fd]        # 1f938 <__PRETTY_FUNCTION__.14546+0xd8>
   1633b:	jmp    162fb <nbd_receive_negotiate+0xbb>
   1633d:	mov    r9d,0x14b
   16343:	lea    r8,[rip+0x9966]        # 1fcb0 <__FUNCTION__.13704>
   1634a:	lea    rcx,[rip+0x9557]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16351:	lea    rdx,[rip+0x95b8]        # 1f910 <__PRETTY_FUNCTION__.14546+0xb0>
   16358:	jmp    162fb <nbd_receive_negotiate+0xbb>
   1635a:	call   2f70 <__stack_chk_fail@plt>
   1635f:	nop

0000000000016360 <nbd_init>:
   16360:	push   r14
   16362:	push   r13
   16364:	xor    eax,eax
   16366:	push   r12
   16368:	push   rbp
   16369:	mov    r14d,esi
   1636c:	push   rbx
   1636d:	mov    rbp,rdx
   16370:	mov    esi,0xab01
   16375:	mov    rdx,rcx
   16378:	mov    r12d,edi
   1637b:	mov    r13,rcx
   1637e:	call   3030 <ioctl@plt>
   16383:	cmp    eax,0xffffffff
   16386:	je     163f8 <nbd_init+0x98>
   16388:	xor    edx,edx
   1638a:	mov    rax,rbp
   1638d:	mov    esi,0xab07
   16392:	div    r13
   16395:	mov    edi,r12d
   16398:	mov    rdx,rax
   1639b:	xor    eax,eax
   1639d:	call   3030 <ioctl@plt>
   163a2:	cmp    eax,0xffffffff
   163a5:	mov    ebx,eax
   163a7:	je     16440 <nbd_init+0xe0>
   163ad:	xor    eax,eax
   163af:	mov    esi,0xab04
   163b4:	mov    edi,r12d
   163b7:	call   3030 <ioctl@plt>
   163bc:	cmp    eax,0xffffffff
   163bf:	mov    ebx,eax
   163c1:	je     16470 <nbd_init+0x110>
   163c7:	xor    eax,eax
   163c9:	mov    edx,r14d
   163cc:	mov    esi,0xab00
   163d1:	mov    edi,r12d
   163d4:	call   3030 <ioctl@plt>
   163d9:	cmp    eax,0xffffffff
   163dc:	mov    ebx,eax
   163de:	je     16498 <nbd_init+0x138>
   163e4:	xor    ebx,ebx
   163e6:	mov    eax,ebx
   163e8:	pop    rbx
   163e9:	pop    rbp
   163ea:	pop    r12
   163ec:	pop    r13
   163ee:	pop    r14
   163f0:	ret    
   163f1:	nop    DWORD PTR [rax+0x0]
   163f8:	mov    ebx,eax
   163fa:	call   2e80 <__errno_location@plt>
   163ff:	mov    r12d,DWORD PTR [rax]
   16402:	lea    r8,[rip+0x988f]        # 1fc98 <__FUNCTION__.13712>
   16409:	lea    rcx,[rip+0x9498]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16410:	lea    rdx,[rip+0x9549]        # 1f960 <__PRETTY_FUNCTION__.14546+0x100>
   16417:	mov    rbp,rax
   1641a:	mov    r9d,0x161
   16420:	mov    rdi,QWORD PTR [rip+0x2110d9]        # 227500 <stderr@@GLIBC_2.2.5>
   16427:	mov    esi,0x1
   1642c:	xor    eax,eax
   1642e:	call   3400 <__fprintf_chk@plt>
   16433:	mov    DWORD PTR [rbp+0x0],r12d
   16437:	jmp    163e6 <nbd_init+0x86>
   16439:	nop    DWORD PTR [rax+0x0]
   16440:	call   2e80 <__errno_location@plt>
   16445:	mov    r9d,0x16b
   1644b:	mov    rbp,rax
   1644e:	mov    r12d,DWORD PTR [rax]
   16451:	lea    r8,[rip+0x9840]        # 1fc98 <__FUNCTION__.13712>
   16458:	lea    rcx,[rip+0x9449]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   1645f:	lea    rdx,[rip+0x952a]        # 1f990 <__PRETTY_FUNCTION__.14546+0x130>
   16466:	jmp    16420 <nbd_init+0xc0>
   16468:	nop    DWORD PTR [rax+rax*1+0x0]
   16470:	call   2e80 <__errno_location@plt>
   16475:	mov    r9d,0x174
   1647b:	mov    rbp,rax
   1647e:	mov    r12d,DWORD PTR [rax]
   16481:	lea    r8,[rip+0x9810]        # 1fc98 <__FUNCTION__.13712>
   16488:	lea    rcx,[rip+0x9419]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   1648f:	lea    rdx,[rip+0x952a]        # 1f9c0 <__PRETTY_FUNCTION__.14546+0x160>
   16496:	jmp    16420 <nbd_init+0xc0>
   16498:	call   2e80 <__errno_location@plt>
   1649d:	mov    r9d,0x17d
   164a3:	mov    rbp,rax
   164a6:	mov    r12d,DWORD PTR [rax]
   164a9:	lea    r8,[rip+0x97e8]        # 1fc98 <__FUNCTION__.13712>
   164b0:	lea    rcx,[rip+0x93f1]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   164b7:	lea    rdx,[rip+0x9532]        # 1f9f0 <__PRETTY_FUNCTION__.14546+0x190>
   164be:	jmp    16420 <nbd_init+0xc0>
   164c3:	nop    DWORD PTR [rax]
   164c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000164d0 <nbd_disconnect>:
   164d0:	push   rbx
   164d1:	mov    esi,0xab05
   164d6:	mov    ebx,edi
   164d8:	xor    eax,eax
   164da:	call   3030 <ioctl@plt>
   164df:	mov    edi,ebx
   164e1:	mov    esi,0xab08
   164e6:	xor    eax,eax
   164e8:	call   3030 <ioctl@plt>
   164ed:	mov    edi,ebx
   164ef:	mov    esi,0xab04
   164f4:	xor    eax,eax
   164f6:	call   3030 <ioctl@plt>
   164fb:	xor    eax,eax
   164fd:	pop    rbx
   164fe:	ret    
   164ff:	nop

0000000000016500 <nbd_client>:
   16500:	push   r13
   16502:	push   r12
   16504:	mov    esi,0xab03
   16509:	push   rbp
   1650a:	push   rbx
   1650b:	xor    eax,eax
   1650d:	mov    ebx,edi
   1650f:	sub    rsp,0x8
   16513:	call   3030 <ioctl@plt>
   16518:	mov    r12d,eax
   1651b:	call   2e80 <__errno_location@plt>
   16520:	mov    r13d,DWORD PTR [rax]
   16523:	mov    rbp,rax
   16526:	mov    edi,ebx
   16528:	mov    esi,0xab05
   1652d:	xor    eax,eax
   1652f:	call   3030 <ioctl@plt>
   16534:	mov    edi,ebx
   16536:	mov    esi,0xab04
   1653b:	xor    eax,eax
   1653d:	call   3030 <ioctl@plt>
   16542:	mov    DWORD PTR [rbp+0x0],r13d
   16546:	add    rsp,0x8
   1654a:	mov    eax,r12d
   1654d:	pop    rbx
   1654e:	pop    rbp
   1654f:	pop    r12
   16551:	pop    r13
   16553:	ret    
   16554:	xchg   ax,ax
   16556:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016560 <nbd_send_request>:
   16560:	sub    rsp,0x38
   16564:	xor    ecx,ecx
   16566:	mov    edx,0x1c
   1656b:	mov    rax,QWORD PTR fs:0x28
   16574:	mov    QWORD PTR [rsp+0x28],rax
   16579:	xor    eax,eax
   1657b:	mov    eax,DWORD PTR [rsi]
   1657d:	mov    DWORD PTR [rsp],0x13956025
   16584:	bswap  eax
   16586:	mov    DWORD PTR [rsp+0x4],eax
   1658a:	mov    rax,QWORD PTR [rsi+0x8]
   1658e:	bswap  rax
   16591:	mov    QWORD PTR [rsp+0x8],rax
   16596:	mov    rax,QWORD PTR [rsi+0x10]
   1659a:	bswap  rax
   1659d:	mov    QWORD PTR [rsp+0x10],rax
   165a2:	mov    eax,DWORD PTR [rsi+0x18]
   165a5:	mov    rsi,rsp
   165a8:	bswap  eax
   165aa:	mov    DWORD PTR [rsp+0x18],eax
   165ae:	call   15cb0 <nbd_wr_sync>
   165b3:	cmp    rax,0x1c
   165b7:	jne    165d0 <nbd_send_request+0x70>
   165b9:	xor    eax,eax
   165bb:	mov    rdx,QWORD PTR [rsp+0x28]
   165c0:	xor    rdx,QWORD PTR fs:0x28
   165c9:	jne    16610 <nbd_send_request+0xb0>
   165cb:	add    rsp,0x38
   165cf:	ret    
   165d0:	mov    rdi,QWORD PTR [rip+0x210f29]        # 227500 <stderr@@GLIBC_2.2.5>
   165d7:	lea    r8,[rip+0x96a2]        # 1fc80 <__FUNCTION__.13730>
   165de:	lea    rcx,[rip+0x92c3]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   165e5:	lea    rdx,[rip+0x92fc]        # 1f8e8 <__PRETTY_FUNCTION__.14546+0x88>
   165ec:	mov    r9d,0x1c5
   165f2:	mov    esi,0x1
   165f7:	xor    eax,eax
   165f9:	call   3400 <__fprintf_chk@plt>
   165fe:	call   2e80 <__errno_location@plt>
   16603:	mov    DWORD PTR [rax],0x16
   16609:	mov    eax,0xffffffff
   1660e:	jmp    165bb <nbd_send_request+0x5b>
   16610:	call   2f70 <__stack_chk_fail@plt>
   16615:	nop
   16616:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016620 <nbd_receive_reply>:
   16620:	push   rbx
   16621:	mov    ecx,0x1
   16626:	mov    rbx,rsi
   16629:	mov    edx,0x10
   1662e:	sub    rsp,0x20
   16632:	movdqa xmm0,XMMWORD PTR [rip+0x96a6]        # 1fce0 <__FUNCTION__.13696+0x18>
   1663a:	mov    rsi,rsp
   1663d:	mov    rax,QWORD PTR fs:0x28
   16646:	mov    QWORD PTR [rsp+0x18],rax
   1664b:	xor    eax,eax
   1664d:	movaps XMMWORD PTR [rsp],xmm0
   16651:	call   15cb0 <nbd_wr_sync>
   16656:	cmp    rax,0x10
   1665a:	jne    166a0 <nbd_receive_reply+0x80>
   1665c:	mov    edx,DWORD PTR [rsp+0x4]
   16660:	mov    eax,DWORD PTR [rsp]
   16663:	bswap  edx
   16665:	bswap  eax
   16667:	mov    DWORD PTR [rbx],edx
   16669:	mov    rdx,QWORD PTR [rsp+0x8]
   1666e:	cmp    eax,0x67446698
   16673:	bswap  rdx
   16676:	mov    QWORD PTR [rbx+0x8],rdx
   1667a:	jne    166e0 <nbd_receive_reply+0xc0>
   1667c:	xor    eax,eax
   1667e:	mov    rcx,QWORD PTR [rsp+0x18]
   16683:	xor    rcx,QWORD PTR fs:0x28
   1668c:	jne    1672a <nbd_receive_reply+0x10a>
   16692:	add    rsp,0x20
   16696:	pop    rbx
   16697:	ret    
   16698:	nop    DWORD PTR [rax+rax*1+0x0]
   166a0:	mov    rdi,QWORD PTR [rip+0x210e59]        # 227500 <stderr@@GLIBC_2.2.5>
   166a7:	lea    r8,[rip+0x95b2]        # 1fc60 <__FUNCTION__.13744>
   166ae:	lea    rcx,[rip+0x91f3]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   166b5:	lea    rdx,[rip+0x9548]        # 1fc04 <__PRETTY_FUNCTION__.14546+0x3a4>
   166bc:	mov    r9d,0x1fa
   166c2:	mov    esi,0x1
   166c7:	xor    eax,eax
   166c9:	call   3400 <__fprintf_chk@plt>
   166ce:	call   2e80 <__errno_location@plt>
   166d3:	mov    DWORD PTR [rax],0x16
   166d9:	mov    eax,0xffffffff
   166de:	jmp    1667e <nbd_receive_reply+0x5e>
   166e0:	sub    rsp,0x8
   166e4:	mov    rdi,QWORD PTR [rip+0x210e15]        # 227500 <stderr@@GLIBC_2.2.5>
   166eb:	lea    rdx,[rip+0x9326]        # 1fa18 <__PRETTY_FUNCTION__.14546+0x1b8>
   166f2:	push   rax
   166f3:	lea    r8,[rip+0x9566]        # 1fc60 <__FUNCTION__.13744>
   166fa:	lea    rcx,[rip+0x91a7]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16701:	mov    r9d,0x20e
   16707:	mov    esi,0x1
   1670c:	xor    eax,eax
   1670e:	call   3400 <__fprintf_chk@plt>
   16713:	call   2e80 <__errno_location@plt>
   16718:	mov    DWORD PTR [rax],0x16
   1671e:	pop    rax
   1671f:	mov    eax,0xffffffff
   16724:	pop    rdx
   16725:	jmp    1667e <nbd_receive_reply+0x5e>
   1672a:	call   2f70 <__stack_chk_fail@plt>
   1672f:	nop

0000000000016730 <nbd_trip>:
   16730:	push   r15
   16732:	push   r14
   16734:	mov    r14,r8
   16737:	push   r13
   16739:	push   r12
   1673b:	mov    r12,rcx
   1673e:	push   rbp
   1673f:	push   rbx
   16740:	mov    ebx,esi
   16742:	mov    rbp,rdx
   16745:	mov    ecx,0x1
   1674a:	mov    edx,0x1c
   1674f:	sub    rsp,0x68
   16753:	lea    rsi,[rsp+0x30]
   16758:	mov    QWORD PTR [rsp+0x8],rdi
   1675d:	mov    edi,ebx
   1675f:	mov    rax,QWORD PTR fs:0x28
   16768:	mov    QWORD PTR [rsp+0x58],rax
   1676d:	xor    eax,eax
   1676f:	mov    DWORD PTR [rsp+0x10],r9d
   16774:	mov    r13,QWORD PTR [rsp+0xa0]
   1677c:	call   15cb0 <nbd_wr_sync>
   16781:	cmp    rax,0x1c
   16785:	jne    16990 <nbd_trip+0x260>
   1678b:	mov    edx,DWORD PTR [rsp+0x30]
   1678f:	mov    eax,DWORD PTR [rsp+0x34]
   16793:	mov    r11,QWORD PTR [rsp+0x38]
   16798:	mov    r8,QWORD PTR [rsp+0x40]
   1679d:	mov    r9d,DWORD PTR [rsp+0x48]
   167a2:	bswap  edx
   167a4:	bswap  eax
   167a6:	cmp    edx,0x25609513
   167ac:	bswap  r11
   167af:	bswap  r8
   167b2:	bswap  r9d
   167b5:	jne    169d8 <nbd_trip+0x2a8>
   167bb:	cmp    DWORD PTR [rsp+0xa8],r9d
   167c3:	jb     169fd <nbd_trip+0x2cd>
   167c9:	mov    r15d,r9d
   167cc:	mov    rdx,r15
   167cf:	add    rdx,r8
   167d2:	jb     16b20 <nbd_trip+0x3f0>
   167d8:	cmp    rdx,rbp
   167db:	ja     16a27 <nbd_trip+0x2f7>
   167e1:	cmp    eax,0x1
   167e4:	je     168e8 <nbd_trip+0x1b8>
   167ea:	jb     16830 <nbd_trip+0x100>
   167ec:	cmp    eax,0x2
   167ef:	jne    16898 <nbd_trip+0x168>
   167f5:	call   2e80 <__errno_location@plt>
   167fa:	mov    ebp,0x1
   167ff:	mov    DWORD PTR [rax],0x0
   16805:	mov    rbx,QWORD PTR [rsp+0x58]
   1680a:	xor    rbx,QWORD PTR fs:0x28
   16813:	mov    eax,ebp
   16815:	jne    16b1b <nbd_trip+0x3eb>
   1681b:	add    rsp,0x68
   1681f:	pop    rbx
   16820:	pop    rbp
   16821:	pop    r12
   16823:	pop    r13
   16825:	pop    r14
   16827:	pop    r15
   16829:	ret    
   1682a:	nop    WORD PTR [rax+rax*1+0x0]
   16830:	lea    rsi,[r12+r8*1]
   16834:	mov    rdi,QWORD PTR [rsp+0x8]
   16839:	mov    ecx,r9d
   1683c:	shr    ecx,0x9
   1683f:	mov    rdx,r13
   16842:	mov    QWORD PTR [rsp+0x10],r11
   16847:	shr    rsi,0x9
   1684b:	call   171e0 <bdrv_read>
   16850:	cmp    eax,0xffffffff
   16853:	mov    ebp,eax
   16855:	mov    r11,QWORD PTR [rsp+0x10]
   1685a:	je     16ac0 <nbd_trip+0x390>
   16860:	add    QWORD PTR [r14],r15
   16863:	xor    esi,esi
   16865:	mov    rdx,r11
   16868:	mov    edi,ebx
   1686a:	call   15d30 <nbd_send_reply.isra.0>
   1686f:	cmp    eax,0xffffffff
   16872:	mov    ebp,eax
   16874:	je     16805 <nbd_trip+0xd5>
   16876:	xor    ecx,ecx
   16878:	mov    rdx,r15
   1687b:	mov    rsi,r13
   1687e:	mov    edi,ebx
   16880:	call   15cb0 <nbd_wr_sync>
   16885:	cmp    r15,rax
   16888:	jne    16aa0 <nbd_trip+0x370>
   1688e:	xor    ebp,ebp
   16890:	jmp    16805 <nbd_trip+0xd5>
   16895:	nop    DWORD PTR [rax]
   16898:	sub    rsp,0x8
   1689c:	lea    r8,[rip+0x93a5]        # 1fc48 <__FUNCTION__.13763>
   168a3:	lea    rcx,[rip+0x8ffe]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   168aa:	push   rax
   168ab:	lea    rdx,[rip+0x9306]        # 1fbb8 <__PRETTY_FUNCTION__.14546+0x358>
   168b2:	mov    r9d,0x28f
   168b8:	mov    rdi,QWORD PTR [rip+0x210c41]        # 227500 <stderr@@GLIBC_2.2.5>
   168bf:	mov    esi,0x1
   168c4:	xor    eax,eax
   168c6:	mov    ebp,0xffffffff
   168cb:	call   3400 <__fprintf_chk@plt>
   168d0:	call   2e80 <__errno_location@plt>
   168d5:	mov    DWORD PTR [rax],0x16
   168db:	pop    rax
   168dc:	pop    rdx
   168dd:	jmp    16805 <nbd_trip+0xd5>
   168e2:	nop    WORD PTR [rax+rax*1+0x0]
   168e8:	mov    ecx,0x1
   168ed:	mov    rdx,r15
   168f0:	mov    rsi,r13
   168f3:	mov    edi,ebx
   168f5:	mov    DWORD PTR [rsp+0x2c],r9d
   168fa:	mov    QWORD PTR [rsp+0x20],r8
   168ff:	mov    QWORD PTR [rsp+0x18],r11
   16904:	call   15cb0 <nbd_wr_sync>
   16909:	cmp    r15,rax
   1690c:	mov    r11,QWORD PTR [rsp+0x18]
   16911:	mov    r8,QWORD PTR [rsp+0x20]
   16916:	mov    r9d,DWORD PTR [rsp+0x2c]
   1691b:	jne    16a80 <nbd_trip+0x350>
   16921:	cmp    BYTE PTR [rsp+0x10],0x0
   16926:	je     16950 <nbd_trip+0x220>
   16928:	mov    esi,0x1
   1692d:	mov    rdx,r11
   16930:	mov    edi,ebx
   16932:	xor    ebp,ebp
   16934:	call   15d30 <nbd_send_reply.isra.0>
   16939:	cmp    eax,0xffffffff
   1693c:	sete   bpl
   16940:	neg    ebp
   16942:	jmp    16805 <nbd_trip+0xd5>
   16947:	nop    WORD PTR [rax+rax*1+0x0]
   16950:	lea    rsi,[r12+r8*1]
   16954:	mov    rdi,QWORD PTR [rsp+0x8]
   16959:	mov    ecx,r9d
   1695c:	shr    ecx,0x9
   1695f:	mov    rdx,r13
   16962:	mov    QWORD PTR [rsp+0x10],r11
   16967:	shr    rsi,0x9
   1696b:	call   17620 <bdrv_write>
   16970:	cmp    eax,0xffffffff
   16973:	mov    ebp,eax
   16975:	mov    r11,QWORD PTR [rsp+0x10]
   1697a:	je     16afe <nbd_trip+0x3ce>
   16980:	add    QWORD PTR [r14],r15
   16983:	xor    esi,esi
   16985:	jmp    1692d <nbd_trip+0x1fd>
   16987:	nop    WORD PTR [rax+rax*1+0x0]
   16990:	lea    r8,[rip+0x9299]        # 1fc30 <__FUNCTION__.13737>
   16997:	lea    rcx,[rip+0x8f0a]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   1699e:	lea    rdx,[rip+0x925f]        # 1fc04 <__PRETTY_FUNCTION__.14546+0x3a4>
   169a5:	mov    r9d,0x1d3
   169ab:	mov    rdi,QWORD PTR [rip+0x210b4e]        # 227500 <stderr@@GLIBC_2.2.5>
   169b2:	mov    esi,0x1
   169b7:	xor    eax,eax
   169b9:	mov    ebp,0xffffffff
   169be:	call   3400 <__fprintf_chk@plt>
   169c3:	call   2e80 <__errno_location@plt>
   169c8:	mov    DWORD PTR [rax],0x16
   169ce:	jmp    16805 <nbd_trip+0xd5>
   169d3:	nop    DWORD PTR [rax+rax*1+0x0]
   169d8:	sub    rsp,0x8
   169dc:	mov    r9d,0x1eb
   169e2:	lea    r8,[rip+0x9247]        # 1fc30 <__FUNCTION__.13737>
   169e9:	push   rdx
   169ea:	lea    rcx,[rip+0x8eb7]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   169f1:	lea    rdx,[rip+0x9020]        # 1fa18 <__PRETTY_FUNCTION__.14546+0x1b8>
   169f8:	jmp    168b8 <nbd_trip+0x188>
   169fd:	mov    eax,DWORD PTR [rsp+0xa8]
   16a04:	lea    r8,[rip+0x923d]        # 1fc48 <__FUNCTION__.13763>
   16a0b:	lea    rcx,[rip+0x8e96]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16a12:	lea    rdx,[rip+0x9027]        # 1fa40 <__PRETTY_FUNCTION__.14546+0x1e0>
   16a19:	push   rax
   16a1a:	push   r9
   16a1c:	mov    r9d,0x239
   16a22:	jmp    168b8 <nbd_trip+0x188>
   16a27:	mov    rdi,QWORD PTR [rip+0x210ad2]        # 227500 <stderr@@GLIBC_2.2.5>
   16a2e:	push   r12
   16a30:	lea    rcx,[rip+0x8e71]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16a37:	push   rbp
   16a38:	lea    rdx,[rip+0x9081]        # 1fac0 <__PRETTY_FUNCTION__.14546+0x260>
   16a3f:	push   r9
   16a41:	push   r8
   16a43:	lea    r8,[rip+0x91fe]        # 1fc48 <__FUNCTION__.13763>
   16a4a:	mov    r9d,0x248
   16a50:	mov    esi,0x1
   16a55:	xor    eax,eax
   16a57:	call   3400 <__fprintf_chk@plt>
   16a5c:	add    rsp,0x20
   16a60:	mov    r9d,0x249
   16a66:	lea    r8,[rip+0x91db]        # 1fc48 <__FUNCTION__.13763>
   16a6d:	lea    rcx,[rip+0x8e34]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16a74:	lea    rdx,[rip+0x9085]        # 1fb00 <__PRETTY_FUNCTION__.14546+0x2a0>
   16a7b:	jmp    169ab <nbd_trip+0x27b>
   16a80:	mov    r9d,0x272
   16a86:	lea    r8,[rip+0x91bb]        # 1fc48 <__FUNCTION__.13763>
   16a8d:	lea    rcx,[rip+0x8e14]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16a94:	lea    rdx,[rip+0x90c5]        # 1fb60 <__PRETTY_FUNCTION__.14546+0x300>
   16a9b:	jmp    169ab <nbd_trip+0x27b>
   16aa0:	mov    r9d,0x267
   16aa6:	lea    r8,[rip+0x919b]        # 1fc48 <__FUNCTION__.13763>
   16aad:	lea    rcx,[rip+0x8df4]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16ab4:	lea    rdx,[rip+0x8e2d]        # 1f8e8 <__PRETTY_FUNCTION__.14546+0x88>
   16abb:	jmp    169ab <nbd_trip+0x27b>
   16ac0:	lea    r8,[rip+0x9181]        # 1fc48 <__FUNCTION__.13763>
   16ac7:	lea    rcx,[rip+0x8dda]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16ace:	lea    rdx,[rip+0x9063]        # 1fb38 <__PRETTY_FUNCTION__.14546+0x2d8>
   16ad5:	mov    r9d,0x259
   16adb:	mov    rdi,QWORD PTR [rip+0x210a1e]        # 227500 <stderr@@GLIBC_2.2.5>
   16ae2:	mov    esi,0x1
   16ae7:	xor    eax,eax
   16ae9:	call   3400 <__fprintf_chk@plt>
   16aee:	call   2e80 <__errno_location@plt>
   16af3:	mov    DWORD PTR [rax],0x16
   16af9:	jmp    16805 <nbd_trip+0xd5>
   16afe:	mov    r9d,0x27f
   16b04:	lea    r8,[rip+0x913d]        # 1fc48 <__FUNCTION__.13763>
   16b0b:	lea    rcx,[rip+0x8d96]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16b12:	lea    rdx,[rip+0x9077]        # 1fb90 <__PRETTY_FUNCTION__.14546+0x330>
   16b19:	jmp    16adb <nbd_trip+0x3ab>
   16b1b:	call   2f70 <__stack_chk_fail@plt>
   16b20:	mov    r9d,0x240
   16b26:	lea    r8,[rip+0x911b]        # 1fc48 <__FUNCTION__.13763>
   16b2d:	lea    rcx,[rip+0x8d74]        # 1f8a8 <__PRETTY_FUNCTION__.14546+0x48>
   16b34:	lea    rdx,[rip+0x8f3d]        # 1fa78 <__PRETTY_FUNCTION__.14546+0x218>
   16b3b:	jmp    169ab <nbd_trip+0x27b>

0000000000016b40 <bdrv_register>:
   16b40:	cmp    QWORD PTR [rdi+0x60],0x0
   16b45:	je     16bc8 <bdrv_register+0x88>
   16b4b:	cmp    QWORD PTR [rdi+0x20],0x0
   16b50:	je     16ba0 <bdrv_register+0x60>
   16b52:	mov    rax,QWORD PTR [rdi+0x70]
   16b56:	mov    edx,DWORD PTR [rdi+0x80]
   16b5c:	cmp    QWORD PTR [rdi+0x78],0x0
   16b61:	jne    16b6e <bdrv_register+0x2e>
   16b63:	lea    rcx,[rip+0x2b76]        # 196e0 <bdrv_aio_flush_em>
   16b6a:	mov    QWORD PTR [rdi+0x78],rcx
   16b6e:	mov    QWORD PTR [rdi+0x120],rax
   16b75:	mov    rax,QWORD PTR [rip+0x2109b4]        # 227530 <first_drv>
   16b7c:	mov    DWORD PTR [rdi+0x128],edx
   16b82:	mov    QWORD PTR [rdi+0x130],0x0
   16b8d:	mov    QWORD PTR [rip+0x21099c],rdi        # 227530 <first_drv>
   16b94:	mov    QWORD PTR [rdi+0x138],rax
   16b9b:	ret    
   16b9c:	nop    DWORD PTR [rax+0x0]
   16ba0:	cmp    QWORD PTR [rdi+0x90],0x0
   16ba8:	jne    16b52 <bdrv_register+0x12>
   16baa:	lea    rax,[rip+0x254f]        # 19100 <bdrv_read_em>
   16bb1:	mov    QWORD PTR [rdi+0x20],rax
   16bb5:	lea    rax,[rip+0x28e4]        # 194a0 <bdrv_write_em>
   16bbc:	mov    QWORD PTR [rdi+0x28],rax
   16bc0:	jmp    16b52 <bdrv_register+0x12>
   16bc2:	nop    WORD PTR [rax+rax*1+0x0]
   16bc8:	lea    rax,[rip+0x2ba1]        # 19770 <bdrv_aio_read_em>
   16bcf:	mov    DWORD PTR [rdi+0x80],0x38
   16bd9:	mov    edx,0x38
   16bde:	mov    QWORD PTR [rdi+0x60],rax
   16be2:	lea    rax,[rip+0x2bf7]        # 197e0 <bdrv_aio_write_em>
   16be9:	mov    QWORD PTR [rdi+0x68],rax
   16bed:	lea    rax,[rip+0x1ac]        # 16da0 <bdrv_aio_cancel_em>
   16bf4:	mov    QWORD PTR [rdi+0x70],rax
   16bf8:	jmp    16b5c <bdrv_register+0x1c>
   16bfd:	nop    DWORD PTR [rax]

0000000000016c00 <bdrv_invalid_protocol_open>:
   16c00:	mov    eax,0xfffffffe
   16c05:	ret    
   16c06:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016c10 <bdrv_aio_cancel_vector>:
   16c10:	mov    rdi,QWORD PTR [rdi+0x40]
   16c14:	mov    rax,QWORD PTR [rdi]
   16c17:	jmp    QWORD PTR [rax]
   16c19:	nop    DWORD PTR [rax+0x0]

0000000000016c20 <bdrv_rw_em_cb>:
   16c20:	mov    DWORD PTR [rdi],esi
   16c22:	ret    
   16c23:	nop    DWORD PTR [rax]
   16c26:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016c30 <find_protocol>:
   16c30:	push   r12
   16c32:	push   rbp
   16c33:	mov    esi,0x3a
   16c38:	push   rbx
   16c39:	mov    rbx,rdi
   16c3c:	sub    rsp,0x90
   16c43:	mov    rax,QWORD PTR fs:0x28
   16c4c:	mov    QWORD PTR [rsp+0x88],rax
   16c54:	xor    eax,eax
   16c56:	call   2fb0 <strchr@plt>
   16c5b:	test   rax,rax
   16c5e:	je     16d00 <find_protocol+0xd0>
   16c64:	sub    rax,rbx
   16c67:	cmp    eax,0x7f
   16c6a:	ja     16cf0 <find_protocol+0xc0>
   16c70:	mov    r12d,eax
   16c73:	movsxd rdx,eax
   16c76:	mov    rbp,rsp
   16c79:	mov    rsi,rbx
   16c7c:	mov    ecx,0x80
   16c81:	mov    rdi,rbp
   16c84:	call   3140 <__memcpy_chk@plt>
   16c89:	mov    rbx,QWORD PTR [rip+0x2108a0]        # 227530 <first_drv>
   16c90:	movsxd rax,r12d
   16c93:	mov    BYTE PTR [rsp+rax*1],0x0
   16c97:	test   rbx,rbx
   16c9a:	je     16cc4 <find_protocol+0x94>
   16c9c:	nop    DWORD PTR [rax+0x0]
   16ca0:	mov    rdi,QWORD PTR [rbx+0x88]
   16ca7:	test   rdi,rdi
   16caa:	je     16cb8 <find_protocol+0x88>
   16cac:	mov    rsi,rbp
   16caf:	call   3110 <strcmp@plt>
   16cb4:	test   eax,eax
   16cb6:	je     16ccb <find_protocol+0x9b>
   16cb8:	mov    rbx,QWORD PTR [rbx+0x138]
   16cbf:	test   rbx,rbx
   16cc2:	jne    16ca0 <find_protocol+0x70>
   16cc4:	lea    rbx,[rip+0x210455]        # 227120 <bdrv_invalid_protocol>
   16ccb:	mov    rcx,QWORD PTR [rsp+0x88]
   16cd3:	xor    rcx,QWORD PTR fs:0x28
   16cdc:	mov    rax,rbx
   16cdf:	jne    16d04 <find_protocol+0xd4>
   16ce1:	add    rsp,0x90
   16ce8:	pop    rbx
   16ce9:	pop    rbp
   16cea:	pop    r12
   16cec:	ret    
   16ced:	nop    DWORD PTR [rax]
   16cf0:	mov    edx,0x7f
   16cf5:	mov    r12d,0x7f
   16cfb:	jmp    16c76 <find_protocol+0x46>
   16d00:	xor    ebx,ebx
   16d02:	jmp    16ccb <find_protocol+0x9b>
   16d04:	call   2f70 <__stack_chk_fail@plt>
   16d09:	nop    DWORD PTR [rax+0x0]

0000000000016d10 <bdrv_aio_rw_vector_cb>:
   16d10:	push   rbp
   16d11:	push   rbx
   16d12:	mov    rbx,rdi
   16d15:	mov    ebp,esi
   16d17:	sub    rsp,0x8
   16d1b:	mov    eax,DWORD PTR [rbx+0x38]
   16d1e:	mov    rdi,QWORD PTR [rdi+0x30]
   16d22:	test   eax,eax
   16d24:	jne    16d3d <bdrv_aio_rw_vector_cb+0x2d>
   16d26:	mov    rax,QWORD PTR [rbx+0x28]
   16d2a:	mov    rsi,rdi
   16d2d:	mov    rdx,QWORD PTR [rax+0x10]
   16d31:	mov    rdi,rax
   16d34:	call   4930 <qemu_iovec_from_buffer>
   16d39:	mov    rdi,QWORD PTR [rbx+0x30]
   16d3d:	call   44a0 <qemu_vfree>
   16d42:	mov    rdi,QWORD PTR [rbx+0x18]
   16d46:	mov    esi,ebp
   16d48:	call   QWORD PTR [rbx+0x10]
   16d4b:	mov    rax,QWORD PTR [rbx]
   16d4e:	mov    rdx,QWORD PTR [rax+0x10]
   16d52:	mov    QWORD PTR [rbx+0x20],rdx
   16d56:	mov    QWORD PTR [rax+0x10],rbx
   16d5a:	add    rsp,0x8
   16d5e:	pop    rbx
   16d5f:	pop    rbp
   16d60:	ret    
   16d61:	nop    DWORD PTR [rax+rax*1+0x0]
   16d66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016d70 <bdrv_aio_bh_cb>:
   16d70:	push   rbx
   16d71:	mov    rbx,rdi
   16d74:	mov    esi,DWORD PTR [rdi+0x30]
   16d77:	mov    rdi,QWORD PTR [rdi+0x18]
   16d7b:	call   QWORD PTR [rbx+0x10]
   16d7e:	mov    rdi,QWORD PTR [rbx+0x28]
   16d82:	call   41c0 <qemu_bh_delete>
   16d87:	mov    rax,QWORD PTR [rbx]
   16d8a:	mov    QWORD PTR [rbx+0x28],0x0
   16d92:	mov    rdx,QWORD PTR [rax+0x10]
   16d96:	mov    QWORD PTR [rbx+0x20],rdx
   16d9a:	mov    QWORD PTR [rax+0x10],rbx
   16d9e:	pop    rbx
   16d9f:	ret    

0000000000016da0 <bdrv_aio_cancel_em>:
   16da0:	push   rbx
   16da1:	mov    rbx,rdi
   16da4:	mov    rdi,QWORD PTR [rdi+0x28]
   16da8:	call   41c0 <qemu_bh_delete>
   16dad:	mov    rax,QWORD PTR [rbx]
   16db0:	mov    QWORD PTR [rbx+0x28],0x0
   16db8:	mov    rdx,QWORD PTR [rax+0x10]
   16dbc:	mov    QWORD PTR [rbx+0x20],rdx
   16dc0:	mov    QWORD PTR [rax+0x10],rbx
   16dc4:	pop    rbx
   16dc5:	ret    
   16dc6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016dd0 <bdrv_check_byte_request>:
   16dd0:	mov    rcx,QWORD PTR [rdi+0x38]
   16dd4:	test   rcx,rcx
   16dd7:	je     16e79 <bdrv_check_byte_request+0xa9>
   16ddd:	push   r12
   16ddf:	push   rbp
   16de0:	mov    r12,rdx
   16de3:	push   rbx
   16de4:	mov    rax,QWORD PTR [rcx+0xf0]
   16deb:	mov    rbp,rsi
   16dee:	mov    rbx,rdi
   16df1:	test   rax,rax
   16df4:	je     16e40 <bdrv_check_byte_request+0x70>
   16df6:	call   rax
   16df8:	test   eax,eax
   16dfa:	je     16e60 <bdrv_check_byte_request+0x90>
   16dfc:	mov    edx,DWORD PTR [rbx+0x880]
   16e02:	test   edx,edx
   16e04:	jne    16e39 <bdrv_check_byte_request+0x69>
   16e06:	mov    rcx,QWORD PTR [rbx+0x38]
   16e0a:	mov    rax,0xffffffffffffff85
   16e11:	test   rcx,rcx
   16e14:	je     16e27 <bdrv_check_byte_request+0x57>
   16e16:	mov    rax,QWORD PTR [rcx+0xa8]
   16e1d:	test   rax,rax
   16e20:	je     16e70 <bdrv_check_byte_request+0xa0>
   16e22:	mov    rdi,rbx
   16e25:	call   rax
   16e27:	test   rbp,rbp
   16e2a:	js     16e50 <bdrv_check_byte_request+0x80>
   16e2c:	cmp    rbp,rax
   16e2f:	jg     16e50 <bdrv_check_byte_request+0x80>
   16e31:	sub    rax,rbp
   16e34:	cmp    r12,rax
   16e37:	ja     16e50 <bdrv_check_byte_request+0x80>
   16e39:	xor    eax,eax
   16e3b:	pop    rbx
   16e3c:	pop    rbp
   16e3d:	pop    r12
   16e3f:	ret    
   16e40:	mov    eax,DWORD PTR [rdi+0x880]
   16e46:	test   eax,eax
   16e48:	je     16e16 <bdrv_check_byte_request+0x46>
   16e4a:	jmp    16e39 <bdrv_check_byte_request+0x69>
   16e4c:	nop    DWORD PTR [rax+0x0]
   16e50:	mov    eax,0xfffffffb
   16e55:	jmp    16e3b <bdrv_check_byte_request+0x6b>
   16e57:	nop    WORD PTR [rax+rax*1+0x0]
   16e60:	mov    eax,0xffffff85
   16e65:	jmp    16e3b <bdrv_check_byte_request+0x6b>
   16e67:	nop    WORD PTR [rax+rax*1+0x0]
   16e70:	mov    rax,QWORD PTR [rbx]
   16e73:	shl    rax,0x9
   16e77:	jmp    16e27 <bdrv_check_byte_request+0x57>
   16e79:	mov    eax,0xffffff85
   16e7e:	ret    
   16e7f:	nop

0000000000016e80 <path_is_absolute>:
   16e80:	push   rbx
   16e81:	mov    esi,0x3a
   16e86:	mov    rbx,rdi
   16e89:	call   2fb0 <strchr@plt>
   16e8e:	lea    rdx,[rax+0x1]
   16e92:	test   rax,rax
   16e95:	cmovne rbx,rdx
   16e99:	xor    eax,eax
   16e9b:	cmp    BYTE PTR [rbx],0x2f
   16e9e:	pop    rbx
   16e9f:	sete   al
   16ea2:	ret    
   16ea3:	nop    DWORD PTR [rax]
   16ea6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000016eb0 <path_combine>:
   16eb0:	test   esi,esi
   16eb2:	jle    16f78 <path_combine+0xc8>
   16eb8:	push   r15
   16eba:	push   r14
   16ebc:	movsxd r14,esi
   16ebf:	push   r13
   16ec1:	push   r12
   16ec3:	mov    r13,rdi
   16ec6:	push   rbp
   16ec7:	push   rbx
   16ec8:	mov    esi,0x3a
   16ecd:	mov    rdi,rcx
   16ed0:	mov    r12,rcx
   16ed3:	mov    rbp,rdx
   16ed6:	sub    rsp,0x8
   16eda:	mov    r15,r14
   16edd:	call   2fb0 <strchr@plt>
   16ee2:	lea    rdx,[rax+0x1]
   16ee6:	test   rax,rax
   16ee9:	mov    rax,rdx
   16eec:	cmove  rax,r12
   16ef0:	cmp    BYTE PTR [rax],0x2f
   16ef3:	je     16f90 <path_combine+0xe0>
   16ef9:	mov    esi,0x3a
   16efe:	mov    rdi,rbp
   16f01:	call   2fb0 <strchr@plt>
   16f06:	mov    esi,0x2f
   16f0b:	mov    rbx,rax
   16f0e:	mov    rdi,rbp
   16f11:	call   2fe0 <strrchr@plt>
   16f16:	test   rbx,rbx
   16f19:	je     16f80 <path_combine+0xd0>
   16f1b:	add    rbx,0x1
   16f1f:	test   rax,rax
   16f22:	mov    r8,rbp
   16f25:	je     16f2b <path_combine+0x7b>
   16f27:	lea    r8,[rax+0x1]
   16f2b:	cmp    r8,rbx
   16f2e:	cmovb  r8,rbx
   16f32:	lea    ebx,[r15-0x1]
   16f36:	sub    r8,rbp
   16f39:	cmp    r15d,r8d
   16f3c:	cmovg  ebx,r8d
   16f40:	movsxd rbx,ebx
   16f43:	mov    rsi,rbp
   16f46:	mov    rdi,r13
   16f49:	mov    rdx,rbx
   16f4c:	call   3190 <memcpy@plt>
   16f51:	mov    BYTE PTR [r13+rbx*1+0x0],0x0
   16f57:	add    rsp,0x8
   16f5b:	mov    rdx,r12
   16f5e:	pop    rbx
   16f5f:	mov    rsi,r14
   16f62:	mov    rdi,r13
   16f65:	pop    rbp
   16f66:	pop    r12
   16f68:	pop    r13
   16f6a:	pop    r14
   16f6c:	pop    r15
   16f6e:	jmp    45e0 <pstrcat>
   16f73:	nop    DWORD PTR [rax+rax*1+0x0]
   16f78:	repz ret 
   16f7a:	nop    WORD PTR [rax+rax*1+0x0]
   16f80:	test   rax,rax
   16f83:	mov    rbx,rbp
   16f86:	jne    16f27 <path_combine+0x77>
   16f88:	xor    ebx,ebx
   16f8a:	jmp    16f40 <path_combine+0x90>
   16f8c:	nop    DWORD PTR [rax+0x0]
   16f90:	add    rsp,0x8
   16f94:	mov    rdx,r12
   16f97:	mov    rsi,r14
   16f9a:	pop    rbx
   16f9b:	mov    rdi,r13
   16f9e:	pop    rbp
   16f9f:	pop    r12
   16fa1:	pop    r13
   16fa3:	pop    r14
   16fa5:	pop    r15
   16fa7:	jmp    45a0 <pstrcpy>
   16fac:	nop    DWORD PTR [rax+0x0]

0000000000016fb0 <bdrv_new>:
   16fb0:	push   rbp
   16fb1:	push   rbx
   16fb2:	mov    rbp,rdi
   16fb5:	mov    edi,0x8c8
   16fba:	sub    rsp,0x8
   16fbe:	call   4a20 <qemu_mallocz>
   16fc3:	lea    rdi,[rax+0x898]
   16fca:	mov    rdx,rbp
   16fcd:	mov    esi,0x20
   16fd2:	mov    rbx,rax
   16fd5:	call   45a0 <pstrcpy>
   16fda:	cmp    BYTE PTR [rbp+0x0],0x0
   16fde:	je     16ffb <bdrv_new+0x4b>
   16fe0:	mov    rcx,QWORD PTR [rip+0x210671]        # 227658 <bdrv_first>
   16fe7:	lea    rax,[rip+0x21066a]        # 227658 <bdrv_first>
   16fee:	test   rcx,rcx
   16ff1:	jne    1700b <bdrv_new+0x5b>
   16ff3:	nop    DWORD PTR [rax+rax*1+0x0]
   16ff8:	mov    QWORD PTR [rax],rbx
   16ffb:	add    rsp,0x8
   16fff:	mov    rax,rbx
   17002:	pop    rbx
   17003:	pop    rbp
   17004:	ret    
   17005:	nop    DWORD PTR [rax]
   17008:	mov    rcx,rdx
   1700b:	mov    rdx,QWORD PTR [rcx+0x8b8]
   17012:	test   rdx,rdx
   17015:	jne    17008 <bdrv_new+0x58>
   17017:	lea    rax,[rcx+0x8b8]
   1701e:	jmp    16ff8 <bdrv_new+0x48>

0000000000017020 <bdrv_find_format>:
   17020:	push   rbp
   17021:	push   rbx
   17022:	sub    rsp,0x8
   17026:	mov    rbx,QWORD PTR [rip+0x210503]        # 227530 <first_drv>
   1702d:	test   rbx,rbx
   17030:	je     1705b <bdrv_find_format+0x3b>
   17032:	mov    rbp,rdi
   17035:	jmp    1704c <bdrv_find_format+0x2c>
   17037:	nop    WORD PTR [rax+rax*1+0x0]
   17040:	mov    rbx,QWORD PTR [rbx+0x138]
   17047:	test   rbx,rbx
   1704a:	je     1705b <bdrv_find_format+0x3b>
   1704c:	mov    rdi,QWORD PTR [rbx]
   1704f:	mov    rsi,rbp
   17052:	call   3110 <strcmp@plt>
   17057:	test   eax,eax
   17059:	jne    17040 <bdrv_find_format+0x20>
   1705b:	add    rsp,0x8
   1705f:	mov    rax,rbx
   17062:	pop    rbx
   17063:	pop    rbp
   17064:	ret    
   17065:	nop
   17066:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000017070 <bdrv_create>:
   17070:	mov    rax,QWORD PTR [rdi+0x38]
   17074:	mov    r9,rsi
   17077:	mov    rsi,rdx
   1707a:	mov    rdx,rcx
   1707d:	test   rax,rax
   17080:	je     1708a <bdrv_create+0x1a>
   17082:	mov    ecx,r8d
   17085:	mov    rdi,r9
   17088:	jmp    rax
   1708a:	mov    eax,0xffffffa1
   1708f:	ret    

0000000000017090 <get_tmp_filename>:
   17090:	push   rbp
   17091:	push   rbx
   17092:	mov    rbp,rdi
   17095:	lea    rdi,[rip+0x8c59]        # 1fcf5 <__FUNCTION__.13696+0x2d>
   1709c:	mov    ebx,esi
   1709e:	sub    rsp,0x8
   170a2:	call   2e10 <getenv@plt>
   170a7:	lea    r9,[rip+0x8c42]        # 1fcf0 <__FUNCTION__.13696+0x28>
   170ae:	test   rax,rax
   170b1:	lea    r8,[rip+0x8c44]        # 1fcfc <__FUNCTION__.13696+0x34>
   170b8:	movsxd rsi,ebx
   170bb:	mov    rdi,rbp
   170be:	mov    rcx,0xffffffffffffffff
   170c5:	cmovne r9,rax
   170c9:	mov    edx,0x1
   170ce:	xor    eax,eax
   170d0:	call   2e30 <__snprintf_chk@plt>
   170d5:	mov    rdi,rbp
   170d8:	call   30c0 <mkstemp64@plt>
   170dd:	add    rsp,0x8
   170e1:	mov    edi,eax
   170e3:	pop    rbx
   170e4:	pop    rbp
   170e5:	jmp    3040 <close@plt>
   170ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000000170f0 <bdrv_delete>:
   170f0:	mov    rax,QWORD PTR [rip+0x210561]        # 227658 <bdrv_first>
   170f7:	push   rbx
   170f8:	mov    rbx,rdi
   170fb:	cmp    rax,rdi
   170fe:	je     17160 <bdrv_delete+0x70>
   17100:	test   rax,rax
   17103:	jne    17115 <bdrv_delete+0x25>
   17105:	jmp    17148 <bdrv_delete+0x58>
   17107:	nop    WORD PTR [rax+rax*1+0x0]
   17110:	test   rax,rax
   17113:	je     17150 <bdrv_delete+0x60>
   17115:	lea    rdx,[rax+0x8b8]
   1711c:	mov    rax,QWORD PTR [rax+0x8b8]
   17123:	cmp    rbx,rax
   17126:	jne    17110 <bdrv_delete+0x20>
   17128:	mov    rax,QWORD PTR [rbx+0x8b8]
   1712f:	mov    QWORD PTR [rdx],rax
   17132:	mov    rdi,rbx
   17135:	call   17170 <bdrv_close>
   1713a:	mov    rdi,rbx
   1713d:	pop    rbx
   1713e:	jmp    49c0 <qemu_free>
   17143:	nop    DWORD PTR [rax+rax*1+0x0]
   17148:	lea    rdx,[rip+0x210509]        # 227658 <bdrv_first>
   1714f:	nop
   17150:	test   rbx,rbx
   17153:	jne    17132 <bdrv_delete+0x42>
   17155:	jmp    17128 <bdrv_delete+0x38>
   17157:	nop    WORD PTR [rax+rax*1+0x0]
   17160:	lea    rdx,[rip+0x2104f1]        # 227658 <bdrv_first>
   17167:	jmp    17128 <bdrv_delete+0x38>
   17169:	nop    DWORD PTR [rax+0x0]

0000000000017170 <bdrv_close>:
   17170:	mov    rax,QWORD PTR [rdi+0x38]
   17174:	test   rax,rax
   17177:	je     171d8 <bdrv_close+0x68>
   17179:	push   rbx
   1717a:	mov    rbx,rdi
   1717d:	mov    rdi,QWORD PTR [rdi+0x850]
   17184:	test   rdi,rdi
   17187:	je     17192 <bdrv_close+0x22>
   17189:	call   170f0 <bdrv_delete>
   1718e:	mov    rax,QWORD PTR [rbx+0x38]
   17192:	mov    rdi,rbx
   17195:	call   QWORD PTR [rax+0x30]
   17198:	mov    rdi,QWORD PTR [rbx+0x40]
   1719c:	call   49c0 <qemu_free>
   171a1:	mov    rax,QWORD PTR [rbx+0x28]
   171a5:	mov    QWORD PTR [rbx+0x40],0x0
   171ad:	mov    QWORD PTR [rbx+0x38],0x0
   171b5:	mov    DWORD PTR [rbx+0x84c],0x1
   171bf:	test   rax,rax
   171c2:	je     171d0 <bdrv_close+0x60>
   171c4:	mov    rdi,QWORD PTR [rbx+0x30]
   171c8:	pop    rbx
   171c9:	jmp    rax
   171cb:	nop    DWORD PTR [rax+rax*1+0x0]
   171d0:	pop    rbx
   171d1:	ret    
   171d2:	nop    WORD PTR [rax+rax*1+0x0]
   171d8:	repz ret 
   171da:	nop    WORD PTR [rax+rax*1+0x0]

00000000000171e0 <bdrv_read>:
   171e0:	push   r15
   171e2:	push   r14
   171e4:	push   r13
   171e6:	push   r12
   171e8:	push   rbp
   171e9:	push   rbx
   171ea:	sub    rsp,0x28
   171ee:	mov    r13,QWORD PTR [rdi+0x38]
   171f2:	test   r13,r13
   171f5:	je     172e8 <bdrv_read+0x108>
   171fb:	mov    eax,ecx
   171fd:	mov    DWORD PTR [rsp+0x1c],ecx
   17201:	mov    r15,rsi
   17204:	mov    rcx,rsi
   17207:	shl    r15,0x9
   1720b:	mov    QWORD PTR [rsp+0x10],rdx
   17210:	neg    rcx
   17213:	test   rsi,rsi
   17216:	mov    rbp,rsi
   17219:	cmovns rcx,r15
   1721d:	shl    eax,0x9
   17220:	mov    rbx,rdi
   17223:	movsxd r12,eax
   17226:	mov    rsi,rcx
   17229:	mov    QWORD PTR [rsp+0x8],rcx
   1722e:	mov    rdx,r12
   17231:	call   16dd0 <bdrv_check_byte_request>
   17236:	test   eax,eax
   17238:	mov    rcx,QWORD PTR [rsp+0x8]
   1723d:	jne    172d8 <bdrv_read+0xf8>
   17243:	mov    rdx,r12
   17246:	mov    rsi,rcx
   17249:	mov    rdi,rbx
   1724c:	call   16dd0 <bdrv_check_byte_request>
   17251:	test   eax,eax
   17253:	mov    DWORD PTR [rsp+0x8],eax
   17257:	jne    172d8 <bdrv_read+0xf8>
   17259:	mov    rax,QWORD PTR [r13+0x90]
   17260:	test   rax,rax
   17263:	je     172b0 <bdrv_read+0xd0>
   17265:	mov    ecx,r12d
   17268:	mov    rdx,QWORD PTR [rsp+0x10]
   1726d:	mov    rsi,r15
   17270:	mov    rdi,rbx
   17273:	call   rax
   17275:	test   eax,eax
   17277:	mov    r8d,eax
   1727a:	js     17295 <bdrv_read+0xb5>
   1727c:	cmp    eax,r12d
   1727f:	jne    172e0 <bdrv_read+0x100>
   17281:	add    QWORD PTR [rbx+0x860],r12
   17288:	add    QWORD PTR [rbx+0x870],0x1
   17290:	mov    r8d,DWORD PTR [rsp+0x8]
   17295:	add    rsp,0x28
   17299:	mov    eax,r8d
   1729c:	pop    rbx
   1729d:	pop    rbp
   1729e:	pop    r12
   172a0:	pop    r13
   172a2:	pop    r14
   172a4:	pop    r15
   172a6:	ret    
   172a7:	nop    WORD PTR [rax+rax*1+0x0]
   172b0:	mov    rax,QWORD PTR [r13+0x20]
   172b4:	mov    ecx,DWORD PTR [rsp+0x1c]
   172b8:	mov    rsi,rbp
   172bb:	mov    rdx,QWORD PTR [rsp+0x10]
   172c0:	add    rsp,0x28
   172c4:	mov    rdi,rbx
   172c7:	pop    rbx
   172c8:	pop    rbp
   172c9:	pop    r12
   172cb:	pop    r13
   172cd:	pop    r14
   172cf:	pop    r15
   172d1:	jmp    rax
   172d3:	nop    DWORD PTR [rax+rax*1+0x0]
   172d8:	mov    r8d,0xfffffffb
   172de:	jmp    17295 <bdrv_read+0xb5>
   172e0:	mov    r8d,0xffffffea
   172e6:	jmp    17295 <bdrv_read+0xb5>
   172e8:	mov    r8d,0xffffff85
   172ee:	jmp    17295 <bdrv_read+0xb5>

00000000000172f0 <bdrv_pread_em>:
   172f0:	push   r15
   172f2:	push   r14
   172f4:	mov    r15,rsi
   172f7:	push   r13
   172f9:	push   r12
   172fb:	mov    r8,rdi
   172fe:	push   rbp
   172ff:	push   rbx
   17300:	mov    ebx,esi
   17302:	neg    ebx
   17304:	mov    r14,rdx
   17307:	mov    r12d,ecx
   1730a:	sub    rsp,0x228
   17311:	and    ebx,0x1ff
   17317:	mov    ebp,ecx
   17319:	mov    rax,QWORD PTR fs:0x28
   17322:	mov    QWORD PTR [rsp+0x218],rax
   1732a:	xor    eax,eax
   1732c:	cmp    ecx,ebx
   1732e:	cmovle ebx,ecx
   17331:	sar    r15,0x9
   17335:	test   ebx,ebx
   17337:	jg     173f0 <bdrv_pread_em+0x100>
   1733d:	mov    ebx,ebp
   1733f:	sar    ebx,0x9
   17342:	test   ebx,ebx
   17344:	jg     173a8 <bdrv_pread_em+0xb8>
   17346:	test   ebp,ebp
   17348:	jle    17378 <bdrv_pread_em+0x88>
   1734a:	lea    rbx,[rsp+0x10]
   1734f:	mov    ecx,0x1
   17354:	mov    rsi,r15
   17357:	mov    rdi,r8
   1735a:	mov    rdx,rbx
   1735d:	call   171e0 <bdrv_read>
   17362:	test   eax,eax
   17364:	js     174a0 <bdrv_pread_em+0x1b0>
   1736a:	movsxd rdx,ebp
   1736d:	mov    rsi,rbx
   17370:	mov    rdi,r14
   17373:	call   3190 <memcpy@plt>
   17378:	mov    eax,r12d
   1737b:	mov    rdi,QWORD PTR [rsp+0x218]
   17383:	xor    rdi,QWORD PTR fs:0x28
   1738c:	jne    174c5 <bdrv_pread_em+0x1d5>
   17392:	add    rsp,0x228
   17399:	pop    rbx
   1739a:	pop    rbp
   1739b:	pop    r12
   1739d:	pop    r13
   1739f:	pop    r14
   173a1:	pop    r15
   173a3:	ret    
   173a4:	nop    DWORD PTR [rax+0x0]
   173a8:	mov    ecx,ebx
   173aa:	mov    rdx,r14
   173ad:	mov    rsi,r15
   173b0:	mov    rdi,r8
   173b3:	mov    QWORD PTR [rsp+0x8],r8
   173b8:	call   171e0 <bdrv_read>
   173bd:	test   eax,eax
   173bf:	js     174a0 <bdrv_pread_em+0x1b0>
   173c5:	mov    eax,ebp
   173c7:	movsxd rbx,ebx
   173ca:	mov    r8,QWORD PTR [rsp+0x8]
   173cf:	and    eax,0xfffffe00
   173d4:	add    r15,rbx
   173d7:	movsxd rdx,eax
   173da:	sub    ebp,eax
   173dc:	add    r14,rdx
   173df:	test   ebp,ebp
   173e1:	jg     1734a <bdrv_pread_em+0x5a>
   173e7:	jmp    17378 <bdrv_pread_em+0x88>
   173e9:	nop    DWORD PTR [rax+0x0]
   173f0:	lea    rbp,[rsp+0x10]
   173f5:	mov    r13,rsi
   173f8:	mov    ecx,0x1
   173fd:	mov    rsi,r15
   17400:	mov    QWORD PTR [rsp+0x8],rdi
   17405:	mov    rdx,rbp
   17408:	call   171e0 <bdrv_read>
   1740d:	test   eax,eax
   1740f:	mov    r8,QWORD PTR [rsp+0x8]
   17414:	js     174a0 <bdrv_pread_em+0x1b0>
   1741a:	and    r13d,0x1ff
   17421:	cmp    ebx,0x8
   17424:	movsxd rax,ebx
   17427:	lea    rsi,[rbp+r13*1+0x0]
   1742c:	jae    17450 <bdrv_pread_em+0x160>
   1742e:	test   bl,0x4
   17431:	jne    174b0 <bdrv_pread_em+0x1c0>
   17433:	test   ebx,ebx
   17435:	jne    17480 <bdrv_pread_em+0x190>
   17437:	mov    ebp,r12d
   1743a:	sub    ebp,ebx
   1743c:	je     17378 <bdrv_pread_em+0x88>
   17442:	add    r15,0x1
   17446:	add    r14,rax
   17449:	jmp    1733d <bdrv_pread_em+0x4d>
   1744e:	xchg   ax,ax
   17450:	mov    rdx,QWORD PTR [rsi]
   17453:	lea    rdi,[r14+0x8]
   17457:	and    rdi,0xfffffffffffffff8
   1745b:	mov    QWORD PTR [r14],rdx
   1745e:	mov    edx,ebx
   17460:	mov    rcx,QWORD PTR [rsi+rdx*1-0x8]
   17465:	mov    QWORD PTR [r14+rdx*1-0x8],rcx
   1746a:	mov    rcx,r14
   1746d:	sub    rcx,rdi
   17470:	sub    rsi,rcx
   17473:	add    ecx,ebx
   17475:	shr    ecx,0x3
   17478:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1747b:	jmp    17437 <bdrv_pread_em+0x147>
   1747d:	nop    DWORD PTR [rax]
   17480:	movzx  edx,BYTE PTR [rsi]
   17483:	test   bl,0x2
   17486:	mov    BYTE PTR [r14],dl
   17489:	je     17437 <bdrv_pread_em+0x147>
   1748b:	mov    edx,ebx
   1748d:	movzx  ecx,WORD PTR [rsi+rdx*1-0x2]
   17492:	mov    WORD PTR [r14+rdx*1-0x2],cx
   17498:	jmp    17437 <bdrv_pread_em+0x147>
   1749a:	nop    WORD PTR [rax+rax*1+0x0]
   174a0:	mov    eax,0xfffffffb
   174a5:	jmp    1737b <bdrv_pread_em+0x8b>
   174aa:	nop    WORD PTR [rax+rax*1+0x0]
   174b0:	mov    edx,DWORD PTR [rsi]
   174b2:	mov    DWORD PTR [r14],edx
   174b5:	mov    edx,ebx
   174b7:	mov    ecx,DWORD PTR [rsi+rdx*1-0x4]
   174bb:	mov    DWORD PTR [r14+rdx*1-0x4],ecx
   174c0:	jmp    17437 <bdrv_pread_em+0x147>
   174c5:	call   2f70 <__stack_chk_fail@plt>
   174ca:	nop    WORD PTR [rax+rax*1+0x0]

00000000000174d0 <guess_disk_lchs>:
   174d0:	push   r15
   174d2:	push   r14
   174d4:	mov    r15,rdi
   174d7:	push   r13
   174d9:	push   r12
   174db:	mov    r14,rdx
   174de:	push   rbp
   174df:	push   rbx
   174e0:	mov    r12,rsi
   174e3:	mov    r13,rcx
   174e6:	sub    rsp,0x218
   174ed:	mov    rax,QWORD PTR fs:0x28
   174f6:	mov    QWORD PTR [rsp+0x208],rax
   174fe:	xor    eax,eax
   17500:	mov    rax,QWORD PTR [rdi+0x38]
   17504:	test   rax,rax
   17507:	je     17530 <guess_disk_lchs+0x60>
   17509:	mov    rax,QWORD PTR [rax+0xa8]
   17510:	test   rax,rax
   17513:	je     17608 <guess_disk_lchs+0x138>
   17519:	call   rax
   1751b:	test   rax,rax
   1751e:	js     17530 <guess_disk_lchs+0x60>
   17520:	sar    rax,0x9
   17524:	mov    rbp,rax
   17527:	jmp    17532 <guess_disk_lchs+0x62>
   17529:	nop    DWORD PTR [rax+0x0]
   17530:	xor    ebp,ebp
   17532:	mov    rbx,rsp
   17535:	xor    esi,esi
   17537:	mov    ecx,0x1
   1753c:	mov    rdx,rbx
   1753f:	mov    rdi,r15
   17542:	call   171e0 <bdrv_read>
   17547:	test   eax,eax
   17549:	js     175da <guess_disk_lchs+0x10a>
   1754f:	cmp    BYTE PTR [rsp+0x1fe],0x55
   17557:	jne    175da <guess_disk_lchs+0x10a>
   1755d:	cmp    BYTE PTR [rsp+0x1ff],0xaa
   17565:	jne    175da <guess_disk_lchs+0x10a>
   17567:	lea    r8,[rbx+0x1ca]
   1756e:	lea    r9,[rbx+0x1c3]
   17575:	xor    ecx,ecx
   17577:	add    rbx,0x1c4
   1757e:	mov    eax,DWORD PTR [r8+rcx*1]
   17582:	test   eax,eax
   17584:	je     175d0 <guess_disk_lchs+0x100>
   17586:	movzx  eax,BYTE PTR [r9+rcx*1]
   1758b:	test   al,al
   1758d:	je     175d0 <guess_disk_lchs+0x100>
   1758f:	movzx  esi,BYTE PTR [rbx+rcx*1]
   17593:	and    esi,0x3f
   17596:	je     175d0 <guess_disk_lchs+0x100>
   17598:	lea    edi,[rax+0x1]
   1759b:	movzx  esi,sil
   1759f:	xor    edx,edx
   175a1:	mov    rax,rbp
   175a4:	mov    r10d,edi
   175a7:	imul   r10d,esi
   175ab:	movsxd r10,r10d
   175ae:	div    r10
   175b1:	lea    edx,[rax-0x1]
   175b4:	cmp    edx,0x3ffe
   175ba:	ja     175d0 <guess_disk_lchs+0x100>
   175bc:	mov    DWORD PTR [r14],edi
   175bf:	mov    DWORD PTR [r13+0x0],esi
   175c3:	mov    DWORD PTR [r12],eax
   175c7:	xor    eax,eax
   175c9:	jmp    175df <guess_disk_lchs+0x10f>
   175cb:	nop    DWORD PTR [rax+rax*1+0x0]
   175d0:	add    rcx,0x10
   175d4:	cmp    rcx,0x40
   175d8:	jne    1757e <guess_disk_lchs+0xae>
   175da:	mov    eax,0xffffffff
   175df:	mov    rdx,QWORD PTR [rsp+0x208]
   175e7:	xor    rdx,QWORD PTR fs:0x28
   175f0:	jne    17614 <guess_disk_lchs+0x144>
   175f2:	add    rsp,0x218
   175f9:	pop    rbx
   175fa:	pop    rbp
   175fb:	pop    r12
   175fd:	pop    r13
   175ff:	pop    r14
   17601:	pop    r15
   17603:	ret    
   17604:	nop    DWORD PTR [rax+0x0]
   17608:	mov    rax,QWORD PTR [rdi]
   1760b:	shl    rax,0x9
   1760f:	jmp    1751b <guess_disk_lchs+0x4b>
   17614:	call   2f70 <__stack_chk_fail@plt>
   17619:	nop    DWORD PTR [rax+0x0]

0000000000017620 <bdrv_write>:
   17620:	push   r15
   17622:	push   r14
   17624:	push   r13
   17626:	push   r12
   17628:	push   rbp
   17629:	push   rbx
   1762a:	sub    rsp,0x18
   1762e:	mov    r13,QWORD PTR [rdi+0x38]
   17632:	test   r13,r13
   17635:	je     17737 <bdrv_write+0x117>
   1763b:	mov    eax,DWORD PTR [rdi+0x8]
   1763e:	mov    r14,rdi
   17641:	test   eax,eax
   17643:	jne    17728 <bdrv_write+0x108>
   17649:	mov    rbx,rsi
   1764c:	mov    r12d,ecx
   1764f:	neg    rsi
   17652:	mov    rax,rbx
   17655:	mov    rbp,rdx
   17658:	mov    r15d,ecx
   1765b:	shl    rax,0x9
   1765f:	test   rbx,rbx
   17662:	cmovns rsi,rax
   17666:	shl    r12d,0x9
   1766a:	mov    QWORD PTR [rsp+0x8],rax
   1766f:	movsxd rdx,r12d
   17672:	call   16dd0 <bdrv_check_byte_request>
   17677:	test   eax,eax
   17679:	jne    17730 <bdrv_write+0x110>
   1767f:	mov    rax,QWORD PTR [r13+0x98]
   17686:	test   rax,rax
   17689:	jne    176b0 <bdrv_write+0x90>
   1768b:	mov    rax,QWORD PTR [r13+0x28]
   1768f:	add    rsp,0x18
   17693:	mov    ecx,r15d
   17696:	mov    rdx,rbp
   17699:	mov    rsi,rbx
   1769c:	mov    rdi,r14
   1769f:	pop    rbx
   176a0:	pop    rbp
   176a1:	pop    r12
   176a3:	pop    r13
   176a5:	pop    r14
   176a7:	pop    r15
   176a9:	jmp    rax
   176ab:	nop    DWORD PTR [rax+rax*1+0x0]
   176b0:	xor    r15d,r15d
   176b3:	jmp    176ca <bdrv_write+0xaa>
   176b5:	nop    DWORD PTR [rax]
   176b8:	add    r15d,ebx
   176bb:	add    rbp,rbx
   176be:	cmp    r15d,r12d
   176c1:	je     17710 <bdrv_write+0xf0>
   176c3:	mov    rax,QWORD PTR [r13+0x98]
   176ca:	mov    ecx,r12d
   176cd:	mov    rdx,rbp
   176d0:	mov    rsi,QWORD PTR [rsp+0x8]
   176d5:	sub    ecx,r15d
   176d8:	mov    rdi,r14
   176db:	call   rax
   176dd:	movsxd rbx,eax
   176e0:	test   ebx,ebx
   176e2:	jns    176b8 <bdrv_write+0x98>
   176e4:	lea    rsi,[rip+0x861e]        # 1fd09 <__FUNCTION__.13696+0x41>
   176eb:	mov    edx,ebx
   176ed:	mov    edi,0x1
   176f2:	xor    eax,eax
   176f4:	call   32b0 <__printf_chk@plt>
   176f9:	add    rsp,0x18
   176fd:	mov    eax,ebx
   176ff:	pop    rbx
   17700:	pop    rbp
   17701:	pop    r12
   17703:	pop    r13
   17705:	pop    r14
   17707:	pop    r15
   17709:	ret    
   1770a:	nop    WORD PTR [rax+rax*1+0x0]
   17710:	add    QWORD PTR [r14+0x868],r15
   17717:	add    QWORD PTR [r14+0x878],0x1
   1771f:	xor    ebx,ebx
   17721:	jmp    176f9 <bdrv_write+0xd9>
   17723:	nop    DWORD PTR [rax+rax*1+0x0]
   17728:	mov    ebx,0xfffffff3
   1772d:	jmp    176f9 <bdrv_write+0xd9>
   1772f:	nop
   17730:	mov    ebx,0xfffffffb
   17735:	jmp    176f9 <bdrv_write+0xd9>
   17737:	mov    ebx,0xffffff85
   1773c:	jmp    176f9 <bdrv_write+0xd9>
   1773e:	xchg   ax,ax

0000000000017740 <bdrv_commit>:
   17740:	push   r15
   17742:	push   r14
   17744:	push   r13
   17746:	push   r12
   17748:	push   rbp
   17749:	push   rbx
   1774a:	sub    rsp,0x238
   17751:	mov    r15,QWORD PTR [rdi+0x38]
   17755:	mov    rax,QWORD PTR fs:0x28
   1775e:	mov    QWORD PTR [rsp+0x228],rax
   17766:	xor    eax,eax
   17768:	test   r15,r15
   1776b:	je     178a6 <bdrv_commit+0x166>
   17771:	mov    eax,DWORD PTR [rdi+0x8]
   17774:	mov    rbp,rdi
   17777:	test   eax,eax
   17779:	mov    DWORD PTR [rsp+0xc],eax
   1777d:	jne    1789c <bdrv_commit+0x15c>
   17783:	cmp    QWORD PTR [rdi+0x850],0x0
   1778b:	je     178b0 <bdrv_commit+0x170>
   17791:	mov    rax,QWORD PTR [r15+0xa8]
   17798:	test   rax,rax
   1779b:	je     17890 <bdrv_commit+0x150>
   177a1:	call   rax
   177a3:	sar    rax,0x9
   177a7:	test   rax,rax
   177aa:	mov    r14,rax
   177ad:	jle    177e4 <bdrv_commit+0xa4>
   177af:	lea    rax,[rsp+0x1c]
   177b4:	lea    r13,[rsp+0x20]
   177b9:	xor    r12d,r12d
   177bc:	mov    QWORD PTR [rsp],rax
   177c0:	mov    rcx,QWORD PTR [rsp]
   177c4:	mov    edx,0x10000
   177c9:	mov    rsi,r12
   177cc:	mov    rdi,rbp
   177cf:	call   QWORD PTR [r15+0x48]
   177d3:	test   eax,eax
   177d5:	jne    17800 <bdrv_commit+0xc0>
   177d7:	movsxd rax,DWORD PTR [rsp+0x1c]
   177dc:	add    r12,rax
   177df:	cmp    r12,r14
   177e2:	jl     177c0 <bdrv_commit+0x80>
   177e4:	mov    rax,QWORD PTR [r15+0x58]
   177e8:	test   rax,rax
   177eb:	je     17859 <bdrv_commit+0x119>
   177ed:	mov    rdi,rbp
   177f0:	call   rax
   177f2:	mov    DWORD PTR [rsp+0xc],eax
   177f6:	jmp    17859 <bdrv_commit+0x119>
   177f8:	nop    DWORD PTR [rax+rax*1+0x0]
   17800:	mov    eax,DWORD PTR [rsp+0x1c]
   17804:	test   eax,eax
   17806:	jle    177df <bdrv_commit+0x9f>
   17808:	mov    rbx,r12
   1780b:	jmp    1783a <bdrv_commit+0xfa>
   1780d:	nop    DWORD PTR [rax]
   17810:	mov    rdi,QWORD PTR [rbp+0x850]
   17817:	mov    ecx,0x1
   1781c:	mov    rdx,r13
   1781f:	mov    rsi,rbx
   17822:	call   17620 <bdrv_write>
   17827:	test   eax,eax
   17829:	jne    17851 <bdrv_commit+0x111>
   1782b:	add    rbx,0x1
   1782f:	mov    eax,ebx
   17831:	sub    eax,r12d
   17834:	cmp    DWORD PTR [rsp+0x1c],eax
   17838:	jle    17888 <bdrv_commit+0x148>
   1783a:	mov    ecx,0x1
   1783f:	mov    rdx,r13
   17842:	mov    rsi,rbx
   17845:	mov    rdi,rbp
   17848:	call   171e0 <bdrv_read>
   1784d:	test   eax,eax
   1784f:	je     17810 <bdrv_commit+0xd0>
   17851:	mov    DWORD PTR [rsp+0xc],0xfffffffb
   17859:	mov    rdx,QWORD PTR [rsp+0x228]
   17861:	xor    rdx,QWORD PTR fs:0x28
   1786a:	mov    eax,DWORD PTR [rsp+0xc]
   1786e:	jne    178ba <bdrv_commit+0x17a>
   17870:	add    rsp,0x238
   17877:	pop    rbx
   17878:	pop    rbp
   17879:	pop    r12
   1787b:	pop    r13
   1787d:	pop    r14
   1787f:	pop    r15
   17881:	ret    
   17882:	nop    WORD PTR [rax+rax*1+0x0]
   17888:	mov    r12,rbx
   1788b:	jmp    177df <bdrv_commit+0x9f>
   17890:	mov    rax,QWORD PTR [rdi]
   17893:	shl    rax,0x9
   17897:	jmp    177a3 <bdrv_commit+0x63>
   1789c:	mov    DWORD PTR [rsp+0xc],0xfffffff3
   178a4:	jmp    17859 <bdrv_commit+0x119>
   178a6:	mov    DWORD PTR [rsp+0xc],0xffffff85
   178ae:	jmp    17859 <bdrv_commit+0x119>
   178b0:	mov    DWORD PTR [rsp+0xc],0xffffffa1
   178b8:	jmp    17859 <bdrv_commit+0x119>
   178ba:	call   2f70 <__stack_chk_fail@plt>
   178bf:	nop

00000000000178c0 <bdrv_pwrite_em>:
   178c0:	push   r15
   178c2:	push   r14
   178c4:	mov    r15d,ecx
   178c7:	push   r13
   178c9:	push   r12
   178cb:	mov    r13,rsi
   178ce:	push   rbp
   178cf:	push   rbx
   178d0:	mov    ebx,esi
   178d2:	neg    ebx
   178d4:	mov    r12,rdi
   178d7:	mov    r14,rdx
   178da:	sub    rsp,0x228
   178e1:	and    ebx,0x1ff
   178e7:	mov    r9d,ecx
   178ea:	mov    rax,QWORD PTR fs:0x28
   178f3:	mov    QWORD PTR [rsp+0x218],rax
   178fb:	xor    eax,eax
   178fd:	cmp    ecx,ebx
   178ff:	cmovle ebx,ecx
   17902:	sar    r13,0x9
   17906:	test   ebx,ebx
   17908:	jg     179f8 <bdrv_pwrite_em+0x138>
   1790e:	mov    ebx,r9d
   17911:	sar    ebx,0x9
   17914:	test   ebx,ebx
   17916:	jg     179a8 <bdrv_pwrite_em+0xe8>
   1791c:	test   r9d,r9d
   1791f:	mov    DWORD PTR [rsp+0x8],r9d
   17924:	jle    17976 <bdrv_pwrite_em+0xb6>
   17926:	lea    rbx,[rsp+0x10]
   1792b:	mov    ecx,0x1
   17930:	mov    rsi,r13
   17933:	mov    rdi,r12
   17936:	mov    rdx,rbx
   17939:	call   171e0 <bdrv_read>
   1793e:	test   eax,eax
   17940:	js     17ad0 <bdrv_pwrite_em+0x210>
   17946:	movsxd rdx,DWORD PTR [rsp+0x8]
   1794b:	mov    ecx,0x200
   17950:	mov    rsi,r14
   17953:	mov    rdi,rbx
   17956:	call   3140 <__memcpy_chk@plt>
   1795b:	mov    ecx,0x1
   17960:	mov    rdx,rbx
   17963:	mov    rsi,r13
   17966:	mov    rdi,r12
   17969:	call   17620 <bdrv_write>
   1796e:	test   eax,eax
   17970:	js     17ad0 <bdrv_pwrite_em+0x210>
   17976:	mov    eax,r15d
   17979:	mov    rcx,QWORD PTR [rsp+0x218]
   17981:	xor    rcx,QWORD PTR fs:0x28
   1798a:	jne    17af6 <bdrv_pwrite_em+0x236>
   17990:	add    rsp,0x228
   17997:	pop    rbx
   17998:	pop    rbp
   17999:	pop    r12
   1799b:	pop    r13
   1799d:	pop    r14
   1799f:	pop    r15
   179a1:	ret    
   179a2:	nop    WORD PTR [rax+rax*1+0x0]
   179a8:	mov    ecx,ebx
   179aa:	mov    rdx,r14
   179ad:	mov    rsi,r13
   179b0:	mov    rdi,r12
   179b3:	mov    DWORD PTR [rsp+0x8],r9d
   179b8:	call   17620 <bdrv_write>
   179bd:	test   eax,eax
   179bf:	js     17ad0 <bdrv_pwrite_em+0x210>
   179c5:	mov    r9d,DWORD PTR [rsp+0x8]
   179ca:	movsxd rbx,ebx
   179cd:	add    r13,rbx
   179d0:	mov    eax,r9d
   179d3:	and    eax,0xfffffe00
   179d8:	sub    r9d,eax
   179db:	movsxd rdx,eax
   179de:	add    r14,rdx
   179e1:	test   r9d,r9d
   179e4:	mov    DWORD PTR [rsp+0x8],r9d
   179e9:	jg     17926 <bdrv_pwrite_em+0x66>
   179ef:	jmp    17976 <bdrv_pwrite_em+0xb6>
   179f1:	nop    DWORD PTR [rax+0x0]
   179f8:	lea    r9,[rsp+0x10]
   179fd:	mov    rbp,rsi
   17a00:	mov    ecx,0x1
   17a05:	mov    rsi,r13
   17a08:	mov    rdx,r9
   17a0b:	mov    QWORD PTR [rsp+0x8],r9
   17a10:	call   171e0 <bdrv_read>
   17a15:	test   eax,eax
   17a17:	mov    r9,QWORD PTR [rsp+0x8]
   17a1c:	js     17ad0 <bdrv_pwrite_em+0x210>
   17a22:	and    ebp,0x1ff
   17a28:	movsxd rax,ebx
   17a2b:	add    rbp,r9
   17a2e:	cmp    ebx,0x8
   17a31:	mov    QWORD PTR [rsp+0x8],rax
   17a36:	jae    17a80 <bdrv_pwrite_em+0x1c0>
   17a38:	test   bl,0x4
   17a3b:	jne    17ae0 <bdrv_pwrite_em+0x220>
   17a41:	test   ebx,ebx
   17a43:	jne    17ab0 <bdrv_pwrite_em+0x1f0>
   17a45:	mov    ecx,0x1
   17a4a:	mov    rdx,r9
   17a4d:	mov    rsi,r13
   17a50:	mov    rdi,r12
   17a53:	call   17620 <bdrv_write>
   17a58:	test   eax,eax
   17a5a:	js     17ad0 <bdrv_pwrite_em+0x210>
   17a5c:	mov    r9d,r15d
   17a5f:	sub    r9d,ebx
   17a62:	je     17976 <bdrv_pwrite_em+0xb6>
   17a68:	add    r13,0x1
   17a6c:	add    r14,QWORD PTR [rsp+0x8]
   17a71:	jmp    1790e <bdrv_pwrite_em+0x4e>
   17a76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17a80:	mov    rax,QWORD PTR [r14]
   17a83:	lea    rdi,[rbp+0x8]
   17a87:	mov    rsi,r14
   17a8a:	and    rdi,0xfffffffffffffff8
   17a8e:	mov    QWORD PTR [rbp+0x0],rax
   17a92:	mov    eax,ebx
   17a94:	mov    rdx,QWORD PTR [r14+rax*1-0x8]
   17a99:	mov    QWORD PTR [rbp+rax*1-0x8],rdx
   17a9e:	sub    rbp,rdi
   17aa1:	sub    rsi,rbp
   17aa4:	add    ebp,ebx
   17aa6:	shr    ebp,0x3
   17aa9:	mov    ecx,ebp
   17aab:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   17aae:	jmp    17a45 <bdrv_pwrite_em+0x185>
   17ab0:	movzx  eax,BYTE PTR [r14]
   17ab4:	test   bl,0x2
   17ab7:	mov    BYTE PTR [rbp+0x0],al
   17aba:	je     17a45 <bdrv_pwrite_em+0x185>
   17abc:	mov    eax,ebx
   17abe:	movzx  edx,WORD PTR [r14+rax*1-0x2]
   17ac4:	mov    WORD PTR [rbp+rax*1-0x2],dx
   17ac9:	jmp    17a45 <bdrv_pwrite_em+0x185>
   17ace:	xchg   ax,ax
   17ad0:	mov    eax,0xfffffffb
   17ad5:	jmp    17979 <bdrv_pwrite_em+0xb9>
   17ada:	nop    WORD PTR [rax+rax*1+0x0]
   17ae0:	mov    eax,DWORD PTR [r14]
   17ae3:	mov    DWORD PTR [rbp+0x0],eax
   17ae6:	mov    eax,ebx
   17ae8:	mov    edx,DWORD PTR [r14+rax*1-0x4]
   17aed:	mov    DWORD PTR [rbp+rax*1-0x4],edx
   17af1:	jmp    17a45 <bdrv_pwrite_em+0x185>
   17af6:	call   2f70 <__stack_chk_fail@plt>
   17afb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000017b00 <bdrv_pread>:
   17b00:	push   r14
   17b02:	push   r13
   17b04:	push   r12
   17b06:	push   rbp
   17b07:	push   rbx
   17b08:	mov    r14,QWORD PTR [rdi+0x38]
   17b0c:	test   r14,r14
   17b0f:	je     17b70 <bdrv_pread+0x70>
   17b11:	mov    r13,rdx
   17b14:	movsxd rdx,ecx
   17b17:	mov    r12d,ecx
   17b1a:	mov    rbp,rsi
   17b1d:	mov    rbx,rdi
   17b20:	call   16dd0 <bdrv_check_byte_request>
   17b25:	test   eax,eax
   17b27:	jne    17b60 <bdrv_pread+0x60>
   17b29:	mov    rax,QWORD PTR [r14+0x90]
   17b30:	mov    ecx,r12d
   17b33:	mov    rdx,r13
   17b36:	mov    rsi,rbp
   17b39:	mov    rdi,rbx
   17b3c:	test   rax,rax
   17b3f:	je     17b50 <bdrv_pread+0x50>
   17b41:	pop    rbx
   17b42:	pop    rbp
   17b43:	pop    r12
   17b45:	pop    r13
   17b47:	pop    r14
   17b49:	jmp    rax
   17b4b:	nop    DWORD PTR [rax+rax*1+0x0]
   17b50:	pop    rbx
   17b51:	pop    rbp
   17b52:	pop    r12
   17b54:	pop    r13
   17b56:	pop    r14
   17b58:	jmp    172f0 <bdrv_pread_em>
   17b5d:	nop    DWORD PTR [rax]
   17b60:	mov    eax,0xfffffffb
   17b65:	pop    rbx
   17b66:	pop    rbp
   17b67:	pop    r12
   17b69:	pop    r13
   17b6b:	pop    r14
   17b6d:	ret    
   17b6e:	xchg   ax,ax
   17b70:	mov    eax,0xffffff85
   17b75:	jmp    17b65 <bdrv_pread+0x65>
   17b77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000017b80 <bdrv_open2>:
   17b80:	push   r15
   17b82:	push   r14
   17b84:	mov    r14d,edx
   17b87:	push   r13
   17b89:	push   r12
   17b8b:	mov    r13,rsi
   17b8e:	push   rbp
   17b8f:	push   rbx
   17b90:	mov    rbp,rcx
   17b93:	mov    rbx,rdi
   17b96:	sub    rsp,0x28c8
   17b9d:	mov    DWORD PTR [rdi+0x8],0x0
   17ba4:	mov    DWORD PTR [rdi+0x848],0x0
   17bae:	mov    rax,QWORD PTR fs:0x28
   17bb7:	mov    QWORD PTR [rsp+0x28b8],rax
   17bbf:	xor    eax,eax
   17bc1:	and    edx,0x8
   17bc4:	mov    QWORD PTR [rdi+0x14],0x0
   17bcc:	je     17cb2 <bdrv_open2+0x132>
   17bd2:	lea    rdi,[rip+0x788c]        # 1f465 <desc_template.13816+0x8e5>
   17bd9:	call   16fb0 <bdrv_new>
   17bde:	xor    edx,edx
   17be0:	mov    rsi,r13
   17be3:	mov    rdi,rax
   17be6:	mov    r15,rax
   17be9:	call   180e0 <bdrv_open>
   17bee:	test   eax,eax
   17bf0:	mov    r12d,eax
   17bf3:	js     17e60 <bdrv_open2+0x2e0>
   17bf9:	mov    rdx,QWORD PTR [r15+0x38]
   17bfd:	test   rdx,rdx
   17c00:	je     17d30 <bdrv_open2+0x1b0>
   17c06:	mov    rax,QWORD PTR [rdx+0xa8]
   17c0d:	test   rax,rax
   17c10:	je     18020 <bdrv_open2+0x4a0>
   17c16:	mov    rdi,r15
   17c19:	call   rax
   17c1b:	mov    rdx,QWORD PTR [r15+0x38]
   17c1f:	sar    rax,0x9
   17c23:	mov    QWORD PTR [rsp],rax
   17c27:	test   rdx,rdx
   17c2a:	je     17d38 <bdrv_open2+0x1b8>
   17c30:	cmp    QWORD PTR [rdx+0x88],0x0
   17c38:	mov    rdi,r15
   17c3b:	je     17d3b <bdrv_open2+0x1bb>
   17c41:	lea    r15,[rsp+0x8b0]
   17c49:	lea    r12,[rsp+0x18b0]
   17c51:	call   170f0 <bdrv_delete>
   17c56:	mov    esi,0x1000
   17c5b:	mov    rdi,r15
   17c5e:	call   17090 <get_tmp_filename>
   17c63:	lea    rdx,[rip+0x3cf0]        # 1b95a <_IO_stdin_used+0xda>
   17c6a:	mov    rcx,r13
   17c6d:	mov    esi,0x1000
   17c72:	mov    rdi,r12
   17c75:	xor    eax,eax
   17c77:	call   2fd0 <snprintf@plt>
   17c7c:	mov    rax,QWORD PTR [rip+0x20f115]        # 226d98 <bdrv_qcow2+0x38>
   17c83:	test   rax,rax
   17c86:	je     18050 <bdrv_open2+0x4d0>
   17c8c:	xor    ecx,ecx
   17c8e:	mov    rdx,r12
   17c91:	mov    rsi,QWORD PTR [rsp]
   17c95:	mov    rdi,r15
   17c98:	call   rax
   17c9a:	test   eax,eax
   17c9c:	mov    r12d,eax
   17c9f:	js     17e32 <bdrv_open2+0x2b2>
   17ca5:	mov    DWORD PTR [rbx+0x848],0x1
   17caf:	mov    r13,r15
   17cb2:	lea    rdi,[rbx+0x48]
   17cb6:	mov    rdx,r13
   17cb9:	mov    esi,0x400
   17cbe:	call   45a0 <pstrcpy>
   17cc3:	test   r14b,0x10
   17cc7:	jne    17d78 <bdrv_open2+0x1f8>
   17ccd:	test   rbp,rbp
   17cd0:	je     17e70 <bdrv_open2+0x2f0>
   17cd6:	mov    QWORD PTR [rbx+0x38],rbp
   17cda:	movsxd rdi,DWORD PTR [rbp+0x8]
   17cde:	mov    r15d,r14d
   17ce1:	and    r15d,0xe3
   17ce8:	call   4a20 <qemu_mallocz>
   17ced:	mov    edx,r15d
   17cf0:	mov    QWORD PTR [rbx+0x40],rax
   17cf4:	mov    rsi,r13
   17cf7:	mov    rdi,rbx
   17cfa:	call   QWORD PTR [rbp+0x18]
   17cfd:	cmp    eax,0xfffffff3
   17d00:	mov    r12d,eax
   17d03:	je     17d0e <bdrv_open2+0x18e>
   17d05:	cmp    eax,0xffffffff
   17d08:	jne    17db8 <bdrv_open2+0x238>
   17d0e:	mov    edx,r14d
   17d11:	mov    rsi,r13
   17d14:	mov    rdi,rbx
   17d17:	and    edx,0xe1
   17d1d:	call   QWORD PTR [rbp+0x18]
   17d20:	mov    DWORD PTR [rbx+0x8],0x1
   17d27:	mov    r12d,eax
   17d2a:	jmp    17db8 <bdrv_open2+0x238>
   17d2f:	nop
   17d30:	mov    QWORD PTR [rsp],0xffffffffffffffff
   17d38:	mov    rdi,r15
   17d3b:	lea    r15,[rsp+0x8b0]
   17d43:	lea    r12,[rsp+0x18b0]
   17d4b:	call   170f0 <bdrv_delete>
   17d50:	mov    rdi,r15
   17d53:	mov    esi,0x1000
   17d58:	call   17090 <get_tmp_filename>
   17d5d:	mov    edx,0x1000
   17d62:	mov    rsi,r12
   17d65:	mov    rdi,r13
   17d68:	call   3050 <__realpath_chk@plt>
   17d6d:	jmp    17c7c <bdrv_open2+0xfc>
   17d72:	nop    WORD PTR [rax+rax*1+0x0]
   17d78:	mov    rdi,r13
   17d7b:	call   16c30 <find_protocol>
   17d80:	test   rax,rax
   17d83:	mov    rbp,rax
   17d86:	lea    rax,[rip+0x20f613]        # 2273a0 <bdrv_raw>
   17d8d:	cmove  rbp,rax
   17d91:	and    r14d,0xffffffe7
   17d95:	mov    QWORD PTR [rbx+0x38],rbp
   17d99:	movsxd rdi,DWORD PTR [rbp+0x8]
   17d9d:	mov    r15d,r14d
   17da0:	call   4a20 <qemu_mallocz>
   17da5:	mov    edx,r14d
   17da8:	mov    QWORD PTR [rbx+0x40],rax
   17dac:	mov    rsi,r13
   17daf:	mov    rdi,rbx
   17db2:	call   QWORD PTR [rbp+0x18]
   17db5:	mov    r12d,eax
   17db8:	test   r12d,r12d
   17dbb:	js     17f80 <bdrv_open2+0x400>
   17dc1:	cmp    QWORD PTR [rbp+0xa8],0x0
   17dc9:	je     17df7 <bdrv_open2+0x277>
   17dcb:	mov    rdx,QWORD PTR [rbx+0x38]
   17dcf:	mov    rax,0xffffffffffffffff
   17dd6:	test   rdx,rdx
   17dd9:	je     17df4 <bdrv_open2+0x274>
   17ddb:	mov    rax,QWORD PTR [rdx+0xa8]
   17de2:	test   rax,rax
   17de5:	je     18040 <bdrv_open2+0x4c0>
   17deb:	mov    rdi,rbx
   17dee:	call   rax
   17df0:	sar    rax,0x9
   17df4:	mov    QWORD PTR [rbx],rax
   17df7:	mov    eax,DWORD PTR [rbx+0x848]
   17dfd:	test   eax,eax
   17dff:	jne    17f70 <bdrv_open2+0x3f0>
   17e05:	cmp    BYTE PTR [rbx+0x448],0x0
   17e0c:	jne    17fb8 <bdrv_open2+0x438>
   17e12:	mov    rax,QWORD PTR [rbx+0x28]
   17e16:	mov    DWORD PTR [rbx+0x84c],0x1
   17e20:	test   rax,rax
   17e23:	je     18038 <bdrv_open2+0x4b8>
   17e29:	xor    r12d,r12d
   17e2c:	mov    rdi,QWORD PTR [rbx+0x30]
   17e30:	call   rax
   17e32:	mov    rcx,QWORD PTR [rsp+0x28b8]
   17e3a:	xor    rcx,QWORD PTR fs:0x28
   17e43:	mov    eax,r12d
   17e46:	jne    1805b <bdrv_open2+0x4db>
   17e4c:	add    rsp,0x28c8
   17e53:	pop    rbx
   17e54:	pop    rbp
   17e55:	pop    r12
   17e57:	pop    r13
   17e59:	pop    r14
   17e5b:	pop    r15
   17e5d:	ret    
   17e5e:	xchg   ax,ax
   17e60:	mov    rdi,r15
   17e63:	call   170f0 <bdrv_delete>
   17e68:	jmp    17e32 <bdrv_open2+0x2b2>
   17e6a:	nop    WORD PTR [rax+rax*1+0x0]
   17e70:	lea    rsi,[rip+0x7ea5]        # 1fd1c <__FUNCTION__.13696+0x54>
   17e77:	xor    edx,edx
   17e79:	mov    rdi,r13
   17e7c:	lea    rbp,[rip+0x20f3dd]        # 227260 <bdrv_host_device>
   17e83:	call   4660 <strstart>
   17e88:	test   eax,eax
   17e8a:	mov    r12d,eax
   17e8d:	jne    17cd6 <bdrv_open2+0x156>
   17e93:	lea    rdx,[rsp+0x20]
   17e98:	mov    rsi,r13
   17e9b:	mov    edi,0x1
   17ea0:	call   2f30 <__xstat64@plt>
   17ea5:	test   eax,eax
   17ea7:	js     17ebd <bdrv_open2+0x33d>
   17ea9:	mov    eax,DWORD PTR [rsp+0x38]
   17ead:	and    eax,0xb000
   17eb2:	cmp    eax,0x2000
   17eb7:	je     17cd6 <bdrv_open2+0x156>
   17ebd:	mov    rdi,r13
   17ec0:	call   16c30 <find_protocol>
   17ec5:	test   rax,rax
   17ec8:	mov    rbp,rax
   17ecb:	jne    17cd6 <bdrv_open2+0x156>
   17ed1:	lea    rdi,[rsp+0x18]
   17ed6:	xor    edx,edx
   17ed8:	mov    rsi,r13
   17edb:	call   18060 <bdrv_file_open>
   17ee0:	test   eax,eax
   17ee2:	js     17f66 <bdrv_open2+0x3e6>
   17ee8:	lea    rax,[rsp+0xb0]
   17ef0:	mov    rdi,QWORD PTR [rsp+0x18]
   17ef5:	xor    esi,esi
   17ef7:	mov    ecx,0x800
   17efc:	mov    rdx,rax
   17eff:	mov    QWORD PTR [rsp+0x8],rax
   17f04:	call   17b00 <bdrv_pread>
   17f09:	mov    rdi,QWORD PTR [rsp+0x18]
   17f0e:	mov    r15d,eax
   17f11:	mov    DWORD PTR [rsp],eax
   17f14:	call   170f0 <bdrv_delete>
   17f19:	test   r15d,r15d
   17f1c:	js     17f66 <bdrv_open2+0x3e6>
   17f1e:	mov    r15,QWORD PTR [rip+0x20f60b]        # 227530 <first_drv>
   17f25:	test   r15,r15
   17f28:	je     17f66 <bdrv_open2+0x3e6>
   17f2a:	nop    WORD PTR [rax+rax*1+0x0]
   17f30:	mov    rax,QWORD PTR [r15+0x10]
   17f34:	test   rax,rax
   17f37:	je     17f51 <bdrv_open2+0x3d1>
   17f39:	mov    rdx,r13
   17f3c:	mov    esi,DWORD PTR [rsp]
   17f3f:	mov    rdi,QWORD PTR [rsp+0x8]
   17f44:	call   rax
   17f46:	cmp    r12d,eax
   17f49:	jge    17f51 <bdrv_open2+0x3d1>
   17f4b:	mov    rbp,r15
   17f4e:	mov    r12d,eax
   17f51:	mov    r15,QWORD PTR [r15+0x138]
   17f58:	test   r15,r15
   17f5b:	jne    17f30 <bdrv_open2+0x3b0>
   17f5d:	test   rbp,rbp
   17f60:	jne    17cd6 <bdrv_open2+0x156>
   17f66:	mov    r12d,0xfffffffe
   17f6c:	jmp    17f99 <bdrv_open2+0x419>
   17f6e:	xchg   ax,ax
   17f70:	mov    rdi,r13
   17f73:	call   2e90 <unlink@plt>
   17f78:	jmp    17e05 <bdrv_open2+0x285>
   17f7d:	nop    DWORD PTR [rax]
   17f80:	mov    rdi,QWORD PTR [rbx+0x40]
   17f84:	call   49c0 <qemu_free>
   17f89:	mov    QWORD PTR [rbx+0x40],0x0
   17f91:	mov    QWORD PTR [rbx+0x38],0x0
   17f99:	mov    edx,DWORD PTR [rbx+0x848]
   17f9f:	test   edx,edx
   17fa1:	je     17e32 <bdrv_open2+0x2b2>
   17fa7:	mov    rdi,r13
   17faa:	call   2e90 <unlink@plt>
   17faf:	jmp    17e32 <bdrv_open2+0x2b2>
   17fb4:	nop    DWORD PTR [rax+0x0]
   17fb8:	lea    rdi,[rip+0x74a6]        # 1f465 <desc_template.13816+0x8e5>
   17fbf:	lea    rbp,[rsp+0x18b0]
   17fc7:	call   16fb0 <bdrv_new>
   17fcc:	lea    rcx,[rbx+0x448]
   17fd3:	mov    QWORD PTR [rbx+0x850],rax
   17fda:	mov    rdx,r13
   17fdd:	mov    esi,0x1000
   17fe2:	mov    rdi,rbp
   17fe5:	call   16eb0 <path_combine>
   17fea:	mov    rdi,QWORD PTR [rbx+0x850]
   17ff1:	lea    rcx,[rip+0x20f3a8]        # 2273a0 <bdrv_raw>
   17ff8:	mov    edx,r15d
   17ffb:	mov    rsi,rbp
   17ffe:	call   17b80 <bdrv_open2>
   18003:	test   eax,eax
   18005:	mov    r12d,eax
   18008:	jns    17e12 <bdrv_open2+0x292>
   1800e:	mov    rdi,rbx
   18011:	call   17170 <bdrv_close>
   18016:	jmp    17e32 <bdrv_open2+0x2b2>
   1801b:	nop    DWORD PTR [rax+rax*1+0x0]
   18020:	mov    r12,QWORD PTR [r15]
   18023:	shl    r12,0x9
   18027:	sar    r12,0x9
   1802b:	mov    QWORD PTR [rsp],r12
   1802f:	jmp    17c30 <bdrv_open2+0xb0>
   18034:	nop    DWORD PTR [rax+0x0]
   18038:	xor    r12d,r12d
   1803b:	jmp    17e32 <bdrv_open2+0x2b2>
   18040:	mov    rax,QWORD PTR [rbx]
   18043:	shl    rax,0x9
   18047:	sar    rax,0x9
   1804b:	jmp    17df4 <bdrv_open2+0x274>
   18050:	mov    r12d,0xffffffa1
   18056:	jmp    17e32 <bdrv_open2+0x2b2>
   1805b:	call   2f70 <__stack_chk_fail@plt>

0000000000018060 <bdrv_file_open>:
   18060:	push   r13
   18062:	push   r12
   18064:	mov    r13,rdi
   18067:	push   rbp
   18068:	push   rbx
   18069:	lea    rdi,[rip+0x73f5]        # 1f465 <desc_template.13816+0x8e5>
   18070:	mov    ebx,edx
   18072:	mov    r12,rsi
   18075:	sub    rsp,0x18
   18079:	or     ebx,0x10
   1807c:	call   16fb0 <bdrv_new>
   18081:	lea    rcx,[rip+0x20f318]        # 2273a0 <bdrv_raw>
   18088:	mov    edx,ebx
   1808a:	mov    rsi,r12
   1808d:	mov    rdi,rax
   18090:	mov    rbp,rax
   18093:	call   17b80 <bdrv_open2>
   18098:	test   eax,eax
   1809a:	js     180c0 <bdrv_file_open+0x60>
   1809c:	mov    DWORD PTR [rbp+0x880],0x1
   180a6:	mov    QWORD PTR [r13+0x0],rbp
   180aa:	add    rsp,0x18
   180ae:	pop    rbx
   180af:	xor    eax,eax
   180b1:	pop    rbp
   180b2:	pop    r12
   180b4:	pop    r13
   180b6:	ret    
   180b7:	nop    WORD PTR [rax+rax*1+0x0]
   180c0:	mov    rdi,rbp
   180c3:	mov    DWORD PTR [rsp+0xc],eax
   180c7:	call   170f0 <bdrv_delete>
   180cc:	mov    eax,DWORD PTR [rsp+0xc]
   180d0:	add    rsp,0x18
   180d4:	pop    rbx
   180d5:	pop    rbp
   180d6:	pop    r12
   180d8:	pop    r13
   180da:	ret    
   180db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000180e0 <bdrv_open>:
   180e0:	xor    ecx,ecx
   180e2:	jmp    17b80 <bdrv_open2>
   180e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000180f0 <bdrv_pwrite>:
   180f0:	push   r14
   180f2:	push   r13
   180f4:	push   r12
   180f6:	push   rbp
   180f7:	push   rbx
   180f8:	mov    r14,QWORD PTR [rdi+0x38]
   180fc:	test   r14,r14
   180ff:	je     18160 <bdrv_pwrite+0x70>
   18101:	mov    r13,rdx
   18104:	movsxd rdx,ecx
   18107:	mov    r12d,ecx
   1810a:	mov    rbp,rsi
   1810d:	mov    rbx,rdi
   18110:	call   16dd0 <bdrv_check_byte_request>
   18115:	test   eax,eax
   18117:	jne    18150 <bdrv_pwrite+0x60>
   18119:	mov    rax,QWORD PTR [r14+0x98]
   18120:	mov    ecx,r12d
   18123:	mov    rdx,r13
   18126:	mov    rsi,rbp
   18129:	mov    rdi,rbx
   1812c:	test   rax,rax
   1812f:	je     18140 <bdrv_pwrite+0x50>
   18131:	pop    rbx
   18132:	pop    rbp
   18133:	pop    r12
   18135:	pop    r13
   18137:	pop    r14
   18139:	jmp    rax
   1813b:	nop    DWORD PTR [rax+rax*1+0x0]
   18140:	pop    rbx
   18141:	pop    rbp
   18142:	pop    r12
   18144:	pop    r13
   18146:	pop    r14
   18148:	jmp    178c0 <bdrv_pwrite_em>
   1814d:	nop    DWORD PTR [rax]
   18150:	mov    eax,0xfffffffb
   18155:	pop    rbx
   18156:	pop    rbp
   18157:	pop    r12
   18159:	pop    r13
   1815b:	pop    r14
   1815d:	ret    
   1815e:	xchg   ax,ax
   18160:	mov    eax,0xffffff85
   18165:	jmp    18155 <bdrv_pwrite+0x65>
   18167:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018170 <bdrv_truncate>:
   18170:	mov    rax,QWORD PTR [rdi+0x38]
   18174:	test   rax,rax
   18177:	je     18187 <bdrv_truncate+0x17>
   18179:	mov    rax,QWORD PTR [rax+0xa0]
   18180:	test   rax,rax
   18183:	je     1818d <bdrv_truncate+0x1d>
   18185:	jmp    rax
   18187:	mov    eax,0xffffff85
   1818c:	ret    
   1818d:	mov    eax,0xffffffa1
   18192:	ret    
   18193:	nop    DWORD PTR [rax]
   18196:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000181a0 <bdrv_getlength>:
   181a0:	mov    rax,QWORD PTR [rdi+0x38]
   181a4:	test   rax,rax
   181a7:	je     181c8 <bdrv_getlength+0x28>
   181a9:	mov    rax,QWORD PTR [rax+0xa8]
   181b0:	test   rax,rax
   181b3:	je     181c0 <bdrv_getlength+0x20>
   181b5:	jmp    rax
   181b7:	nop    WORD PTR [rax+rax*1+0x0]
   181c0:	mov    rax,QWORD PTR [rdi]
   181c3:	shl    rax,0x9
   181c7:	ret    
   181c8:	mov    rax,0xffffffffffffff85
   181cf:	ret    

00000000000181d0 <bdrv_get_geometry>:
   181d0:	mov    rax,QWORD PTR [rdi+0x38]
   181d4:	push   rbx
   181d5:	mov    rbx,rsi
   181d8:	test   rax,rax
   181db:	je     18200 <bdrv_get_geometry+0x30>
   181dd:	mov    rax,QWORD PTR [rax+0xa8]
   181e4:	test   rax,rax
   181e7:	je     18210 <bdrv_get_geometry+0x40>
   181e9:	call   rax
   181eb:	test   rax,rax
   181ee:	js     18200 <bdrv_get_geometry+0x30>
   181f0:	sar    rax,0x9
   181f4:	mov    QWORD PTR [rbx],rax
   181f7:	pop    rbx
   181f8:	ret    
   181f9:	nop    DWORD PTR [rax+0x0]
   18200:	xor    eax,eax
   18202:	mov    QWORD PTR [rbx],rax
   18205:	pop    rbx
   18206:	ret    
   18207:	nop    WORD PTR [rax+rax*1+0x0]
   18210:	mov    rax,QWORD PTR [rdi]
   18213:	shl    rax,0x9
   18217:	jmp    181eb <bdrv_get_geometry+0x1b>
   18219:	nop    DWORD PTR [rax+0x0]

0000000000018220 <bdrv_guess_geometry>:
   18220:	push   r15
   18222:	push   r14
   18224:	push   r13
   18226:	push   r12
   18228:	mov    r13,rcx
   1822b:	push   rbp
   1822c:	push   rbx
   1822d:	mov    rbp,rsi
   18230:	mov    rbx,rdi
   18233:	mov    r12,rdx
   18236:	sub    rsp,0x28
   1823a:	mov    rax,QWORD PTR fs:0x28
   18243:	mov    QWORD PTR [rsp+0x18],rax
   18248:	xor    eax,eax
   1824a:	mov    rax,QWORD PTR [rdi+0x38]
   1824e:	test   rax,rax
   18251:	je     18278 <bdrv_guess_geometry+0x58>
   18253:	mov    rax,QWORD PTR [rax+0xa8]
   1825a:	test   rax,rax
   1825d:	je     18420 <bdrv_guess_geometry+0x200>
   18263:	call   rax
   18265:	test   rax,rax
   18268:	js     18278 <bdrv_guess_geometry+0x58>
   1826a:	sar    rax,0x9
   1826e:	mov    r14,rax
   18271:	jmp    1827b <bdrv_guess_geometry+0x5b>
   18273:	nop    DWORD PTR [rax+rax*1+0x0]
   18278:	xor    r14d,r14d
   1827b:	mov    ecx,DWORD PTR [rbx+0x884]
   18281:	mov    edi,DWORD PTR [rbx+0x888]
   18287:	mov    esi,DWORD PTR [rbx+0x88c]
   1828d:	test   ecx,ecx
   1828f:	mov    DWORD PTR [rsp+0xc],ecx
   18293:	mov    DWORD PTR [rsp+0x10],edi
   18297:	mov    DWORD PTR [rsp+0x14],esi
   1829b:	je     182d0 <bdrv_guess_geometry+0xb0>
   1829d:	mov    DWORD PTR [rbp+0x0],ecx
   182a0:	mov    DWORD PTR [r12],edi
   182a4:	mov    DWORD PTR [r13+0x0],esi
   182a8:	mov    rax,QWORD PTR [rsp+0x18]
   182ad:	xor    rax,QWORD PTR fs:0x28
   182b6:	jne    1842c <bdrv_guess_geometry+0x20c>
   182bc:	add    rsp,0x28
   182c0:	pop    rbx
   182c1:	pop    rbp
   182c2:	pop    r12
   182c4:	pop    r13
   182c6:	pop    r14
   182c8:	pop    r15
   182ca:	ret    
   182cb:	nop    DWORD PTR [rax+rax*1+0x0]
   182d0:	lea    rcx,[rsp+0x14]
   182d5:	lea    rdx,[rsp+0x10]
   182da:	lea    rsi,[rsp+0xc]
   182df:	mov    rdi,rbx
   182e2:	mov    r15d,DWORD PTR [rbx+0x890]
   182e9:	call   174d0 <guess_disk_lchs>
   182ee:	test   eax,eax
   182f0:	je     18390 <bdrv_guess_geometry+0x170>
   182f6:	xor    ecx,ecx
   182f8:	mov    rdx,r14
   182fb:	movabs rsi,0x820820820820821
   18305:	shr    rdx,0x4
   18309:	mov    rax,rdx
   1830c:	mul    rsi
   1830f:	shr    rdx,1
   18312:	cmp    edx,0x3fff
   18318:	mov    eax,edx
   1831a:	jle    183a8 <bdrv_guess_geometry+0x188>
   18320:	mov    DWORD PTR [rsp+0xc],0x3fff
   18328:	mov    eax,0x3fff
   1832d:	test   cl,cl
   1832f:	mov    DWORD PTR [rbp+0x0],eax
   18332:	mov    DWORD PTR [r12],0x10
   1833a:	mov    eax,0x3f
   1833f:	mov    DWORD PTR [r13+0x0],0x3f
   18347:	je     18370 <bdrv_guess_geometry+0x150>
   18349:	mov    eax,DWORD PTR [rbp+0x0]
   1834c:	imul   eax,DWORD PTR [r12]
   18351:	cmp    eax,0x20000
   18356:	jg     183f0 <bdrv_guess_geometry+0x1d0>
   1835c:	mov    DWORD PTR [rbx+0x890],0x3
   18366:	mov    eax,DWORD PTR [r13+0x0]
   1836a:	nop    WORD PTR [rax+rax*1+0x0]
   18370:	mov    edx,DWORD PTR [r12]
   18374:	mov    ecx,DWORD PTR [rbp+0x0]
   18377:	mov    DWORD PTR [rbx+0x88c],eax
   1837d:	mov    DWORD PTR [rbx+0x884],ecx
   18383:	mov    DWORD PTR [rbx+0x888],edx
   18389:	jmp    182a8 <bdrv_guess_geometry+0x88>
   1838e:	xchg   ax,ax
   18390:	mov    eax,DWORD PTR [rsp+0x10]
   18394:	cmp    eax,0x10
   18397:	jle    183c0 <bdrv_guess_geometry+0x1a0>
   18399:	test   r15d,r15d
   1839c:	sete   cl
   1839f:	jmp    182f8 <bdrv_guess_geometry+0xd8>
   183a4:	nop    DWORD PTR [rax+0x0]
   183a8:	cmp    edx,0x1
   183ab:	jle    18408 <bdrv_guess_geometry+0x1e8>
   183ad:	mov    DWORD PTR [rsp+0xc],edx
   183b1:	jmp    1832d <bdrv_guess_geometry+0x10d>
   183b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   183c0:	mov    edx,DWORD PTR [rsp+0xc]
   183c4:	test   r15d,r15d
   183c7:	mov    DWORD PTR [rbp+0x0],edx
   183ca:	mov    DWORD PTR [r12],eax
   183ce:	mov    eax,DWORD PTR [rsp+0x14]
   183d2:	mov    DWORD PTR [r13+0x0],eax
   183d6:	jne    18370 <bdrv_guess_geometry+0x150>
   183d8:	mov    DWORD PTR [rbx+0x890],0x1
   183e2:	mov    eax,DWORD PTR [r13+0x0]
   183e6:	jmp    18370 <bdrv_guess_geometry+0x150>
   183e8:	nop    DWORD PTR [rax+rax*1+0x0]
   183f0:	mov    DWORD PTR [rbx+0x890],0x2
   183fa:	mov    eax,DWORD PTR [r13+0x0]
   183fe:	jmp    18370 <bdrv_guess_geometry+0x150>
   18403:	nop    DWORD PTR [rax+rax*1+0x0]
   18408:	mov    DWORD PTR [rsp+0xc],0x2
   18410:	mov    eax,0x2
   18415:	jmp    1832d <bdrv_guess_geometry+0x10d>
   1841a:	nop    WORD PTR [rax+rax*1+0x0]
   18420:	mov    rax,QWORD PTR [rdi]
   18423:	shl    rax,0x9
   18427:	jmp    18265 <bdrv_guess_geometry+0x45>
   1842c:	call   2f70 <__stack_chk_fail@plt>
   18431:	nop    DWORD PTR [rax+rax*1+0x0]
   18436:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018440 <bdrv_set_geometry_hint>:
   18440:	mov    DWORD PTR [rdi+0x884],esi
   18446:	mov    DWORD PTR [rdi+0x888],edx
   1844c:	mov    DWORD PTR [rdi+0x88c],ecx
   18452:	ret    
   18453:	nop    DWORD PTR [rax]
   18456:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018460 <bdrv_set_type_hint>:
   18460:	mov    DWORD PTR [rdi+0x894],esi
   18466:	sub    esi,0x1
   18469:	xor    eax,eax
   1846b:	cmp    esi,0x1
   1846e:	setbe  al
   18471:	mov    DWORD PTR [rdi+0xc],eax
   18474:	ret    
   18475:	nop
   18476:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018480 <bdrv_set_translation_hint>:
   18480:	mov    DWORD PTR [rdi+0x890],esi
   18486:	ret    
   18487:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018490 <bdrv_get_geometry_hint>:
   18490:	mov    eax,DWORD PTR [rdi+0x884]
   18496:	mov    DWORD PTR [rsi],eax
   18498:	mov    eax,DWORD PTR [rdi+0x888]
   1849e:	mov    DWORD PTR [rdx],eax
   184a0:	mov    eax,DWORD PTR [rdi+0x88c]
   184a6:	mov    DWORD PTR [rcx],eax
   184a8:	ret    
   184a9:	nop    DWORD PTR [rax+0x0]

00000000000184b0 <bdrv_get_type_hint>:
   184b0:	mov    eax,DWORD PTR [rdi+0x894]
   184b6:	ret    
   184b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000184c0 <bdrv_get_translation_hint>:
   184c0:	mov    eax,DWORD PTR [rdi+0x890]
   184c6:	ret    
   184c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000184d0 <bdrv_is_removable>:
   184d0:	mov    eax,DWORD PTR [rdi+0xc]
   184d3:	ret    
   184d4:	xchg   ax,ax
   184d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000184e0 <bdrv_is_read_only>:
   184e0:	mov    eax,DWORD PTR [rdi+0x8]
   184e3:	ret    
   184e4:	xchg   ax,ax
   184e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000184f0 <bdrv_is_sg>:
   184f0:	mov    eax,DWORD PTR [rdi+0x1c]
   184f3:	ret    
   184f4:	xchg   ax,ax
   184f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018500 <bdrv_set_change_cb>:
   18500:	mov    QWORD PTR [rdi+0x28],rsi
   18504:	mov    QWORD PTR [rdi+0x30],rdx
   18508:	ret    
   18509:	nop    DWORD PTR [rax+0x0]

0000000000018510 <bdrv_is_encrypted>:
   18510:	mov    rdx,QWORD PTR [rdi+0x850]
   18517:	test   rdx,rdx
   1851a:	je     18528 <bdrv_is_encrypted+0x18>
   1851c:	mov    edx,DWORD PTR [rdx+0x14]
   1851f:	mov    eax,0x1
   18524:	test   edx,edx
   18526:	jne    1852b <bdrv_is_encrypted+0x1b>
   18528:	mov    eax,DWORD PTR [rdi+0x14]
   1852b:	repz ret 
   1852d:	nop    DWORD PTR [rax]

0000000000018530 <bdrv_key_required>:
   18530:	mov    rdx,QWORD PTR [rdi+0x850]
   18537:	test   rdx,rdx
   1853a:	je     1854f <bdrv_key_required+0x1f>
   1853c:	mov    esi,DWORD PTR [rdx+0x14]
   1853f:	test   esi,esi
   18541:	je     1854f <bdrv_key_required+0x1f>
   18543:	mov    ecx,DWORD PTR [rdx+0x18]
   18546:	mov    eax,0x1
   1854b:	test   ecx,ecx
   1854d:	je     18560 <bdrv_key_required+0x30>
   1854f:	mov    eax,DWORD PTR [rdi+0x14]
   18552:	test   eax,eax
   18554:	je     18560 <bdrv_key_required+0x30>
   18556:	mov    edx,DWORD PTR [rdi+0x18]
   18559:	xor    eax,eax
   1855b:	test   edx,edx
   1855d:	sete   al
   18560:	repz ret 
   18562:	nop    DWORD PTR [rax+0x0]
   18566:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018570 <bdrv_set_key>:
   18570:	push   rbp
   18571:	push   rbx
   18572:	mov    rbx,rdi
   18575:	mov    rbp,rsi
   18578:	sub    rsp,0x8
   1857c:	mov    rdi,QWORD PTR [rdi+0x850]
   18583:	test   rdi,rdi
   18586:	je     1858f <bdrv_set_key+0x1f>
   18588:	mov    edx,DWORD PTR [rdi+0x14]
   1858b:	test   edx,edx
   1858d:	jne    185c8 <bdrv_set_key+0x58>
   1858f:	mov    eax,DWORD PTR [rbx+0x14]
   18592:	test   eax,eax
   18594:	je     185e0 <bdrv_set_key+0x70>
   18596:	mov    rax,QWORD PTR [rbx+0x38]
   1859a:	test   rax,rax
   1859d:	je     185e0 <bdrv_set_key+0x70>
   1859f:	mov    rax,QWORD PTR [rax+0x50]
   185a3:	test   rax,rax
   185a6:	je     185e0 <bdrv_set_key+0x70>
   185a8:	mov    rsi,rbp
   185ab:	mov    rdi,rbx
   185ae:	call   rax
   185b0:	xor    edx,edx
   185b2:	test   eax,eax
   185b4:	sete   dl
   185b7:	mov    DWORD PTR [rbx+0x18],edx
   185ba:	add    rsp,0x8
   185be:	pop    rbx
   185bf:	pop    rbp
   185c0:	ret    
   185c1:	nop    DWORD PTR [rax+0x0]
   185c8:	call   18570 <bdrv_set_key>
   185cd:	test   eax,eax
   185cf:	js     185ba <bdrv_set_key+0x4a>
   185d1:	mov    eax,DWORD PTR [rbx+0x14]
   185d4:	test   eax,eax
   185d6:	jne    18596 <bdrv_set_key+0x26>
   185d8:	jmp    185ba <bdrv_set_key+0x4a>
   185da:	nop    WORD PTR [rax+rax*1+0x0]
   185e0:	mov    eax,0xffffffff
   185e5:	jmp    185ba <bdrv_set_key+0x4a>
   185e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000185f0 <bdrv_get_format>:
   185f0:	mov    rax,QWORD PTR [rdi+0x38]
   185f4:	mov    rcx,rsi
   185f7:	test   rax,rax
   185fa:	je     18610 <bdrv_get_format+0x20>
   185fc:	movsxd rsi,edx
   185ff:	mov    rdx,QWORD PTR [rax]
   18602:	mov    rdi,rcx
   18605:	jmp    45a0 <pstrcpy>
   1860a:	nop    WORD PTR [rax+rax*1+0x0]
   18610:	mov    BYTE PTR [rsi],0x0
   18613:	ret    
   18614:	xchg   ax,ax
   18616:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018620 <bdrv_iterate_format>:
   18620:	push   r12
   18622:	push   rbp
   18623:	push   rbx
   18624:	mov    rbx,QWORD PTR [rip+0x20ef05]        # 227530 <first_drv>
   1862b:	test   rbx,rbx
   1862e:	je     18655 <bdrv_iterate_format+0x35>
   18630:	mov    r12,rdi
   18633:	mov    rbp,rsi
   18636:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18640:	mov    rsi,QWORD PTR [rbx]
   18643:	mov    rdi,rbp
   18646:	call   r12
   18649:	mov    rbx,QWORD PTR [rbx+0x138]
   18650:	test   rbx,rbx
   18653:	jne    18640 <bdrv_iterate_format+0x20>
   18655:	pop    rbx
   18656:	pop    rbp
   18657:	pop    r12
   18659:	ret    
   1865a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018660 <bdrv_find>:
   18660:	push   rbp
   18661:	push   rbx
   18662:	sub    rsp,0x8
   18666:	mov    rbx,QWORD PTR [rip+0x20efeb]        # 227658 <bdrv_first>
   1866d:	test   rbx,rbx
   18670:	je     1869f <bdrv_find+0x3f>
   18672:	mov    rbp,rdi
   18675:	jmp    1868c <bdrv_find+0x2c>
   18677:	nop    WORD PTR [rax+rax*1+0x0]
   18680:	mov    rbx,QWORD PTR [rbx+0x8b8]
   18687:	test   rbx,rbx
   1868a:	je     1869f <bdrv_find+0x3f>
   1868c:	lea    rsi,[rbx+0x898]
   18693:	mov    rdi,rbp
   18696:	call   3110 <strcmp@plt>
   1869b:	test   eax,eax
   1869d:	jne    18680 <bdrv_find+0x20>
   1869f:	add    rsp,0x8
   186a3:	mov    rax,rbx
   186a6:	pop    rbx
   186a7:	pop    rbp
   186a8:	ret    
   186a9:	nop    DWORD PTR [rax+0x0]

00000000000186b0 <bdrv_iterate>:
   186b0:	push   r12
   186b2:	push   rbp
   186b3:	push   rbx
   186b4:	mov    rbx,QWORD PTR [rip+0x20ef9d]        # 227658 <bdrv_first>
   186bb:	test   rbx,rbx
   186be:	je     186e5 <bdrv_iterate+0x35>
   186c0:	mov    r12,rdi
   186c3:	mov    rbp,rsi
   186c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   186d0:	mov    rsi,rbx
   186d3:	mov    rdi,rbp
   186d6:	call   r12
   186d9:	mov    rbx,QWORD PTR [rbx+0x8b8]
   186e0:	test   rbx,rbx
   186e3:	jne    186d0 <bdrv_iterate+0x20>
   186e5:	pop    rbx
   186e6:	pop    rbp
   186e7:	pop    r12
   186e9:	ret    
   186ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000000186f0 <bdrv_get_device_name>:
   186f0:	lea    rax,[rdi+0x898]
   186f7:	ret    
   186f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000018700 <bdrv_flush>:
   18700:	push   rbx
   18701:	mov    rbx,rdi
   18704:	jmp    1872e <bdrv_flush+0x2e>
   18706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18710:	mov    rax,QWORD PTR [rax+0x40]
   18714:	test   rax,rax
   18717:	je     18722 <bdrv_flush+0x22>
   18719:	mov    rdi,rbx
   1871c:	call   rax
   1871e:	test   eax,eax
   18720:	jne    1873c <bdrv_flush+0x3c>
   18722:	mov    rbx,QWORD PTR [rbx+0x850]
   18729:	test   rbx,rbx
   1872c:	je     18740 <bdrv_flush+0x40>
   1872e:	mov    rax,QWORD PTR [rbx+0x38]
   18732:	test   rax,rax
   18735:	jne    18710 <bdrv_flush+0x10>
   18737:	mov    eax,0xffffffea
   1873c:	pop    rbx
   1873d:	ret    
   1873e:	xchg   ax,ax
   18740:	xor    eax,eax
   18742:	pop    rbx
   18743:	ret    
   18744:	xchg   ax,ax
   18746:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018750 <bdrv_flush_all>:
   18750:	push   r13
   18752:	push   r12
   18754:	xor    r12d,r12d
   18757:	push   rbp
   18758:	push   rbx
   18759:	sub    rsp,0x8
   1875d:	mov    rbp,QWORD PTR [rip+0x20eef4]        # 227658 <bdrv_first>
   18764:	test   rbp,rbp
   18767:	je     187ac <bdrv_flush_all+0x5c>
   18769:	mov    r13d,0xffffffea
   1876f:	nop
   18770:	mov    rax,QWORD PTR [rbp+0x38]
   18774:	test   rax,rax
   18777:	je     187a0 <bdrv_flush_all+0x50>
   18779:	mov    ecx,DWORD PTR [rbp+0x8]
   1877c:	test   ecx,ecx
   1877e:	jne    187a0 <bdrv_flush_all+0x50>
   18780:	mov    edx,DWORD PTR [rbp+0xc]
   18783:	test   edx,edx
   18785:	je     187c4 <bdrv_flush_all+0x74>
   18787:	mov    rdx,QWORD PTR [rax+0xf0]
   1878e:	test   rdx,rdx
   18791:	je     187c4 <bdrv_flush_all+0x74>
   18793:	mov    rdi,rbp
   18796:	call   rdx
   18798:	test   eax,eax
   1879a:	jne    187c0 <bdrv_flush_all+0x70>
   1879c:	nop    DWORD PTR [rax+0x0]
   187a0:	mov    rbp,QWORD PTR [rbp+0x8b8]
   187a7:	test   rbp,rbp
   187aa:	jne    18770 <bdrv_flush_all+0x20>
   187ac:	add    rsp,0x8
   187b0:	mov    eax,r12d
   187b3:	pop    rbx
   187b4:	pop    rbp
   187b5:	pop    r12
   187b7:	pop    r13
   187b9:	ret    
   187ba:	nop    WORD PTR [rax+rax*1+0x0]
   187c0:	mov    rax,QWORD PTR [rbp+0x38]
   187c4:	mov    rbx,rbp
   187c7:	jmp    187f2 <bdrv_flush_all+0xa2>
   187c9:	nop    DWORD PTR [rax+0x0]
   187d0:	mov    rax,QWORD PTR [rax+0x40]
   187d4:	test   rax,rax
   187d7:	je     187e2 <bdrv_flush_all+0x92>
   187d9:	mov    rdi,rbx
   187dc:	call   rax
   187de:	test   eax,eax
   187e0:	jne    18800 <bdrv_flush_all+0xb0>
   187e2:	mov    rbx,QWORD PTR [rbx+0x850]
   187e9:	test   rbx,rbx
   187ec:	je     187a0 <bdrv_flush_all+0x50>
   187ee:	mov    rax,QWORD PTR [rbx+0x38]
   187f2:	test   rax,rax
   187f5:	jne    187d0 <bdrv_flush_all+0x80>
   187f7:	mov    r12d,r13d
   187fa:	jmp    187a0 <bdrv_flush_all+0x50>
   187fc:	nop    DWORD PTR [rax+0x0]
   18800:	mov    r12d,eax
   18803:	jmp    187a0 <bdrv_flush_all+0x50>
   18805:	nop
   18806:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018810 <bdrv_is_allocated>:
   18810:	mov    rax,QWORD PTR [rdi+0x38]
   18814:	mov    rax,QWORD PTR [rax+0x48]
   18818:	test   rax,rax
   1881b:	je     18820 <bdrv_is_allocated+0x10>
   1881d:	jmp    rax
   1881f:	nop
   18820:	mov    rax,QWORD PTR [rdi]
   18823:	cmp    rax,rsi
   18826:	jg     18838 <bdrv_is_allocated+0x28>
   18828:	mov    DWORD PTR [rcx],0x0
   1882e:	xor    eax,eax
   18830:	ret    
   18831:	nop    DWORD PTR [rax+0x0]
   18838:	sub    rax,rsi
   1883b:	movsxd rdx,edx
   1883e:	cmp    rax,rdx
   18841:	cmovle rdx,rax
   18845:	mov    eax,0x1
   1884a:	mov    DWORD PTR [rcx],edx
   1884c:	ret    
   1884d:	nop    DWORD PTR [rax]

0000000000018850 <bdrv_info>:
   18850:	push   rbx
   18851:	mov    rbx,QWORD PTR [rip+0x20ee00]        # 227658 <bdrv_first>
   18858:	test   rbx,rbx
   1885b:	jne    1890c <bdrv_info+0xbc>
   18861:	jmp    189e0 <bdrv_info+0x190>
   18866:	nop    WORD PTR cs:[rax+rax*1+0x0]
   18870:	cmp    QWORD PTR [rbx+0x38],0x0
   18875:	je     18987 <bdrv_info+0x137>
   1887b:	lea    rdi,[rip+0x74d3]        # 1fd55 <__FUNCTION__.13696+0x8d>
   18882:	xor    eax,eax
   18884:	call   4140 <term_printf>
   18889:	lea    rdi,[rbx+0x48]
   1888d:	call   4150 <term_print_filename>
   18892:	cmp    BYTE PTR [rbx+0x448],0x0
   18899:	jne    189c0 <bdrv_info+0x170>
   1889f:	mov    esi,DWORD PTR [rbx+0x8]
   188a2:	lea    rdi,[rip+0x74c2]        # 1fd6b <__FUNCTION__.13696+0xa3>
   188a9:	xor    eax,eax
   188ab:	call   4140 <term_printf>
   188b0:	mov    rax,QWORD PTR [rbx+0x38]
   188b4:	lea    rdi,[rip+0x74b7]        # 1fd72 <__FUNCTION__.13696+0xaa>
   188bb:	mov    rsi,QWORD PTR [rax]
   188be:	xor    eax,eax
   188c0:	call   4140 <term_printf>
   188c5:	mov    rax,QWORD PTR [rbx+0x850]
   188cc:	test   rax,rax
   188cf:	je     188dd <bdrv_info+0x8d>
   188d1:	mov    eax,DWORD PTR [rax+0x14]
   188d4:	mov    esi,0x1
   188d9:	test   eax,eax
   188db:	jne    188e0 <bdrv_info+0x90>
   188dd:	mov    esi,DWORD PTR [rbx+0x14]
   188e0:	lea    rdi,[rip+0x7493]        # 1fd7a <__FUNCTION__.13696+0xb2>
   188e7:	xor    eax,eax
   188e9:	call   4140 <term_printf>
   188ee:	lea    rdi,[rip+0x6b6f]        # 1f464 <desc_template.13816+0x8e4>
   188f5:	xor    eax,eax
   188f7:	call   4140 <term_printf>
   188fc:	mov    rbx,QWORD PTR [rbx+0x8b8]
   18903:	test   rbx,rbx
   18906:	je     189e0 <bdrv_info+0x190>
   1890c:	lea    rsi,[rbx+0x898]
   18913:	lea    rdi,[rip+0x740d]        # 1fd27 <__FUNCTION__.13696+0x5f>
   1891a:	xor    eax,eax
   1891c:	call   4140 <term_printf>
   18921:	lea    rdi,[rip+0x7403]        # 1fd2b <__FUNCTION__.13696+0x63>
   18928:	xor    eax,eax
   1892a:	call   4140 <term_printf>
   1892f:	mov    eax,DWORD PTR [rbx+0x894]
   18935:	cmp    eax,0x1
   18938:	je     189b0 <bdrv_info+0x160>
   1893a:	cmp    eax,0x2
   1893d:	je     189a0 <bdrv_info+0x150>
   1893f:	test   eax,eax
   18941:	jne    1894f <bdrv_info+0xff>
   18943:	lea    rdi,[rip+0x73e8]        # 1fd32 <__FUNCTION__.13696+0x6a>
   1894a:	call   4140 <term_printf>
   1894f:	mov    esi,DWORD PTR [rbx+0xc]
   18952:	lea    rdi,[rip+0x73e3]        # 1fd3c <__FUNCTION__.13696+0x74>
   18959:	xor    eax,eax
   1895b:	call   4140 <term_printf>
   18960:	mov    edx,DWORD PTR [rbx+0xc]
   18963:	test   edx,edx
   18965:	je     18870 <bdrv_info+0x20>
   1896b:	mov    esi,DWORD PTR [rbx+0x10]
   1896e:	lea    rdi,[rip+0x73d5]        # 1fd4a <__FUNCTION__.13696+0x82>
   18975:	xor    eax,eax
   18977:	call   4140 <term_printf>
   1897c:	cmp    QWORD PTR [rbx+0x38],0x0
   18981:	jne    1887b <bdrv_info+0x2b>
   18987:	lea    rdi,[rip+0x73fa]        # 1fd88 <__FUNCTION__.13696+0xc0>
   1898e:	xor    eax,eax
   18990:	call   4140 <term_printf>
   18995:	jmp    188ee <bdrv_info+0x9e>
   1899a:	nop    WORD PTR [rax+rax*1+0x0]
   189a0:	lea    rdi,[rip+0x738e]        # 1fd35 <__FUNCTION__.13696+0x6d>
   189a7:	xor    eax,eax
   189a9:	call   4140 <term_printf>
   189ae:	jmp    1894f <bdrv_info+0xff>
   189b0:	lea    rdi,[rip+0x736a]        # 1fd21 <__FUNCTION__.13696+0x59>
   189b7:	xor    eax,eax
   189b9:	call   4140 <term_printf>
   189be:	jmp    1894f <bdrv_info+0xff>
   189c0:	lea    rdi,[rip+0x7395]        # 1fd5c <__FUNCTION__.13696+0x94>
   189c7:	xor    eax,eax
   189c9:	call   4140 <term_printf>
   189ce:	lea    rdi,[rbx+0x448]
   189d5:	call   4150 <term_print_filename>
   189da:	jmp    1889f <bdrv_info+0x4f>
   189df:	nop
   189e0:	pop    rbx
   189e1:	ret    
   189e2:	nop    DWORD PTR [rax+0x0]
   189e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000189f0 <bdrv_info_stats>:
   189f0:	push   rbp
   189f1:	push   rbx
   189f2:	sub    rsp,0x8
   189f6:	mov    rbx,QWORD PTR [rip+0x20ec5b]        # 227658 <bdrv_first>
   189fd:	test   rbx,rbx
   18a00:	je     18a49 <bdrv_info_stats+0x59>
   18a02:	lea    rbp,[rip+0x740f]        # 1fe18 <__FUNCTION__.13696+0x150>
   18a09:	nop    DWORD PTR [rax+0x0]
   18a10:	mov    rcx,QWORD PTR [rbx+0x868]
   18a17:	mov    rdx,QWORD PTR [rbx+0x860]
   18a1e:	lea    rsi,[rbx+0x898]
   18a25:	mov    r9,QWORD PTR [rbx+0x878]
   18a2c:	mov    r8,QWORD PTR [rbx+0x870]
   18a33:	xor    eax,eax
   18a35:	mov    rdi,rbp
   18a38:	call   4140 <term_printf>
   18a3d:	mov    rbx,QWORD PTR [rbx+0x8b8]
   18a44:	test   rbx,rbx
   18a47:	jne    18a10 <bdrv_info_stats+0x20>
   18a49:	add    rsp,0x8
   18a4d:	pop    rbx
   18a4e:	pop    rbp
   18a4f:	ret    

0000000000018a50 <bdrv_get_encrypted_filename>:
   18a50:	mov    rax,QWORD PTR [rdi+0x850]
   18a57:	test   rax,rax
   18a5a:	je     18a63 <bdrv_get_encrypted_filename+0x13>
   18a5c:	mov    edx,DWORD PTR [rax+0x14]
   18a5f:	test   edx,edx
   18a61:	jne    18a70 <bdrv_get_encrypted_filename+0x20>
   18a63:	mov    eax,DWORD PTR [rdi+0x14]
   18a66:	test   eax,eax
   18a68:	je     18a80 <bdrv_get_encrypted_filename+0x30>
   18a6a:	lea    rax,[rdi+0x48]
   18a6e:	ret    
   18a6f:	nop
   18a70:	lea    rax,[rdi+0x448]
   18a77:	ret    
   18a78:	nop    DWORD PTR [rax+rax*1+0x0]
   18a80:	xor    eax,eax
   18a82:	ret    
   18a83:	nop    DWORD PTR [rax]
   18a86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018a90 <bdrv_get_backing_filename>:
   18a90:	cmp    QWORD PTR [rdi+0x850],0x0
   18a98:	mov    rax,rsi
   18a9b:	movsxd rsi,edx
   18a9e:	je     18ab0 <bdrv_get_backing_filename+0x20>
   18aa0:	lea    rdx,[rdi+0x448]
   18aa7:	mov    rdi,rax
   18aaa:	jmp    45a0 <pstrcpy>
   18aaf:	nop
   18ab0:	lea    rdx,[rip+0x69ae]        # 1f465 <desc_template.13816+0x8e5>
   18ab7:	mov    rdi,rax
   18aba:	jmp    45a0 <pstrcpy>
   18abf:	nop

0000000000018ac0 <bdrv_write_compressed>:
   18ac0:	push   r15
   18ac2:	push   r14
   18ac4:	push   r13
   18ac6:	push   r12
   18ac8:	push   rbp
   18ac9:	push   rbx
   18aca:	sub    rsp,0x18
   18ace:	mov    r14,QWORD PTR [rdi+0x38]
   18ad2:	test   r14,r14
   18ad5:	je     18b7f <bdrv_write_compressed+0xbf>
   18adb:	mov    rax,rsi
   18ade:	mov    r13,rsi
   18ae1:	mov    r15d,ecx
   18ae4:	neg    rax
   18ae7:	shl    r13,0x9
   18aeb:	test   rsi,rsi
   18aee:	cmovs  r13,rax
   18af2:	shl    r15d,0x9
   18af6:	mov    QWORD PTR [rsp+0x8],rdx
   18afb:	movsxd r15,r15d
   18afe:	mov    rbx,rsi
   18b01:	mov    rsi,r13
   18b04:	mov    rdx,r15
   18b07:	mov    r12d,ecx
   18b0a:	mov    rbp,rdi
   18b0d:	call   16dd0 <bdrv_check_byte_request>
   18b12:	test   eax,eax
   18b14:	jne    18b60 <bdrv_write_compressed+0xa0>
   18b16:	cmp    QWORD PTR [r14+0xb0],0x0
   18b1e:	je     18b78 <bdrv_write_compressed+0xb8>
   18b20:	mov    rdx,r15
   18b23:	mov    rsi,r13
   18b26:	mov    rdi,rbp
   18b29:	call   16dd0 <bdrv_check_byte_request>
   18b2e:	test   eax,eax
   18b30:	jne    18b60 <bdrv_write_compressed+0xa0>
   18b32:	mov    rax,QWORD PTR [r14+0xb0]
   18b39:	mov    rdx,QWORD PTR [rsp+0x8]
   18b3e:	add    rsp,0x18
   18b42:	mov    ecx,r12d
   18b45:	mov    rsi,rbx
   18b48:	mov    rdi,rbp
   18b4b:	pop    rbx
   18b4c:	pop    rbp
   18b4d:	pop    r12
   18b4f:	pop    r13
   18b51:	pop    r14
   18b53:	pop    r15
   18b55:	jmp    rax
   18b57:	nop    WORD PTR [rax+rax*1+0x0]
   18b60:	mov    eax,0xfffffffb
   18b65:	add    rsp,0x18
   18b69:	pop    rbx
   18b6a:	pop    rbp
   18b6b:	pop    r12
   18b6d:	pop    r13
   18b6f:	pop    r14
   18b71:	pop    r15
   18b73:	ret    
   18b74:	nop    DWORD PTR [rax+0x0]
   18b78:	mov    eax,0xffffffa1
   18b7d:	jmp    18b65 <bdrv_write_compressed+0xa5>
   18b7f:	mov    eax,0xffffff85
   18b84:	jmp    18b65 <bdrv_write_compressed+0xa5>
   18b86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018b90 <bdrv_get_info>:
   18b90:	mov    rax,QWORD PTR [rdi+0x38]
   18b94:	test   rax,rax
   18b97:	je     18bb6 <bdrv_get_info+0x26>
   18b99:	cmp    QWORD PTR [rax+0xd8],0x0
   18ba1:	je     18bb0 <bdrv_get_info+0x20>
   18ba3:	pxor   xmm0,xmm0
   18ba7:	movups XMMWORD PTR [rsi],xmm0
   18baa:	jmp    QWORD PTR [rax+0xd8]
   18bb0:	mov    eax,0xffffffa1
   18bb5:	ret    
   18bb6:	mov    eax,0xffffff85
   18bbb:	ret    
   18bbc:	nop    DWORD PTR [rax+0x0]

0000000000018bc0 <bdrv_put_buffer>:
   18bc0:	mov    rax,QWORD PTR [rdi+0x38]
   18bc4:	test   rax,rax
   18bc7:	je     18bd7 <bdrv_put_buffer+0x17>
   18bc9:	mov    rax,QWORD PTR [rax+0xe0]
   18bd0:	test   rax,rax
   18bd3:	je     18bdd <bdrv_put_buffer+0x1d>
   18bd5:	jmp    rax
   18bd7:	mov    eax,0xffffff85
   18bdc:	ret    
   18bdd:	mov    eax,0xffffffa1
   18be2:	ret    
   18be3:	nop    DWORD PTR [rax]
   18be6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018bf0 <bdrv_get_buffer>:
   18bf0:	mov    rax,QWORD PTR [rdi+0x38]
   18bf4:	test   rax,rax
   18bf7:	je     18c07 <bdrv_get_buffer+0x17>
   18bf9:	mov    rax,QWORD PTR [rax+0xe8]
   18c00:	test   rax,rax
   18c03:	je     18c0d <bdrv_get_buffer+0x1d>
   18c05:	jmp    rax
   18c07:	mov    eax,0xffffff85
   18c0c:	ret    
   18c0d:	mov    eax,0xffffffa1
   18c12:	ret    
   18c13:	nop    DWORD PTR [rax]
   18c16:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018c20 <bdrv_snapshot_create>:
   18c20:	mov    rax,QWORD PTR [rdi+0x38]
   18c24:	test   rax,rax
   18c27:	je     18c37 <bdrv_snapshot_create+0x17>
   18c29:	mov    rax,QWORD PTR [rax+0xb8]
   18c30:	test   rax,rax
   18c33:	je     18c3d <bdrv_snapshot_create+0x1d>
   18c35:	jmp    rax
   18c37:	mov    eax,0xffffff85
   18c3c:	ret    
   18c3d:	mov    eax,0xffffffa1
   18c42:	ret    
   18c43:	nop    DWORD PTR [rax]
   18c46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018c50 <bdrv_snapshot_goto>:
   18c50:	mov    rax,QWORD PTR [rdi+0x38]
   18c54:	test   rax,rax
   18c57:	je     18c67 <bdrv_snapshot_goto+0x17>
   18c59:	mov    rax,QWORD PTR [rax+0xc0]
   18c60:	test   rax,rax
   18c63:	je     18c6d <bdrv_snapshot_goto+0x1d>
   18c65:	jmp    rax
   18c67:	mov    eax,0xffffff85
   18c6c:	ret    
   18c6d:	mov    eax,0xffffffa1
   18c72:	ret    
   18c73:	nop    DWORD PTR [rax]
   18c76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018c80 <bdrv_snapshot_delete>:
   18c80:	mov    rax,QWORD PTR [rdi+0x38]
   18c84:	test   rax,rax
   18c87:	je     18c97 <bdrv_snapshot_delete+0x17>
   18c89:	mov    rax,QWORD PTR [rax+0xc8]
   18c90:	test   rax,rax
   18c93:	je     18c9d <bdrv_snapshot_delete+0x1d>
   18c95:	jmp    rax
   18c97:	mov    eax,0xffffff85
   18c9c:	ret    
   18c9d:	mov    eax,0xffffffa1
   18ca2:	ret    
   18ca3:	nop    DWORD PTR [rax]
   18ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018cb0 <bdrv_snapshot_list>:
   18cb0:	mov    rax,QWORD PTR [rdi+0x38]
   18cb4:	test   rax,rax
   18cb7:	je     18cc7 <bdrv_snapshot_list+0x17>
   18cb9:	mov    rax,QWORD PTR [rax+0xd0]
   18cc0:	test   rax,rax
   18cc3:	je     18ccd <bdrv_snapshot_list+0x1d>
   18cc5:	jmp    rax
   18cc7:	mov    eax,0xffffff85
   18ccc:	ret    
   18ccd:	mov    eax,0xffffffa1
   18cd2:	ret    
   18cd3:	nop    DWORD PTR [rax]
   18cd6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018ce0 <get_human_readable_size>:
   18ce0:	cmp    rdx,0x3e7
   18ce7:	push   rbx
   18ce8:	movsxd rsi,esi
   18ceb:	mov    rbx,rdi
   18cee:	jle    18d80 <get_human_readable_size+0xa0>
   18cf4:	cmp    rdx,0x27ff
   18cfb:	jle    18e18 <get_human_readable_size+0x138>
   18d01:	cmp    rdx,0xf9fff
   18d08:	jle    18e30 <get_human_readable_size+0x150>
   18d0e:	xor    edi,edi
   18d10:	mov    ecx,0x400
   18d15:	shl    rcx,0xa
   18d19:	add    edi,0x1
   18d1c:	lea    rax,[rcx+rcx*4]
   18d20:	add    rax,rax
   18d23:	cmp    rdx,rax
   18d26:	jl     18da8 <get_human_readable_size+0xc8>
   18d2c:	imul   rax,rcx,0x3e8
   18d33:	cmp    rdx,rax
   18d36:	jl     18df8 <get_human_readable_size+0x118>
   18d3c:	cmp    edi,0x3
   18d3f:	jne    18d15 <get_human_readable_size+0x35>
   18d41:	mov    rax,rcx
   18d44:	mov    edi,0x54
   18d49:	sar    rax,1
   18d4c:	add    rax,rdx
   18d4f:	sub    rsp,0x8
   18d53:	lea    r8,[rip+0x704a]        # 1fda4 <__FUNCTION__.13696+0xdc>
   18d5a:	cqo    
   18d5c:	push   rdi
   18d5d:	mov    rdi,rbx
   18d60:	idiv   rcx
   18d63:	mov    edx,0x1
   18d68:	mov    rcx,0xffffffffffffffff
   18d6f:	mov    r9,rax
   18d72:	xor    eax,eax
   18d74:	call   2e30 <__snprintf_chk@plt>
   18d79:	pop    rax
   18d7a:	mov    rax,rbx
   18d7d:	pop    rdx
   18d7e:	pop    rbx
   18d7f:	ret    
   18d80:	lea    r8,[rip+0x7011]        # 1fd98 <__FUNCTION__.13696+0xd0>
   18d87:	mov    r9,rdx
   18d8a:	mov    rcx,0xffffffffffffffff
   18d91:	mov    edx,0x1
   18d96:	xor    eax,eax
   18d98:	call   2e30 <__snprintf_chk@plt>
   18d9d:	mov    rax,rbx
   18da0:	pop    rbx
   18da1:	ret    
   18da2:	nop    WORD PTR [rax+rax*1+0x0]
   18da8:	pxor   xmm1,xmm1
   18dac:	lea    rax,[rip+0x70a8]        # 1fe5b <suffixes.14389>
   18db3:	movsxd rdi,edi
   18db6:	movsx  r9d,BYTE PTR [rax+rdi*1]
   18dbb:	cvtsi2sd xmm1,rcx
   18dc0:	pxor   xmm0,xmm0
   18dc4:	lea    r8,[rip+0x6fd1]        # 1fd9c <__FUNCTION__.13696+0xd4>
   18dcb:	mov    rdi,rbx
   18dce:	mov    rcx,0xffffffffffffffff
   18dd5:	mov    eax,0x1
   18dda:	cvtsi2sd xmm0,rdx
   18ddf:	mov    edx,0x1
   18de4:	divsd  xmm0,xmm1
   18de8:	call   2e30 <__snprintf_chk@plt>
   18ded:	mov    rax,rbx
   18df0:	pop    rbx
   18df1:	ret    
   18df2:	nop    WORD PTR [rax+rax*1+0x0]
   18df8:	lea    rax,[rip+0x705c]        # 1fe5b <suffixes.14389>
   18dff:	movsxd rdi,edi
   18e02:	movsx  edi,BYTE PTR [rax+rdi*1]
   18e06:	mov    rax,rcx
   18e09:	sar    rax,1
   18e0c:	jmp    18d4c <get_human_readable_size+0x6c>
   18e11:	nop    DWORD PTR [rax+0x0]
   18e18:	movsd  xmm1,QWORD PTR [rip+0x7040]        # 1fe60 <suffixes.14389+0x5>
   18e20:	mov    r9d,0x4b
   18e26:	jmp    18dc0 <get_human_readable_size+0xe0>
   18e28:	nop    DWORD PTR [rax+rax*1+0x0]
   18e30:	mov    eax,0x200
   18e35:	mov    edi,0x4b
   18e3a:	mov    ecx,0x400
   18e3f:	jmp    18d4c <get_human_readable_size+0x6c>
   18e44:	xchg   ax,ax
   18e46:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000018e50 <bdrv_snapshot_dump>:
   18e50:	push   r14
   18e52:	push   r13
   18e54:	push   r12
   18e56:	push   rbp
   18e57:	mov    r12,rdi
   18e5a:	push   rbx
   18e5b:	movsxd rbp,esi
   18e5e:	sub    rsp,0x1e0
   18e65:	mov    rax,QWORD PTR fs:0x28
   18e6e:	mov    QWORD PTR [rsp+0x1d8],rax
   18e76:	xor    eax,eax
   18e78:	test   rdx,rdx
   18e7b:	je     19028 <bdrv_snapshot_dump+0x1d8>
   18e81:	mov    eax,DWORD PTR [rdx+0x184]
   18e87:	lea    r14,[rsp+0x10]
   18e8c:	lea    rdi,[rsp+0x8]
   18e91:	lea    r13,[rsp+0xd0]
   18e99:	mov    rbx,rdx
   18e9c:	mov    rsi,r14
   18e9f:	mov    QWORD PTR [rsp+0x8],rax
   18ea4:	call   2eb0 <localtime_r@plt>
   18ea9:	lea    rdx,[rip+0x6f2a]        # 1fdda <__FUNCTION__.13696+0x112>
   18eb0:	mov    rcx,r14
   18eb3:	mov    esi,0x80
   18eb8:	mov    rdi,r13
   18ebb:	lea    r14,[rsp+0x150]
   18ec3:	call   32f0 <strftime@plt>
   18ec8:	mov    rcx,QWORD PTR [rbx+0x190]
   18ecf:	movabs r9,0x44b82fa09b5a53
   18ed9:	sub    rsp,0x8
   18edd:	lea    r8,[rip+0x6f08]        # 1fdec <__FUNCTION__.13696+0x124>
   18ee4:	mov    rdx,rcx
   18ee7:	shr    rdx,0x9
   18eeb:	mov    rax,rdx
   18eee:	mul    r9
   18ef1:	movabs r9,0x91a2b3c4d5e6f81
   18efb:	mov    rsi,rdx
   18efe:	shr    rdx,0xf
   18f02:	mov    rax,rdx
   18f05:	shr    rsi,0xb
   18f09:	mul    r9
   18f0c:	mov    rax,rcx
   18f0f:	movabs rcx,0x20c49ba5e353f7cf
   18f19:	shr    rdx,0x3
   18f1d:	mov    r9,rdx
   18f20:	movabs rdx,0x431bde82d7b634db
   18f2a:	mul    rdx
   18f2d:	mov    rdi,rdx
   18f30:	shr    rdx,0x15
   18f34:	mov    rax,rdx
   18f37:	shr    rdi,0x12
   18f3b:	mul    rcx
   18f3e:	mov    rax,rsi
   18f41:	shr    rdx,0x4
   18f45:	imul   rcx,rdx,0x3e8
   18f4c:	sub    rdi,rcx
   18f4f:	push   rdi
   18f50:	movabs rdi,0x8888888888888889
   18f5a:	mul    rdi
   18f5d:	mov    rcx,rdx
   18f60:	shr    rcx,0x5
   18f64:	mov    rax,rcx
   18f67:	shl    rax,0x4
   18f6b:	sub    rax,rcx
   18f6e:	shl    rax,0x2
   18f72:	sub    rsi,rax
   18f75:	mov    rax,rcx
   18f78:	mul    rdi
   18f7b:	push   rsi
   18f7c:	mov    rdi,r14
   18f7f:	mov    esi,0x80
   18f84:	shr    rdx,0x5
   18f88:	mov    rax,rdx
   18f8b:	shl    rax,0x4
   18f8f:	sub    rax,rdx
   18f92:	mov    edx,0x1
   18f97:	shl    rax,0x2
   18f9b:	sub    rcx,rax
   18f9e:	xor    eax,eax
   18fa0:	push   rcx
   18fa1:	mov    ecx,0x80
   18fa6:	call   2e30 <__snprintf_chk@plt>
   18fab:	mov    edx,DWORD PTR [rbx+0x180]
   18fb1:	add    rsp,0x20
   18fb5:	mov    esi,0x80
   18fba:	lea    rdi,[rsp+0x50]
   18fbf:	call   18ce0 <get_human_readable_size>
   18fc4:	push   r14
   18fc6:	push   r13
   18fc8:	mov    r9,rbx
   18fcb:	push   rax
   18fcc:	lea    rax,[rbx+0x80]
   18fd3:	push   rax
   18fd4:	lea    r8,[rip+0x6dcf]        # 1fdaa <__FUNCTION__.13696+0xe2>
   18fdb:	xor    eax,eax
   18fdd:	mov    rcx,0xffffffffffffffff
   18fe4:	mov    edx,0x1
   18fe9:	mov    rsi,rbp
   18fec:	mov    rdi,r12
   18fef:	call   2e30 <__snprintf_chk@plt>
   18ff4:	add    rsp,0x20
   18ff8:	mov    rax,r12
   18ffb:	mov    rbx,QWORD PTR [rsp+0x1d8]
   19003:	xor    rbx,QWORD PTR fs:0x28
   1900c:	jne    19051 <bdrv_snapshot_dump+0x201>
   19012:	add    rsp,0x1e0
   19019:	pop    rbx
   1901a:	pop    rbp
   1901b:	pop    r12
   1901d:	pop    r13
   1901f:	pop    r14
   19021:	ret    
   19022:	nop    WORD PTR [rax+rax*1+0x0]
   19028:	lea    rax,[rip+0x6d91]        # 1fdc0 <__FUNCTION__.13696+0xf8>
   1902f:	lea    r9,[rip+0x5a14]        # 1ea4a <Te0+0x40a>
   19036:	push   rax
   19037:	lea    rax,[rip+0x6d8b]        # 1fdc9 <__FUNCTION__.13696+0x101>
   1903e:	push   rax
   1903f:	lea    rax,[rip+0x6d88]        # 1fdce <__FUNCTION__.13696+0x106>
   19046:	push   rax
   19047:	lea    rax,[rip+0x6d88]        # 1fdd6 <__FUNCTION__.13696+0x10e>
   1904e:	push   rax
   1904f:	jmp    18fd4 <bdrv_snapshot_dump+0x184>
   19051:	call   2f70 <__stack_chk_fail@plt>
   19056:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019060 <bdrv_aio_read>:
   19060:	push   r15
   19062:	push   r14
   19064:	push   r13
   19066:	push   r12
   19068:	push   rbp
   19069:	push   rbx
   1906a:	sub    rsp,0x18
   1906e:	mov    r14,QWORD PTR [rdi+0x38]
   19072:	test   r14,r14
   19075:	je     190f0 <bdrv_aio_read+0x90>
   19077:	mov    rbp,rsi
   1907a:	mov    rax,rsi
   1907d:	mov    r13d,ecx
   19080:	neg    rax
   19083:	shl    rsi,0x9
   19087:	test   rbp,rbp
   1908a:	cmovs  rsi,rax
   1908e:	shl    r13d,0x9
   19092:	mov    QWORD PTR [rsp],rdx
   19096:	movsxd rdx,r13d
   19099:	mov    QWORD PTR [rsp+0x8],r9
   1909e:	mov    r15,r8
   190a1:	mov    r12d,ecx
   190a4:	mov    rbx,rdi
   190a7:	call   16dd0 <bdrv_check_byte_request>
   190ac:	test   eax,eax
   190ae:	jne    190f0 <bdrv_aio_read+0x90>
   190b0:	mov    r9,QWORD PTR [rsp+0x8]
   190b5:	mov    r8,r15
   190b8:	mov    ecx,r12d
   190bb:	mov    rdx,QWORD PTR [rsp]
   190bf:	mov    rsi,rbp
   190c2:	mov    rdi,rbx
   190c5:	call   QWORD PTR [r14+0x60]
   190c9:	test   rax,rax
   190cc:	je     190e0 <bdrv_aio_read+0x80>
   190ce:	mov    r13d,r13d
   190d1:	add    QWORD PTR [rbx+0x870],0x1
   190d9:	add    QWORD PTR [rbx+0x860],r13
   190e0:	add    rsp,0x18
   190e4:	pop    rbx
   190e5:	pop    rbp
   190e6:	pop    r12
   190e8:	pop    r13
   190ea:	pop    r14
   190ec:	pop    r15
   190ee:	ret    
   190ef:	nop
   190f0:	xor    eax,eax
   190f2:	jmp    190e0 <bdrv_aio_read+0x80>
   190f4:	xchg   ax,ax
   190f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019100 <bdrv_read_em>:
   19100:	sub    rsp,0x18
   19104:	lea    r8,[rip+0xffffffffffffdb15]        # 16c20 <bdrv_rw_em_cb>
   1910b:	lea    r9,[rsp+0x4]
   19110:	mov    DWORD PTR [rsp+0x4],0x7fffffff
   19118:	mov    rax,QWORD PTR fs:0x28
   19121:	mov    QWORD PTR [rsp+0x8],rax
   19126:	xor    eax,eax
   19128:	call   19060 <bdrv_aio_read>
   1912d:	test   rax,rax
   19130:	je     19165 <bdrv_read_em+0x65>
   19132:	mov    eax,DWORD PTR [rsp+0x4]
   19136:	cmp    eax,0x7fffffff
   1913b:	jne    19150 <bdrv_read_em+0x50>
   1913d:	nop    DWORD PTR [rax]
   19140:	call   19df0 <qemu_aio_wait>
   19145:	mov    eax,DWORD PTR [rsp+0x4]
   19149:	cmp    eax,0x7fffffff
   1914e:	je     19140 <bdrv_read_em+0x40>
   19150:	mov    rdx,QWORD PTR [rsp+0x8]
   19155:	xor    rdx,QWORD PTR fs:0x28
   1915e:	jne    1916c <bdrv_read_em+0x6c>
   19160:	add    rsp,0x18
   19164:	ret    
   19165:	mov    eax,0xffffffff
   1916a:	jmp    19150 <bdrv_read_em+0x50>
   1916c:	call   2f70 <__stack_chk_fail@plt>
   19171:	nop    DWORD PTR [rax+rax*1+0x0]
   19176:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019180 <bdrv_aio_write>:
   19180:	push   r15
   19182:	push   r14
   19184:	push   r13
   19186:	push   r12
   19188:	push   rbp
   19189:	push   rbx
   1918a:	sub    rsp,0x18
   1918e:	mov    r14,QWORD PTR [rdi+0x38]
   19192:	test   r14,r14
   19195:	je     19220 <bdrv_aio_write+0xa0>
   1919b:	mov    eax,DWORD PTR [rdi+0x8]
   1919e:	test   eax,eax
   191a0:	jne    19220 <bdrv_aio_write+0xa0>
   191a2:	mov    r12,rsi
   191a5:	mov    rax,rsi
   191a8:	mov    r13d,ecx
   191ab:	neg    rax
   191ae:	shl    rsi,0x9
   191b2:	test   r12,r12
   191b5:	cmovs  rsi,rax
   191b9:	shl    r13d,0x9
   191bd:	mov    QWORD PTR [rsp],rdx
   191c1:	movsxd rdx,r13d
   191c4:	mov    QWORD PTR [rsp+0x8],r9
   191c9:	mov    r15,r8
   191cc:	mov    ebp,ecx
   191ce:	mov    rbx,rdi
   191d1:	call   16dd0 <bdrv_check_byte_request>
   191d6:	test   eax,eax
   191d8:	jne    19220 <bdrv_aio_write+0xa0>
   191da:	mov    r9,QWORD PTR [rsp+0x8]
   191df:	mov    r8,r15
   191e2:	mov    ecx,ebp
   191e4:	mov    rdx,QWORD PTR [rsp]
   191e8:	mov    rsi,r12
   191eb:	mov    rdi,rbx
   191ee:	call   QWORD PTR [r14+0x68]
   191f2:	test   rax,rax
   191f5:	je     19209 <bdrv_aio_write+0x89>
   191f7:	mov    r13d,r13d
   191fa:	add    QWORD PTR [rbx+0x878],0x1
   19202:	add    QWORD PTR [rbx+0x868],r13
   19209:	add    rsp,0x18
   1920d:	pop    rbx
   1920e:	pop    rbp
   1920f:	pop    r12
   19211:	pop    r13
   19213:	pop    r14
   19215:	pop    r15
   19217:	ret    
   19218:	nop    DWORD PTR [rax+rax*1+0x0]
   19220:	add    rsp,0x18
   19224:	xor    eax,eax
   19226:	pop    rbx
   19227:	pop    rbp
   19228:	pop    r12
   1922a:	pop    r13
   1922c:	pop    r14
   1922e:	pop    r15
   19230:	ret    
   19231:	nop    DWORD PTR [rax+rax*1+0x0]
   19236:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019240 <bdrv_aio_rw_vector>:
   19240:	push   r14
   19242:	push   r13
   19244:	mov    r14d,ecx
   19247:	push   r12
   19249:	push   rbp
   1924a:	mov    r13,rsi
   1924d:	push   rbx
   1924e:	mov    rbp,rdi
   19251:	sub    rsp,0x20
   19255:	mov    rbx,QWORD PTR [rip+0x20e2f4]        # 227550 <vectored_aio_pool+0x10>
   1925c:	mov    r12d,DWORD PTR [rsp+0x50]
   19261:	test   rbx,rbx
   19264:	je     19318 <bdrv_aio_rw_vector+0xd8>
   1926a:	mov    rax,QWORD PTR [rbx+0x20]
   1926e:	mov    QWORD PTR [rip+0x20e2db],rax        # 227550 <vectored_aio_pool+0x10>
   19275:	mov    esi,r14d
   19278:	mov    QWORD PTR [rbx+0x8],rbp
   1927c:	mov    QWORD PTR [rbx+0x10],r8
   19280:	shl    esi,0x9
   19283:	mov    QWORD PTR [rbx+0x18],r9
   19287:	mov    QWORD PTR [rbx+0x28],rdx
   1928b:	movsxd rsi,esi
   1928e:	mov    edi,0x200
   19293:	call   43f0 <qemu_memalign>
   19298:	test   r12d,r12d
   1929b:	mov    QWORD PTR [rbx+0x30],rax
   1929f:	mov    DWORD PTR [rbx+0x38],r12d
   192a3:	je     192f0 <bdrv_aio_rw_vector+0xb0>
   192a5:	mov    rdi,QWORD PTR [rbx+0x28]
   192a9:	mov    rsi,rax
   192ac:	call   48c0 <qemu_iovec_to_buffer>
   192b1:	mov    rdx,QWORD PTR [rbx+0x30]
   192b5:	lea    r8,[rip+0xffffffffffffda54]        # 16d10 <bdrv_aio_rw_vector_cb>
   192bc:	mov    r9,rbx
   192bf:	mov    ecx,r14d
   192c2:	mov    rsi,r13
   192c5:	mov    rdi,rbp
   192c8:	call   19180 <bdrv_aio_write>
   192cd:	mov    QWORD PTR [rbx+0x40],rax
   192d1:	test   rax,rax
   192d4:	je     19358 <bdrv_aio_rw_vector+0x118>
   192da:	mov    rax,rbx
   192dd:	add    rsp,0x20
   192e1:	pop    rbx
   192e2:	pop    rbp
   192e3:	pop    r12
   192e5:	pop    r13
   192e7:	pop    r14
   192e9:	ret    
   192ea:	nop    WORD PTR [rax+rax*1+0x0]
   192f0:	lea    r8,[rip+0xffffffffffffda19]        # 16d10 <bdrv_aio_rw_vector_cb>
   192f7:	mov    r9,rbx
   192fa:	mov    ecx,r14d
   192fd:	mov    rdx,rax
   19300:	mov    rsi,r13
   19303:	mov    rdi,rbp
   19306:	call   19060 <bdrv_aio_read>
   1930b:	mov    QWORD PTR [rbx+0x40],rax
   1930f:	jmp    192d1 <bdrv_aio_rw_vector+0x91>
   19311:	nop    DWORD PTR [rax+0x0]
   19318:	movsxd rdi,DWORD PTR [rip+0x20e229]        # 227548 <vectored_aio_pool+0x8>
   1931f:	mov    QWORD PTR [rsp+0x18],r9
   19324:	mov    QWORD PTR [rsp+0x10],r8
   19329:	mov    QWORD PTR [rsp+0x8],rdx
   1932e:	call   4a20 <qemu_mallocz>
   19333:	mov    rbx,rax
   19336:	lea    rax,[rip+0x20e203]        # 227540 <vectored_aio_pool>
   1933d:	mov    r9,QWORD PTR [rsp+0x18]
   19342:	mov    r8,QWORD PTR [rsp+0x10]
   19347:	mov    rdx,QWORD PTR [rsp+0x8]
   1934c:	mov    QWORD PTR [rbx],rax
   1934f:	jmp    19275 <bdrv_aio_rw_vector+0x35>
   19354:	nop    DWORD PTR [rax+0x0]
   19358:	mov    rdi,QWORD PTR [rbx+0x30]
   1935c:	mov    QWORD PTR [rsp+0x8],rax
   19361:	call   44a0 <qemu_vfree>
   19366:	mov    rdx,QWORD PTR [rbx]
   19369:	mov    rax,QWORD PTR [rsp+0x8]
   1936e:	mov    rcx,QWORD PTR [rdx+0x10]
   19372:	mov    QWORD PTR [rbx+0x20],rcx
   19376:	mov    QWORD PTR [rdx+0x10],rbx
   1937a:	jmp    192dd <bdrv_aio_rw_vector+0x9d>
   1937f:	nop

0000000000019380 <bdrv_aio_readv>:
   19380:	push   r15
   19382:	push   r14
   19384:	mov    rax,rsi
   19387:	push   r13
   19389:	push   r12
   1938b:	neg    rax
   1938e:	push   rbp
   1938f:	push   rbx
   19390:	mov    rbx,rsi
   19393:	mov    rbp,rdx
   19396:	shl    rsi,0x9
   1939a:	mov    edx,ecx
   1939c:	sub    rsp,0x8
   193a0:	test   rbx,rbx
   193a3:	mov    r14,rdi
   193a6:	cmovs  rsi,rax
   193aa:	shl    edx,0x9
   193ad:	mov    r15d,ecx
   193b0:	movsxd rdx,edx
   193b3:	mov    r12,r8
   193b6:	mov    r13,r9
   193b9:	call   16dd0 <bdrv_check_byte_request>
   193be:	test   eax,eax
   193c0:	jne    193f0 <bdrv_aio_readv+0x70>
   193c2:	sub    rsp,0x8
   193c6:	mov    ecx,r15d
   193c9:	mov    rdx,rbp
   193cc:	push   0x0
   193ce:	mov    r9,r13
   193d1:	mov    r8,r12
   193d4:	mov    rsi,rbx
   193d7:	mov    rdi,r14
   193da:	call   19240 <bdrv_aio_rw_vector>
   193df:	pop    rdx
   193e0:	pop    rcx
   193e1:	add    rsp,0x8
   193e5:	pop    rbx
   193e6:	pop    rbp
   193e7:	pop    r12
   193e9:	pop    r13
   193eb:	pop    r14
   193ed:	pop    r15
   193ef:	ret    
   193f0:	add    rsp,0x8
   193f4:	xor    eax,eax
   193f6:	pop    rbx
   193f7:	pop    rbp
   193f8:	pop    r12
   193fa:	pop    r13
   193fc:	pop    r14
   193fe:	pop    r15
   19400:	ret    
   19401:	nop    DWORD PTR [rax+rax*1+0x0]
   19406:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019410 <bdrv_aio_writev>:
   19410:	push   r15
   19412:	push   r14
   19414:	mov    rax,rsi
   19417:	push   r13
   19419:	push   r12
   1941b:	neg    rax
   1941e:	push   rbp
   1941f:	push   rbx
   19420:	mov    rbx,rsi
   19423:	mov    rbp,rdx
   19426:	shl    rsi,0x9
   1942a:	mov    edx,ecx
   1942c:	sub    rsp,0x8
   19430:	test   rbx,rbx
   19433:	mov    r14,rdi
   19436:	cmovs  rsi,rax
   1943a:	shl    edx,0x9
   1943d:	mov    r15d,ecx
   19440:	movsxd rdx,edx
   19443:	mov    r12,r8
   19446:	mov    r13,r9
   19449:	call   16dd0 <bdrv_check_byte_request>
   1944e:	test   eax,eax
   19450:	jne    19480 <bdrv_aio_writev+0x70>
   19452:	sub    rsp,0x8
   19456:	mov    ecx,r15d
   19459:	mov    rdx,rbp
   1945c:	push   0x1
   1945e:	mov    r9,r13
   19461:	mov    r8,r12
   19464:	mov    rsi,rbx
   19467:	mov    rdi,r14
   1946a:	call   19240 <bdrv_aio_rw_vector>
   1946f:	pop    rdx
   19470:	pop    rcx
   19471:	add    rsp,0x8
   19475:	pop    rbx
   19476:	pop    rbp
   19477:	pop    r12
   19479:	pop    r13
   1947b:	pop    r14
   1947d:	pop    r15
   1947f:	ret    
   19480:	add    rsp,0x8
   19484:	xor    eax,eax
   19486:	pop    rbx
   19487:	pop    rbp
   19488:	pop    r12
   1948a:	pop    r13
   1948c:	pop    r14
   1948e:	pop    r15
   19490:	ret    
   19491:	nop    DWORD PTR [rax+rax*1+0x0]
   19496:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000194a0 <bdrv_write_em>:
   194a0:	sub    rsp,0x18
   194a4:	lea    r8,[rip+0xffffffffffffd775]        # 16c20 <bdrv_rw_em_cb>
   194ab:	lea    r9,[rsp+0x4]
   194b0:	mov    DWORD PTR [rsp+0x4],0x7fffffff
   194b8:	mov    rax,QWORD PTR fs:0x28
   194c1:	mov    QWORD PTR [rsp+0x8],rax
   194c6:	xor    eax,eax
   194c8:	call   19180 <bdrv_aio_write>
   194cd:	test   rax,rax
   194d0:	je     19505 <bdrv_write_em+0x65>
   194d2:	mov    eax,DWORD PTR [rsp+0x4]
   194d6:	cmp    eax,0x7fffffff
   194db:	jne    194f0 <bdrv_write_em+0x50>
   194dd:	nop    DWORD PTR [rax]
   194e0:	call   19df0 <qemu_aio_wait>
   194e5:	mov    eax,DWORD PTR [rsp+0x4]
   194e9:	cmp    eax,0x7fffffff
   194ee:	je     194e0 <bdrv_write_em+0x40>
   194f0:	mov    rdx,QWORD PTR [rsp+0x8]
   194f5:	xor    rdx,QWORD PTR fs:0x28
   194fe:	jne    1950c <bdrv_write_em+0x6c>
   19500:	add    rsp,0x18
   19504:	ret    
   19505:	mov    eax,0xffffffff
   1950a:	jmp    194f0 <bdrv_write_em+0x50>
   1950c:	call   2f70 <__stack_chk_fail@plt>
   19511:	nop    DWORD PTR [rax+rax*1+0x0]
   19516:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019520 <bdrv_aio_cancel>:
   19520:	mov    rax,QWORD PTR [rdi]
   19523:	jmp    QWORD PTR [rax]
   19525:	nop
   19526:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019530 <bdrv_aio_flush>:
   19530:	mov    rax,QWORD PTR [rdi+0x38]
   19534:	test   rax,rax
   19537:	je     1953c <bdrv_aio_flush+0xc>
   19539:	jmp    QWORD PTR [rax+0x78]
   1953c:	xor    eax,eax
   1953e:	ret    
   1953f:	nop

0000000000019540 <bdrv_init>:
   19540:	lea    rax,[rip+0xffffffffffffd6c9]        # 16c10 <bdrv_aio_cancel_vector>
   19547:	lea    rdi,[rip+0x20de52]        # 2273a0 <bdrv_raw>
   1954e:	mov    DWORD PTR [rip+0x20dff0],0x48        # 227548 <vectored_aio_pool+0x8>
   19558:	mov    QWORD PTR [rip+0x20dfed],0x0        # 227550 <vectored_aio_pool+0x10>
   19563:	mov    QWORD PTR [rip+0x20dfd6],rax        # 227540 <vectored_aio_pool>
   1956a:	call   16b40 <bdrv_register>
   1956f:	lea    rdi,[rip+0x20dcea]        # 227260 <bdrv_host_device>
   19576:	call   16b40 <bdrv_register>
   1957b:	lea    rdi,[rip+0x20cc9e]        # 226220 <bdrv_cow>
   19582:	call   16b40 <bdrv_register>
   19587:	lea    rdi,[rip+0x20cdd2]        # 226360 <bdrv_qcow>
   1958e:	call   16b40 <bdrv_register>
   19593:	lea    rdi,[rip+0x20cf06]        # 2264a0 <bdrv_vmdk>
   1959a:	call   16b40 <bdrv_register>
   1959f:	lea    rdi,[rip+0x20d03a]        # 2265e0 <bdrv_cloop>
   195a6:	call   16b40 <bdrv_register>
   195ab:	lea    rdi,[rip+0x20d16e]        # 226720 <bdrv_dmg>
   195b2:	call   16b40 <bdrv_register>
   195b7:	lea    rdi,[rip+0x20d2a2]        # 226860 <bdrv_bochs>
   195be:	call   16b40 <bdrv_register>
   195c3:	lea    rdi,[rip+0x20d3d6]        # 2269a0 <bdrv_vpc>
   195ca:	call   16b40 <bdrv_register>
   195cf:	lea    rdi,[rip+0x20d50a]        # 226ae0 <bdrv_vvfat>
   195d6:	call   16b40 <bdrv_register>
   195db:	lea    rdi,[rip+0x20d77e]        # 226d60 <bdrv_qcow2>
   195e2:	call   16b40 <bdrv_register>
   195e7:	lea    rdi,[rip+0x20d8b2]        # 226ea0 <bdrv_parallels>
   195ee:	call   16b40 <bdrv_register>
   195f3:	lea    rdi,[rip+0x20d9e6]        # 226fe0 <bdrv_nbd>
   195fa:	jmp    16b40 <bdrv_register>
   195ff:	nop

0000000000019600 <aio_pool_init>:
   19600:	mov    DWORD PTR [rdi+0x8],esi
   19603:	mov    QWORD PTR [rdi],rdx
   19606:	mov    QWORD PTR [rdi+0x10],0x0
   1960e:	ret    
   1960f:	nop

0000000000019610 <qemu_aio_get_pool>:
   19610:	push   rbx
   19611:	mov    rbx,rdi
   19614:	sub    rsp,0x20
   19618:	mov    rax,QWORD PTR [rdi+0x10]
   1961c:	test   rax,rax
   1961f:	je     19640 <qemu_aio_get_pool+0x30>
   19621:	mov    rdi,QWORD PTR [rax+0x20]
   19625:	mov    QWORD PTR [rbx+0x10],rdi
   19629:	mov    QWORD PTR [rax+0x8],rsi
   1962d:	mov    QWORD PTR [rax+0x10],rdx
   19631:	mov    QWORD PTR [rax+0x18],rcx
   19635:	add    rsp,0x20
   19639:	pop    rbx
   1963a:	ret    
   1963b:	nop    DWORD PTR [rax+rax*1+0x0]
   19640:	movsxd rdi,DWORD PTR [rdi+0x8]
   19644:	mov    QWORD PTR [rsp+0x18],rcx
   19649:	mov    QWORD PTR [rsp+0x10],rdx
   1964e:	mov    QWORD PTR [rsp+0x8],rsi
   19653:	call   4a20 <qemu_mallocz>
   19658:	mov    rcx,QWORD PTR [rsp+0x18]
   1965d:	mov    QWORD PTR [rax],rbx
   19660:	mov    rdx,QWORD PTR [rsp+0x10]
   19665:	mov    rsi,QWORD PTR [rsp+0x8]
   1966a:	jmp    19629 <qemu_aio_get_pool+0x19>
   1966c:	nop    DWORD PTR [rax+0x0]

0000000000019670 <qemu_aio_get>:
   19670:	push   rbp
   19671:	push   rbx
   19672:	mov    rbp,rdi
   19675:	sub    rsp,0x18
   19679:	mov    rbx,QWORD PTR [rdi+0x38]
   1967d:	mov    rax,QWORD PTR [rbx+0x130]
   19684:	test   rax,rax
   19687:	je     196b0 <qemu_aio_get+0x40>
   19689:	mov    rcx,QWORD PTR [rax+0x20]
   1968d:	mov    QWORD PTR [rbx+0x130],rcx
   19694:	mov    QWORD PTR [rax+0x8],rbp
   19698:	mov    QWORD PTR [rax+0x10],rsi
   1969c:	mov    QWORD PTR [rax+0x18],rdx
   196a0:	add    rsp,0x18
   196a4:	pop    rbx
   196a5:	pop    rbp
   196a6:	ret    
   196a7:	nop    WORD PTR [rax+rax*1+0x0]
   196b0:	movsxd rdi,DWORD PTR [rbx+0x128]
   196b7:	add    rbx,0x120
   196be:	mov    QWORD PTR [rsp+0x8],rdx
   196c3:	mov    QWORD PTR [rsp],rsi
   196c7:	call   4a20 <qemu_mallocz>
   196cc:	mov    rdx,QWORD PTR [rsp+0x8]
   196d1:	mov    QWORD PTR [rax],rbx
   196d4:	mov    rsi,QWORD PTR [rsp]
   196d8:	jmp    19694 <qemu_aio_get+0x24>
   196da:	nop    WORD PTR [rax+rax*1+0x0]

00000000000196e0 <bdrv_aio_flush_em>:
   196e0:	push   rbp
   196e1:	push   rbx
   196e2:	mov    rbx,rdi
   196e5:	sub    rsp,0x8
   196e9:	call   19670 <qemu_aio_get>
   196ee:	cmp    QWORD PTR [rax+0x28],0x0
   196f3:	mov    rbp,rax
   196f6:	jne    1971e <bdrv_aio_flush_em+0x3e>
   196f8:	jmp    19750 <bdrv_aio_flush_em+0x70>
   196fa:	nop    WORD PTR [rax+rax*1+0x0]
   19700:	mov    rax,QWORD PTR [rax+0x40]
   19704:	test   rax,rax
   19707:	je     19712 <bdrv_aio_flush_em+0x32>
   19709:	mov    rdi,rbx
   1970c:	call   rax
   1970e:	test   eax,eax
   19710:	jne    1972c <bdrv_aio_flush_em+0x4c>
   19712:	mov    rbx,QWORD PTR [rbx+0x850]
   19719:	test   rbx,rbx
   1971c:	je     19748 <bdrv_aio_flush_em+0x68>
   1971e:	mov    rax,QWORD PTR [rbx+0x38]
   19722:	test   rax,rax
   19725:	jne    19700 <bdrv_aio_flush_em+0x20>
   19727:	mov    eax,0xffffffea
   1972c:	mov    rdi,QWORD PTR [rbp+0x28]
   19730:	mov    DWORD PTR [rbp+0x30],eax
   19733:	call   41a0 <qemu_bh_schedule>
   19738:	add    rsp,0x8
   1973c:	mov    rax,rbp
   1973f:	pop    rbx
   19740:	pop    rbp
   19741:	ret    
   19742:	nop    WORD PTR [rax+rax*1+0x0]
   19748:	xor    eax,eax
   1974a:	jmp    1972c <bdrv_aio_flush_em+0x4c>
   1974c:	nop    DWORD PTR [rax+0x0]
   19750:	lea    rdi,[rip+0xffffffffffffd619]        # 16d70 <bdrv_aio_bh_cb>
   19757:	mov    rsi,rax
   1975a:	call   4160 <qemu_bh_new>
   1975f:	mov    QWORD PTR [rbp+0x28],rax
   19763:	jmp    1971e <bdrv_aio_flush_em+0x3e>
   19765:	nop
   19766:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019770 <bdrv_aio_read_em>:
   19770:	push   r14
   19772:	push   r13
   19774:	mov    r13,rdx
   19777:	push   r12
   19779:	push   rbp
   1977a:	mov    r12,rsi
   1977d:	push   rbx
   1977e:	mov    rdx,r9
   19781:	mov    rsi,r8
   19784:	mov    rbp,rdi
   19787:	mov    r14d,ecx
   1978a:	call   19670 <qemu_aio_get>
   1978f:	cmp    QWORD PTR [rax+0x28],0x0
   19794:	mov    rbx,rax
   19797:	je     197c8 <bdrv_aio_read_em+0x58>
   19799:	mov    ecx,r14d
   1979c:	mov    rdx,r13
   1979f:	mov    rsi,r12
   197a2:	mov    rdi,rbp
   197a5:	call   171e0 <bdrv_read>
   197aa:	mov    rdi,QWORD PTR [rbx+0x28]
   197ae:	mov    DWORD PTR [rbx+0x30],eax
   197b1:	call   41a0 <qemu_bh_schedule>
   197b6:	mov    rax,rbx
   197b9:	pop    rbx
   197ba:	pop    rbp
   197bb:	pop    r12
   197bd:	pop    r13
   197bf:	pop    r14
   197c1:	ret    
   197c2:	nop    WORD PTR [rax+rax*1+0x0]
   197c8:	lea    rdi,[rip+0xffffffffffffd5a1]        # 16d70 <bdrv_aio_bh_cb>
   197cf:	mov    rsi,rax
   197d2:	call   4160 <qemu_bh_new>
   197d7:	mov    QWORD PTR [rbx+0x28],rax
   197db:	jmp    19799 <bdrv_aio_read_em+0x29>
   197dd:	nop    DWORD PTR [rax]

00000000000197e0 <bdrv_aio_write_em>:
   197e0:	push   r14
   197e2:	push   r13
   197e4:	mov    r13,rdx
   197e7:	push   r12
   197e9:	push   rbp
   197ea:	mov    r12,rsi
   197ed:	push   rbx
   197ee:	mov    rdx,r9
   197f1:	mov    rsi,r8
   197f4:	mov    rbp,rdi
   197f7:	mov    r14d,ecx
   197fa:	call   19670 <qemu_aio_get>
   197ff:	cmp    QWORD PTR [rax+0x28],0x0
   19804:	mov    rbx,rax
   19807:	je     19838 <bdrv_aio_write_em+0x58>
   19809:	mov    ecx,r14d
   1980c:	mov    rdx,r13
   1980f:	mov    rsi,r12
   19812:	mov    rdi,rbp
   19815:	call   17620 <bdrv_write>
   1981a:	mov    rdi,QWORD PTR [rbx+0x28]
   1981e:	mov    DWORD PTR [rbx+0x30],eax
   19821:	call   41a0 <qemu_bh_schedule>
   19826:	mov    rax,rbx
   19829:	pop    rbx
   1982a:	pop    rbp
   1982b:	pop    r12
   1982d:	pop    r13
   1982f:	pop    r14
   19831:	ret    
   19832:	nop    WORD PTR [rax+rax*1+0x0]
   19838:	lea    rdi,[rip+0xffffffffffffd531]        # 16d70 <bdrv_aio_bh_cb>
   1983f:	mov    rsi,rax
   19842:	call   4160 <qemu_bh_new>
   19847:	mov    QWORD PTR [rbx+0x28],rax
   1984b:	jmp    19809 <bdrv_aio_write_em+0x29>
   1984d:	nop    DWORD PTR [rax]

0000000000019850 <qemu_aio_release>:
   19850:	mov    rax,QWORD PTR [rdi]
   19853:	mov    rdx,QWORD PTR [rax+0x10]
   19857:	mov    QWORD PTR [rdi+0x20],rdx
   1985b:	mov    QWORD PTR [rax+0x10],rdi
   1985f:	ret    

0000000000019860 <bdrv_is_inserted>:
   19860:	mov    rax,QWORD PTR [rdi+0x38]
   19864:	test   rax,rax
   19867:	je     19880 <bdrv_is_inserted+0x20>
   19869:	mov    rax,QWORD PTR [rax+0xf0]
   19870:	test   rax,rax
   19873:	je     19888 <bdrv_is_inserted+0x28>
   19875:	jmp    rax
   19877:	nop    WORD PTR [rax+rax*1+0x0]
   19880:	xor    eax,eax
   19882:	ret    
   19883:	nop    DWORD PTR [rax+rax*1+0x0]
   19888:	mov    eax,0x1
   1988d:	ret    
   1988e:	xchg   ax,ax

0000000000019890 <bdrv_media_changed>:
   19890:	mov    rax,QWORD PTR [rdi+0x38]
   19894:	push   rbx
   19895:	mov    rbx,rdi
   19898:	test   rax,rax
   1989b:	je     198c0 <bdrv_media_changed+0x30>
   1989d:	mov    rax,QWORD PTR [rax+0xf8]
   198a4:	test   rax,rax
   198a7:	je     198c0 <bdrv_media_changed+0x30>
   198a9:	call   rax
   198ab:	cmp    eax,0xffffffa1
   198ae:	je     198c0 <bdrv_media_changed+0x30>
   198b0:	mov    DWORD PTR [rbx+0x84c],0x0
   198ba:	pop    rbx
   198bb:	ret    
   198bc:	nop    DWORD PTR [rax+0x0]
   198c0:	mov    eax,DWORD PTR [rbx+0x84c]
   198c6:	mov    DWORD PTR [rbx+0x84c],0x0
   198d0:	pop    rbx
   198d1:	ret    
   198d2:	nop    DWORD PTR [rax+0x0]
   198d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000198e0 <bdrv_eject>:
   198e0:	push   rbp
   198e1:	push   rbx
   198e2:	mov    ebp,esi
   198e4:	mov    rbx,rdi
   198e7:	sub    rsp,0x8
   198eb:	mov    rax,QWORD PTR [rdi+0x38]
   198ef:	test   rax,rax
   198f2:	je     19910 <bdrv_eject+0x30>
   198f4:	mov    rax,QWORD PTR [rax+0x100]
   198fb:	test   rax,rax
   198fe:	je     19910 <bdrv_eject+0x30>
   19900:	call   rax
   19902:	cmp    eax,0xffffffa1
   19905:	je     19910 <bdrv_eject+0x30>
   19907:	add    rsp,0x8
   1990b:	pop    rbx
   1990c:	pop    rbp
   1990d:	ret    
   1990e:	xchg   ax,ax
   19910:	test   ebp,ebp
   19912:	je     19907 <bdrv_eject+0x27>
   19914:	add    rsp,0x8
   19918:	mov    rdi,rbx
   1991b:	pop    rbx
   1991c:	pop    rbp
   1991d:	jmp    17170 <bdrv_close>
   19922:	nop    DWORD PTR [rax+0x0]
   19926:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019930 <bdrv_is_locked>:
   19930:	mov    eax,DWORD PTR [rdi+0x10]
   19933:	ret    
   19934:	xchg   ax,ax
   19936:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019940 <bdrv_set_locked>:
   19940:	mov    rax,QWORD PTR [rdi+0x38]
   19944:	mov    DWORD PTR [rdi+0x10],esi
   19947:	test   rax,rax
   1994a:	je     19960 <bdrv_set_locked+0x20>
   1994c:	mov    rax,QWORD PTR [rax+0x108]
   19953:	test   rax,rax
   19956:	je     19960 <bdrv_set_locked+0x20>
   19958:	jmp    rax
   1995a:	nop    WORD PTR [rax+rax*1+0x0]
   19960:	repz ret 
   19962:	nop    DWORD PTR [rax+0x0]
   19966:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019970 <bdrv_ioctl>:
   19970:	mov    rax,QWORD PTR [rdi+0x38]
   19974:	test   rax,rax
   19977:	je     19990 <bdrv_ioctl+0x20>
   19979:	mov    rax,QWORD PTR [rax+0x110]
   19980:	test   rax,rax
   19983:	je     19990 <bdrv_ioctl+0x20>
   19985:	jmp    rax
   19987:	nop    WORD PTR [rax+rax*1+0x0]
   19990:	mov    eax,0xffffffa1
   19995:	ret    
   19996:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000199a0 <qemu_aio_wait.part.0>:
   199a0:	push   r15
   199a2:	push   r14
   199a4:	mov    r15d,0x1
   199aa:	push   r13
   199ac:	push   r12
   199ae:	push   rbp
   199af:	push   rbx
   199b0:	xor    ebp,ebp
   199b2:	sub    rsp,0x118
   199b9:	mov    rax,QWORD PTR fs:0x28
   199c2:	mov    QWORD PTR [rsp+0x108],rax
   199ca:	xor    eax,eax
   199cc:	lea    r13,[rsp+0x80]
   199d4:	mov    r14,rsp
   199d7:	mov    DWORD PTR [rip+0x20db77],0x1        # 227558 <walking_handlers>
   199e1:	mov    ecx,0x10
   199e6:	mov    rdi,r14
   199e9:	mov    eax,ebp
   199eb:	cld    
   199ec:	rep stos QWORD PTR es:[rdi],rax
   199ef:	mov    ecx,0x10
   199f4:	mov    rdi,r13
   199f7:	cld    
   199f8:	rep stos QWORD PTR es:[rdi],rax
   199fb:	mov    r12,QWORD PTR [rip+0x20db5e]        # 227560 <aio_handlers>
   19a02:	test   r12,r12
   19a05:	je     19be5 <qemu_aio_wait.part.0+0x245>
   19a0b:	mov    ebx,0xffffffff
   19a10:	mov    rax,QWORD PTR [r12+0x18]
   19a15:	test   rax,rax
   19a18:	je     19a29 <qemu_aio_wait.part.0+0x89>
   19a1a:	mov    rdi,QWORD PTR [r12+0x28]
   19a1f:	call   rax
   19a21:	test   eax,eax
   19a23:	je     19ab7 <qemu_aio_wait.part.0+0x117>
   19a29:	mov    esi,DWORD PTR [r12+0x20]
   19a2e:	test   esi,esi
   19a30:	jne    19ab7 <qemu_aio_wait.part.0+0x117>
   19a36:	cmp    QWORD PTR [r12+0x8],0x0
   19a3c:	je     19a79 <qemu_aio_wait.part.0+0xd9>
   19a3e:	movsxd rdi,DWORD PTR [r12]
   19a42:	call   2fc0 <__fdelt_chk@plt>
   19a47:	mov    ecx,DWORD PTR [r12]
   19a4b:	mov    rdx,r15
   19a4e:	mov    esi,ecx
   19a50:	sar    esi,0x1f
   19a53:	shr    esi,0x1a
   19a56:	add    ecx,esi
   19a58:	and    ecx,0x3f
   19a5b:	sub    ecx,esi
   19a5d:	shl    rdx,cl
   19a60:	or     QWORD PTR [rsp+rax*8],rdx
   19a64:	mov    eax,DWORD PTR [r12]
   19a68:	mov    ecx,DWORD PTR [r12+0x20]
   19a6d:	add    eax,0x1
   19a70:	cmp    ebx,eax
   19a72:	cmovl  ebx,eax
   19a75:	test   ecx,ecx
   19a77:	jne    19ab7 <qemu_aio_wait.part.0+0x117>
   19a79:	cmp    QWORD PTR [r12+0x10],0x0
   19a7f:	je     19ab7 <qemu_aio_wait.part.0+0x117>
   19a81:	movsxd rdi,DWORD PTR [r12]
   19a85:	call   2fc0 <__fdelt_chk@plt>
   19a8a:	mov    ecx,DWORD PTR [r12]
   19a8e:	mov    rdx,r15
   19a91:	mov    esi,ecx
   19a93:	sar    esi,0x1f
   19a96:	shr    esi,0x1a
   19a99:	add    ecx,esi
   19a9b:	and    ecx,0x3f
   19a9e:	sub    ecx,esi
   19aa0:	shl    rdx,cl
   19aa3:	or     QWORD PTR [rsp+rax*8+0x80],rdx
   19aab:	mov    eax,DWORD PTR [r12]
   19aaf:	add    eax,0x1
   19ab2:	cmp    ebx,eax
   19ab4:	cmovl  ebx,eax
   19ab7:	mov    r12,QWORD PTR [r12+0x30]
   19abc:	test   r12,r12
   19abf:	jne    19a10 <qemu_aio_wait.part.0+0x70>
   19ac5:	cmp    ebx,0xffffffff
   19ac8:	mov    DWORD PTR [rip+0x20da8a],ebp        # 227558 <walking_handlers>
   19ace:	je     19bef <qemu_aio_wait.part.0+0x24f>
   19ad4:	xor    r8d,r8d
   19ad7:	xor    ecx,ecx
   19ad9:	mov    rdx,r13
   19adc:	mov    rsi,r14
   19adf:	mov    edi,ebx
   19ae1:	call   31d0 <select@plt>
   19ae6:	cmp    eax,0xffffffff
   19ae9:	je     19bef <qemu_aio_wait.part.0+0x24f>
   19aef:	cmp    eax,0x0
   19af2:	jle    19c18 <qemu_aio_wait.part.0+0x278>
   19af8:	mov    rbx,QWORD PTR [rip+0x20da61]        # 227560 <aio_handlers>
   19aff:	mov    DWORD PTR [rip+0x20da4f],0x1        # 227558 <walking_handlers>
   19b09:	test   rbx,rbx
   19b0c:	je     19be5 <qemu_aio_wait.part.0+0x245>
   19b12:	mov    ebp,0x1
   19b17:	jmp    19bab <qemu_aio_wait.part.0+0x20b>
   19b1c:	nop    DWORD PTR [rax+0x0]
   19b20:	movsxd rdi,DWORD PTR [rbx]
   19b23:	call   2fc0 <__fdelt_chk@plt>
   19b28:	mov    edx,DWORD PTR [rbx]
   19b2a:	mov    esi,edx
   19b2c:	sar    esi,0x1f
   19b2f:	shr    esi,0x1a
   19b32:	lea    ecx,[rdx+rsi*1]
   19b35:	mov    rdx,rbp
   19b38:	and    ecx,0x3f
   19b3b:	sub    ecx,esi
   19b3d:	shl    rdx,cl
   19b40:	test   QWORD PTR [rsp+rax*8],rdx
   19b44:	je     19b55 <qemu_aio_wait.part.0+0x1b5>
   19b46:	mov    rax,QWORD PTR [rbx+0x8]
   19b4a:	test   rax,rax
   19b4d:	je     19b55 <qemu_aio_wait.part.0+0x1b5>
   19b4f:	mov    rdi,QWORD PTR [rbx+0x28]
   19b53:	call   rax
   19b55:	mov    eax,DWORD PTR [rbx+0x20]
   19b58:	test   eax,eax
   19b5a:	jne    19bb6 <qemu_aio_wait.part.0+0x216>
   19b5c:	movsxd rdi,DWORD PTR [rbx]
   19b5f:	call   2fc0 <__fdelt_chk@plt>
   19b64:	mov    edx,DWORD PTR [rbx]
   19b66:	mov    esi,edx
   19b68:	sar    esi,0x1f
   19b6b:	shr    esi,0x1a
   19b6e:	lea    ecx,[rdx+rsi*1]
   19b71:	mov    rdx,rbp
   19b74:	and    ecx,0x3f
   19b77:	sub    ecx,esi
   19b79:	shl    rdx,cl
   19b7c:	test   QWORD PTR [rsp+rax*8+0x80],rdx
   19b84:	je     19b95 <qemu_aio_wait.part.0+0x1f5>
   19b86:	mov    rax,QWORD PTR [rbx+0x10]
   19b8a:	test   rax,rax
   19b8d:	je     19b95 <qemu_aio_wait.part.0+0x1f5>
   19b8f:	mov    rdi,QWORD PTR [rbx+0x28]
   19b93:	call   rax
   19b95:	mov    edx,DWORD PTR [rbx+0x20]
   19b98:	mov    r12,QWORD PTR [rbx+0x30]
   19b9c:	test   edx,edx
   19b9e:	mov    rax,r12
   19ba1:	jne    19bbd <qemu_aio_wait.part.0+0x21d>
   19ba3:	test   r12,r12
   19ba6:	mov    rbx,r12
   19ba9:	je     19be5 <qemu_aio_wait.part.0+0x245>
   19bab:	mov    edx,DWORD PTR [rbx+0x20]
   19bae:	test   edx,edx
   19bb0:	je     19b20 <qemu_aio_wait.part.0+0x180>
   19bb6:	mov    rax,QWORD PTR [rbx+0x30]
   19bba:	mov    r12,rax
   19bbd:	test   rax,rax
   19bc0:	mov    rdx,QWORD PTR [rbx+0x38]
   19bc4:	je     19bd2 <qemu_aio_wait.part.0+0x232>
   19bc6:	mov    QWORD PTR [rax+0x38],rdx
   19bca:	mov    rdx,QWORD PTR [rbx+0x38]
   19bce:	mov    rax,QWORD PTR [rbx+0x30]
   19bd2:	mov    rdi,rbx
   19bd5:	mov    QWORD PTR [rdx],rax
   19bd8:	mov    rbx,r12
   19bdb:	call   49c0 <qemu_free>
   19be0:	test   r12,r12
   19be3:	jne    19bab <qemu_aio_wait.part.0+0x20b>
   19be5:	mov    DWORD PTR [rip+0x20d969],0x0        # 227558 <walking_handlers>
   19bef:	mov    rax,QWORD PTR [rsp+0x108]
   19bf7:	xor    rax,QWORD PTR fs:0x28
   19c00:	jne    19c20 <qemu_aio_wait.part.0+0x280>
   19c02:	add    rsp,0x118
   19c09:	pop    rbx
   19c0a:	pop    rbp
   19c0b:	pop    r12
   19c0d:	pop    r13
   19c0f:	pop    r14
   19c11:	pop    r15
   19c13:	ret    
   19c14:	nop    DWORD PTR [rax+0x0]
   19c18:	je     199d7 <qemu_aio_wait.part.0+0x37>
   19c1e:	jmp    19bef <qemu_aio_wait.part.0+0x24f>
   19c20:	call   2f70 <__stack_chk_fail@plt>
   19c25:	nop
   19c26:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019c30 <qemu_aio_set_fd_handler>:
   19c30:	push   rbx
   19c31:	mov    ebx,edi
   19c33:	sub    rsp,0x20
   19c37:	mov    rdi,QWORD PTR [rip+0x20d922]        # 227560 <aio_handlers>
   19c3e:	test   rdi,rdi
   19c41:	jne    19c59 <qemu_aio_set_fd_handler+0x29>
   19c43:	jmp    19cd8 <qemu_aio_set_fd_handler+0xa8>
   19c48:	nop    DWORD PTR [rax+rax*1+0x0]
   19c50:	mov    rdi,QWORD PTR [rdi+0x30]
   19c54:	test   rdi,rdi
   19c57:	je     19cd8 <qemu_aio_set_fd_handler+0xa8>
   19c59:	cmp    ebx,DWORD PTR [rdi]
   19c5b:	jne    19c50 <qemu_aio_set_fd_handler+0x20>
   19c5d:	test   rdx,rdx
   19c60:	jne    19d41 <qemu_aio_set_fd_handler+0x111>
   19c66:	test   rsi,rsi
   19c69:	jne    19d41 <qemu_aio_set_fd_handler+0x111>
   19c6f:	mov    eax,DWORD PTR [rip+0x20d8e3]        # 227558 <walking_handlers>
   19c75:	test   eax,eax
   19c77:	jne    19d60 <qemu_aio_set_fd_handler+0x130>
   19c7d:	mov    rax,QWORD PTR [rdi+0x30]
   19c81:	mov    rcx,QWORD PTR [rdi+0x38]
   19c85:	test   rax,rax
   19c88:	je     19c96 <qemu_aio_set_fd_handler+0x66>
   19c8a:	mov    QWORD PTR [rax+0x38],rcx
   19c8e:	mov    rcx,QWORD PTR [rdi+0x38]
   19c92:	mov    rax,QWORD PTR [rdi+0x30]
   19c96:	mov    QWORD PTR [rcx],rax
   19c99:	mov    QWORD PTR [rsp+0x10],r8
   19c9e:	mov    QWORD PTR [rsp+0x8],rdx
   19ca3:	mov    QWORD PTR [rsp],rsi
   19ca7:	call   49c0 <qemu_free>
   19cac:	mov    rsi,QWORD PTR [rsp]
   19cb0:	mov    rdx,QWORD PTR [rsp+0x8]
   19cb5:	mov    r8,QWORD PTR [rsp+0x10]
   19cba:	mov    rcx,rdx
   19cbd:	mov    edi,ebx
   19cbf:	mov    rdx,rsi
   19cc2:	xor    esi,esi
   19cc4:	call   41d0 <qemu_set_fd_handler2>
   19cc9:	add    rsp,0x20
   19ccd:	xor    eax,eax
   19ccf:	pop    rbx
   19cd0:	ret    
   19cd1:	nop    DWORD PTR [rax+0x0]
   19cd8:	test   rsi,rsi
   19cdb:	jne    19ce2 <qemu_aio_set_fd_handler+0xb2>
   19cdd:	test   rdx,rdx
   19ce0:	je     19cba <qemu_aio_set_fd_handler+0x8a>
   19ce2:	mov    edi,0x40
   19ce7:	mov    QWORD PTR [rsp+0x18],r8
   19cec:	mov    QWORD PTR [rsp+0x10],rcx
   19cf1:	mov    QWORD PTR [rsp+0x8],rdx
   19cf6:	mov    QWORD PTR [rsp],rsi
   19cfa:	call   4a20 <qemu_mallocz>
   19cff:	mov    rdi,rax
   19d02:	mov    DWORD PTR [rax],ebx
   19d04:	mov    rax,QWORD PTR [rip+0x20d855]        # 227560 <aio_handlers>
   19d0b:	mov    rsi,QWORD PTR [rsp]
   19d0f:	mov    rdx,QWORD PTR [rsp+0x8]
   19d14:	mov    rcx,QWORD PTR [rsp+0x10]
   19d19:	mov    r8,QWORD PTR [rsp+0x18]
   19d1e:	test   rax,rax
   19d21:	mov    QWORD PTR [rdi+0x30],rax
   19d25:	je     19d2f <qemu_aio_set_fd_handler+0xff>
   19d27:	lea    r9,[rdi+0x30]
   19d2b:	mov    QWORD PTR [rax+0x38],r9
   19d2f:	lea    rax,[rip+0x20d82a]        # 227560 <aio_handlers>
   19d36:	mov    QWORD PTR [rip+0x20d823],rdi        # 227560 <aio_handlers>
   19d3d:	mov    QWORD PTR [rdi+0x38],rax
   19d41:	mov    QWORD PTR [rdi+0x8],rsi
   19d45:	mov    QWORD PTR [rdi+0x10],rdx
   19d49:	mov    QWORD PTR [rdi+0x18],rcx
   19d4d:	mov    QWORD PTR [rdi+0x28],r8
   19d51:	jmp    19cba <qemu_aio_set_fd_handler+0x8a>
   19d56:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19d60:	mov    DWORD PTR [rdi+0x20],0x1
   19d67:	jmp    19cba <qemu_aio_set_fd_handler+0x8a>
   19d6c:	nop    DWORD PTR [rax+0x0]

0000000000019d70 <qemu_aio_flush>:
   19d70:	push   rbp
   19d71:	push   rbx
   19d72:	sub    rsp,0x8
   19d76:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19d80:	mov    rbx,QWORD PTR [rip+0x20d7d9]        # 227560 <aio_handlers>
   19d87:	test   rbx,rbx
   19d8a:	je     19dd0 <qemu_aio_flush+0x60>
   19d8c:	xor    ebp,ebp
   19d8e:	xchg   ax,ax
   19d90:	mov    rdi,QWORD PTR [rbx+0x28]
   19d94:	call   QWORD PTR [rbx+0x18]
   19d97:	mov    rbx,QWORD PTR [rbx+0x30]
   19d9b:	or     ebp,eax
   19d9d:	test   rbx,rbx
   19da0:	jne    19d90 <qemu_aio_flush+0x20>
   19da2:	call   4190 <qemu_bh_poll>
   19da7:	test   eax,eax
   19da9:	je     19dc0 <qemu_aio_flush+0x50>
   19dab:	test   ebp,ebp
   19dad:	jg     19d80 <qemu_aio_flush+0x10>
   19daf:	add    rsp,0x8
   19db3:	pop    rbx
   19db4:	pop    rbp
   19db5:	ret    
   19db6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19dc0:	call   199a0 <qemu_aio_wait.part.0>
   19dc5:	jmp    19dab <qemu_aio_flush+0x3b>
   19dc7:	nop    WORD PTR [rax+rax*1+0x0]
   19dd0:	call   4190 <qemu_bh_poll>
   19dd5:	test   eax,eax
   19dd7:	jne    19daf <qemu_aio_flush+0x3f>
   19dd9:	add    rsp,0x8
   19ddd:	pop    rbx
   19dde:	pop    rbp
   19ddf:	jmp    199a0 <qemu_aio_wait.part.0>
   19de4:	xchg   ax,ax
   19de6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019df0 <qemu_aio_wait>:
   19df0:	sub    rsp,0x8
   19df4:	call   4190 <qemu_bh_poll>
   19df9:	test   eax,eax
   19dfb:	jne    19e10 <qemu_aio_wait+0x20>
   19dfd:	add    rsp,0x8
   19e01:	jmp    199a0 <qemu_aio_wait.part.0>
   19e06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19e10:	add    rsp,0x8
   19e14:	ret    
   19e15:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19e1f:	nop

0000000000019e20 <die2>:
   19e20:	push   rbx
   19e21:	mov    rbx,rsi
   19e24:	call   3430 <strerror@plt>
   19e29:	mov    rdi,QWORD PTR [rip+0x20d6d0]        # 227500 <stderr@@GLIBC_2.2.5>
   19e30:	lea    rdx,[rip+0x6031]        # 1fe68 <suffixes.14389+0xd>
   19e37:	mov    r8,rax
   19e3a:	mov    rcx,rbx
   19e3d:	mov    esi,0x1
   19e42:	xor    eax,eax
   19e44:	call   3400 <__fprintf_chk@plt>
   19e49:	call   2e70 <abort@plt>
   19e4e:	xchg   ax,ax

0000000000019e50 <die>:
   19e50:	push   rbx
   19e51:	mov    rbx,rdi
   19e54:	call   2e80 <__errno_location@plt>
   19e59:	mov    edi,DWORD PTR [rax]
   19e5b:	mov    rsi,rbx
   19e5e:	call   19e20 <die2>
   19e63:	nop    DWORD PTR [rax]
   19e66:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019e70 <fsync_like_pwrite>:
   19e70:	sub    rsp,0x8
   19e74:	cmp    rdx,0x1
   19e78:	jne    19e96 <fsync_like_pwrite+0x26>
   19e7a:	test   rcx,rcx
   19e7d:	jne    19eb5 <fsync_like_pwrite+0x45>
   19e7f:	call   3330 <fsync@plt>
   19e84:	cmp    eax,0x1
   19e87:	sbb    rax,rax
   19e8a:	add    rsp,0x8
   19e8e:	and    eax,0x2
   19e91:	sub    rax,0x1
   19e95:	ret    
   19e96:	lea    rcx,[rip+0x6113]        # 1ffb0 <__PRETTY_FUNCTION__.13994>
   19e9d:	lea    rsi,[rip+0x60bc]        # 1ff60 <suffixes.14389+0x105>
   19ea4:	lea    rdi,[rip+0x5fcc]        # 1fe77 <suffixes.14389+0x1c>
   19eab:	mov    edx,0xcf
   19eb0:	call   3000 <__assert_fail@plt>
   19eb5:	lea    rcx,[rip+0x60f4]        # 1ffb0 <__PRETTY_FUNCTION__.13994>
   19ebc:	lea    rsi,[rip+0x609d]        # 1ff60 <suffixes.14389+0x105>
   19ec3:	lea    rdi,[rip+0x6074]        # 1ff3e <suffixes.14389+0xe3>
   19eca:	mov    edx,0xd0
   19ecf:	call   3000 <__assert_fail@plt>
   19ed4:	xchg   ax,ax
   19ed6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000019ee0 <mutex_unlock.constprop.4>:
   19ee0:	lea    rdi,[rip+0x20d739]        # 227620 <lock>
   19ee7:	sub    rsp,0x8
   19eeb:	call   3210 <pthread_mutex_unlock@plt>
   19ef0:	test   eax,eax
   19ef2:	jne    19ef9 <mutex_unlock.constprop.4+0x19>
   19ef4:	add    rsp,0x8
   19ef8:	ret    
   19ef9:	lea    rsi,[rip+0x5f80]        # 1fe80 <suffixes.14389+0x25>
   19f00:	mov    edi,eax
   19f02:	call   19e20 <die2>
   19f07:	nop    WORD PTR [rax+rax*1+0x0]

0000000000019f10 <mutex_lock.constprop.5>:
   19f10:	lea    rdi,[rip+0x20d709]        # 227620 <lock>
   19f17:	sub    rsp,0x8
   19f1b:	call   3480 <pthread_mutex_lock@plt>
   19f20:	test   eax,eax
   19f22:	jne    19f29 <mutex_lock.constprop.5+0x19>
   19f24:	add    rsp,0x8
   19f28:	ret    
   19f29:	lea    rsi,[rip+0x5f65]        # 1fe95 <suffixes.14389+0x3a>
   19f30:	mov    edi,eax
   19f32:	call   19e20 <die2>
   19f37:	nop    WORD PTR [rax+rax*1+0x0]

0000000000019f40 <qemu_paio_submit>:
   19f40:	push   rbx
   19f41:	mov    QWORD PTR [rdi+0x38],rsi
   19f45:	mov    rbx,rdi
   19f48:	mov    QWORD PTR [rdi+0x40],0xffffffffffffff8d
   19f50:	mov    DWORD PTR [rdi+0x48],0x0
   19f57:	call   19f10 <mutex_lock.constprop.5>
   19f5c:	mov    eax,DWORD PTR [rip+0x20d62e]        # 227590 <idle_threads>
   19f62:	test   eax,eax
   19f64:	jne    19f71 <qemu_paio_submit+0x31>
   19f66:	mov    eax,DWORD PTR [rip+0x20d628]        # 227594 <cur_threads>
   19f6c:	cmp    eax,0x3f
   19f6f:	jle    19fb0 <qemu_paio_submit+0x70>
   19f71:	mov    rax,QWORD PTR [rip+0x20d610]        # 227588 <request_list+0x8>
   19f78:	mov    QWORD PTR [rbx+0x28],0x0
   19f80:	mov    QWORD PTR [rbx+0x30],rax
   19f84:	mov    QWORD PTR [rax],rbx
   19f87:	add    rbx,0x28
   19f8b:	mov    QWORD PTR [rip+0x20d5f6],rbx        # 227588 <request_list+0x8>
   19f92:	call   19ee0 <mutex_unlock.constprop.4>
   19f97:	lea    rdi,[rip+0x20d642]        # 2275e0 <cond>
   19f9e:	call   30e0 <pthread_cond_signal@plt>
   19fa3:	test   eax,eax
   19fa5:	jne    19ff1 <qemu_paio_submit+0xb1>
   19fa7:	xor    eax,eax
   19fa9:	pop    rbx
   19faa:	ret    
   19fab:	nop    DWORD PTR [rax+rax*1+0x0]
   19fb0:	lea    rdx,[rip+0x49]        # 1a000 <aio_thread>
   19fb7:	lea    rsi,[rip+0x20d5e2]        # 2275a0 <attr>
   19fbe:	lea    rdi,[rip+0x20d613]        # 2275d8 <thread_id>
   19fc5:	add    eax,0x1
   19fc8:	xor    ecx,ecx
   19fca:	mov    DWORD PTR [rip+0x20d5bc],0x1        # 227590 <idle_threads>
   19fd4:	mov    DWORD PTR [rip+0x20d5ba],eax        # 227594 <cur_threads>
   19fda:	call   2e60 <pthread_create@plt>
   19fdf:	test   eax,eax
   19fe1:	je     19f71 <qemu_paio_submit+0x31>
   19fe3:	lea    rsi,[rip+0x5ebe]        # 1fea8 <suffixes.14389+0x4d>
   19fea:	mov    edi,eax
   19fec:	call   19e20 <die2>
   19ff1:	lea    rsi,[rip+0x5ebf]        # 1feb7 <suffixes.14389+0x5c>
   19ff8:	mov    edi,eax
   19ffa:	call   19e20 <die2>
   19fff:	nop

000000000001a000 <aio_thread>:
   1a000:	push   r15
   1a002:	push   r14
   1a004:	push   r13
   1a006:	push   r12
   1a008:	push   rbp
   1a009:	push   rbx
   1a00a:	sub    rsp,0xb8
   1a011:	lea    rbx,[rsp+0x20]
   1a016:	mov    rax,QWORD PTR fs:0x28
   1a01f:	mov    QWORD PTR [rsp+0xa8],rax
   1a027:	xor    eax,eax
   1a029:	call   2f20 <getpid@plt>
   1a02e:	mov    rdi,rbx
   1a031:	mov    r15d,eax
   1a034:	call   3180 <sigfillset@plt>
   1a039:	test   eax,eax
   1a03b:	jne    1a1f6 <aio_thread+0x1f6>
   1a041:	xor    edx,edx
   1a043:	xor    edi,edi
   1a045:	mov    rsi,rbx
   1a048:	call   2e20 <sigprocmask@plt>
   1a04d:	test   eax,eax
   1a04f:	jne    1a1ea <aio_thread+0x1ea>
   1a055:	lea    r12,[rip+0x20d524]        # 227580 <request_list>
   1a05c:	lea    r13,[rsp+0x10]
   1a061:	mov    r14,rsp
   1a064:	nop    DWORD PTR [rax+0x0]
   1a068:	xor    esi,esi
   1a06a:	mov    rdi,r14
   1a06d:	call   2ff0 <gettimeofday@plt>
   1a072:	mov    rax,QWORD PTR [rsp]
   1a076:	mov    QWORD PTR [rsp+0x18],0x0
   1a07f:	add    rax,0xa
   1a083:	mov    QWORD PTR [rsp+0x10],rax
   1a088:	call   19f10 <mutex_lock.constprop.5>
   1a08d:	xor    eax,eax
   1a08f:	jmp    1a0ca <aio_thread+0xca>
   1a091:	nop    DWORD PTR [rax+0x0]
   1a098:	cmp    eax,0x6e
   1a09b:	je     1a190 <aio_thread+0x190>
   1a0a1:	lea    rsi,[rip+0x20d578]        # 227620 <lock>
   1a0a8:	lea    rdi,[rip+0x20d531]        # 2275e0 <cond>
   1a0af:	mov    rdx,r13
   1a0b2:	call   3340 <pthread_cond_timedwait@plt>
   1a0b7:	test   eax,eax
   1a0b9:	setne  cl
   1a0bc:	cmp    eax,0x6e
   1a0bf:	setne  dl
   1a0c2:	test   cl,dl
   1a0c4:	jne    1a1dc <aio_thread+0x1dc>
   1a0ca:	mov    rbx,QWORD PTR [r12]
   1a0ce:	test   rbx,rbx
   1a0d1:	je     1a098 <aio_thread+0x98>
   1a0d3:	mov    rax,QWORD PTR [rbx+0x28]
   1a0d7:	mov    rdx,QWORD PTR [rbx+0x30]
   1a0db:	test   rax,rax
   1a0de:	je     1a1d0 <aio_thread+0x1d0>
   1a0e4:	mov    QWORD PTR [rax+0x30],rdx
   1a0e8:	mov    rdx,QWORD PTR [rbx+0x30]
   1a0ec:	mov    rax,QWORD PTR [rbx+0x28]
   1a0f0:	mov    QWORD PTR [rdx],rax
   1a0f3:	xor    ebp,ebp
   1a0f5:	mov    DWORD PTR [rbx+0x48],0x1
   1a0fc:	sub    DWORD PTR [rip+0x20d48d],0x1        # 227590 <idle_threads>
   1a103:	call   19ee0 <mutex_unlock.constprop.4>
   1a108:	mov    rdx,QWORD PTR [rbx+0x10]
   1a10c:	cmp    rdx,rbp
   1a10f:	jbe    1a13e <aio_thread+0x13e>
   1a111:	mov    rcx,QWORD PTR [rbx+0x20]
   1a115:	mov    rsi,QWORD PTR [rbx+0x8]
   1a119:	sub    rdx,rbp
   1a11c:	mov    edi,DWORD PTR [rbx]
   1a11e:	add    rcx,rbp
   1a121:	add    rsi,rbp
   1a124:	call   QWORD PTR [rbx+0x38]
   1a127:	cmp    rax,0xffffffffffffffff
   1a12b:	je     1a178 <aio_thread+0x178>
   1a12d:	test   rax,rax
   1a130:	je     1a13e <aio_thread+0x13e>
   1a132:	mov    rdx,QWORD PTR [rbx+0x10]
   1a136:	add    rbp,rax
   1a139:	cmp    rdx,rbp
   1a13c:	ja     1a111 <aio_thread+0x111>
   1a13e:	call   19f10 <mutex_lock.constprop.5>
   1a143:	mov    QWORD PTR [rbx+0x40],rbp
   1a147:	add    DWORD PTR [rip+0x20d442],0x1        # 227590 <idle_threads>
   1a14e:	call   19ee0 <mutex_unlock.constprop.4>
   1a153:	mov    esi,DWORD PTR [rbx+0x18]
   1a156:	mov    edi,r15d
   1a159:	call   31b0 <kill@plt>
   1a15e:	test   eax,eax
   1a160:	je     1a068 <aio_thread+0x68>
   1a166:	lea    rdi,[rip+0x5d8c]        # 1fef9 <suffixes.14389+0x9e>
   1a16d:	call   19e50 <die>
   1a172:	nop    WORD PTR [rax+rax*1+0x0]
   1a178:	call   2e80 <__errno_location@plt>
   1a17d:	mov    eax,DWORD PTR [rax]
   1a17f:	cmp    eax,0x4
   1a182:	je     1a108 <aio_thread+0x108>
   1a184:	neg    eax
   1a186:	movsxd rbp,eax
   1a189:	jmp    1a13e <aio_thread+0x13e>
   1a18b:	nop    DWORD PTR [rax+rax*1+0x0]
   1a190:	sub    DWORD PTR [rip+0x20d3f9],0x1        # 227590 <idle_threads>
   1a197:	sub    DWORD PTR [rip+0x20d3f6],0x1        # 227594 <cur_threads>
   1a19e:	call   19ee0 <mutex_unlock.constprop.4>
   1a1a3:	xor    eax,eax
   1a1a5:	mov    rdi,QWORD PTR [rsp+0xa8]
   1a1ad:	xor    rdi,QWORD PTR fs:0x28
   1a1b6:	jne    1a202 <aio_thread+0x202>
   1a1b8:	add    rsp,0xb8
   1a1bf:	pop    rbx
   1a1c0:	pop    rbp
   1a1c1:	pop    r12
   1a1c3:	pop    r13
   1a1c5:	pop    r14
   1a1c7:	pop    r15
   1a1c9:	ret    
   1a1ca:	nop    WORD PTR [rax+rax*1+0x0]
   1a1d0:	mov    QWORD PTR [rip+0x20d3b1],rdx        # 227588 <request_list+0x8>
   1a1d7:	jmp    1a0f0 <aio_thread+0xf0>
   1a1dc:	lea    rsi,[rip+0x5cff]        # 1fee2 <suffixes.14389+0x87>
   1a1e3:	mov    edi,eax
   1a1e5:	call   19e20 <die2>
   1a1ea:	lea    rdi,[rip+0x5ce5]        # 1fed6 <suffixes.14389+0x7b>
   1a1f1:	call   19e50 <die>
   1a1f6:	lea    rdi,[rip+0x5cce]        # 1fecb <suffixes.14389+0x70>
   1a1fd:	call   19e50 <die>
   1a202:	call   2f70 <__stack_chk_fail@plt>
   1a207:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a210 <qemu_paio_init>:
   1a210:	lea    rdi,[rip+0x20d389]        # 2275a0 <attr>
   1a217:	sub    rsp,0x8
   1a21b:	call   30d0 <pthread_attr_init@plt>
   1a220:	test   eax,eax
   1a222:	jne    1a259 <qemu_paio_init+0x49>
   1a224:	lea    rdi,[rip+0x20d375]        # 2275a0 <attr>
   1a22b:	mov    esi,0x1
   1a230:	call   31f0 <pthread_attr_setdetachstate@plt>
   1a235:	test   eax,eax
   1a237:	jne    1a267 <qemu_paio_init+0x57>
   1a239:	lea    rax,[rip+0x20d340]        # 227580 <request_list>
   1a240:	mov    QWORD PTR [rip+0x20d335],0x0        # 227580 <request_list>
   1a24b:	mov    QWORD PTR [rip+0x20d336],rax        # 227588 <request_list+0x8>
   1a252:	xor    eax,eax
   1a254:	add    rsp,0x8
   1a258:	ret    
   1a259:	lea    rsi,[rip+0x5ca5]        # 1ff05 <suffixes.14389+0xaa>
   1a260:	mov    edi,eax
   1a262:	call   19e20 <die2>
   1a267:	lea    rsi,[rip+0x5ca9]        # 1ff17 <suffixes.14389+0xbc>
   1a26e:	mov    edi,eax
   1a270:	call   19e20 <die2>
   1a275:	nop
   1a276:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001a280 <qemu_paio_read>:
   1a280:	mov    rsi,QWORD PTR [rip+0x20bd61]        # 225fe8 <pread64@GLIBC_2.2.5>
   1a287:	jmp    19f40 <qemu_paio_submit>
   1a28c:	nop    DWORD PTR [rax+0x0]

000000000001a290 <qemu_paio_write>:
   1a290:	mov    rsi,QWORD PTR [rip+0x20bd49]        # 225fe0 <pwrite64@GLIBC_2.2.5>
   1a297:	jmp    19f40 <qemu_paio_submit>
   1a29c:	nop    DWORD PTR [rax+0x0]

000000000001a2a0 <qemu_paio_fsync>:
   1a2a0:	sub    rsp,0x8
   1a2a4:	cmp    QWORD PTR [rdi+0x20],0x0
   1a2a9:	jne    1a2ca <qemu_paio_fsync+0x2a>
   1a2ab:	cmp    QWORD PTR [rdi+0x8],0x0
   1a2b0:	jne    1a2e9 <qemu_paio_fsync+0x49>
   1a2b2:	lea    rsi,[rip+0xfffffffffffffbb7]        # 19e70 <fsync_like_pwrite>
   1a2b9:	mov    QWORD PTR [rdi+0x10],0x1
   1a2c1:	add    rsp,0x8
   1a2c5:	jmp    19f40 <qemu_paio_submit>
   1a2ca:	lea    rcx,[rip+0x5cff]        # 1ffd0 <__PRETTY_FUNCTION__.13998>
   1a2d1:	lea    rsi,[rip+0x5c88]        # 1ff60 <suffixes.14389+0x105>
   1a2d8:	lea    rdi,[rip+0x5c54]        # 1ff33 <suffixes.14389+0xd8>
   1a2df:	mov    edx,0xd5
   1a2e4:	call   3000 <__assert_fail@plt>
   1a2e9:	lea    rcx,[rip+0x5ce0]        # 1ffd0 <__PRETTY_FUNCTION__.13998>
   1a2f0:	lea    rsi,[rip+0x5c69]        # 1ff60 <suffixes.14389+0x105>
   1a2f7:	lea    rdi,[rip+0x5c4a]        # 1ff48 <suffixes.14389+0xed>
   1a2fe:	mov    edx,0xd6
   1a303:	call   3000 <__assert_fail@plt>
   1a308:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a310 <qemu_paio_return>:
   1a310:	push   rbx
   1a311:	mov    rbx,rdi
   1a314:	call   19f10 <mutex_lock.constprop.5>
   1a319:	mov    rbx,QWORD PTR [rbx+0x40]
   1a31d:	call   19ee0 <mutex_unlock.constprop.4>
   1a322:	mov    rax,rbx
   1a325:	pop    rbx
   1a326:	ret    
   1a327:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a330 <qemu_paio_error>:
   1a330:	push   rbx
   1a331:	mov    rbx,rdi
   1a334:	call   19f10 <mutex_lock.constprop.5>
   1a339:	mov    rbx,QWORD PTR [rbx+0x40]
   1a33d:	call   19ee0 <mutex_unlock.constprop.4>
   1a342:	mov    eax,0x0
   1a347:	mov    rdx,rbx
   1a34a:	neg    rdx
   1a34d:	test   rbx,rbx
   1a350:	cmovs  eax,edx
   1a353:	pop    rbx
   1a354:	ret    
   1a355:	nop
   1a356:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001a360 <qemu_paio_cancel>:
   1a360:	push   rbx
   1a361:	mov    rbx,rsi
   1a364:	call   19f10 <mutex_lock.constprop.5>
   1a369:	mov    eax,DWORD PTR [rbx+0x48]
   1a36c:	test   eax,eax
   1a36e:	jne    1a3a8 <qemu_paio_cancel+0x48>
   1a370:	mov    rax,QWORD PTR [rbx+0x28]
   1a374:	mov    rdx,QWORD PTR [rbx+0x30]
   1a378:	test   rax,rax
   1a37b:	je     1a3c0 <qemu_paio_cancel+0x60>
   1a37d:	mov    QWORD PTR [rax+0x30],rdx
   1a381:	mov    rdx,QWORD PTR [rbx+0x30]
   1a385:	mov    rax,QWORD PTR [rbx+0x28]
   1a389:	mov    QWORD PTR [rdx],rax
   1a38c:	mov    QWORD PTR [rbx+0x40],0xffffffffffffff83
   1a394:	mov    ebx,0x1
   1a399:	call   19ee0 <mutex_unlock.constprop.4>
   1a39e:	mov    eax,ebx
   1a3a0:	pop    rbx
   1a3a1:	ret    
   1a3a2:	nop    WORD PTR [rax+rax*1+0x0]
   1a3a8:	cmp    QWORD PTR [rbx+0x40],0xffffffffffffff8d
   1a3ad:	setne  bl
   1a3b0:	movzx  ebx,bl
   1a3b3:	add    ebx,0x2
   1a3b6:	call   19ee0 <mutex_unlock.constprop.4>
   1a3bb:	mov    eax,ebx
   1a3bd:	pop    rbx
   1a3be:	ret    
   1a3bf:	nop
   1a3c0:	mov    QWORD PTR [rip+0x20d1c1],rdx        # 227588 <request_list+0x8>
   1a3c7:	jmp    1a389 <qemu_paio_cancel+0x29>
   1a3c9:	nop    DWORD PTR [rax+0x0]

000000000001a3d0 <posix_aio_flush>:
   1a3d0:	xor    eax,eax
   1a3d2:	cmp    QWORD PTR [rdi+0x8],0x0
   1a3d7:	setne  al
   1a3da:	ret    
   1a3db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a3e0 <fd_open>:
   1a3e0:	push   r12
   1a3e2:	push   rbp
   1a3e3:	xor    eax,eax
   1a3e5:	push   rbx
   1a3e6:	mov    rbx,QWORD PTR [rdi+0x40]
   1a3ea:	cmp    DWORD PTR [rbx+0x4],0x2
   1a3ee:	je     1a3f8 <fd_open+0x18>
   1a3f0:	pop    rbx
   1a3f1:	pop    rbp
   1a3f2:	pop    r12
   1a3f4:	ret    
   1a3f5:	nop    DWORD PTR [rax]
   1a3f8:	mov    r12d,DWORD PTR [rbx]
   1a3fb:	mov    rbp,rdi
   1a3fe:	test   r12d,r12d
   1a401:	jns    1a450 <fd_open+0x70>
   1a403:	mov    eax,DWORD PTR [rbx+0x20]
   1a406:	test   eax,eax
   1a408:	jne    1a480 <fd_open+0xa0>
   1a40a:	mov    esi,DWORD PTR [rbx+0xc]
   1a40d:	lea    rdi,[rbp+0x48]
   1a411:	call   3220 <__open64_2@plt>
   1a416:	test   eax,eax
   1a418:	mov    DWORD PTR [rbx],eax
   1a41a:	js     1a4b0 <fd_open+0xd0>
   1a420:	test   r12d,r12d
   1a423:	jns    1a42c <fd_open+0x4c>
   1a425:	mov    DWORD PTR [rbx+0x24],0x1
   1a42c:	mov    rdi,QWORD PTR [rip+0x20d21d]        # 227650 <rt_clock>
   1a433:	call   41e0 <qemu_get_clock>
   1a438:	mov    DWORD PTR [rbx+0x20],0x0
   1a43f:	mov    QWORD PTR [rbx+0x10],rax
   1a443:	xor    eax,eax
   1a445:	pop    rbx
   1a446:	pop    rbp
   1a447:	pop    r12
   1a449:	ret    
   1a44a:	nop    WORD PTR [rax+rax*1+0x0]
   1a450:	mov    rdi,QWORD PTR [rip+0x20d1f9]        # 227650 <rt_clock>
   1a457:	call   41e0 <qemu_get_clock>
   1a45c:	sub    rax,QWORD PTR [rbx+0x10]
   1a460:	cmp    rax,0x3e7
   1a466:	jg     1a470 <fd_open+0x90>
   1a468:	mov    edx,DWORD PTR [rbx]
   1a46a:	test   edx,edx
   1a46c:	jns    1a42c <fd_open+0x4c>
   1a46e:	jmp    1a403 <fd_open+0x23>
   1a470:	mov    edi,DWORD PTR [rbx]
   1a472:	call   3040 <close@plt>
   1a477:	mov    DWORD PTR [rbx],0xffffffff
   1a47d:	jmp    1a403 <fd_open+0x23>
   1a47f:	nop
   1a480:	mov    rdi,QWORD PTR [rip+0x20d1c9]        # 227650 <rt_clock>
   1a487:	call   41e0 <qemu_get_clock>
   1a48c:	sub    rax,QWORD PTR [rbx+0x18]
   1a490:	cmp    rax,0x3e7
   1a496:	jg     1a40a <fd_open+0x2a>
   1a49c:	nop    DWORD PTR [rax+0x0]
   1a4a0:	mov    eax,0xfffffffb
   1a4a5:	jmp    1a3f0 <fd_open+0x10>
   1a4aa:	nop    WORD PTR [rax+rax*1+0x0]
   1a4b0:	mov    rdi,QWORD PTR [rip+0x20d199]        # 227650 <rt_clock>
   1a4b7:	call   41e0 <qemu_get_clock>
   1a4bc:	test   r12d,r12d
   1a4bf:	mov    QWORD PTR [rbx+0x18],rax
   1a4c3:	mov    DWORD PTR [rbx+0x20],0x1
   1a4ca:	js     1a4a0 <fd_open+0xc0>
   1a4cc:	mov    DWORD PTR [rbx+0x24],0x1
   1a4d3:	jmp    1a4a0 <fd_open+0xc0>
   1a4d5:	nop
   1a4d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001a4e0 <raw_getlength>:
   1a4e0:	push   rbx
   1a4e1:	mov    rax,QWORD PTR [rdi+0x40]
   1a4e5:	mov    ebx,DWORD PTR [rax]
   1a4e7:	call   1a3e0 <fd_open>
   1a4ec:	test   eax,eax
   1a4ee:	js     1a500 <raw_getlength+0x20>
   1a4f0:	mov    edi,ebx
   1a4f2:	mov    edx,0x2
   1a4f7:	xor    esi,esi
   1a4f9:	pop    rbx
   1a4fa:	jmp    33f0 <lseek64@plt>
   1a4ff:	nop
   1a500:	cdqe   
   1a502:	pop    rbx
   1a503:	ret    
   1a504:	xchg   ax,ax
   1a506:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001a510 <raw_media_changed>:
   1a510:	push   rbx
   1a511:	mov    rbx,QWORD PTR [rdi+0x40]
   1a515:	cmp    DWORD PTR [rbx+0x4],0x2
   1a519:	jne    1a530 <raw_media_changed+0x20>
   1a51b:	call   1a3e0 <fd_open>
   1a520:	mov    eax,DWORD PTR [rbx+0x24]
   1a523:	mov    DWORD PTR [rbx+0x24],0x0
   1a52a:	pop    rbx
   1a52b:	ret    
   1a52c:	nop    DWORD PTR [rax+0x0]
   1a530:	mov    eax,0xffffffa1
   1a535:	pop    rbx
   1a536:	ret    
   1a537:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a540 <raw_create>:
   1a540:	test   ecx,ecx
   1a542:	jne    1a590 <raw_create+0x50>
   1a544:	test   rdx,rdx
   1a547:	jne    1a590 <raw_create+0x50>
   1a549:	push   rbp
   1a54a:	push   rbx
   1a54b:	xor    eax,eax
   1a54d:	mov    rbx,rsi
   1a550:	mov    edx,0x1a4
   1a555:	mov    esi,0x241
   1a55a:	sub    rsp,0x8
   1a55e:	call   32e0 <open64@plt>
   1a563:	test   eax,eax
   1a565:	mov    ebp,eax
   1a567:	js     1a5a0 <raw_create+0x60>
   1a569:	shl    rbx,0x9
   1a56d:	mov    edi,eax
   1a56f:	mov    rsi,rbx
   1a572:	call   32a0 <ftruncate64@plt>
   1a577:	mov    edi,ebp
   1a579:	call   3040 <close@plt>
   1a57e:	xor    eax,eax
   1a580:	add    rsp,0x8
   1a584:	pop    rbx
   1a585:	pop    rbp
   1a586:	ret    
   1a587:	nop    WORD PTR [rax+rax*1+0x0]
   1a590:	mov    eax,0xffffffa1
   1a595:	ret    
   1a596:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a5a0:	mov    eax,0xfffffffb
   1a5a5:	jmp    1a580 <raw_create+0x40>
   1a5a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000001a5b0 <raw_pread_aligned>:
   1a5b0:	push   r15
   1a5b2:	push   r14
   1a5b4:	mov    r14,rdx
   1a5b7:	push   r13
   1a5b9:	push   r12
   1a5bb:	mov    r13,rsi
   1a5be:	push   rbp
   1a5bf:	push   rbx
   1a5c0:	mov    r12d,ecx
   1a5c3:	mov    rbx,rdi
   1a5c6:	sub    rsp,0x8
   1a5ca:	mov    rbp,QWORD PTR [rdi+0x40]
   1a5ce:	call   1a3e0 <fd_open>
   1a5d3:	test   eax,eax
   1a5d5:	js     1a615 <raw_pread_aligned+0x65>
   1a5d7:	test   r13,r13
   1a5da:	mov    edi,DWORD PTR [rbp+0x0]
   1a5dd:	js     1a5f2 <raw_pread_aligned+0x42>
   1a5df:	xor    edx,edx
   1a5e1:	mov    rsi,r13
   1a5e4:	call   33f0 <lseek64@plt>
   1a5e9:	cmp    rax,0xffffffffffffffff
   1a5ed:	je     1a665 <raw_pread_aligned+0xb5>
   1a5ef:	mov    edi,DWORD PTR [rbp+0x0]
   1a5f2:	movsxd r15,r12d
   1a5f5:	mov    DWORD PTR [rbp+0x8],0x0
   1a5fc:	mov    rsi,r14
   1a5ff:	mov    rdx,r15
   1a602:	call   4250 <qemu_read>
   1a607:	cmp    r12d,eax
   1a60a:	je     1a615 <raw_pread_aligned+0x65>
   1a60c:	cmp    DWORD PTR [rbx+0x894],0x1
   1a613:	je     1a628 <raw_pread_aligned+0x78>
   1a615:	add    rsp,0x8
   1a619:	pop    rbx
   1a61a:	pop    rbp
   1a61b:	pop    r12
   1a61d:	pop    r13
   1a61f:	pop    r14
   1a621:	pop    r15
   1a623:	ret    
   1a624:	nop    DWORD PTR [rax+0x0]
   1a628:	mov    edi,DWORD PTR [rbp+0x0]
   1a62b:	xor    edx,edx
   1a62d:	mov    rsi,r13
   1a630:	call   33f0 <lseek64@plt>
   1a635:	mov    edi,DWORD PTR [rbp+0x0]
   1a638:	mov    rdx,r15
   1a63b:	mov    rsi,r14
   1a63e:	call   4250 <qemu_read>
   1a643:	cmp    r12d,eax
   1a646:	je     1a615 <raw_pread_aligned+0x65>
   1a648:	mov    edi,DWORD PTR [rbp+0x0]
   1a64b:	xor    edx,edx
   1a64d:	mov    rsi,r13
   1a650:	call   33f0 <lseek64@plt>
   1a655:	mov    edi,DWORD PTR [rbp+0x0]
   1a658:	mov    rdx,r15
   1a65b:	mov    rsi,r14
   1a65e:	call   4250 <qemu_read>
   1a663:	jmp    1a615 <raw_pread_aligned+0x65>
   1a665:	add    DWORD PTR [rbp+0x8],0x1
   1a669:	jmp    1a615 <raw_pread_aligned+0x65>
   1a66b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a670 <raw_pread>:
   1a670:	push   r15
   1a672:	push   r14
   1a674:	mov    r15d,ecx
   1a677:	push   r13
   1a679:	push   r12
   1a67b:	push   rbp
   1a67c:	push   rbx
   1a67d:	mov    rbp,rdx
   1a680:	mov    rbx,rsi
   1a683:	sub    rsp,0x18
   1a687:	mov    r13,QWORD PTR [rdi+0x40]
   1a68b:	mov    QWORD PTR [rsp+0x8],rdi
   1a690:	mov    rdx,QWORD PTR [r13+0x28]
   1a694:	test   rdx,rdx
   1a697:	je     1a860 <raw_pread+0x1f0>
   1a69d:	mov    r12,rsi
   1a6a0:	and    r12d,0x1ff
   1a6a7:	je     1a740 <raw_pread+0xd0>
   1a6ad:	lea    ecx,[rcx+r12*1+0x1ff]
   1a6b5:	mov    eax,0x4000
   1a6ba:	movsxd r14,r12d
   1a6bd:	and    ecx,0xfffffe00
   1a6c3:	cmp    ecx,0x4000
   1a6c9:	cmovg  ecx,eax
   1a6cc:	sub    rsi,r14
   1a6cf:	call   1a5b0 <raw_pread_aligned>
   1a6d4:	test   eax,eax
   1a6d6:	js     1a76e <raw_pread+0xfe>
   1a6dc:	mov    rsi,QWORD PTR [r13+0x28]
   1a6e0:	mov    eax,0x200
   1a6e5:	sub    eax,r12d
   1a6e8:	mov    r12d,eax
   1a6eb:	add    rsi,r14
   1a6ee:	cmp    r15d,eax
   1a6f1:	jge    1a800 <raw_pread+0x190>
   1a6f7:	movsxd rax,r15d
   1a6fa:	cmp    rax,0x8
   1a6fe:	jae    1a870 <raw_pread+0x200>
   1a704:	test   al,0x4
   1a706:	jne    1a902 <raw_pread+0x292>
   1a70c:	test   rax,rax
   1a70f:	je     1a725 <raw_pread+0xb5>
   1a711:	movzx  edx,BYTE PTR [rsi]
   1a714:	test   al,0x2
   1a716:	mov    BYTE PTR [rbp+0x0],dl
   1a719:	je     1a725 <raw_pread+0xb5>
   1a71b:	movzx  edx,WORD PTR [rsi+rax*1-0x2]
   1a720:	mov    WORD PTR [rbp+rax*1-0x2],dx
   1a725:	add    rsp,0x18
   1a729:	mov    eax,r15d
   1a72c:	pop    rbx
   1a72d:	pop    rbp
   1a72e:	pop    r12
   1a730:	pop    r13
   1a732:	pop    r14
   1a734:	pop    r15
   1a736:	ret    
   1a737:	nop    WORD PTR [rax+rax*1+0x0]
   1a740:	mov    r12d,ecx
   1a743:	and    r12d,0x1ff
   1a74a:	jne    1a780 <raw_pread+0x110>
   1a74c:	test   ebp,0x1ff
   1a752:	jne    1a848 <raw_pread+0x1d8>
   1a758:	mov    rdi,QWORD PTR [rsp+0x8]
   1a75d:	mov    ecx,r15d
   1a760:	mov    rdx,rbp
   1a763:	mov    rsi,rbx
   1a766:	call   1a5b0 <raw_pread_aligned>
   1a76b:	add    eax,r12d
   1a76e:	add    rsp,0x18
   1a772:	pop    rbx
   1a773:	pop    rbp
   1a774:	pop    r12
   1a776:	pop    r13
   1a778:	pop    r14
   1a77a:	pop    r15
   1a77c:	ret    
   1a77d:	nop    DWORD PTR [rax]
   1a780:	xor    r12d,r12d
   1a783:	jmp    1a78c <raw_pread+0x11c>
   1a785:	nop    DWORD PTR [rax]
   1a788:	mov    rdx,QWORD PTR [r13+0x28]
   1a78c:	lea    ecx,[r15+0x1ff]
   1a793:	mov    rdi,QWORD PTR [rsp+0x8]
   1a798:	mov    eax,0x4000
   1a79d:	mov    rsi,rbx
   1a7a0:	and    ecx,0xfffffe00
   1a7a6:	cmp    ecx,0x4000
   1a7ac:	cmovg  ecx,eax
   1a7af:	call   1a5b0 <raw_pread_aligned>
   1a7b4:	test   eax,eax
   1a7b6:	js     1a76e <raw_pread+0xfe>
   1a7b8:	cmp    eax,r15d
   1a7bb:	mov    rsi,QWORD PTR [r13+0x28]
   1a7bf:	mov    rdi,rbp
   1a7c2:	cmovg  eax,r15d
   1a7c6:	movsxd r9,eax
   1a7c9:	mov    rdx,r9
   1a7cc:	mov    r14,r9
   1a7cf:	mov    QWORD PTR [rsp],r9
   1a7d3:	call   3190 <memcpy@plt>
   1a7d8:	mov    r9,QWORD PTR [rsp]
   1a7dc:	add    r12d,r14d
   1a7df:	add    rbp,r9
   1a7e2:	add    rbx,r9
   1a7e5:	sub    r15d,r14d
   1a7e8:	jne    1a788 <raw_pread+0x118>
   1a7ea:	add    rsp,0x18
   1a7ee:	mov    eax,r12d
   1a7f1:	pop    rbx
   1a7f2:	pop    rbp
   1a7f3:	pop    r12
   1a7f5:	pop    r13
   1a7f7:	pop    r14
   1a7f9:	pop    r15
   1a7fb:	ret    
   1a7fc:	nop    DWORD PTR [rax+0x0]
   1a800:	cmp    eax,0x8
   1a803:	movsxd rdx,eax
   1a806:	jae    1a8a0 <raw_pread+0x230>
   1a80c:	test   al,0x4
   1a80e:	jne    1a914 <raw_pread+0x2a4>
   1a814:	test   eax,eax
   1a816:	jne    1a8e0 <raw_pread+0x270>
   1a81c:	add    rbp,rdx
   1a81f:	add    rbx,rdx
   1a822:	sub    r15d,r12d
   1a825:	je     1a7ea <raw_pread+0x17a>
   1a827:	test   r15d,0x1ff
   1a82e:	jne    1a788 <raw_pread+0x118>
   1a834:	test   ebp,0x1ff
   1a83a:	je     1a758 <raw_pread+0xe8>
   1a840:	jmp    1a788 <raw_pread+0x118>
   1a845:	nop    DWORD PTR [rax]
   1a848:	xor    eax,eax
   1a84a:	test   ecx,ecx
   1a84c:	jne    1a78c <raw_pread+0x11c>
   1a852:	jmp    1a76e <raw_pread+0xfe>
   1a857:	nop    WORD PTR [rax+rax*1+0x0]
   1a860:	xor    r12d,r12d
   1a863:	jmp    1a758 <raw_pread+0xe8>
   1a868:	nop    DWORD PTR [rax+rax*1+0x0]
   1a870:	mov    rdx,QWORD PTR [rsi]
   1a873:	lea    rdi,[rbp+0x8]
   1a877:	and    rdi,0xfffffffffffffff8
   1a87b:	mov    QWORD PTR [rbp+0x0],rdx
   1a87f:	mov    rdx,QWORD PTR [rsi+rax*1-0x8]
   1a884:	mov    QWORD PTR [rbp+rax*1-0x8],rdx
   1a889:	sub    rbp,rdi
   1a88c:	lea    rcx,[rax+rbp*1]
   1a890:	sub    rsi,rbp
   1a893:	shr    rcx,0x3
   1a897:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1a89a:	jmp    1a725 <raw_pread+0xb5>
   1a89f:	nop
   1a8a0:	mov    rax,QWORD PTR [rsi]
   1a8a3:	lea    rdi,[rbp+0x8]
   1a8a7:	and    rdi,0xfffffffffffffff8
   1a8ab:	mov    QWORD PTR [rbp+0x0],rax
   1a8af:	mov    eax,r12d
   1a8b2:	mov    rcx,QWORD PTR [rsi+rax*1-0x8]
   1a8b7:	mov    QWORD PTR [rbp+rax*1-0x8],rcx
   1a8bc:	mov    rax,rbp
   1a8bf:	sub    rax,rdi
   1a8c2:	lea    ecx,[r12+rax*1]
   1a8c6:	sub    rsi,rax
   1a8c9:	mov    eax,ecx
   1a8cb:	shr    eax,0x3
   1a8ce:	mov    ecx,eax
   1a8d0:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1a8d3:	jmp    1a81c <raw_pread+0x1ac>
   1a8d8:	nop    DWORD PTR [rax+rax*1+0x0]
   1a8e0:	movzx  eax,BYTE PTR [rsi]
   1a8e3:	test   r12b,0x2
   1a8e7:	mov    BYTE PTR [rbp+0x0],al
   1a8ea:	je     1a81c <raw_pread+0x1ac>
   1a8f0:	mov    eax,r12d
   1a8f3:	movzx  ecx,WORD PTR [rsi+rax*1-0x2]
   1a8f8:	mov    WORD PTR [rbp+rax*1-0x2],cx
   1a8fd:	jmp    1a81c <raw_pread+0x1ac>
   1a902:	mov    edx,DWORD PTR [rsi]
   1a904:	mov    DWORD PTR [rbp+0x0],edx
   1a907:	mov    edx,DWORD PTR [rsi+rax*1-0x4]
   1a90b:	mov    DWORD PTR [rbp+rax*1-0x4],edx
   1a90f:	jmp    1a725 <raw_pread+0xb5>
   1a914:	mov    eax,DWORD PTR [rsi]
   1a916:	mov    DWORD PTR [rbp+0x0],eax
   1a919:	mov    eax,r12d
   1a91c:	mov    ecx,DWORD PTR [rsi+rax*1-0x4]
   1a920:	mov    DWORD PTR [rbp+rax*1-0x4],ecx
   1a924:	jmp    1a81c <raw_pread+0x1ac>
   1a929:	nop    DWORD PTR [rax+0x0]

000000000001a930 <raw_aio_setup>:
   1a930:	push   r15
   1a932:	push   r14
   1a934:	mov    r15,r8
   1a937:	push   r13
   1a939:	push   r12
   1a93b:	mov    r13,rdx
   1a93e:	push   rbp
   1a93f:	push   rbx
   1a940:	mov    rbp,rdi
   1a943:	mov    r12,rsi
   1a946:	mov    ebx,ecx
   1a948:	sub    rsp,0x18
   1a94c:	mov    r14,QWORD PTR [rdi+0x40]
   1a950:	mov    QWORD PTR [rsp+0x8],r9
   1a955:	call   1a3e0 <fd_open>
   1a95a:	test   eax,eax
   1a95c:	mov    r9,QWORD PTR [rsp+0x8]
   1a961:	js     1a9d0 <raw_aio_setup+0xa0>
   1a963:	mov    rdx,r9
   1a966:	mov    rsi,r15
   1a969:	mov    rdi,rbp
   1a96c:	call   19670 <qemu_aio_get>
   1a971:	test   rax,rax
   1a974:	je     1a9d0 <raw_aio_setup+0xa0>
   1a976:	mov    edx,DWORD PTR [r14]
   1a979:	test   ebx,ebx
   1a97b:	mov    DWORD PTR [rax+0x40],0xc
   1a982:	mov    QWORD PTR [rax+0x30],r13
   1a986:	mov    DWORD PTR [rax+0x28],edx
   1a989:	js     1a9c0 <raw_aio_setup+0x90>
   1a98b:	shl    ebx,0x9
   1a98e:	movsxd rbx,ebx
   1a991:	mov    QWORD PTR [rax+0x38],rbx
   1a995:	mov    rdx,QWORD PTR [rip+0x20ccac]        # 227648 <posix_aio_state>
   1a99c:	shl    r12,0x9
   1a9a0:	mov    QWORD PTR [rax+0x48],r12
   1a9a4:	mov    rcx,QWORD PTR [rdx+0x8]
   1a9a8:	mov    QWORD PTR [rax+0x78],rcx
   1a9ac:	mov    QWORD PTR [rdx+0x8],rax
   1a9b0:	add    rsp,0x18
   1a9b4:	pop    rbx
   1a9b5:	pop    rbp
   1a9b6:	pop    r12
   1a9b8:	pop    r13
   1a9ba:	pop    r14
   1a9bc:	pop    r15
   1a9be:	ret    
   1a9bf:	nop
   1a9c0:	neg    ebx
   1a9c2:	movsxd rbx,ebx
   1a9c5:	mov    QWORD PTR [rax+0x38],rbx
   1a9c9:	jmp    1a995 <raw_aio_setup+0x65>
   1a9cb:	nop    DWORD PTR [rax+rax*1+0x0]
   1a9d0:	add    rsp,0x18
   1a9d4:	xor    eax,eax
   1a9d6:	pop    rbx
   1a9d7:	pop    rbp
   1a9d8:	pop    r12
   1a9da:	pop    r13
   1a9dc:	pop    r14
   1a9de:	pop    r15
   1a9e0:	ret    
   1a9e1:	nop    DWORD PTR [rax+rax*1+0x0]
   1a9e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001a9f0 <raw_aio_em_cb>:
   1a9f0:	push   rbx
   1a9f1:	mov    rbx,rdi
   1a9f4:	mov    esi,DWORD PTR [rdi+0x80]
   1a9fa:	mov    rdi,QWORD PTR [rdi+0x18]
   1a9fe:	call   QWORD PTR [rbx+0x10]
   1aa01:	mov    rdi,rbx
   1aa04:	pop    rbx
   1aa05:	jmp    19850 <qemu_aio_release>
   1aa0a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001aa10 <raw_ioctl>:
   1aa10:	mov    rax,QWORD PTR [rdi+0x40]
   1aa14:	mov    edi,DWORD PTR [rax]
   1aa16:	xor    eax,eax
   1aa18:	jmp    3030 <ioctl@plt>
   1aa1d:	nop    DWORD PTR [rax]

000000000001aa20 <raw_set_locked>:
   1aa20:	mov    rax,QWORD PTR [rdi+0x40]
   1aa24:	cmp    DWORD PTR [rax+0x4],0x1
   1aa28:	jne    1aa48 <raw_set_locked+0x28>
   1aa2a:	sub    rsp,0x8
   1aa2e:	mov    edi,DWORD PTR [rax]
   1aa30:	mov    edx,esi
   1aa32:	xor    eax,eax
   1aa34:	mov    esi,0x5329
   1aa39:	call   3030 <ioctl@plt>
   1aa3e:	xor    eax,eax
   1aa40:	add    rsp,0x8
   1aa44:	ret    
   1aa45:	nop    DWORD PTR [rax]
   1aa48:	mov    eax,0xffffffa1
   1aa4d:	ret    
   1aa4e:	xchg   ax,ax

000000000001aa50 <raw_close>:
   1aa50:	push   rbx
   1aa51:	mov    rbx,QWORD PTR [rdi+0x40]
   1aa55:	mov    edi,DWORD PTR [rbx]
   1aa57:	test   edi,edi
   1aa59:	js     1aa88 <raw_close+0x38>
   1aa5b:	xor    edx,edx
   1aa5d:	mov    esi,0x1261
   1aa62:	xor    eax,eax
   1aa64:	call   3030 <ioctl@plt>
   1aa69:	mov    edi,DWORD PTR [rbx]
   1aa6b:	call   3040 <close@plt>
   1aa70:	mov    rdi,QWORD PTR [rbx+0x28]
   1aa74:	mov    DWORD PTR [rbx],0xffffffff
   1aa7a:	test   rdi,rdi
   1aa7d:	je     1aa88 <raw_close+0x38>
   1aa7f:	pop    rbx
   1aa80:	jmp    49c0 <qemu_free>
   1aa85:	nop    DWORD PTR [rax]
   1aa88:	pop    rbx
   1aa89:	ret    
   1aa8a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001aa90 <posix_aio_read>:
   1aa90:	push   r14
   1aa92:	push   r13
   1aa94:	mov    r13,rdi
   1aa97:	push   r12
   1aa99:	push   rbp
   1aa9a:	push   rbx
   1aa9b:	sub    rsp,0x30
   1aa9f:	mov    rax,QWORD PTR fs:0x28
   1aaa8:	mov    QWORD PTR [rsp+0x28],rax
   1aaad:	xor    eax,eax
   1aaaf:	lea    rbx,[rsp+0x10]
   1aab4:	mov    edi,DWORD PTR [r13+0x0]
   1aab8:	mov    edx,0x10
   1aabd:	mov    rsi,rbx
   1aac0:	call   30a0 <read@plt>
   1aac5:	cmp    rax,0xffffffffffffffff
   1aac9:	je     1ab98 <posix_aio_read+0x108>
   1aacf:	cmp    rax,0x10
   1aad3:	je     1aab4 <posix_aio_read+0x24>
   1aad5:	add    r13,0x8
   1aad9:	mov    r14d,0xffffffea
   1aadf:	mov    rbp,r13
   1aae2:	mov    rbx,QWORD PTR [rbp+0x0]
   1aae6:	test   rbx,rbx
   1aae9:	je     1ab10 <posix_aio_read+0x80>
   1aaeb:	lea    r12,[rbx+0x28]
   1aaef:	mov    rdi,r12
   1aaf2:	call   1a330 <qemu_paio_error>
   1aaf7:	cmp    eax,0x7d
   1aafa:	mov    esi,eax
   1aafc:	je     1ab38 <posix_aio_read+0xa8>
   1aafe:	cmp    eax,0x73
   1ab01:	jne    1ab50 <posix_aio_read+0xc0>
   1ab03:	lea    rbp,[rbx+0x78]
   1ab07:	mov    rbx,QWORD PTR [rbp+0x0]
   1ab0b:	test   rbx,rbx
   1ab0e:	jne    1aaeb <posix_aio_read+0x5b>
   1ab10:	mov    rax,QWORD PTR [rsp+0x28]
   1ab15:	xor    rax,QWORD PTR fs:0x28
   1ab1e:	jne    1abab <posix_aio_read+0x11b>
   1ab24:	add    rsp,0x30
   1ab28:	pop    rbx
   1ab29:	pop    rbp
   1ab2a:	pop    r12
   1ab2c:	pop    r13
   1ab2e:	pop    r14
   1ab30:	ret    
   1ab31:	nop    DWORD PTR [rax+0x0]
   1ab38:	mov    rax,QWORD PTR [rbx+0x78]
   1ab3c:	mov    rdi,rbx
   1ab3f:	mov    QWORD PTR [rbp+0x0],rax
   1ab43:	call   19850 <qemu_aio_release>
   1ab48:	jmp    1aae2 <posix_aio_read+0x52>
   1ab4a:	nop    WORD PTR [rax+rax*1+0x0]
   1ab50:	test   eax,eax
   1ab52:	je     1ab78 <posix_aio_read+0xe8>
   1ab54:	neg    esi
   1ab56:	mov    rax,QWORD PTR [rbx+0x78]
   1ab5a:	mov    QWORD PTR [rbp+0x0],rax
   1ab5e:	mov    rdi,QWORD PTR [rbx+0x18]
   1ab62:	call   QWORD PTR [rbx+0x10]
   1ab65:	mov    rdi,rbx
   1ab68:	call   19850 <qemu_aio_release>
   1ab6d:	jmp    1aadf <posix_aio_read+0x4f>
   1ab72:	nop    WORD PTR [rax+rax*1+0x0]
   1ab78:	mov    rdi,r12
   1ab7b:	mov    DWORD PTR [rsp+0xc],eax
   1ab7f:	call   1a310 <qemu_paio_return>
   1ab84:	cdqe   
   1ab86:	cmp    rax,QWORD PTR [rbx+0x38]
   1ab8a:	mov    esi,DWORD PTR [rsp+0xc]
   1ab8e:	cmovne esi,r14d
   1ab92:	jmp    1ab56 <posix_aio_read+0xc6>
   1ab94:	nop    DWORD PTR [rax+0x0]
   1ab98:	call   2e80 <__errno_location@plt>
   1ab9d:	cmp    DWORD PTR [rax],0x4
   1aba0:	jne    1aad5 <posix_aio_read+0x45>
   1aba6:	jmp    1aab4 <posix_aio_read+0x24>
   1abab:	call   2f70 <__stack_chk_fail@plt>

000000000001abb0 <aio_signal_handler>:
   1abb0:	sub    rsp,0x18
   1abb4:	mov    rax,QWORD PTR fs:0x28
   1abbd:	mov    QWORD PTR [rsp+0x8],rax
   1abc2:	xor    eax,eax
   1abc4:	mov    rax,QWORD PTR [rip+0x20ca7d]        # 227648 <posix_aio_state>
   1abcb:	test   rax,rax
   1abce:	je     1abe7 <aio_signal_handler+0x37>
   1abd0:	mov    edi,DWORD PTR [rax+0x4]
   1abd3:	lea    rsi,[rsp+0x7]
   1abd8:	mov    edx,0x1
   1abdd:	mov    BYTE PTR [rsp+0x7],0x0
   1abe2:	call   2f10 <write@plt>
   1abe7:	call   4130 <qemu_service_io>
   1abec:	mov    rax,QWORD PTR [rsp+0x8]
   1abf1:	xor    rax,QWORD PTR fs:0x28
   1abfa:	jne    1ac01 <aio_signal_handler+0x51>
   1abfc:	add    rsp,0x18
   1ac00:	ret    
   1ac01:	call   2f70 <__stack_chk_fail@plt>
   1ac06:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001ac10 <raw_eject>:
   1ac10:	push   rbp
   1ac11:	push   rbx
   1ac12:	sub    rsp,0x8
   1ac16:	mov    rbx,QWORD PTR [rdi+0x40]
   1ac1a:	mov    eax,DWORD PTR [rbx+0x4]
   1ac1d:	cmp    eax,0x1
   1ac20:	je     1ac88 <raw_eject+0x78>
   1ac22:	cmp    eax,0x2
   1ac25:	je     1ac38 <raw_eject+0x28>
   1ac27:	add    rsp,0x8
   1ac2b:	mov    eax,0xffffffa1
   1ac30:	pop    rbx
   1ac31:	pop    rbp
   1ac32:	ret    
   1ac33:	nop    DWORD PTR [rax+rax*1+0x0]
   1ac38:	mov    rbp,rdi
   1ac3b:	mov    edi,DWORD PTR [rbx]
   1ac3d:	test   edi,edi
   1ac3f:	jns    1acd8 <raw_eject+0xc8>
   1ac45:	mov    esi,DWORD PTR [rbx+0xc]
   1ac48:	lea    rdi,[rbp+0x48]
   1ac4c:	or     esi,0x800
   1ac52:	call   3220 <__open64_2@plt>
   1ac57:	test   eax,eax
   1ac59:	mov    ebx,eax
   1ac5b:	js     1acb0 <raw_eject+0xa0>
   1ac5d:	xor    edx,edx
   1ac5f:	mov    edi,eax
   1ac61:	mov    esi,0x25a
   1ac66:	xor    eax,eax
   1ac68:	call   3030 <ioctl@plt>
   1ac6d:	test   eax,eax
   1ac6f:	js     1acf0 <raw_eject+0xe0>
   1ac71:	mov    edi,ebx
   1ac73:	call   3040 <close@plt>
   1ac78:	add    rsp,0x8
   1ac7c:	xor    eax,eax
   1ac7e:	pop    rbx
   1ac7f:	pop    rbp
   1ac80:	ret    
   1ac81:	nop    DWORD PTR [rax+0x0]
   1ac88:	xor    edx,edx
   1ac8a:	test   esi,esi
   1ac8c:	mov    edi,DWORD PTR [rbx]
   1ac8e:	je     1acc0 <raw_eject+0xb0>
   1ac90:	xor    eax,eax
   1ac92:	mov    esi,0x5309
   1ac97:	call   3030 <ioctl@plt>
   1ac9c:	test   eax,eax
   1ac9e:	jns    1acb0 <raw_eject+0xa0>
   1aca0:	lea    rdi,[rip+0x5339]        # 1ffe0 <__PRETTY_FUNCTION__.13998+0x10>
   1aca7:	call   3360 <perror@plt>
   1acac:	nop    DWORD PTR [rax+0x0]
   1acb0:	xor    eax,eax
   1acb2:	add    rsp,0x8
   1acb6:	pop    rbx
   1acb7:	pop    rbp
   1acb8:	ret    
   1acb9:	nop    DWORD PTR [rax+0x0]
   1acc0:	xor    eax,eax
   1acc2:	mov    esi,0x5319
   1acc7:	call   3030 <ioctl@plt>
   1accc:	test   eax,eax
   1acce:	js     1aca0 <raw_eject+0x90>
   1acd0:	xor    eax,eax
   1acd2:	jmp    1acb2 <raw_eject+0xa2>
   1acd4:	nop    DWORD PTR [rax+0x0]
   1acd8:	call   3040 <close@plt>
   1acdd:	mov    DWORD PTR [rbx],0xffffffff
   1ace3:	jmp    1ac45 <raw_eject+0x35>
   1ace8:	nop    DWORD PTR [rax+rax*1+0x0]
   1acf0:	lea    rdi,[rip+0x52f4]        # 1ffeb <__PRETTY_FUNCTION__.13998+0x1b>
   1acf7:	call   3360 <perror@plt>
   1acfc:	jmp    1ac71 <raw_eject+0x61>
   1ad01:	nop    DWORD PTR [rax+rax*1+0x0]
   1ad06:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001ad10 <raw_pwrite_aligned>:
   1ad10:	push   r13
   1ad12:	push   r12
   1ad14:	mov    r13,rsi
   1ad17:	push   rbp
   1ad18:	push   rbx
   1ad19:	mov    r12,rdx
   1ad1c:	mov    ebx,ecx
   1ad1e:	sub    rsp,0x8
   1ad22:	mov    rbp,QWORD PTR [rdi+0x40]
   1ad26:	call   1a3e0 <fd_open>
   1ad2b:	test   eax,eax
   1ad2d:	js     1ad70 <raw_pwrite_aligned+0x60>
   1ad2f:	test   r13,r13
   1ad32:	mov    edi,DWORD PTR [rbp+0x0]
   1ad35:	js     1ad4a <raw_pwrite_aligned+0x3a>
   1ad37:	xor    edx,edx
   1ad39:	mov    rsi,r13
   1ad3c:	call   33f0 <lseek64@plt>
   1ad41:	cmp    rax,0xffffffffffffffff
   1ad45:	je     1ad86 <raw_pwrite_aligned+0x76>
   1ad47:	mov    edi,DWORD PTR [rbp+0x0]
   1ad4a:	movsxd rdx,ebx
   1ad4d:	mov    DWORD PTR [rbp+0x8],0x0
   1ad54:	mov    rsi,r12
   1ad57:	call   4320 <qemu_write>
   1ad5c:	test   eax,eax
   1ad5e:	mov    edx,eax
   1ad60:	js     1ad70 <raw_pwrite_aligned+0x60>
   1ad62:	add    rsp,0x8
   1ad66:	mov    eax,edx
   1ad68:	pop    rbx
   1ad69:	pop    rbp
   1ad6a:	pop    r12
   1ad6c:	pop    r13
   1ad6e:	ret    
   1ad6f:	nop
   1ad70:	call   2e80 <__errno_location@plt>
   1ad75:	mov    edx,DWORD PTR [rax]
   1ad77:	add    rsp,0x8
   1ad7b:	pop    rbx
   1ad7c:	pop    rbp
   1ad7d:	neg    edx
   1ad7f:	mov    eax,edx
   1ad81:	pop    r12
   1ad83:	pop    r13
   1ad85:	ret    
   1ad86:	add    DWORD PTR [rbp+0x8],0x1
   1ad8a:	mov    edx,0xfffffffb
   1ad8f:	jmp    1ad62 <raw_pwrite_aligned+0x52>
   1ad91:	nop    DWORD PTR [rax+rax*1+0x0]
   1ad96:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001ada0 <raw_pwrite>:
   1ada0:	push   r15
   1ada2:	push   r14
   1ada4:	mov    r14,rdx
   1ada7:	push   r13
   1ada9:	push   r12
   1adab:	xor    r12d,r12d
   1adae:	push   rbp
   1adaf:	push   rbx
   1adb0:	mov    rbp,rsi
   1adb3:	mov    r15d,ecx
   1adb6:	sub    rsp,0x28
   1adba:	mov    r13,QWORD PTR [rdi+0x40]
   1adbe:	mov    QWORD PTR [rsp+0x8],rdi
   1adc3:	mov    rdx,QWORD PTR [r13+0x28]
   1adc7:	test   rdx,rdx
   1adca:	je     1ae75 <raw_pwrite+0xd5>
   1add0:	mov    r8,rsi
   1add3:	and    r8d,0x1ff
   1adda:	jne    1aea0 <raw_pwrite+0x100>
   1ade0:	test   r15d,0x1ff
   1ade7:	je     1ae68 <raw_pwrite+0xc8>
   1ade9:	mov    ecx,r15d
   1adec:	and    ecx,0xfffffe00
   1adf2:	jne    1ae1e <raw_pwrite+0x7e>
   1adf4:	jmp    1af40 <raw_pwrite+0x1a0>
   1adf9:	nop    DWORD PTR [rax+0x0]
   1ae00:	sub    r15d,eax
   1ae03:	movsxd rdx,eax
   1ae06:	add    r12d,eax
   1ae09:	mov    ecx,r15d
   1ae0c:	add    r14,rdx
   1ae0f:	add    rbp,rdx
   1ae12:	and    ecx,0xfffffe00
   1ae18:	je     1af40 <raw_pwrite+0x1a0>
   1ae1e:	cmp    ecx,0x4000
   1ae24:	mov    rdi,QWORD PTR [r13+0x28]
   1ae28:	mov    ebx,0x4000
   1ae2d:	cmovle ebx,ecx
   1ae30:	mov    rsi,r14
   1ae33:	movsxd rdx,ebx
   1ae36:	call   3190 <memcpy@plt>
   1ae3b:	mov    rdx,QWORD PTR [r13+0x28]
   1ae3f:	mov    rdi,QWORD PTR [rsp+0x8]
   1ae44:	mov    ecx,ebx
   1ae46:	mov    rsi,rbp
   1ae49:	call   1ad10 <raw_pwrite_aligned>
   1ae4e:	test   eax,eax
   1ae50:	jns    1ae00 <raw_pwrite+0x60>
   1ae52:	add    rsp,0x28
   1ae56:	pop    rbx
   1ae57:	pop    rbp
   1ae58:	pop    r12
   1ae5a:	pop    r13
   1ae5c:	pop    r14
   1ae5e:	pop    r15
   1ae60:	ret    
   1ae61:	nop    DWORD PTR [rax+0x0]
   1ae68:	test   r14d,0x1ff
   1ae6f:	jne    1ade9 <raw_pwrite+0x49>
   1ae75:	mov    rdi,QWORD PTR [rsp+0x8]
   1ae7a:	mov    ecx,r15d
   1ae7d:	mov    rdx,r14
   1ae80:	mov    rsi,rbp
   1ae83:	call   1ad10 <raw_pwrite_aligned>
   1ae88:	add    rsp,0x28
   1ae8c:	add    eax,r12d
   1ae8f:	pop    rbx
   1ae90:	pop    rbp
   1ae91:	pop    r12
   1ae93:	pop    r13
   1ae95:	pop    r14
   1ae97:	pop    r15
   1ae99:	ret    
   1ae9a:	nop    WORD PTR [rax+rax*1+0x0]
   1aea0:	movsxd rbx,r8d
   1aea3:	mov    r10,rsi
   1aea6:	mov    ecx,0x200
   1aeab:	sub    r10,rbx
   1aeae:	mov    QWORD PTR [rsp+0x18],r8
   1aeb3:	mov    rsi,r10
   1aeb6:	mov    QWORD PTR [rsp+0x10],r10
   1aebb:	call   1a5b0 <raw_pread_aligned>
   1aec0:	test   eax,eax
   1aec2:	js     1ae52 <raw_pwrite+0xb2>
   1aec4:	mov    r8,QWORD PTR [rsp+0x18]
   1aec9:	mov    r12d,0x200
   1aecf:	mov    rdx,QWORD PTR [r13+0x28]
   1aed3:	mov    r10,QWORD PTR [rsp+0x10]
   1aed8:	sub    r12d,r8d
   1aedb:	cmp    r15d,r12d
   1aede:	cmovle r12d,r15d
   1aee2:	add    rbx,rdx
   1aee5:	movsxd r8,r12d
   1aee8:	cmp    r8,0x8
   1aeec:	jae    1afc8 <raw_pwrite+0x228>
   1aef2:	test   r8b,0x4
   1aef6:	jne    1b055 <raw_pwrite+0x2b5>
   1aefc:	test   r8,r8
   1aeff:	jne    1b000 <raw_pwrite+0x260>
   1af05:	mov    rdi,QWORD PTR [rsp+0x8]
   1af0a:	mov    ecx,0x200
   1af0f:	mov    rsi,r10
   1af12:	mov    QWORD PTR [rsp+0x10],r8
   1af17:	call   1ad10 <raw_pwrite_aligned>
   1af1c:	test   eax,eax
   1af1e:	js     1ae52 <raw_pwrite+0xb2>
   1af24:	sub    r15d,r12d
   1af27:	mov    eax,r12d
   1af2a:	je     1ae52 <raw_pwrite+0xb2>
   1af30:	mov    r8,QWORD PTR [rsp+0x10]
   1af35:	add    r14,r8
   1af38:	add    rbp,r8
   1af3b:	jmp    1ade0 <raw_pwrite+0x40>
   1af40:	test   r15d,r15d
   1af43:	mov    eax,r12d
   1af46:	je     1ae52 <raw_pwrite+0xb2>
   1af4c:	mov    rdx,QWORD PTR [r13+0x28]
   1af50:	mov    rdi,QWORD PTR [rsp+0x8]
   1af55:	mov    ecx,0x200
   1af5a:	mov    rsi,rbp
   1af5d:	call   1a5b0 <raw_pread_aligned>
   1af62:	test   eax,eax
   1af64:	js     1ae52 <raw_pwrite+0xb2>
   1af6a:	cmp    r15d,0x8
   1af6e:	mov    rdx,QWORD PTR [r13+0x28]
   1af72:	jae    1b021 <raw_pwrite+0x281>
   1af78:	test   r15b,0x4
   1af7c:	jne    1b06d <raw_pwrite+0x2cd>
   1af82:	test   r15d,r15d
   1af85:	je     1af9b <raw_pwrite+0x1fb>
   1af87:	movzx  eax,BYTE PTR [r14]
   1af8b:	test   r15b,0x2
   1af8f:	mov    BYTE PTR [rdx],al
   1af91:	jne    1b087 <raw_pwrite+0x2e7>
   1af97:	mov    rdx,QWORD PTR [r13+0x28]
   1af9b:	mov    rdi,QWORD PTR [rsp+0x8]
   1afa0:	mov    ecx,0x200
   1afa5:	mov    rsi,rbp
   1afa8:	call   1ad10 <raw_pwrite_aligned>
   1afad:	test   eax,eax
   1afaf:	js     1ae52 <raw_pwrite+0xb2>
   1afb5:	cmp    eax,r15d
   1afb8:	cmovg  eax,r15d
   1afbc:	add    eax,r12d
   1afbf:	jmp    1ae52 <raw_pwrite+0xb2>
   1afc4:	nop    DWORD PTR [rax+0x0]
   1afc8:	mov    rax,QWORD PTR [r14]
   1afcb:	lea    rdi,[rbx+0x8]
   1afcf:	mov    rsi,r14
   1afd2:	and    rdi,0xfffffffffffffff8
   1afd6:	mov    QWORD PTR [rbx],rax
   1afd9:	mov    rax,QWORD PTR [r14+r8*1-0x8]
   1afde:	mov    QWORD PTR [rbx+r8*1-0x8],rax
   1afe3:	sub    rbx,rdi
   1afe6:	lea    rcx,[rbx+r8*1]
   1afea:	sub    rsi,rbx
   1afed:	shr    rcx,0x3
   1aff1:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1aff4:	mov    rdx,QWORD PTR [r13+0x28]
   1aff8:	jmp    1af05 <raw_pwrite+0x165>
   1affd:	nop    DWORD PTR [rax]
   1b000:	movzx  eax,BYTE PTR [r14]
   1b004:	test   r8b,0x2
   1b008:	mov    BYTE PTR [rbx],al
   1b00a:	je     1aff4 <raw_pwrite+0x254>
   1b00c:	movzx  eax,WORD PTR [r14+r8*1-0x2]
   1b012:	mov    WORD PTR [rbx+r8*1-0x2],ax
   1b018:	mov    rdx,QWORD PTR [r13+0x28]
   1b01c:	jmp    1af05 <raw_pwrite+0x165>
   1b021:	mov    rax,QWORD PTR [r14]
   1b024:	lea    rdi,[rdx+0x8]
   1b028:	mov    rsi,r14
   1b02b:	and    rdi,0xfffffffffffffff8
   1b02f:	mov    QWORD PTR [rdx],rax
   1b032:	mov    eax,r15d
   1b035:	mov    rcx,QWORD PTR [r14+rax*1-0x8]
   1b03a:	mov    QWORD PTR [rdx+rax*1-0x8],rcx
   1b03f:	sub    rdx,rdi
   1b042:	sub    rsi,rdx
   1b045:	add    edx,r15d
   1b048:	shr    edx,0x3
   1b04b:	mov    ecx,edx
   1b04d:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   1b050:	jmp    1af97 <raw_pwrite+0x1f7>
   1b055:	mov    eax,DWORD PTR [r14]
   1b058:	mov    DWORD PTR [rbx],eax
   1b05a:	mov    eax,DWORD PTR [r14+r8*1-0x4]
   1b05f:	mov    DWORD PTR [rbx+r8*1-0x4],eax
   1b064:	mov    rdx,QWORD PTR [r13+0x28]
   1b068:	jmp    1af05 <raw_pwrite+0x165>
   1b06d:	mov    eax,DWORD PTR [r14]
   1b070:	mov    DWORD PTR [rdx],eax
   1b072:	mov    eax,r15d
   1b075:	mov    ecx,DWORD PTR [r14+rax*1-0x4]
   1b07a:	mov    DWORD PTR [rdx+rax*1-0x4],ecx
   1b07e:	mov    rdx,QWORD PTR [r13+0x28]
   1b082:	jmp    1af9b <raw_pwrite+0x1fb>
   1b087:	mov    eax,r15d
   1b08a:	movzx  ecx,WORD PTR [r14+rax*1-0x2]
   1b090:	mov    WORD PTR [rdx+rax*1-0x2],cx
   1b095:	mov    rdx,QWORD PTR [r13+0x28]
   1b099:	jmp    1af9b <raw_pwrite+0x1fb>
   1b09e:	xchg   ax,ax

000000000001b0a0 <raw_aio_remove>:
   1b0a0:	mov    rax,QWORD PTR [rip+0x20c5a1]        # 227648 <posix_aio_state>
   1b0a7:	mov    rdx,QWORD PTR [rax+0x8]
   1b0ab:	test   rdx,rdx
   1b0ae:	je     1b0d1 <raw_aio_remove+0x31>
   1b0b0:	cmp    rdx,rdi
   1b0b3:	jne    1b0c8 <raw_aio_remove+0x28>
   1b0b5:	jmp    1b100 <raw_aio_remove+0x60>
   1b0b7:	nop    WORD PTR [rax+rax*1+0x0]
   1b0c0:	cmp    rax,rdi
   1b0c3:	je     1b0f0 <raw_aio_remove+0x50>
   1b0c5:	mov    rdx,rax
   1b0c8:	mov    rax,QWORD PTR [rdx+0x78]
   1b0cc:	test   rax,rax
   1b0cf:	jne    1b0c0 <raw_aio_remove+0x20>
   1b0d1:	mov    rcx,QWORD PTR [rip+0x20c428]        # 227500 <stderr@@GLIBC_2.2.5>
   1b0d8:	lea    rdi,[rip+0x4f59]        # 20038 <__PRETTY_FUNCTION__.13998+0x68>
   1b0df:	mov    edx,0x27
   1b0e4:	mov    esi,0x1
   1b0e9:	jmp    33e0 <fwrite@plt>
   1b0ee:	xchg   ax,ax
   1b0f0:	add    rdx,0x78
   1b0f4:	mov    rax,QWORD PTR [rdi+0x78]
   1b0f8:	mov    QWORD PTR [rdx],rax
   1b0fb:	jmp    19850 <qemu_aio_release>
   1b100:	lea    rdx,[rax+0x8]
   1b104:	jmp    1b0f4 <raw_aio_remove+0x54>
   1b106:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b110 <raw_aio_flush>:
   1b110:	push   rbx
   1b111:	mov    r8,rsi
   1b114:	mov    r9,rdx
   1b117:	xor    ecx,ecx
   1b119:	xor    edx,edx
   1b11b:	xor    esi,esi
   1b11d:	call   1a930 <raw_aio_setup>
   1b122:	test   rax,rax
   1b125:	je     1b140 <raw_aio_flush+0x30>
   1b127:	lea    rdi,[rax+0x28]
   1b12b:	mov    rbx,rax
   1b12e:	call   1a2a0 <qemu_paio_fsync>
   1b133:	test   eax,eax
   1b135:	js     1b148 <raw_aio_flush+0x38>
   1b137:	mov    rax,rbx
   1b13a:	pop    rbx
   1b13b:	ret    
   1b13c:	nop    DWORD PTR [rax+0x0]
   1b140:	xor    ebx,ebx
   1b142:	jmp    1b137 <raw_aio_flush+0x27>
   1b144:	nop    DWORD PTR [rax+0x0]
   1b148:	mov    rdi,rbx
   1b14b:	xor    ebx,ebx
   1b14d:	call   1b0a0 <raw_aio_remove>
   1b152:	jmp    1b137 <raw_aio_flush+0x27>
   1b154:	xchg   ax,ax
   1b156:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b160 <raw_aio_cancel>:
   1b160:	push   rbp
   1b161:	push   rbx
   1b162:	mov    rbp,rdi
   1b165:	lea    rbx,[rdi+0x28]
   1b169:	sub    rsp,0x8
   1b16d:	mov    edi,DWORD PTR [rdi+0x28]
   1b170:	mov    rsi,rbx
   1b173:	call   1a360 <qemu_paio_cancel>
   1b178:	cmp    eax,0x2
   1b17b:	je     1b190 <raw_aio_cancel+0x30>
   1b17d:	add    rsp,0x8
   1b181:	mov    rdi,rbp
   1b184:	pop    rbx
   1b185:	pop    rbp
   1b186:	jmp    1b0a0 <raw_aio_remove>
   1b18b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b190:	mov    rdi,rbx
   1b193:	call   1a330 <qemu_paio_error>
   1b198:	cmp    eax,0x73
   1b19b:	jne    1b17d <raw_aio_cancel+0x1d>
   1b19d:	mov    rdi,rbx
   1b1a0:	call   1a330 <qemu_paio_error>
   1b1a5:	cmp    eax,0x73
   1b1a8:	je     1b190 <raw_aio_cancel+0x30>
   1b1aa:	jmp    1b17d <raw_aio_cancel+0x1d>
   1b1ac:	nop    DWORD PTR [rax+0x0]

000000000001b1b0 <raw_aio_write>:
   1b1b0:	push   r13
   1b1b2:	push   r12
   1b1b4:	mov    r13,rsi
   1b1b7:	push   rbp
   1b1b8:	push   rbx
   1b1b9:	mov    rbp,rdi
   1b1bc:	mov    r12,rdx
   1b1bf:	sub    rsp,0x18
   1b1c3:	mov    rax,QWORD PTR [rdi+0x40]
   1b1c7:	cmp    QWORD PTR [rax+0x28],0x0
   1b1cc:	jne    1b200 <raw_aio_write+0x50>
   1b1ce:	mov    rdx,r12
   1b1d1:	mov    rsi,r13
   1b1d4:	mov    rdi,rbp
   1b1d7:	call   1a930 <raw_aio_setup>
   1b1dc:	test   rax,rax
   1b1df:	mov    rbx,rax
   1b1e2:	je     1b258 <raw_aio_write+0xa8>
   1b1e4:	lea    rdi,[rax+0x28]
   1b1e8:	call   1a290 <qemu_paio_write>
   1b1ed:	test   eax,eax
   1b1ef:	js     1b260 <raw_aio_write+0xb0>
   1b1f1:	add    rsp,0x18
   1b1f5:	mov    rax,rbx
   1b1f8:	pop    rbx
   1b1f9:	pop    rbp
   1b1fa:	pop    r12
   1b1fc:	pop    r13
   1b1fe:	ret    
   1b1ff:	nop
   1b200:	test   edx,0x1ff
   1b206:	je     1b1ce <raw_aio_write+0x1e>
   1b208:	mov    rdx,r9
   1b20b:	mov    rsi,r8
   1b20e:	mov    DWORD PTR [rsp+0xc],ecx
   1b212:	call   19670 <qemu_aio_get>
   1b217:	mov    ecx,DWORD PTR [rsp+0xc]
   1b21b:	mov    rsi,r13
   1b21e:	mov    rdx,r12
   1b221:	shl    rsi,0x9
   1b225:	mov    rdi,rbp
   1b228:	mov    rbx,rax
   1b22b:	shl    ecx,0x9
   1b22e:	call   1ada0 <raw_pwrite>
   1b233:	lea    rdi,[rip+0xfffffffffffff7b6]        # 1a9f0 <raw_aio_em_cb>
   1b23a:	mov    DWORD PTR [rbx+0x80],eax
   1b240:	mov    rsi,rbx
   1b243:	call   4160 <qemu_bh_new>
   1b248:	mov    rdi,rax
   1b24b:	call   41a0 <qemu_bh_schedule>
   1b250:	jmp    1b1f1 <raw_aio_write+0x41>
   1b252:	nop    WORD PTR [rax+rax*1+0x0]
   1b258:	xor    ebx,ebx
   1b25a:	jmp    1b1f1 <raw_aio_write+0x41>
   1b25c:	nop    DWORD PTR [rax+0x0]
   1b260:	mov    rdi,rbx
   1b263:	xor    ebx,ebx
   1b265:	call   1b0a0 <raw_aio_remove>
   1b26a:	jmp    1b1f1 <raw_aio_write+0x41>
   1b26c:	nop    DWORD PTR [rax+0x0]

000000000001b270 <raw_aio_read>:
   1b270:	push   r13
   1b272:	push   r12
   1b274:	mov    r13,rsi
   1b277:	push   rbp
   1b278:	push   rbx
   1b279:	mov    rbp,rdi
   1b27c:	mov    r12,rdx
   1b27f:	sub    rsp,0x18
   1b283:	mov    rax,QWORD PTR [rdi+0x40]
   1b287:	cmp    QWORD PTR [rax+0x28],0x0
   1b28c:	jne    1b2c0 <raw_aio_read+0x50>
   1b28e:	mov    rdx,r12
   1b291:	mov    rsi,r13
   1b294:	mov    rdi,rbp
   1b297:	call   1a930 <raw_aio_setup>
   1b29c:	test   rax,rax
   1b29f:	mov    rbx,rax
   1b2a2:	je     1b318 <raw_aio_read+0xa8>
   1b2a4:	lea    rdi,[rax+0x28]
   1b2a8:	call   1a280 <qemu_paio_read>
   1b2ad:	test   eax,eax
   1b2af:	js     1b320 <raw_aio_read+0xb0>
   1b2b1:	add    rsp,0x18
   1b2b5:	mov    rax,rbx
   1b2b8:	pop    rbx
   1b2b9:	pop    rbp
   1b2ba:	pop    r12
   1b2bc:	pop    r13
   1b2be:	ret    
   1b2bf:	nop
   1b2c0:	test   edx,0x1ff
   1b2c6:	je     1b28e <raw_aio_read+0x1e>
   1b2c8:	mov    rdx,r9
   1b2cb:	mov    rsi,r8
   1b2ce:	mov    DWORD PTR [rsp+0xc],ecx
   1b2d2:	call   19670 <qemu_aio_get>
   1b2d7:	mov    ecx,DWORD PTR [rsp+0xc]
   1b2db:	mov    rsi,r13
   1b2de:	mov    rdx,r12
   1b2e1:	shl    rsi,0x9
   1b2e5:	mov    rdi,rbp
   1b2e8:	mov    rbx,rax
   1b2eb:	shl    ecx,0x9
   1b2ee:	call   1a670 <raw_pread>
   1b2f3:	lea    rdi,[rip+0xfffffffffffff6f6]        # 1a9f0 <raw_aio_em_cb>
   1b2fa:	mov    DWORD PTR [rbx+0x80],eax
   1b300:	mov    rsi,rbx
   1b303:	call   4160 <qemu_bh_new>
   1b308:	mov    rdi,rax
   1b30b:	call   41a0 <qemu_bh_schedule>
   1b310:	jmp    1b2b1 <raw_aio_read+0x41>
   1b312:	nop    WORD PTR [rax+rax*1+0x0]
   1b318:	xor    ebx,ebx
   1b31a:	jmp    1b2b1 <raw_aio_read+0x41>
   1b31c:	nop    DWORD PTR [rax+0x0]
   1b320:	mov    rdi,rbx
   1b323:	xor    ebx,ebx
   1b325:	call   1b0a0 <raw_aio_remove>
   1b32a:	jmp    1b2b1 <raw_aio_read+0x41>
   1b32c:	nop    DWORD PTR [rax+0x0]

000000000001b330 <raw_flush>:
   1b330:	sub    rsp,0x8
   1b334:	mov    rax,QWORD PTR [rdi+0x40]
   1b338:	mov    edi,DWORD PTR [rax]
   1b33a:	call   3330 <fsync@plt>
   1b33f:	test   eax,eax
   1b341:	je     1b34a <raw_flush+0x1a>
   1b343:	call   2e80 <__errno_location@plt>
   1b348:	mov    eax,DWORD PTR [rax]
   1b34a:	add    rsp,0x8
   1b34e:	ret    
   1b34f:	nop

000000000001b350 <raw_is_inserted>:
   1b350:	sub    rsp,0x8
   1b354:	mov    rcx,QWORD PTR [rdi+0x40]
   1b358:	mov    eax,DWORD PTR [rcx+0x4]
   1b35b:	cmp    eax,0x1
   1b35e:	je     1b380 <raw_is_inserted+0x30>
   1b360:	cmp    eax,0x2
   1b363:	je     1b370 <raw_is_inserted+0x20>
   1b365:	mov    eax,0x1
   1b36a:	add    rsp,0x8
   1b36e:	ret    
   1b36f:	nop
   1b370:	call   1a3e0 <fd_open>
   1b375:	not    eax
   1b377:	add    rsp,0x8
   1b37b:	shr    eax,0x1f
   1b37e:	ret    
   1b37f:	nop
   1b380:	mov    edi,DWORD PTR [rcx]
   1b382:	xor    eax,eax
   1b384:	mov    edx,0x7fffffff
   1b389:	mov    esi,0x5326
   1b38e:	call   3030 <ioctl@plt>
   1b393:	cmp    eax,0x4
   1b396:	sete   al
   1b399:	add    rsp,0x8
   1b39d:	movzx  eax,al
   1b3a0:	ret    
   1b3a1:	nop    DWORD PTR [rax+rax*1+0x0]
   1b3a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b3b0 <posix_aio_init.part.8>:
   1b3b0:	push   rbp
   1b3b1:	push   rbx
   1b3b2:	mov    edi,0x10
   1b3b7:	sub    rsp,0x148
   1b3be:	lea    rbp,[rsp+0x20]
   1b3c3:	mov    rax,QWORD PTR fs:0x28
   1b3cc:	mov    QWORD PTR [rsp+0x138],rax
   1b3d4:	xor    eax,eax
   1b3d6:	call   49d0 <qemu_malloc>
   1b3db:	mov    rdi,rbp
   1b3de:	mov    rbx,rax
   1b3e1:	call   3150 <sigemptyset@plt>
   1b3e6:	mov    rdi,rbp
   1b3e9:	mov    esi,0xc
   1b3ee:	call   3450 <sigaddset@plt>
   1b3f3:	xor    edx,edx
   1b3f5:	mov    rsi,rbp
   1b3f8:	mov    edi,0x1
   1b3fd:	call   2e20 <sigprocmask@plt>
   1b402:	lea    rdi,[rsp+0xa8]
   1b40a:	lea    rbp,[rsp+0xa0]
   1b412:	call   3180 <sigfillset@plt>
   1b417:	lea    rax,[rip+0xfffffffffffff792]        # 1abb0 <aio_signal_handler>
   1b41e:	xor    edx,edx
   1b420:	mov    rsi,rbp
   1b423:	mov    edi,0xc
   1b428:	mov    DWORD PTR [rsp+0x128],0x0
   1b433:	mov    QWORD PTR [rsp+0xa0],rax
   1b43b:	call   2ee0 <sigaction@plt>
   1b440:	lea    rdi,[rsp+0x18]
   1b445:	mov    QWORD PTR [rbx+0x8],0x0
   1b44d:	call   3060 <pipe@plt>
   1b452:	cmp    eax,0xffffffff
   1b455:	je     1b4f0 <posix_aio_init.part.8+0x140>
   1b45b:	mov    edi,DWORD PTR [rsp+0x18]
   1b45f:	mov    edx,0x800
   1b464:	mov    esi,0x4
   1b469:	mov    DWORD PTR [rbx],edi
   1b46b:	mov    eax,DWORD PTR [rsp+0x1c]
   1b46f:	mov    DWORD PTR [rbx+0x4],eax
   1b472:	xor    eax,eax
   1b474:	call   2f00 <fcntl@plt>
   1b479:	mov    edi,DWORD PTR [rbx+0x4]
   1b47c:	mov    edx,0x800
   1b481:	mov    esi,0x4
   1b486:	xor    eax,eax
   1b488:	call   2f00 <fcntl@plt>
   1b48d:	mov    edi,DWORD PTR [rbx]
   1b48f:	lea    rcx,[rip+0xffffffffffffef3a]        # 1a3d0 <posix_aio_flush>
   1b496:	lea    rsi,[rip+0xfffffffffffff5f3]        # 1aa90 <posix_aio_read>
   1b49d:	mov    r8,rbx
   1b4a0:	xor    edx,edx
   1b4a2:	call   19c30 <qemu_aio_set_fd_handler>
   1b4a7:	lea    rdi,[rsp+0xc]
   1b4ac:	movabs rax,0x4000000040
   1b4b6:	mov    DWORD PTR [rsp+0x14],0x0
   1b4be:	mov    QWORD PTR [rsp+0xc],rax
   1b4c3:	call   1a210 <qemu_paio_init>
   1b4c8:	mov    QWORD PTR [rip+0x20c179],rbx        # 227648 <posix_aio_state>
   1b4cf:	xor    eax,eax
   1b4d1:	mov    rcx,QWORD PTR [rsp+0x138]
   1b4d9:	xor    rcx,QWORD PTR fs:0x28
   1b4e2:	jne    1b520 <posix_aio_init.part.8+0x170>
   1b4e4:	add    rsp,0x148
   1b4eb:	pop    rbx
   1b4ec:	pop    rbp
   1b4ed:	ret    
   1b4ee:	xchg   ax,ax
   1b4f0:	mov    rcx,QWORD PTR [rip+0x20c009]        # 227500 <stderr@@GLIBC_2.2.5>
   1b4f7:	lea    rdi,[rip+0x4af5]        # 1fff3 <__PRETTY_FUNCTION__.13998+0x23>
   1b4fe:	mov    edx,0x16
   1b503:	mov    esi,0x1
   1b508:	call   33e0 <fwrite@plt>
   1b50d:	mov    rdi,rbx
   1b510:	call   49c0 <qemu_free>
   1b515:	call   2e80 <__errno_location@plt>
   1b51a:	mov    eax,DWORD PTR [rax]
   1b51c:	neg    eax
   1b51e:	jmp    1b4d1 <posix_aio_init.part.8+0x121>
   1b520:	call   2f70 <__stack_chk_fail@plt>
   1b525:	nop
   1b526:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b530 <raw_open>:
   1b530:	push   rbp
   1b531:	push   rbx
   1b532:	mov    rbp,rdi
   1b535:	mov    rdi,rsi
   1b538:	sub    rsp,0x18
   1b53c:	cmp    QWORD PTR [rip+0x20c104],0x0        # 227648 <posix_aio_state>
   1b544:	mov    rbx,QWORD PTR [rbp+0x40]
   1b548:	je     1b638 <raw_open+0x108>
   1b54e:	mov    esi,edx
   1b550:	mov    DWORD PTR [rbx+0x8],0x0
   1b557:	and    esi,0x3
   1b55a:	cmp    esi,0x2
   1b55d:	je     1b568 <raw_open+0x38>
   1b55f:	mov    DWORD PTR [rbp+0x8],0x1
   1b566:	xor    esi,esi
   1b568:	mov    eax,esi
   1b56a:	or     eax,0x240
   1b56f:	test   dl,0x4
   1b572:	cmovne esi,eax
   1b575:	test   dl,0x20
   1b578:	je     1b5c0 <raw_open+0x90>
   1b57a:	or     esi,0x4000
   1b580:	xor    eax,eax
   1b582:	mov    DWORD PTR [rbx+0x4],0x0
   1b589:	mov    edx,0x1a4
   1b58e:	call   32e0 <open64@plt>
   1b593:	test   eax,eax
   1b595:	mov    ebp,eax
   1b597:	jns    1b600 <raw_open+0xd0>
   1b599:	call   2e80 <__errno_location@plt>
   1b59e:	mov    eax,DWORD PTR [rax]
   1b5a0:	mov    ebx,eax
   1b5a2:	neg    ebx
   1b5a4:	cmp    eax,0x1e
   1b5a7:	mov    eax,0xfffffff3
   1b5ac:	cmove  ebx,eax
   1b5af:	add    rsp,0x18
   1b5b3:	mov    eax,ebx
   1b5b5:	pop    rbx
   1b5b6:	pop    rbp
   1b5b7:	ret    
   1b5b8:	nop    DWORD PTR [rax+rax*1+0x0]
   1b5c0:	mov    eax,esi
   1b5c2:	mov    DWORD PTR [rbx+0x4],0x0
   1b5c9:	or     ah,0x10
   1b5cc:	and    edx,0x40
   1b5cf:	mov    edx,0x1a4
   1b5d4:	cmove  esi,eax
   1b5d7:	xor    eax,eax
   1b5d9:	call   32e0 <open64@plt>
   1b5de:	test   eax,eax
   1b5e0:	js     1b599 <raw_open+0x69>
   1b5e2:	mov    DWORD PTR [rbx],eax
   1b5e4:	mov    QWORD PTR [rbx+0x28],0x0
   1b5ec:	xor    ebx,ebx
   1b5ee:	add    rsp,0x18
   1b5f2:	mov    eax,ebx
   1b5f4:	pop    rbx
   1b5f5:	pop    rbp
   1b5f6:	ret    
   1b5f7:	nop    WORD PTR [rax+rax*1+0x0]
   1b600:	mov    DWORD PTR [rbx],eax
   1b602:	mov    QWORD PTR [rbx+0x28],0x0
   1b60a:	mov    esi,0x4000
   1b60f:	mov    edi,0x200
   1b614:	call   43f0 <qemu_memalign>
   1b619:	test   rax,rax
   1b61c:	mov    QWORD PTR [rbx+0x28],rax
   1b620:	jne    1b5ec <raw_open+0xbc>
   1b622:	call   2e80 <__errno_location@plt>
   1b627:	mov    ebx,DWORD PTR [rax]
   1b629:	mov    edi,ebp
   1b62b:	neg    ebx
   1b62d:	call   3040 <close@plt>
   1b632:	jmp    1b5ee <raw_open+0xbe>
   1b634:	nop    DWORD PTR [rax+0x0]
   1b638:	mov    DWORD PTR [rsp+0xc],edx
   1b63c:	mov    QWORD PTR [rsp],rsi
   1b640:	call   1b3b0 <posix_aio_init.part.8>
   1b645:	mov    edx,DWORD PTR [rsp+0xc]
   1b649:	mov    rdi,QWORD PTR [rsp]
   1b64d:	jmp    1b54e <raw_open+0x1e>
   1b652:	nop    DWORD PTR [rax+0x0]
   1b656:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b660 <hdev_open>:
   1b660:	push   r13
   1b662:	push   r12
   1b664:	mov    r13,rdi
   1b667:	push   rbp
   1b668:	push   rbx
   1b669:	mov    r12,rsi
   1b66c:	sub    rsp,0x18
   1b670:	cmp    QWORD PTR [rip+0x20bfd0],0x0        # 227648 <posix_aio_state>
   1b678:	mov    rbp,QWORD PTR [rdi+0x40]
   1b67c:	je     1b788 <hdev_open+0x128>
   1b682:	mov    ebx,edx
   1b684:	and    ebx,0x3
   1b687:	cmp    ebx,0x2
   1b68a:	je     1b696 <hdev_open+0x36>
   1b68c:	mov    DWORD PTR [r13+0x8],0x1
   1b694:	xor    ebx,ebx
   1b696:	test   dl,0x20
   1b699:	je     1b6f8 <hdev_open+0x98>
   1b69b:	or     bh,0x40
   1b69e:	lea    rsi,[rip+0x4965]        # 2000a <__PRETTY_FUNCTION__.13998+0x3a>
   1b6a5:	xor    edx,edx
   1b6a7:	mov    DWORD PTR [rbp+0x4],0x0
   1b6ae:	mov    rdi,r12
   1b6b1:	call   4660 <strstart>
   1b6b6:	test   eax,eax
   1b6b8:	je     1b730 <hdev_open+0xd0>
   1b6ba:	or     bh,0x8
   1b6bd:	mov    DWORD PTR [rbp+0x4],0x1
   1b6c4:	xor    eax,eax
   1b6c6:	mov    edx,0x1a4
   1b6cb:	mov    esi,ebx
   1b6cd:	mov    rdi,r12
   1b6d0:	call   32e0 <open64@plt>
   1b6d5:	test   eax,eax
   1b6d7:	js     1b708 <hdev_open+0xa8>
   1b6d9:	xor    ebx,ebx
   1b6db:	cmp    DWORD PTR [rbp+0x4],0x2
   1b6df:	mov    DWORD PTR [rbp+0x0],eax
   1b6e2:	je     1b760 <hdev_open+0x100>
   1b6e4:	add    rsp,0x18
   1b6e8:	mov    eax,ebx
   1b6ea:	pop    rbx
   1b6eb:	pop    rbp
   1b6ec:	pop    r12
   1b6ee:	pop    r13
   1b6f0:	ret    
   1b6f1:	nop    DWORD PTR [rax+0x0]
   1b6f8:	mov    eax,ebx
   1b6fa:	or     ah,0x10
   1b6fd:	and    edx,0x40
   1b700:	cmove  ebx,eax
   1b703:	jmp    1b69e <hdev_open+0x3e>
   1b705:	nop    DWORD PTR [rax]
   1b708:	call   2e80 <__errno_location@plt>
   1b70d:	mov    eax,DWORD PTR [rax]
   1b70f:	mov    ebx,eax
   1b711:	neg    ebx
   1b713:	cmp    eax,0x1e
   1b716:	mov    eax,0xfffffff3
   1b71b:	cmove  ebx,eax
   1b71e:	add    rsp,0x18
   1b722:	mov    eax,ebx
   1b724:	pop    rbx
   1b725:	pop    rbp
   1b726:	pop    r12
   1b728:	pop    r13
   1b72a:	ret    
   1b72b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b730:	lea    rsi,[rip+0x48db]        # 20012 <__PRETTY_FUNCTION__.13998+0x42>
   1b737:	xor    edx,edx
   1b739:	mov    rdi,r12
   1b73c:	call   4660 <strstart>
   1b741:	test   eax,eax
   1b743:	je     1b7a0 <hdev_open+0x140>
   1b745:	mov    DWORD PTR [rbp+0xc],ebx
   1b748:	mov    DWORD PTR [rbp+0x4],0x2
   1b74f:	or     bh,0x8
   1b752:	jmp    1b6c4 <hdev_open+0x64>
   1b757:	nop    WORD PTR [rax+rax*1+0x0]
   1b760:	mov    edi,eax
   1b762:	call   3040 <close@plt>
   1b767:	mov    DWORD PTR [rbp+0x0],0xffffffff
   1b76e:	mov    DWORD PTR [rbp+0x24],0x1
   1b775:	add    rsp,0x18
   1b779:	mov    eax,ebx
   1b77b:	pop    rbx
   1b77c:	pop    rbp
   1b77d:	pop    r12
   1b77f:	pop    r13
   1b781:	ret    
   1b782:	nop    WORD PTR [rax+rax*1+0x0]
   1b788:	mov    DWORD PTR [rsp+0xc],edx
   1b78c:	call   1b3b0 <posix_aio_init.part.8>
   1b791:	mov    edx,DWORD PTR [rsp+0xc]
   1b795:	jmp    1b682 <hdev_open+0x22>
   1b79a:	nop    WORD PTR [rax+rax*1+0x0]
   1b7a0:	lea    rsi,[rip+0x4873]        # 2001a <__PRETTY_FUNCTION__.13998+0x4a>
   1b7a7:	xor    edx,edx
   1b7a9:	mov    rdi,r12
   1b7ac:	call   4660 <strstart>
   1b7b1:	test   eax,eax
   1b7b3:	je     1b6c4 <hdev_open+0x64>
   1b7b9:	mov    DWORD PTR [r13+0x1c],0x1
   1b7c1:	jmp    1b6c4 <hdev_open+0x64>
   1b7c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b7d0 <raw_truncate>:
   1b7d0:	push   rbx
   1b7d1:	mov    rax,QWORD PTR [rdi+0x40]
   1b7d5:	mov    ebx,DWORD PTR [rax+0x4]
   1b7d8:	test   ebx,ebx
   1b7da:	jne    1b7f8 <raw_truncate+0x28>
   1b7dc:	mov    edi,DWORD PTR [rax]
   1b7de:	call   32a0 <ftruncate64@plt>
   1b7e3:	test   eax,eax
   1b7e5:	jns    1b7f0 <raw_truncate+0x20>
   1b7e7:	call   2e80 <__errno_location@plt>
   1b7ec:	mov    ebx,DWORD PTR [rax]
   1b7ee:	neg    ebx
   1b7f0:	mov    eax,ebx
   1b7f2:	pop    rbx
   1b7f3:	ret    
   1b7f4:	nop    DWORD PTR [rax+0x0]
   1b7f8:	mov    ebx,0xffffffa1
   1b7fd:	jmp    1b7f0 <raw_truncate+0x20>
   1b7ff:	nop

000000000001b800 <__libc_csu_init>:
   1b800:	push   r15
   1b802:	push   r14
   1b804:	mov    r15,rdx
   1b807:	push   r13
   1b809:	push   r12
   1b80b:	lea    r12,[rip+0x20a216]        # 225a28 <__frame_dummy_init_array_entry>
   1b812:	push   rbp
   1b813:	lea    rbp,[rip+0x20a216]        # 225a30 <__init_array_end>
   1b81a:	push   rbx
   1b81b:	mov    r13d,edi
   1b81e:	mov    r14,rsi
   1b821:	sub    rbp,r12
   1b824:	sub    rsp,0x8
   1b828:	sar    rbp,0x3
   1b82c:	call   2dd0 <_init>
   1b831:	test   rbp,rbp
   1b834:	je     1b856 <__libc_csu_init+0x56>
   1b836:	xor    ebx,ebx
   1b838:	nop    DWORD PTR [rax+rax*1+0x0]
   1b840:	mov    rdx,r15
   1b843:	mov    rsi,r14
   1b846:	mov    edi,r13d
   1b849:	call   QWORD PTR [r12+rbx*8]
   1b84d:	add    rbx,0x1
   1b851:	cmp    rbp,rbx
   1b854:	jne    1b840 <__libc_csu_init+0x40>
   1b856:	add    rsp,0x8
   1b85a:	pop    rbx
   1b85b:	pop    rbp
   1b85c:	pop    r12
   1b85e:	pop    r13
   1b860:	pop    r14
   1b862:	pop    r15
   1b864:	ret    
   1b865:	nop
   1b866:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b870 <__libc_csu_fini>:
   1b870:	repz ret 

Disassembly of section .fini:

000000000001b874 <_fini>:
   1b874:	sub    rsp,0x8
   1b878:	add    rsp,0x8
   1b87c:	ret    
